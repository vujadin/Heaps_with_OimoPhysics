// Generated by Haxe 4.1.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var h3d_IDrawable = function() { };
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
h3d_IDrawable.prototype = {
	__class__: h3d_IDrawable
};
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,setScene: function(scene,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		var new2D = ((scene) instanceof h2d_Scene) ? scene : null;
		var new3D = ((scene) instanceof h3d_scene_Scene) ? scene : null;
		if(new2D != null) {
			this.sevents.removeScene(this.s2d);
			this.sevents.addScene(scene,0);
		} else {
			if(new3D != null) {
				this.sevents.removeScene(this.s3d);
			}
			this.sevents.addScene(scene);
		}
		if(disposePrevious) {
			if(new2D != null) {
				this.s2d.dispose();
			} else if(new3D != null) {
				this.s3d.dispose();
			} else {
				throw haxe_Exception.thrown("Can't dispose previous scene");
			}
		}
		if(new2D != null) {
			this.s2d = new2D;
		}
		if(new3D != null) {
			this.s3d = new3D;
		}
	}
	,setCurrent: function() {
		var _gthis = this;
		this.engine = h3d_Engine.CURRENT;
		this.isDisposed = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			_gthis.onResize();
		};
		hxd_System.setLoop($bind(this,this.mainLoop));
	}
	,setScene2D: function(s2d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s2d);
		this.sevents.addScene(s2d,0);
		if(disposePrevious) {
			this.s2d.dispose();
		}
		this.s2d = s2d;
	}
	,setScene3D: function(s3d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s3d);
		this.sevents.addScene(s3d);
		if(disposePrevious) {
			this.s3d.dispose();
		}
		this.s3d = s3d;
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,dispose: function() {
		this.engine.onResized = hxd_App.staticHandler;
		this.engine.onContextLost = hxd_App.staticHandler;
		this.isDisposed = true;
		this.s2d.dispose();
		this.s3d.dispose();
		this.sevents.dispose();
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Main = function() {
	this.tmpVec3_1 = new oimo_common_Vec3();
	this.tmpVec3_0 = new oimo_common_Vec3();
	hxd_App.call(this);
};
Main.__name__ = "Main";
Main.main = function() {
	new Main();
};
Main.__super__ = hxd_App;
Main.prototype = $extend(hxd_App.prototype,{
	init: function() {
		this.light = new h3d_scene_pbr_DirLight(new h3d_Vector(0.3,-0.4,-0.9),this.s3d);
		this.light.set_enableSpecular(true);
		var _this = this.light.get_color();
		var x = 0.58;
		var y = 0.58;
		var z = 0.58;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.s3d.lightSystem.ambientLight;
		var x = 0.74;
		var y = 0.74;
		var z = 0.74;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.s3d.camera.zNear = 1;
		this.s3d.camera.zFar = 500;
		var _this = this.s3d.camera.pos;
		var x = 14.98;
		var y = 46.68;
		var z = 38.2;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		new h3d_scene_CameraController(null,this.s3d).loadFromCamera();
		this.oimo_world = new oimo_dynamics_World(null,new oimo_common_Vec3(0,-9.80665,0));
		OimoUtils.setWorld(this.oimo_world);
		var ground = new h3d_prim_Cube(20,20,2,true);
		ground.addNormals();
		ground.addUVs();
		var groundMesh = new h3d_scene_Mesh(ground,null,this.s3d);
		groundMesh.material.passes.set_enableLights(true);
		var _this = groundMesh.material;
		_this.set_castShadows(true);
		_this.set_receiveShadows(true);
		var type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var pos = [0,0,0];
		if(type == null) {
			type = 0;
		}
		if(pos == null) {
			pos = [0,0,0];
		}
		OimoUtils.tmpVec3_1.x = pos[0];
		OimoUtils.tmpVec3_1.y = pos[1];
		OimoUtils.tmpVec3_1.z = pos[2];
		var rBody = null;
		if(((groundMesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = groundMesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((groundMesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = groundMesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((groundMesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = groundMesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
		switch(type) {
		case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
			OimoUtils.oimoDynamicBodies.push(rBody);
			OimoUtils.heapsDynamicBodies.push(groundMesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
			OimoUtils.oimoKinematicBodies.push(rBody);
			OimoUtils.heapsKinematicBodies.push(groundMesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
			OimoUtils.oimoStaticBodies.push(rBody);
			OimoUtils.heapsStaticBodies.push(groundMesh);
			break;
		}
		var boxPrim = new h3d_prim_Cube(1.8,1.8,1.8,true);
		boxPrim.addNormals();
		boxPrim.addUVs();
		var cylPrim = new h3d_prim_Cylinder(10,1.8,3,true);
		cylPrim.addNormals();
		cylPrim.addUVs();
		var spherePrim = new h3d_prim_Sphere(1.0,12,12);
		spherePrim.addNormals();
		spherePrim.addUVs();
		var staticSphere1Mesh = new h3d_scene_Mesh(spherePrim,null,this.s3d);
		var _this = staticSphere1Mesh.material.mshader.color__;
		_this.x = 1.;
		_this.y = 0.;
		_this.z = 0.;
		_this.w = 0.;
		staticSphere1Mesh.scaleX = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.scaleY = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.scaleZ = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.x = -4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.y = -4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.z = 6;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere1Mesh.flags |= f;
		} else {
			staticSphere1Mesh.flags &= ~f;
		}
		staticSphere1Mesh.material.passes.set_enableLights(true);
		var _this = staticSphere1Mesh.material;
		_this.set_castShadows(true);
		_this.set_receiveShadows(true);
		var type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var pos = [-4,-4,3];
		if(type == null) {
			type = 0;
		}
		if(pos == null) {
			pos = [0,0,0];
		}
		OimoUtils.tmpVec3_1.x = pos[0];
		OimoUtils.tmpVec3_1.y = pos[1];
		OimoUtils.tmpVec3_1.z = pos[2];
		var rBody = null;
		if(((staticSphere1Mesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = staticSphere1Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((staticSphere1Mesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = staticSphere1Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((staticSphere1Mesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = staticSphere1Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
		switch(type) {
		case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
			OimoUtils.oimoDynamicBodies.push(rBody);
			OimoUtils.heapsDynamicBodies.push(staticSphere1Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
			OimoUtils.oimoKinematicBodies.push(rBody);
			OimoUtils.heapsKinematicBodies.push(staticSphere1Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
			OimoUtils.oimoStaticBodies.push(rBody);
			OimoUtils.heapsStaticBodies.push(staticSphere1Mesh);
			break;
		}
		var staticSphere2Mesh = new h3d_scene_Mesh(spherePrim,null,this.s3d);
		staticSphere2Mesh.scaleX = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		staticSphere2Mesh.scaleY = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		staticSphere2Mesh.scaleZ = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		var _this = staticSphere2Mesh.material.mshader.color__;
		_this.x = 1.;
		_this.y = 0.;
		_this.z = 0.;
		_this.w = 0.;
		staticSphere2Mesh.x = 4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		staticSphere2Mesh.y = 4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		staticSphere2Mesh.z = 6;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere2Mesh.flags |= f;
		} else {
			staticSphere2Mesh.flags &= ~f;
		}
		var type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var pos = [4,6,4];
		if(type == null) {
			type = 0;
		}
		if(pos == null) {
			pos = [0,0,0];
		}
		OimoUtils.tmpVec3_1.x = pos[0];
		OimoUtils.tmpVec3_1.y = pos[1];
		OimoUtils.tmpVec3_1.z = pos[2];
		var rBody = null;
		if(((staticSphere2Mesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = staticSphere2Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((staticSphere2Mesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = staticSphere2Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((staticSphere2Mesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = staticSphere2Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
		switch(type) {
		case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
			OimoUtils.oimoDynamicBodies.push(rBody);
			OimoUtils.heapsDynamicBodies.push(staticSphere2Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
			OimoUtils.oimoKinematicBodies.push(rBody);
			OimoUtils.heapsKinematicBodies.push(staticSphere2Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
			OimoUtils.oimoStaticBodies.push(rBody);
			OimoUtils.heapsStaticBodies.push(staticSphere2Mesh);
			break;
		}
		var staticSphere3Mesh = new h3d_scene_Mesh(spherePrim,null,this.s3d);
		staticSphere3Mesh.scaleX = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		staticSphere3Mesh.scaleY = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		staticSphere3Mesh.scaleZ = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		var _this = staticSphere3Mesh.material.mshader.color__;
		_this.x = 1.;
		_this.y = 0.;
		_this.z = 0.;
		_this.w = 0.;
		staticSphere3Mesh.x = 4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		staticSphere3Mesh.y = -4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		staticSphere3Mesh.z = 6;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere3Mesh.flags |= f;
		} else {
			staticSphere3Mesh.flags &= ~f;
		}
		var type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var pos = [4,6,-4];
		if(type == null) {
			type = 0;
		}
		if(pos == null) {
			pos = [0,0,0];
		}
		OimoUtils.tmpVec3_1.x = pos[0];
		OimoUtils.tmpVec3_1.y = pos[1];
		OimoUtils.tmpVec3_1.z = pos[2];
		var rBody = null;
		if(((staticSphere3Mesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = staticSphere3Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((staticSphere3Mesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = staticSphere3Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((staticSphere3Mesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = staticSphere3Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
		switch(type) {
		case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
			OimoUtils.oimoDynamicBodies.push(rBody);
			OimoUtils.heapsDynamicBodies.push(staticSphere3Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
			OimoUtils.oimoKinematicBodies.push(rBody);
			OimoUtils.heapsKinematicBodies.push(staticSphere3Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
			OimoUtils.oimoStaticBodies.push(rBody);
			OimoUtils.heapsStaticBodies.push(staticSphere3Mesh);
			break;
		}
		var staticSphere4Mesh = new h3d_scene_Mesh(spherePrim,null,this.s3d);
		staticSphere4Mesh.scaleX = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		staticSphere4Mesh.scaleY = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		staticSphere4Mesh.scaleZ = 2.5;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		var _this = staticSphere4Mesh.material.mshader.color__;
		_this.x = 1.;
		_this.y = 0.;
		_this.z = 0.;
		_this.w = 0.;
		staticSphere4Mesh.x = -4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		staticSphere4Mesh.y = 4;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		staticSphere4Mesh.z = 6;
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			staticSphere4Mesh.flags |= f;
		} else {
			staticSphere4Mesh.flags &= ~f;
		}
		var type = oimo_dynamics_rigidbody_RigidBodyType.STATIC;
		var pos = [-4,6,4];
		if(type == null) {
			type = 0;
		}
		if(pos == null) {
			pos = [0,0,0];
		}
		OimoUtils.tmpVec3_1.x = pos[0];
		OimoUtils.tmpVec3_1.y = pos[1];
		OimoUtils.tmpVec3_1.z = pos[2];
		var rBody = null;
		if(((staticSphere4Mesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = staticSphere4Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((staticSphere4Mesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = staticSphere4Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((staticSphere4Mesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = staticSphere4Mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
		switch(type) {
		case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
			OimoUtils.oimoDynamicBodies.push(rBody);
			OimoUtils.heapsDynamicBodies.push(staticSphere4Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
			OimoUtils.oimoKinematicBodies.push(rBody);
			OimoUtils.heapsKinematicBodies.push(staticSphere4Mesh);
			break;
		case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
			OimoUtils.oimoStaticBodies.push(rBody);
			OimoUtils.heapsStaticBodies.push(staticSphere4Mesh);
			break;
		}
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			var sphere = new h3d_scene_Mesh(spherePrim,null,this.s3d);
			var _this = sphere.material.mshader.color__;
			_this.x = 0.;
			_this.y = 0.;
			_this.z = 1.;
			_this.w = 0.;
			var type = oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
			var pos = [OimoUtils.getRandomFloat(-5,5),3 + i * 1.2,OimoUtils.getRandomFloat(-5,5)];
			if(type == null) {
				type = 0;
			}
			if(pos == null) {
				pos = [0,0,0];
			}
			OimoUtils.tmpVec3_1.x = pos[0];
			OimoUtils.tmpVec3_1.y = pos[1];
			OimoUtils.tmpVec3_1.z = pos[2];
			var rBody = null;
			if(((sphere.primitive) instanceof h3d_prim_Cube)) {
				var geom = sphere.primitive;
				var _this1 = geom.getBounds();
				var x = _this1.xMax - _this1.xMin;
				var y = _this1.yMax - _this1.yMin;
				var z = _this1.zMax - _this1.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var inlPoint_x = x;
				var inlPoint_y = y;
				var inlPoint_z = z;
				OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
				var _this2 = geom.getBounds();
				var x1 = _this2.xMax - _this2.xMin;
				var y1 = _this2.yMax - _this2.yMin;
				var z1 = _this2.zMax - _this2.zMin;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var inlPoint_x1 = x1;
				var inlPoint_y1 = y1;
				var inlPoint_z1 = z1;
				OimoUtils.tmpVec3_0.y = inlPoint_z1 / 2;
				var _this3 = geom.getBounds();
				var x2 = _this3.xMax - _this3.xMin;
				var y2 = _this3.yMax - _this3.yMin;
				var z2 = _this3.zMax - _this3.zMin;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var inlPoint_x2 = x2;
				var inlPoint_y2 = y2;
				var inlPoint_z2 = z2;
				OimoUtils.tmpVec3_0.z = inlPoint_y2 / 2;
				rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
			} else if(((sphere.primitive) instanceof h3d_prim_Sphere)) {
				var geom1 = sphere.primitive;
				var _this4 = geom1.getBounds();
				var x3 = _this4.xMax - _this4.xMin;
				var y3 = _this4.yMax - _this4.yMin;
				var z3 = _this4.zMax - _this4.zMin;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var inlPoint_x3 = x3;
				var inlPoint_y3 = y3;
				var inlPoint_z3 = z3;
				var radius = inlPoint_x3 / 2;
				rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
			} else if(((sphere.primitive) instanceof h3d_prim_Cylinder)) {
				var geom2 = sphere.primitive;
				var _this5 = geom2.getBounds();
				var x4 = _this5.xMax - _this5.xMin;
				var y4 = _this5.yMax - _this5.yMin;
				var z4 = _this5.zMax - _this5.zMin;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var inlPoint_x4 = x4;
				var inlPoint_y4 = y4;
				var inlPoint_z4 = z4;
				var radius1 = inlPoint_x4;
				var _this6 = geom2.getBounds();
				var x5 = _this6.xMax - _this6.xMin;
				var y5 = _this6.yMax - _this6.yMin;
				var z5 = _this6.zMax - _this6.zMin;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var inlPoint_x5 = x5;
				var inlPoint_y5 = y5;
				var inlPoint_z5 = z5;
				var halfHeight = inlPoint_z5 / 2;
				rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius1,halfHeight,type);
			}
			switch(type) {
			case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
				OimoUtils.oimoDynamicBodies.push(rBody);
				OimoUtils.heapsDynamicBodies.push(sphere);
				break;
			case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
				OimoUtils.oimoKinematicBodies.push(rBody);
				OimoUtils.heapsKinematicBodies.push(sphere);
				break;
			case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
				OimoUtils.oimoStaticBodies.push(rBody);
				OimoUtils.heapsStaticBodies.push(sphere);
				break;
			}
		}
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			var box = new h3d_scene_Mesh(boxPrim,null,this.s3d);
			var _this = box.material.mshader.color__;
			_this.x = 0.;
			_this.y = 1.;
			_this.z = 0.;
			_this.w = 0.;
			var type = oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC;
			var pos = [OimoUtils.getRandomFloat(-5,5),5 + i * 1.2,OimoUtils.getRandomFloat(-5,5)];
			if(type == null) {
				type = 0;
			}
			if(pos == null) {
				pos = [0,0,0];
			}
			OimoUtils.tmpVec3_1.x = pos[0];
			OimoUtils.tmpVec3_1.y = pos[1];
			OimoUtils.tmpVec3_1.z = pos[2];
			var rBody = null;
			if(((box.primitive) instanceof h3d_prim_Cube)) {
				var geom = box.primitive;
				var _this1 = geom.getBounds();
				var x = _this1.xMax - _this1.xMin;
				var y = _this1.yMax - _this1.yMin;
				var z = _this1.zMax - _this1.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var inlPoint_x = x;
				var inlPoint_y = y;
				var inlPoint_z = z;
				OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
				var _this2 = geom.getBounds();
				var x1 = _this2.xMax - _this2.xMin;
				var y1 = _this2.yMax - _this2.yMin;
				var z1 = _this2.zMax - _this2.zMin;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var inlPoint_x1 = x1;
				var inlPoint_y1 = y1;
				var inlPoint_z1 = z1;
				OimoUtils.tmpVec3_0.y = inlPoint_z1 / 2;
				var _this3 = geom.getBounds();
				var x2 = _this3.xMax - _this3.xMin;
				var y2 = _this3.yMax - _this3.yMin;
				var z2 = _this3.zMax - _this3.zMin;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var inlPoint_x2 = x2;
				var inlPoint_y2 = y2;
				var inlPoint_z2 = z2;
				OimoUtils.tmpVec3_0.z = inlPoint_y2 / 2;
				rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
			} else if(((box.primitive) instanceof h3d_prim_Sphere)) {
				var geom1 = box.primitive;
				var _this4 = geom1.getBounds();
				var x3 = _this4.xMax - _this4.xMin;
				var y3 = _this4.yMax - _this4.yMin;
				var z3 = _this4.zMax - _this4.zMin;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var inlPoint_x3 = x3;
				var inlPoint_y3 = y3;
				var inlPoint_z3 = z3;
				var radius = inlPoint_x3 / 2;
				rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
			} else if(((box.primitive) instanceof h3d_prim_Cylinder)) {
				var geom2 = box.primitive;
				var _this5 = geom2.getBounds();
				var x4 = _this5.xMax - _this5.xMin;
				var y4 = _this5.yMax - _this5.yMin;
				var z4 = _this5.zMax - _this5.zMin;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var inlPoint_x4 = x4;
				var inlPoint_y4 = y4;
				var inlPoint_z4 = z4;
				var radius1 = inlPoint_x4;
				var _this6 = geom2.getBounds();
				var x5 = _this6.xMax - _this6.xMin;
				var y5 = _this6.yMax - _this6.yMin;
				var z5 = _this6.zMax - _this6.zMin;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var inlPoint_x5 = x5;
				var inlPoint_y5 = y5;
				var inlPoint_z5 = z5;
				var halfHeight = inlPoint_z5 / 2;
				rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius1,halfHeight,type);
			}
			switch(type) {
			case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
				OimoUtils.oimoDynamicBodies.push(rBody);
				OimoUtils.heapsDynamicBodies.push(box);
				break;
			case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
				OimoUtils.oimoKinematicBodies.push(rBody);
				OimoUtils.heapsKinematicBodies.push(box);
				break;
			case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
				OimoUtils.oimoStaticBodies.push(rBody);
				OimoUtils.heapsStaticBodies.push(box);
				break;
			}
		}
	}
	,teleportRigidBodies: function(thresholdY,toY,rangeX,rangeZ) {
		var rb = this.oimo_world._rigidBodyList;
		this.tmpVec3_0.zero();
		while(rb != null) {
			var v = this.tmpVec3_1;
			v.x = rb._transform._positionX;
			v.y = rb._transform._positionY;
			v.z = rb._transform._positionZ;
			if(this.tmpVec3_1.y < thresholdY) {
				this.tmpVec3_1.y = toY;
				var tmp = -1 + Math.random() * 2;
				this.tmpVec3_1.x = tmp * rangeX;
				var tmp1 = -1 + Math.random() * 2;
				this.tmpVec3_1.z = tmp1 * rangeZ;
				var v1 = this.tmpVec3_1;
				rb._transform._positionX = v1.x;
				rb._transform._positionY = v1.y;
				rb._transform._positionZ = v1.z;
				var dst = rb._ptransform;
				var src = rb._transform;
				dst._positionX = src._positionX;
				dst._positionY = src._positionY;
				dst._positionZ = src._positionZ;
				dst._rotation00 = src._rotation00;
				dst._rotation01 = src._rotation01;
				dst._rotation02 = src._rotation02;
				dst._rotation10 = src._rotation10;
				dst._rotation11 = src._rotation11;
				dst._rotation12 = src._rotation12;
				dst._rotation20 = src._rotation20;
				dst._rotation21 = src._rotation21;
				dst._rotation22 = src._rotation22;
				var s = rb._shapeList;
				while(s != null) {
					var n = s._next;
					var dst1 = s._ptransform;
					var src1 = s._localTransform;
					var src2 = rb._ptransform;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
					__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
					__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
					__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
					__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
					__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
					__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
					__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
					__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
					dst1._rotation00 = __tmp__00;
					dst1._rotation01 = __tmp__01;
					dst1._rotation02 = __tmp__02;
					dst1._rotation10 = __tmp__10;
					dst1._rotation11 = __tmp__11;
					dst1._rotation12 = __tmp__12;
					dst1._rotation20 = __tmp__20;
					dst1._rotation21 = __tmp__21;
					dst1._rotation22 = __tmp__22;
					var __tmp__X;
					var __tmp__Y;
					var __tmp__Z;
					__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
					__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
					__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
					dst1._positionX = __tmp__X;
					dst1._positionY = __tmp__Y;
					dst1._positionZ = __tmp__Z;
					dst1._positionX += src2._positionX;
					dst1._positionY += src2._positionY;
					dst1._positionZ += src2._positionZ;
					var dst2 = s._transform;
					var src11 = s._localTransform;
					var src21 = rb._transform;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
					__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
					__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
					__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
					__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
					__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
					__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
					__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
					__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
					dst2._rotation00 = __tmp__001;
					dst2._rotation01 = __tmp__011;
					dst2._rotation02 = __tmp__021;
					dst2._rotation10 = __tmp__101;
					dst2._rotation11 = __tmp__111;
					dst2._rotation12 = __tmp__121;
					dst2._rotation20 = __tmp__201;
					dst2._rotation21 = __tmp__211;
					dst2._rotation22 = __tmp__221;
					var __tmp__X1;
					var __tmp__Y1;
					var __tmp__Z1;
					__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
					__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
					__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
					dst2._positionX = __tmp__X1;
					dst2._positionY = __tmp__Y1;
					dst2._positionZ = __tmp__Z1;
					dst2._positionX += src21._positionX;
					dst2._positionY += src21._positionY;
					dst2._positionZ += src21._positionZ;
					var min;
					var minX;
					var minY;
					var minZ;
					var max;
					var maxX;
					var maxY;
					var maxZ;
					s._geom._computeAabb(s._aabb,s._ptransform);
					minX = s._aabb._minX;
					minY = s._aabb._minY;
					minZ = s._aabb._minZ;
					maxX = s._aabb._maxX;
					maxY = s._aabb._maxY;
					maxZ = s._aabb._maxZ;
					s._geom._computeAabb(s._aabb,s._transform);
					s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
					s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
					s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
					s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
					s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
					s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
					if(s._proxy != null) {
						var d;
						var dX;
						var dY;
						var dZ;
						dX = s._transform._positionX - s._ptransform._positionX;
						dY = s._transform._positionY - s._ptransform._positionY;
						dZ = s._transform._positionZ - s._ptransform._positionZ;
						var v2 = s.displacement;
						v2.x = dX;
						v2.y = dY;
						v2.z = dZ;
						s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
					}
					s = n;
				}
				rb._sleeping = false;
				rb._sleepTime = 0;
				if(rb._type == 1) {
					rb._velX = 0;
					rb._velY = 0;
					rb._velZ = 0;
				} else {
					var v3 = this.tmpVec3_0;
					rb._velX = v3.x;
					rb._velY = v3.y;
					rb._velZ = v3.z;
				}
				rb._sleeping = false;
				rb._sleepTime = 0;
			}
			rb = rb._next;
		}
	}
	,update: function(dt) {
		OimoUtils.updatePhysics();
		this.teleportRigidBodies(-12,25,10,10);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var oimo_common_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	oimo_common_Vec3.numCreations++;
};
oimo_common_Vec3.__name__ = "oimo.common.Vec3";
oimo_common_Vec3.prototype = {
	init: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,zero: function() {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,add: function(v) {
		return new oimo_common_Vec3(this.x + v.x,this.y + v.y,this.z + v.z);
	}
	,add3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x + vx,this.y + vy,this.z + vz);
	}
	,addScaled: function(v,s) {
		return new oimo_common_Vec3(this.x + v.x * s,this.y + v.y * s,this.z + v.z * s);
	}
	,sub: function(v) {
		return new oimo_common_Vec3(this.x - v.x,this.y - v.y,this.z - v.z);
	}
	,sub3: function(vx,vy,vz) {
		return new oimo_common_Vec3(this.x - vx,this.y - vy,this.z - vz);
	}
	,scale: function(s) {
		return new oimo_common_Vec3(this.x * s,this.y * s,this.z * s);
	}
	,scale3: function(sx,sy,sz) {
		return new oimo_common_Vec3(this.x * sx,this.y * sy,this.z * sz);
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,cross: function(v) {
		return new oimo_common_Vec3(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x);
	}
	,addEq: function(v) {
		var tx = this.x + v.x;
		var ty = this.y + v.y;
		var tz = this.z + v.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,add3Eq: function(vx,vy,vz) {
		var tx = this.x + vx;
		var ty = this.y + vy;
		var tz = this.z + vz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,addScaledEq: function(v,s) {
		var tx = this.x + v.x * s;
		var ty = this.y + v.y * s;
		var tz = this.z + v.z * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,subEq: function(v) {
		var tx = this.x - v.x;
		var ty = this.y - v.y;
		var tz = this.z - v.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,sub3Eq: function(vx,vy,vz) {
		var tx = this.x - vx;
		var ty = this.y - vy;
		var tz = this.z - vz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,scaleEq: function(s) {
		var tx = this.x * s;
		var ty = this.y * s;
		var tz = this.z * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,scale3Eq: function(sx,sy,sz) {
		var tx = this.x * sx;
		var ty = this.y * sy;
		var tz = this.z * sz;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,crossEq: function(v) {
		var tx = this.y * v.z - this.z * v.y;
		var ty = this.z * v.x - this.x * v.z;
		var tz = this.x * v.y - this.y * v.x;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulMat3: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02,this.x * m.e10 + this.y * m.e11 + this.z * m.e12,this.x * m.e20 + this.y * m.e21 + this.z * m.e22);
	}
	,mulMat4: function(m) {
		return new oimo_common_Vec3(this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03,this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13,this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23);
	}
	,mulTransform: function(tf) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = this;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return res;
	}
	,mulMat3Eq: function(m) {
		var tx = this.x * m.e00 + this.y * m.e01 + this.z * m.e02;
		var ty = this.x * m.e10 + this.y * m.e11 + this.z * m.e12;
		var tz = this.x * m.e20 + this.y * m.e21 + this.z * m.e22;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulMat4Eq: function(m) {
		var tx = this.x * m.e00 + this.y * m.e01 + this.z * m.e02 + m.e03;
		var ty = this.x * m.e10 + this.y * m.e11 + this.z * m.e12 + m.e13;
		var tz = this.x * m.e20 + this.y * m.e21 + this.z * m.e22 + m.e23;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,mulTransformEq: function(tf) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = this;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * vX + tf._rotation01 * vY + tf._rotation02 * vZ;
		__tmp__Y = tf._rotation10 * vX + tf._rotation11 * vY + tf._rotation12 * vZ;
		__tmp__Z = tf._rotation20 * vX + tf._rotation21 * vY + tf._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += tf._positionX;
		vY += tf._positionY;
		vZ += tf._positionZ;
		var v = this;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Vec3(this.x * invLen,this.y * invLen,this.z * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		var tx = this.x * invLen;
		var ty = this.y * invLen;
		var tz = this.z * invLen;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,negate: function() {
		return new oimo_common_Vec3(-this.x,-this.y,-this.z);
	}
	,negateEq: function() {
		var tx = -this.x;
		var ty = -this.y;
		var tz = -this.z;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		return this;
	}
	,copyFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new oimo_common_Vec3(this.x,this.y,this.z);
	}
	,toString: function() {
		return "Vec3[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Vec3
};
var OimoUtils = function() { };
OimoUtils.__name__ = "OimoUtils";
OimoUtils.setWorld = function(w) {
	if(OimoUtils.oimoWorld == null) {
		OimoUtils.oimoWorld = w;
	} else {
		throw haxe_Exception.thrown("Error: World already set.");
	}
};
OimoUtils.updatePhysics = function() {
	OimoUtils.oimoWorld.step(0.06);
	var _g = 0;
	var _g1 = OimoUtils.oimoDynamicBodies.length;
	while(_g < _g1) {
		var i = _g++;
		var oimoBody = OimoUtils.oimoDynamicBodies[i];
		var heapsBody = OimoUtils.heapsDynamicBodies[i];
		var _this = oimoBody._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		var _this1 = tf;
		var v = OimoUtils.tmpVec3_0;
		v.x = _this1._positionX;
		v.y = _this1._positionY;
		v.z = _this1._positionZ;
		var x = OimoUtils.tmpVec3_0.x;
		var y = OimoUtils.tmpVec3_0.z;
		var z = OimoUtils.tmpVec3_0.y;
		heapsBody.x = x;
		var f = 1;
		var b = true;
		if(b) {
			heapsBody.flags |= f;
		} else {
			heapsBody.flags &= ~f;
		}
		heapsBody.y = y;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			heapsBody.flags |= f1;
		} else {
			heapsBody.flags &= ~f1;
		}
		heapsBody.z = z;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			heapsBody.flags |= f2;
		} else {
			heapsBody.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			heapsBody.flags |= f3;
		} else {
			heapsBody.flags &= ~f3;
		}
		var _this2 = oimoBody._transform;
		var tf1 = new oimo_common_Transform();
		tf1._positionX = _this2._positionX;
		tf1._positionY = _this2._positionY;
		tf1._positionZ = _this2._positionZ;
		tf1._rotation00 = _this2._rotation00;
		tf1._rotation01 = _this2._rotation01;
		tf1._rotation02 = _this2._rotation02;
		tf1._rotation10 = _this2._rotation10;
		tf1._rotation11 = _this2._rotation11;
		tf1._rotation12 = _this2._rotation12;
		tf1._rotation20 = _this2._rotation20;
		tf1._rotation21 = _this2._rotation21;
		tf1._rotation22 = _this2._rotation22;
		var _this3 = tf1;
		var _this_e00 = 1;
		var _this_e01 = 0;
		var _this_e02 = 0;
		var _this_e10 = 0;
		var _this_e11 = 1;
		var _this_e12 = 0;
		var _this_e20 = 0;
		var _this_e21 = 0;
		var _this_e22 = 1;
		oimo_common_Mat3.numCreations++;
		_this_e00 = _this3._rotation00;
		_this_e01 = _this3._rotation01;
		_this_e02 = _this3._rotation02;
		_this_e10 = _this3._rotation10;
		_this_e11 = _this3._rotation11;
		_this_e12 = _this3._rotation12;
		_this_e20 = _this3._rotation20;
		_this_e21 = _this3._rotation21;
		_this_e22 = _this3._rotation22;
		var sy = _this_e02;
		var tmp;
		if(sy <= -1) {
			var xSubZ = Math.atan2(_this_e21,_this_e11);
			tmp = new oimo_common_Vec3(xSubZ * 0.5,-1.570796326794895,-xSubZ * 0.5);
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(_this_e21,_this_e11);
			tmp = new oimo_common_Vec3(xAddZ * 0.5,1.570796326794895,xAddZ * 0.5);
		} else {
			var y1 = Math.asin(sy);
			var x1 = Math.atan2(-_this_e12,_this_e22);
			var z1 = Math.atan2(-_this_e01,_this_e00);
			tmp = new oimo_common_Vec3(x1,y1,z1);
		}
		OimoUtils.tmpVec3_0 = tmp;
		heapsBody.setRotation(OimoUtils.tmpVec3_0.x,OimoUtils.tmpVec3_0.z,OimoUtils.tmpVec3_0.y);
	}
};
OimoUtils.addPhysics = function(mesh,type,pos,colliderType,options) {
	if(colliderType == null) {
		colliderType = "";
	}
	if(type == null) {
		type = 0;
	}
	if(pos == null) {
		pos = [0,0,0];
	}
	OimoUtils.tmpVec3_1.x = pos[0];
	OimoUtils.tmpVec3_1.y = pos[1];
	OimoUtils.tmpVec3_1.z = pos[2];
	var rBody = null;
	if(colliderType == "") {
		if(((mesh.primitive) instanceof h3d_prim_Cube)) {
			var geom = mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.x = inlPoint_x / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.y = inlPoint_z / 2;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			OimoUtils.tmpVec3_0.z = inlPoint_y / 2;
			rBody = OimoUtils.addBox(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,OimoUtils.tmpVec3_0,type);
		} else if(((mesh.primitive) instanceof h3d_prim_Sphere)) {
			var geom = mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x / 2;
			rBody = OimoUtils.addSphere(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,type);
		} else if(((mesh.primitive) instanceof h3d_prim_Cylinder)) {
			var geom = mesh.primitive;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var radius = inlPoint_x;
			var _this = geom.getBounds();
			var x = _this.xMax - _this.xMin;
			var y = _this.yMax - _this.yMin;
			var z = _this.zMax - _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var inlPoint_x = x;
			var inlPoint_y = y;
			var inlPoint_z = z;
			var halfHeight = inlPoint_z / 2;
			rBody = OimoUtils.addCylinder(OimoUtils.oimoWorld,OimoUtils.tmpVec3_1,radius,halfHeight,type);
		}
	}
	switch(type) {
	case oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC:
		OimoUtils.oimoDynamicBodies.push(rBody);
		OimoUtils.heapsDynamicBodies.push(mesh);
		break;
	case oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC:
		OimoUtils.oimoKinematicBodies.push(rBody);
		OimoUtils.heapsKinematicBodies.push(mesh);
		break;
	case oimo_dynamics_rigidbody_RigidBodyType.STATIC:
		OimoUtils.oimoStaticBodies.push(rBody);
		OimoUtils.heapsStaticBodies.push(mesh);
		break;
	}
	return rBody;
};
OimoUtils.getRandomInt = function(min,max) {
	return Math.floor(Math.random() * (max + 1 - min)) + min;
};
OimoUtils.getRandomFloat = function(min,max) {
	return Math.random() * (max - min) + min;
};
OimoUtils.addUniversalJoint = function(w,rb1,rb2,anchor,axis1,axis2,sd1,lm1,sd2,lm2) {
	var jc = new oimo_dynamics_constraint_joint_UniversalJointConfig();
	jc.init(rb1,rb2,anchor,axis1,axis2);
	if(sd1 != null) {
		jc.springDamper1 = sd1;
	}
	if(lm1 != null) {
		jc.limitMotor1 = lm1;
	}
	if(sd2 != null) {
		jc.springDamper2 = sd2;
	}
	if(lm2 != null) {
		jc.limitMotor2 = lm2;
	}
	var j = new oimo_dynamics_constraint_joint_UniversalJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addGenericJoint = function(w,rb1,rb2,anchor,basis1,basis2,translSds,translLms,rotSds,rotLms) {
	var jc = new oimo_dynamics_constraint_joint_GenericJointConfig();
	jc.init(rb1,rb2,anchor,basis1,basis2);
	if(translSds != null && translSds[0] != null) {
		jc.translationalSpringDampers[0] = translSds[0];
	}
	if(translLms != null && translLms[0] != null) {
		jc.translationalLimitMotors[0] = translLms[0];
	}
	if(rotSds != null && rotSds[0] != null) {
		jc.rotationalSpringDampers[0] = rotSds[0];
	}
	if(rotLms != null && rotLms[0] != null) {
		jc.rotationalLimitMotors[0] = rotLms[0];
	}
	if(translSds != null && translSds[1] != null) {
		jc.translationalSpringDampers[1] = translSds[1];
	}
	if(translLms != null && translLms[1] != null) {
		jc.translationalLimitMotors[1] = translLms[1];
	}
	if(rotSds != null && rotSds[1] != null) {
		jc.rotationalSpringDampers[1] = rotSds[1];
	}
	if(rotLms != null && rotLms[1] != null) {
		jc.rotationalLimitMotors[1] = rotLms[1];
	}
	if(translSds != null && translSds[2] != null) {
		jc.translationalSpringDampers[2] = translSds[2];
	}
	if(translLms != null && translLms[2] != null) {
		jc.translationalLimitMotors[2] = translLms[2];
	}
	if(rotSds != null && rotSds[2] != null) {
		jc.rotationalSpringDampers[2] = rotSds[2];
	}
	if(rotLms != null && rotLms[2] != null) {
		jc.rotationalLimitMotors[2] = rotLms[2];
	}
	var j = new oimo_dynamics_constraint_joint_GenericJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addPrismaticJoint = function(w,rb1,rb2,anchor,axis,sd,lm) {
	var jc = new oimo_dynamics_constraint_joint_PrismaticJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(sd != null) {
		jc.springDamper = sd;
	}
	if(lm != null) {
		jc.limitMotor = lm;
	}
	var j = new oimo_dynamics_constraint_joint_PrismaticJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addRevoluteJoint = function(w,rb1,rb2,anchor,axis,sd,lm) {
	var jc = new oimo_dynamics_constraint_joint_RevoluteJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(sd != null) {
		jc.springDamper = sd;
	}
	if(lm != null) {
		jc.limitMotor = lm;
	}
	var j = new oimo_dynamics_constraint_joint_RevoluteJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addCylindricalJoint = function(w,rb1,rb2,anchor,axis,rotSd,rotLm,traSd,traLm) {
	var jc = new oimo_dynamics_constraint_joint_CylindricalJointConfig();
	jc.init(rb1,rb2,anchor,axis);
	if(rotSd != null) {
		jc.rotationalSpringDamper = rotSd;
	}
	if(rotLm != null) {
		jc.rotationalLimitMotor = rotLm;
	}
	if(traSd != null) {
		jc.translationalSpringDamper = traSd;
	}
	if(traLm != null) {
		jc.translationalLimitMotor = traLm;
	}
	var j = new oimo_dynamics_constraint_joint_CylindricalJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addSphericalJoint = function(w,rb1,rb2,anchor) {
	var jc = new oimo_dynamics_constraint_joint_SphericalJointConfig();
	jc.init(rb1,rb2,anchor);
	var j = new oimo_dynamics_constraint_joint_SphericalJoint(jc);
	w.addJoint(j);
	return j;
};
OimoUtils.addSphere = function(w,center,radius,type) {
	return OimoUtils.addRigidBody(w,center,new oimo_collision_geometry_SphereGeometry(radius),type);
};
OimoUtils.addBox = function(w,center,halfExtents,type) {
	return OimoUtils.addRigidBody(w,center,new oimo_collision_geometry_BoxGeometry(halfExtents),type);
};
OimoUtils.addCylinder = function(w,center,radius,halfHeight,type) {
	return OimoUtils.addRigidBody(w,center,new oimo_collision_geometry_CylinderGeometry(radius,halfHeight),type);
};
OimoUtils.addCone = function(w,center,radius,halfHeight,type) {
	return OimoUtils.addRigidBody(w,center,new oimo_collision_geometry_ConeGeometry(radius,halfHeight),type);
};
OimoUtils.addCapsule = function(w,center,radius,halfHeight,type) {
	return OimoUtils.addRigidBody(w,center,new oimo_collision_geometry_CapsuleGeometry(radius,halfHeight),type);
};
OimoUtils.addRigidBody = function(w,center,geom,type) {
	var shapec = new oimo_dynamics_rigidbody_ShapeConfig();
	shapec.geometry = geom;
	var bodyc = new oimo_dynamics_rigidbody_RigidBodyConfig();
	bodyc.type = type;
	bodyc.position = center;
	var body = new oimo_dynamics_rigidbody_RigidBody(bodyc);
	body.addShape(new oimo_dynamics_rigidbody_Shape(shapec));
	w.addRigidBody(body);
	return body;
};
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readBlocks: function() {
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		return bytes;
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.framesCount = function(data) {
	var frames = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			var _g = block.frame;
			++frames;
		}
	}
	return frames;
};
format_gif_Tools.frame = function(data,frameIndex) {
	var counter = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			var frame = block.frame;
			if(counter == frameIndex) {
				return frame;
			}
			++counter;
		}
	}
	return null;
};
format_gif_Tools.graphicControl = function(data,frameIndex) {
	var counter = 0;
	var gce = null;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(counter == frameIndex) {
				return gce;
			}
			gce = null;
			++counter;
			break;
		case 1:
			var _g = block.extension;
			if(_g._hx_index == 0) {
				var g = _g.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe_Exception.thrown("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index + 2];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe_Exception.thrown("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index + 2];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.loopCount = function(data) {
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 1) {
			var _g = block.extension;
			if(_g._hx_index == 3) {
				var _g1 = _g.ext;
				if(_g1._hx_index == 0) {
					var loops = _g1.loops;
					return loops;
				}
			}
		}
	}
	return 1;
};
format_gif_Tools.log2 = function(val) {
	return Math.log(val) / format_gif_Tools.LN2;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"]
	,SR_8000: {_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"]
	,BR_8: {_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srNum2Enum = function(sr) {
	switch(sr) {
	case 8000:
		return format_mp3_SamplingRate.SR_8000;
	case 11025:
		return format_mp3_SamplingRate.SR_11025;
	case 12000:
		return format_mp3_SamplingRate.SR_12000;
	case 22050:
		return format_mp3_SamplingRate.SR_22050;
	case 24000:
		return format_mp3_SamplingRate.SR_24000;
	case 32000:
		return format_mp3_SamplingRate.SR_32000;
	case 44100:
		return format_mp3_SamplingRate.SR_44100;
	case 48000:
		return format_mp3_SamplingRate.SR_48000;
	default:
		return format_mp3_SamplingRate.SR_Bad;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.getBitrateIdx = function(br,mpeg,layer) {
	var arr = (mpeg == format_mp3_MPEGVersion.MPEG_V1 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[format_mp3_CLayer.enum2Num(layer)];
	if(arr[0] == br) {
		return 0;
	}
	if(arr[1] == br) {
		return 1;
	}
	if(arr[2] == br) {
		return 2;
	}
	if(arr[3] == br) {
		return 3;
	}
	if(arr[4] == br) {
		return 4;
	}
	if(arr[5] == br) {
		return 5;
	}
	if(arr[6] == br) {
		return 6;
	}
	if(arr[7] == br) {
		return 7;
	}
	if(arr[8] == br) {
		return 8;
	}
	if(arr[9] == br) {
		return 9;
	}
	if(arr[10] == br) {
		return 10;
	}
	if(arr[11] == br) {
		return 11;
	}
	if(arr[12] == br) {
		return 12;
	}
	if(arr[13] == br) {
		return 13;
	}
	if(arr[14] == br) {
		return 14;
	}
	if(arr[15] == br) {
		return 15;
	}
	throw haxe_Exception.thrown("Bitrate index not found");
};
format_mp3_MPEG.getSamplingRateIdx = function(sr,mpeg) {
	var arr = format_mp3_MPEG.SamplingRates[format_mp3_MPEG.enum2Num(mpeg)];
	if(arr[0] == sr) {
		return 0;
	}
	if(arr[1] == sr) {
		return 1;
	}
	if(arr[2] == sr) {
		return 2;
	}
	if(arr[3] == sr) {
		return 3;
	}
	throw haxe_Exception.thrown("Sampling rate index not found");
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
format_mp3_MPEG.bitrateNum2Enum = function(br) {
	switch(br) {
	case 0:
		return format_mp3_Bitrate.BR_Free;
	case 8:
		return format_mp3_Bitrate.BR_8;
	case 16:
		return format_mp3_Bitrate.BR_16;
	case 24:
		return format_mp3_Bitrate.BR_24;
	case 32:
		return format_mp3_Bitrate.BR_32;
	case 40:
		return format_mp3_Bitrate.BR_40;
	case 48:
		return format_mp3_Bitrate.BR_48;
	case 56:
		return format_mp3_Bitrate.BR_56;
	case 64:
		return format_mp3_Bitrate.BR_64;
	case 80:
		return format_mp3_Bitrate.BR_80;
	case 96:
		return format_mp3_Bitrate.BR_96;
	case 112:
		return format_mp3_Bitrate.BR_112;
	case 128:
		return format_mp3_Bitrate.BR_128;
	case 144:
		return format_mp3_Bitrate.BR_144;
	case 160:
		return format_mp3_Bitrate.BR_160;
	case 176:
		return format_mp3_Bitrate.BR_176;
	case 192:
		return format_mp3_Bitrate.BR_192;
	case 224:
		return format_mp3_Bitrate.BR_224;
	case 256:
		return format_mp3_Bitrate.BR_256;
	case 288:
		return format_mp3_Bitrate.BR_288;
	case 320:
		return format_mp3_Bitrate.BR_320;
	case 352:
		return format_mp3_Bitrate.BR_352;
	case 384:
		return format_mp3_Bitrate.BR_384;
	case 416:
		return format_mp3_Bitrate.BR_416;
	case 448:
		return format_mp3_Bitrate.BR_448;
	default:
		return format_mp3_Bitrate.BR_Bad;
	}
};
var format_mp3_CLayer = function() { };
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.enum2Num = function(l) {
	switch(l._hx_index) {
	case 0:
		return format_mp3_CLayer.LReserved;
	case 1:
		return format_mp3_CLayer.LLayer3;
	case 2:
		return format_mp3_CLayer.LLayer2;
	case 3:
		return format_mp3_CLayer.LLayer1;
	}
};
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	}
};
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_CEmphasis = function() { };
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"]
	,MPEG_V1: {_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"]
	,LayerReserved: {_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"]
	,Stereo: {_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"]
	,NoEmphasis: {_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"]
	,FT_MP3: {_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw _g;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return null;
			} else {
				throw _g;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
format_mp3_Tools.getFrameInfo = function(fr) {
	return Std.string(fr.header.version) + ", " + Std.string(fr.header.layer) + ", " + Std.string(fr.header.channelMode) + ", " + Std.string(fr.header.samplingRate) + " Hz, " + Std.string(fr.header.bitrate) + " kbps " + "Emphasis: " + Std.string(fr.header.emphasis) + ", " + (fr.header.hasCrc ? "(CRC) " : "") + (fr.header.isPadded ? "(Padded) " : "") + (fr.header.isIntensityStereo ? "(Intensity Stereo) " : "") + (fr.header.isMSStereo ? "(MS Stereo) " : "") + (fr.header.isCopyrighted ? "(Copyrighted) " : "") + (fr.header.isOriginal ? "(Original) " : "");
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g = 0;
	var _g1 = b.length >> 2;
	while(_g < _g1) {
		var i = _g++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a;
		b.b[p++] = r;
		b.b[p++] = g;
		b.b[p++] = b1;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g = h.color;
	if(_g._hx_index == 0) {
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v;
				}
				break;
			case 1:
				var cv = 0;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v1 = data.b[r] + grey.b[w - stride];
					r += rinc;
					grey.b[w++] = v1;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride1 = y == 0 ? 0 : width;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride1] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1;
				}
				break;
			case 4:
				var stride2 = width;
				var cv2 = 0;
				var _g10 = 0;
				var _g11 = width;
				while(_g10 < _g11) {
					var x4 = _g10++;
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : grey.b[w - stride2];
					var c = x4 == 0 || y == 0 ? 0 : grey.b[w - stride2 - numChannels];
					var k = cv2 + b - c;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
	} else {
		throw haxe_Exception.thrown("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride];
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g1_head = d.h;
		while(_g1_head != null) {
			var val = _g1_head.item;
			_g1_head = _g1_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildIndexed = function(width,height,data,palette,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColIndexed, interlaced : false}));
	l.add(format_png_Chunk.CPalette(palette));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r + 2];
			rgb.b[w++] = data.b[r + 1];
			rgb.b[w++] = data.b[r];
			r += 3;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 3];
			rgba.b[w++] = data.b[r];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r];
			rgba.b[w++] = data.b[r + 3];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
format_png_Writer.__name__ = "format.png.Writer";
format_png_Writer.prototype = {
	write: function(png) {
		var b = 137;
		this.o.writeByte(b);
		var b = 80;
		this.o.writeByte(b);
		var b = 78;
		this.o.writeByte(b);
		var b = 71;
		this.o.writeByte(b);
		var b = 13;
		this.o.writeByte(b);
		var b = 10;
		this.o.writeByte(b);
		var b = 26;
		this.o.writeByte(b);
		var b = 10;
		this.o.writeByte(b);
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c._hx_index) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c.h;
				var b = new haxe_io_BytesOutput();
				b.set_bigEndian(true);
				b.writeInt32(h.width);
				b.writeInt32(h.height);
				b.writeByte(h.colbits);
				var _g = h.color;
				var tmp;
				switch(_g._hx_index) {
				case 0:
					var alpha = _g.alpha;
					tmp = alpha ? 4 : 0;
					break;
				case 1:
					var alpha1 = _g.alpha;
					tmp = alpha1 ? 6 : 2;
					break;
				case 2:
					tmp = 3;
					break;
				}
				b.writeByte(tmp);
				b.writeByte(0);
				b.writeByte(0);
				b.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b.getBytes());
				break;
			case 2:
				var d = c.b;
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b1 = c.b;
				this.writeChunk("PLTE",b1);
				break;
			case 4:
				var data = c.data;
				var id = c.id;
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc_crc = -1;
		var tmp = (crc_crc ^ HxOverrides.cca(id,0)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,1)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,2)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,3)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var b = data.b.bufferValue;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			var tmp = (crc_crc ^ b.bytes[i]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			crc_crc = crc_crc >>> 8 ^ tmp;
		}
		this.o.writeInt32(crc_crc ^ -1);
	}
	,__class__: format_png_Writer
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : true, __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : true, __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw haxe_Exception.thrown("Bits error");
			}
			var c = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c | k << c;
			this.bits = k;
			this.nbits = c;
			return d;
		}
		this.bits = this.bits << 8 | k;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,reset: function() {
		this.nbits = 0;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Deflate = function() { };
format_tools_Deflate.__name__ = "format.tools.Deflate";
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"]
	,WF_PCM: {_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	readInt: function() {
		return this.i.readInt32();
	}
	,read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw haxe_Exception.thrown("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw haxe_Exception.thrown("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw haxe_Exception.thrown("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw haxe_Exception.thrown("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw haxe_Exception.thrown("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw haxe_Exception.thrown("Invalid chunk data length");
			} else {
				throw _g;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk = this.i.readString(4);
				if(nextChunk == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g = 0;
					var _g1 = nbCuePoints;
					while(_g < _g1) {
						var _ = _g++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					var n = this.i.readInt32();
					if(n < 0) {
						break;
					}
					this.i.read(n);
				}
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return { header : { format : format, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Object = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.blendMode = h2d_BlendMode.Alpha;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,getAbsPos: function() {
		this.syncPos();
		var m = new h2d_col_Matrix();
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
		return m;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onContentChanged: function() {
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,getMatrix: function(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,drawTo: function(t) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,[t]);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,drawToTextures: function(texs,outputs) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,texs,outputs);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldB_x = x;
		var oldB_y = y;
		var oldB_z = z;
		var oldB_w = w;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		_this.w = oldA_w;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		_this.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g = 0;
				var _g1 = nchilds;
				while(_g < _g1) {
					var i = _g++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g = 0;
				var _g1 = this.children;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,set_x: function(v) {
		this.posChanged = true;
		return this.x = v;
	}
	,set_y: function(v) {
		this.posChanged = true;
		return this.y = v;
	}
	,set_scaleX: function(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	,set_rotation: function(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	,move: function(dx,dy) {
		var _g = this;
		var v = _g.x + dx * Math.cos(this.rotation);
		_g.posChanged = true;
		_g.x = v;
		var _g = this;
		var v = _g.y + dy * Math.sin(this.rotation);
		_g.posChanged = true;
		_g.y = v;
	}
	,setPosition: function(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	,rotate: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.rotation += v;
	}
	,scale: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.scaleX *= v;
		var _g = this;
		_g.posChanged = true;
		_g.scaleY *= v;
	}
	,setScale: function(v) {
		this.posChanged = true;
		this.scaleX = v;
		this.posChanged = true;
		this.scaleY = v;
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h2d_$Object(this.children);
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	set_tileWrap: function(b) {
		return this.tileWrap = b;
	}
	,get_colorAdd: function() {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			return null;
		} else {
			return s.color__;
		}
	}
	,set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,set_colorKey: function(v) {
		var s = this.getShader(h3d_shader_ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d_shader_ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			var _this = s.colorKey__;
			var c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	,adjustColor: function(col) {
		if(col == null) {
			this.set_colorMatrix(null);
		} else {
			var m = this.get_colorMatrix();
			if(m == null) {
				m = new h3d_Matrix();
				this.set_colorMatrix(m);
			}
			m.identity();
			m.adjustColor(col);
		}
	}
	,get_colorMatrix: function() {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	,set_colorMatrix: function(m) {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d_shader_ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	,getDebugShaderCode: function(toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var ctx = this.getScene().ctx;
		var shader = ctx.manager.compileShaders(new hxsl_ShaderList(ctx.baseShader,this.shaders));
		if(toHxsl) {
			var varId = true;
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,varId);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,null);
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return h;
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var hxd_Interactive = function() { };
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,eventToLocal: function(e) {
		var i = this;
		var dx = e.relX - i.absX;
		var dy = e.relY - i.absY;
		e.relX = (dx * i.matD - dy * i.matC) * i.invDet;
		e.relY = (-dx * i.matB + dy * i.matA) * i.invDet;
	}
	,startDrag: function(callb,onCancel) {
		var _gthis = this;
		this.scene.startDrag(function(event) {
			var x = event.relX;
			var y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel);
	}
	,stopDrag: function() {
		this.scene.stopDrag();
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,add: function(s,layer) {
		this.addChildAt(s,layer);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	,over: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g4 = i;
						var _g5 = l - 1;
						while(_g4 < _g5) {
							var p = _g4++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	,getLayer: function(layer) {
		var a;
		if(layer >= this.layerCount) {
			a = [];
		} else {
			var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
			var max = this.layersIndexes[layer];
			a = this.children.slice(start,max);
		}
		return new hxd_impl_ArrayIterator_$h2d_$Object(a);
	}
	,getChildLayer: function(s) {
		if(s.parent != this) {
			return -1;
		}
		var index = this.children.indexOf(s);
		var _g = 0;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			if(this.layersIndexes[i] > index) {
				return i;
			}
		}
		return -1;
	}
	,drawLayer: function(ctx,layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var old = ctx.globalAlpha;
		ctx.globalAlpha *= this.alpha;
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(ctx.front2back) {
			var _g = start;
			var _g1 = max;
			while(_g < _g1) {
				var i = _g++;
				this.children[max - 1 - i].drawRec(ctx);
			}
		} else {
			var _g = start;
			var _g1 = max;
			while(_g < _g1) {
				var i = _g++;
				this.children[i].drawRec(ctx);
			}
		}
		ctx.globalAlpha = old;
	}
	,ysort: function(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		var pos = start;
		var ymax = this.children[pos++].y;
		while(pos < max) {
			var c = this.children[pos];
			if(c.y < ymax) {
				var p = pos - 1;
				while(p >= start) {
					var c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
				if(c.allocated) {
					c.onHierarchyMoved(false);
				}
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.maskWith = function(ctx,object,width,height,scrollX,scrollY) {
	if(scrollY == null) {
		scrollY = 0;
	}
	if(scrollX == null) {
		scrollX = 0;
	}
	var x1 = object.absX + scrollX;
	var y1 = object.absY + scrollY;
	var x2 = width * object.matA + height * object.matC + x1;
	var y2 = width * object.matB + height * object.matD + y1;
	var tmp;
	if(x1 > x2) {
		tmp = x1;
		x1 = x2;
		x2 = tmp;
	}
	if(y1 > y2) {
		tmp = y1;
		y1 = y2;
		y2 = tmp;
	}
	ctx.pushRenderZone(x1,y1,x2 - x1,y2 - y1);
};
h2d_Mask.unmask = function(ctx) {
	ctx.popRenderZone();
};
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	scrollTo: function(x,y) {
		this.set_scrollX(x);
		this.set_scrollY(y);
	}
	,scrollBy: function(x,y) {
		var _g = this;
		_g.set_scrollX(_g.scrollX + x);
		var _g = this;
		_g.set_scrollY(_g.scrollY + y);
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,set_scrollX: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.xMin;
			var max = this.scrollBounds.xMax - this.width;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			if(v < min) {
				v = min;
			} else if(v > max) {
				v = max;
			}
		}
		this.posChanged = true;
		return this.scrollX = v;
	}
	,set_scrollY: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.yMin;
			var max = this.scrollBounds.yMax - this.height;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			if(v < min) {
				v = min;
			} else if(v > max) {
				v = max;
			}
		}
		this.posChanged = true;
		return this.scrollY = v;
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,this.scrollX,this.scrollY,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		h2d_Mask.maskWith(ctx,this,this.width,this.height,this.scrollX,this.scrollY);
		h2d_Object.prototype.drawRec.call(this,ctx);
		h2d_Mask.unmask(ctx);
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	dispose: function() {
		this.textures.dispose();
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		h3d_impl_RenderContext.prototype.dispose.call(this);
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,hasBuffering: function() {
		return false;
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		this.manager.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewport__;
		var x = -this.scene.width * 0.5 - this.scene.offsetX;
		var y = -this.scene.height * 0.5 - this.scene.offsetY;
		var z = 2 / this.scene.width * this.scene.ratioX;
		var w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,allocTarget: function(name,filter) {
		if(filter == null) {
			filter = false;
		}
		var t = this.textures.allocTarget(name,this.scene.width,this.scene.height,false);
		t.set_filter(filter ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,clear: function(color) {
		this.engine.clear(color);
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewport__;
		var x = -width * 0.5 - startX;
		var y = -height * 0.5 - startY;
		var z = 2 / width;
		var w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,pushTargets: function(texs) {
		this.pushTarget(texs[0]);
		if(texs.length > 1) {
			this.engine.popTarget();
			this.engine.pushTargets(texs);
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t;
			var startX;
			var startY;
			var width;
			var height;
			var ratioX;
			var ratioY;
			var offsetX;
			var offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			var x = 0.5 / (t == null ? this.engine.width : t.width);
			var y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this = this.baseShader.viewport__;
			var x = -width * 0.5 - startX - offsetX;
			var y = -height * 0.5 - startY - offsetY;
			var z = 2 / width * ratioX;
			var w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRZ(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,clipRenderZone: function(x,y,w,h) {
		if(!this.hasRenderZone) {
			this.pushRenderZone(x,y,w,h);
			return;
		}
		x = Math.max(x,this.renderX);
		y = Math.max(y,this.renderY);
		var x2 = Math.min(x + w,this.renderX + this.renderW);
		var y2 = Math.min(y + h,this.renderY + this.renderH);
		if(x2 < x) {
			x2 = x;
		}
		if(y2 < y) {
			y2 = y;
		}
		this.pushRenderZone(x,y,x2 - x,y2 - y);
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		var scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,clearRZ: function() {
		this.hasRenderZone = false;
		this.engine.setRenderZone();
	}
	,setRenderZone: function(x,y,w,h) {
		this.pushRenderZone(x,y,w,h);
	}
	,clearRenderZone: function() {
		this.popRenderZone();
	}
	,drawLayer: function(layer) {
		this.scene.drawLayer(this,layer);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,flush: function() {
	}
	,_flush: function() {
		if(this.bufPos == 0) {
			return;
		}
		this.beforeDraw();
		var nverts = this.bufPos / this.stride | 0;
		var tmp = new h3d_Buffer(nverts,this.stride,[h3d_BufferFlag.Quads,h3d_BufferFlag.Dynamic,h3d_BufferFlag.RawFormat]);
		tmp.uploadVector(this.buffer,0,nverts);
		var _this = this.engine;
		_this.renderBuffer(tmp,_this.mem.quadIndexes,2,0,-1);
		tmp.dispose();
		this.bufPos = 0;
		this.texture = null;
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,setupColor: function(obj) {
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.beforeDraw();
		return true;
	}
	,beginDrawBatch: function(obj,texture) {
		return this.beginDraw(obj,texture,false);
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f = obj.matD;
			var b = f < 0 ? -f : f;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var cx = absX - this.curX;
			var cy = absY - this.curY;
			if(cx + xMax < 0 || cy + yMax < 0 || cx + xMin > this.curWidth || cy + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this = this.engine;
		_this.renderBuffer(this.fixedBuffer,_this.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.offsetX = 0;
	this.offsetY = 0;
	this.ratioX = 1;
	this.ratioY = 1;
	this.viewportX = 0;
	this.viewportY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	get_defaultSmooth: function() {
		return this.ctx.defaultSmooth;
	}
	,set_defaultSmooth: function(v) {
		return this.ctx.defaultSmooth = v;
	}
	,setEvents: function(events) {
		this.events = events;
	}
	,get_zoom: function() {
		var _g = this.scaleMode;
		if(_g._hx_index == 4) {
			var level = _g.level;
			return level | 0;
		} else {
			return 0;
		}
	}
	,set_zoom: function(v) {
		this.set_scaleMode(h2d_ScaleMode.Zoom(v));
		return v;
	}
	,set_scaleMode: function(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	,get_renderer: function() {
		return this.ctx;
	}
	,set_renderer: function(v) {
		this.ctx = v;
		return v;
	}
	,setFixedSize: function(w,h) {
		this.set_scaleMode(h2d_ScaleMode.Stretch(w,h));
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var zoom = _g.zoom;
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * level / engine.width;
			_gthis.ratioY = _gthis.height * level / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		}
	}
	,screenXToViewport: function(mx) {
		return mx * this.width / (this.window.get_width() * this.ratioX) - this.viewportX;
	}
	,screenYToViewport: function(my) {
		return my * this.height / (this.window.get_height() * this.ratioY) - this.viewportY;
	}
	,get_mouseX: function() {
		this.syncPos();
		var dx = this.window.get_mouseX() * this.width / (this.window.get_width() * this.ratioX) - this.viewportX - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		var dy = this.window.get_mouseY() * this.height / (this.window.get_height() * this.ratioY) - this.viewportY - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	,get_mouseY: function() {
		this.syncPos();
		var dy = this.window.get_mouseY() * this.height / (this.window.get_height() * this.ratioY) - this.viewportY - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		var dx = this.window.get_mouseX() * this.width / (this.window.get_width() * this.ratioX) - this.viewportX - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,getInteractive: function(x,y) {
		var pt = this.shapePoint;
		var _g = 0;
		var _g1 = this.interactive;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.posChanged) {
				i.syncPos();
			}
			var dx = x - i.absX;
			var dy = y - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				pt.x = rx + i.shapeX;
				pt.y = ry + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			return i;
		}
		return null;
	}
	,screenToViewport: function(e) {
		e.relX = e.relX * this.width / (this.window.get_width() * this.ratioX) - this.viewportX;
		e.relY = e.relY * this.height / (this.window.get_height() * this.ratioY) - this.viewportY;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				pt.x = rx + i.shapeX;
				pt.y = ry + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,startDrag: function(onEvent,onCancel,refEvent) {
		var _gthis = this;
		this.events.startDrag(function(e) {
			_gthis.screenToViewport(e);
			onEvent(e);
		},onCancel,refEvent);
	}
	,stopDrag: function() {
		this.events.stopDrag();
	}
	,getFocus: function() {
		if(this.events == null) {
			return null;
		}
		var f = this.events.getFocus();
		if(f == null) {
			return null;
		}
		var i = ((f) instanceof h2d_Interactive) ? f : null;
		if(i == null) {
			return null;
		}
		return this.interactive[this.interactive.indexOf(i)];
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,drawImplTo: function(s,texs,outputs) {
		var _g = 0;
		while(_g < texs.length) {
			var t = texs[_g];
			++_g;
			if((t.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
				throw haxe_Exception.thrown("Can only draw to texture created with Target flag");
			}
		}
		this.ctx.engine = h3d_Engine.CURRENT;
		var oldBG = this.ctx.engine.backgroundColor;
		this.ctx.engine.backgroundColor = null;
		this.ctx.engine.begin();
		this.ctx.globalAlpha = this.alpha;
		this.ctx.begin();
		this.ctx.pushTargets(texs);
		if(outputs != null) {
			this.ctx.manager.setOutput(outputs);
		}
		s.drawRec(this.ctx);
		if(outputs != null) {
			this.ctx.manager.setOutput();
		}
		this.ctx.popTarget();
		this.ctx.engine.backgroundColor = oldBG;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,captureBitmap: function(target) {
		var engine = h3d_Engine.CURRENT;
		if(target == null) {
			var tex = new h3d_mat_Texture(this.width,this.height,[h3d_mat_TextureFlags.Target]);
			target = new h2d_Tile(tex,0,0,this.width,this.height);
		}
		engine.begin();
		engine.setRenderZone(target.x | 0,target.y | 0,Math.ceil(target.width),Math.ceil(target.height));
		var tex = target.innerTex;
		engine.pushTarget(tex);
		var ow = this.width;
		var oh = this.height;
		var ox = this.offsetX;
		var oy = this.offsetY;
		var ovx = this.viewportX;
		var ovy = this.viewportY;
		var orx = this.ratioX;
		var ory = this.ratioY;
		this.width = tex.width;
		this.height = tex.height;
		this.ratioX = 1;
		this.ratioY = 1;
		this.offsetX = 0;
		this.offsetY = 0;
		this.viewportX = 0;
		this.viewportY = 0;
		this.posChanged = true;
		this.render(engine);
		engine.popTarget();
		this.width = ow;
		this.height = oh;
		this.ratioX = orx;
		this.ratioY = ory;
		this.offsetX = ox;
		this.offsetY = oy;
		this.viewportX = ovx;
		this.viewportY = ovy;
		this.posChanged = true;
		engine.setRenderZone();
		engine.end();
		return new h2d_Bitmap(target);
	}
	,__class__: h2d_Scene
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromBitmap = function(bmp) {
	var tex = h3d_mat_Texture.fromBitmap(bmp);
	return new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
};
h2d_Tile.autoCut = function(bmp,width,height) {
	bmp.lock();
	if(height == null) {
		height = width;
	}
	var colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
	var tl = [];
	var w = 1;
	var h = 1;
	while(w < bmp.ctx.canvas.width) w <<= 1;
	while(h < bmp.ctx.canvas.height) h <<= 1;
	var tex = new h3d_mat_Texture(w,h);
	var _g = 0;
	var _g1 = bmp.ctx.canvas.height / height | 0;
	while(_g < _g1) {
		var y = _g++;
		var a = [];
		tl[y] = a;
		var _g2 = 0;
		var _g3 = bmp.ctx.canvas.width / width | 0;
		while(_g2 < _g3) {
			var x = _g2++;
			var sz = h2d_Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
			if(sz == null) {
				break;
			}
			a.push(new h2d_Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
		}
	}
	bmp.unlock();
	var main = new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	main.upload(bmp);
	return { main : main, tiles : tl};
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.isEmpty = function(b,px,py,width,height,bg) {
	var empty = true;
	var xmin = width;
	var ymin = height;
	var xmax = 0;
	var ymax = 0;
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = height;
		while(_g2 < _g3) {
			var y = _g2++;
			var color = b.getPixel(x + px,y + py);
			if((color & -16777216) == 0) {
				if(color != 0) {
					b.setPixel(x + px,y + py,0);
				}
				continue;
			}
			if(color != bg) {
				empty = false;
				if(x < xmin) {
					xmin = x;
				}
				if(y < ymin) {
					ymin = y;
				}
				if(x > xmax) {
					xmax = x;
				}
				if(y > ymax) {
					ymax = y;
				}
			}
			if(color == bg && color != 0) {
				b.setPixel(x + px,y + py,0);
			}
		}
	}
	if(empty) {
		return null;
	} else {
		return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
	}
};
h2d_Tile.prototype = {
	get_ix: function() {
		return Math.floor(this.x);
	}
	,get_iy: function() {
		return Math.floor(this.y);
	}
	,get_iwidth: function() {
		return Math.ceil(this.width + this.x) - Math.floor(this.x);
	}
	,get_iheight: function() {
		return Math.ceil(this.height + this.y) - Math.floor(this.y);
	}
	,getTexture: function() {
		return this.innerTex;
	}
	,isDisposed: function() {
		if(this.innerTex != null) {
			var _this = this.innerTex;
			if(_this.t == null) {
				return _this.realloc == null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,switchTexture: function(t) {
		this.setTexture(t.innerTex);
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,center: function() {
		return this.sub(0,0,this.width,this.height,-(this.width * .5),-(this.height * .5));
	}
	,setCenterRatio: function(px,py) {
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		this.dx = -(px * this.width);
		this.dy = -(py * this.height);
	}
	,flipX: function() {
		var tmp = this.u;
		this.u = this.u2;
		this.u2 = tmp;
		this.dx = -this.dx - this.width;
	}
	,flipY: function() {
		var tmp = this.v;
		this.v = this.v2;
		this.v2 = tmp;
		this.dy = -this.dy - this.height;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,scrollDiscrete: function(dx,dy) {
		var tex = this.innerTex;
		this.u += dx / tex.width;
		this.v -= dy / tex.height;
		this.u2 += dx / tex.width;
		this.v2 -= dy / tex.height;
		this.x = this.u * tex.width;
		this.y = this.v * tex.height;
	}
	,dispose: function() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,split: function(frames,vertical,subpixel) {
		if(subpixel == null) {
			subpixel = false;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(frames == null) {
			frames = 0;
		}
		var tl = [];
		if(vertical) {
			if(frames == 0) {
				frames = this.height / this.width | 0;
			}
			var stride = subpixel ? this.height / frames : this.height / frames | 0;
			var _g = 0;
			var _g1 = frames;
			while(_g < _g1) {
				var i = _g++;
				tl.push(this.sub(0,i * stride,this.width,stride));
			}
		} else {
			if(frames == 0) {
				frames = this.width / this.height | 0;
			}
			var stride = subpixel ? this.width / frames : this.width / frames | 0;
			var _g = 0;
			var _g1 = frames;
			while(_g < _g1) {
				var i = _g++;
				tl.push(this.sub(i * stride,0,stride,this.height));
			}
		}
		return tl;
	}
	,gridFlatten: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.height / size | 0;
		while(_g1 < _g2) {
			var y = _g1++;
			var _g3 = 0;
			var _g4 = this.width / size | 0;
			while(_g3 < _g4) {
				var x = _g3++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	,grid: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.width / size | 0;
		while(_g1 < _g2) {
			var x = _g1++;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = this.height / size | 0;
			while(_g4 < _g5) {
				var y = _g4++;
				_g3.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
			_g.push(_g3);
		}
		return _g;
	}
	,toString: function() {
		return "Tile(" + this.x + "," + this.y + "," + this.width + "x" + this.height + (this.dx != 0 || this.dy != 0 ? "," + this.dx + ":" + this.dy : "") + ")";
	}
	,upload: function(bmp) {
		var w = this.innerTex.width;
		var h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	,__class__: h2d_Tile
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_Bounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_Bounds.fromPoints = function(min,max) {
	var b = new h2d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_Bounds.prototype = {
	toIBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var ix = Math.floor(this.xMin * scale);
		var iy = Math.floor(this.yMin * scale);
		var width = Math.ceil(this.xMax * scale) - ix;
		var height = Math.ceil(this.yMax * scale) - iy;
		var b = new h2d_col_IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a > b1 ? b1 : a;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a < b1 ? b1 : a;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a > b1 ? b1 : a;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a < b1 ? b1 : a;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.xMax *= v;
		this.yMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.xMax = mx + dx;
		this.yMax = my + dy;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var x0 = this.xMin;
		var y0 = this.yMin;
		var x1 = this.xMax;
		var y1 = this.yMax;
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
		var x = x0 * cos - y0 * sin;
		var y = x0 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x1 * cos - y0 * sin;
		var y = x1 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x0 * cos - y1 * sin;
		var y = x0 * sin + y1 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x1 * cos - y1 * sin;
		var y = x1 * sin + y1 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_Point(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5);
	}
	,getSize: function() {
		return new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_Point(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(!(this.xMax <= this.xMin)) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.yMin = -1e20;
		this.xMax = 1e20;
		this.yMax = 1e20;
	}
	,clone: function() {
		var b = new h2d_col_Bounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_Point(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_Bounds
};
var h2d_col_Collider = function() { };
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_IBounds = function() {
	this.xMin = 2147483647;
	this.yMin = 2147483647;
	this.xMax = -2147483648;
	this.yMax = -2147483648;
};
h2d_col_IBounds.__name__ = "h2d.col.IBounds";
h2d_col_IBounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_IBounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_IBounds.fromPoints = function(min,max) {
	var b = new h2d_col_IBounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_IBounds.prototype = {
	toBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x0 = this.xMin * scale;
		var y0 = this.yMin * scale;
		var width = (this.xMax - this.xMin) * scale;
		var height = (this.yMax - this.yMin) * scale;
		var b = new h2d_col_Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a > b1 ? b1 : a;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a < b1 ? b1 : a;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a > b1 ? b1 : a;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a < b1 ? b1 : a;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_IPoint(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_IPoint(this.xMin + this.xMax >> 1,this.yMin + this.yMax >> 1);
	}
	,getSize: function() {
		return new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_IPoint(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(this.xMax > this.xMin) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	,all: function() {
		this.xMin = -2147483648;
		this.yMin = -2147483648;
		this.xMax = 2147483647;
		this.yMax = 2147483647;
	}
	,clone: function() {
		var b = new h2d_col_IBounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_IPoint(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_IBounds
};
var h2d_col_IPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
h2d_col_IPoint.__name__ = "h2d.col.IPoint";
h2d_col_IPoint.prototype = {
	toPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_Point(this.x * scale,this.y * scale);
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + this.x + "," + this.y + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,clone: function() {
		return new h2d_col_IPoint(this.x,this.y);
	}
	,__class__: h2d_col_IPoint
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,initTranslate: function(x,y) {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = x;
		this.y = y;
	}
	,initScale: function(sx,sy) {
		this.a = sx;
		this.b = 0;
		this.c = 0;
		this.d = sy;
		this.x = 0;
		this.y = 0;
	}
	,initRotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		this.a = cos;
		this.b = sin;
		this.c = -sin;
		this.d = cos;
		this.x = 0;
		this.y = 0;
	}
	,initSkew: function(sx,sy) {
		var tanX = Math.tan(sx);
		var tanY = Math.tan(sy);
		this.a = 1;
		this.b = tanY;
		this.c = tanX;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,invert: function() {
		this.inverse(this);
	}
	,getDeterminant: function() {
		return this.a * this.d - this.b * this.c;
	}
	,inverse: function(m) {
		var a = m.a;
		var b = m.b;
		var c = m.c;
		var d = m.d;
		var x = m.x;
		var y = m.y;
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	,transform: function(pt) {
		return new h2d_col_Point(pt.x * this.a + pt.y * this.c + this.x,pt.x * this.b + pt.y * this.d + this.y);
	}
	,translate: function(x,y) {
		this.x += x;
		this.y += y;
	}
	,translateX: function(x) {
		this.x += x;
	}
	,translateY: function(y) {
		this.y += y;
	}
	,prependTranslate: function(x,y) {
		this.x += this.a * x + this.c * y;
		this.y += this.b * x + this.d * y;
	}
	,prependTranslateX: function(x) {
		this.x += this.a * x;
	}
	,prependTranslateY: function(y) {
		this.y += this.d * y;
	}
	,multiply: function(a,b) {
		var aa = a.a;
		var ab = a.b;
		var ac = a.c;
		var ad = a.d;
		var ax = a.x;
		var ay = a.y;
		var ba = b.a;
		var bb = b.b;
		var bc = b.c;
		var bd = b.d;
		var bx = b.x;
		var by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	,getScale: function(p) {
		if(p == null) {
			p = new h2d_col_Point();
		}
		p.x = Math.sqrt(this.a * this.a + this.b * this.b);
		p.y = Math.sqrt(this.c * this.c + this.d * this.d);
		if(this.a * this.d - this.b * this.c < 0) {
			p.x *= -1;
			p.y *= -1;
		}
		return p;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,scaleX: function(sx) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
	}
	,scaleY: function(sy) {
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,rotate: function(angle) {
		var _this = h2d_col_Matrix.tmp;
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		_this.a = cos;
		_this.b = sin;
		_this.c = -sin;
		_this.d = cos;
		_this.x = 0;
		_this.y = 0;
		this.multiply(this,h2d_col_Matrix.tmp);
	}
	,skew: function(sx,sy) {
		var aa = this.a;
		var ab = this.b;
		var ac = this.c;
		var ad = this.d;
		var ax = this.x;
		var ay = this.y;
		var bb = Math.tan(sy);
		var bc = Math.tan(sx);
		this.a = aa + ab * bc;
		this.b = aa * bb + ab;
		this.c = ac + ad * bc;
		this.d = ac * bb + ad;
		this.x = ax + ay * bc;
		this.y = ax * bb + ay;
	}
	,skewX: function(sx) {
		var bc = Math.tan(sx);
		this.a += this.b * bc;
		this.c += this.d * bc;
		this.x += this.y * bc;
	}
	,skewY: function(sy) {
		var bb = Math.tan(sy);
		this.b = this.a * bb + this.b;
		this.d = this.c * bb + this.d;
		this.y = this.x * bb + this.y;
	}
	,clone: function() {
		var m = new h2d_col_Matrix();
		m.a = this.a;
		m.b = this.b;
		m.c = this.c;
		m.d = this.d;
		m.x = this.x;
		m.y = this.y;
		return m;
	}
	,getPosition: function(p) {
		if(p == null) {
			p = new h2d_col_Point();
		}
		p.x = this.x;
		p.y = this.y;
		return p;
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this.a) + ", " + hxd_Math.fmt(this.b) + " ]\n" + "  [ " + hxd_Math.fmt(this.c) + ", " + hxd_Math.fmt(this.d) + " ]\n" + "  [ " + hxd_Math.fmt(this.x) + ", " + hxd_Math.fmt(this.y) + " ]\n" + "]";
	}
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	toIPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_IPoint(Math.round(this.x * scale),Math.round(this.y * scale));
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,rotate: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var x2 = this.x * c - this.y * s;
		var y2 = this.x * s + this.y * c;
		this.x = x2;
		this.y = y2;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,scale: function(f) {
		this.x *= f;
		this.y *= f;
		return this;
	}
	,clone: function() {
		return new h2d_col_Point(this.x,this.y);
	}
	,__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,set_enable: function(v) {
		return this.enable = v;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer","LargeBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
	,LargeBuffer: {_hx_index:7,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.LargeBuffer];
var h3d_Buffer = function(vertices,stride,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags) {
	var b = new h3d_Buffer(vertices,stride,flags);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,uploadBytes: function(data,dataPos,vertices) {
		var cur = this;
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			var count = vertices > cur.vertices ? cur.vertices : vertices;
			cur.buffer.uploadVertexBytes(cur.position,count,data,dataPos);
			dataPos += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,readBytes: function(bytes,bytesPosition,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.readVertexBytes(cur.position + startVertice,count,bytes,bytesPosition);
			startVertice = 0;
			bytesPosition += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_BufferOffset = function(buffer,offset) {
	this.buffer = buffer;
	this.offset = offset;
};
h3d_BufferOffset.__name__ = "h3d.BufferOffset";
h3d_BufferOffset.prototype = {
	clone: function() {
		var b = new h3d_BufferOffset(this.buffer,this.offset);
		return b;
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.next = null;
	}
	,__class__: h3d_BufferOffset
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	setFovX: function(fovX,withRatio) {
		var degToRad = Math.PI / 180;
		this.fovY = 2 * Math.atan(Math.tan(fovX * 0.5 * degToRad) / withRatio) / degToRad;
	}
	,getFovX: function() {
		var degToRad = Math.PI / 180;
		var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
		var fovX = halfFovX * 2 / degToRad;
		return fovX;
	}
	,clone: function() {
		var c = new h3d_Camera(this.fovY,this.zoom,this.screenRatio,this.zNear,this.zFar,this.rightHanded);
		var _this = this.pos;
		c.pos = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		var _this = this.up;
		c.up = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		var _this = this.target;
		c.target = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		c.update();
		return c;
	}
	,getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseProj: function() {
		if(this.mprojInv == null) {
			this.mprojInv = new h3d_Matrix();
			this.mprojInv._44 = 0;
		}
		if(this.mprojInv._44 == 0) {
			this.mprojInv.initInverse(this.mproj);
		}
		return this.mprojInv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_Matrix();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,setCubeMap: function(face,position) {
		var dx = 0;
		var dy = 0;
		var dz = 0;
		switch(face) {
		case 0:
			dx = 1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 1:
			dx = -1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 2:
			dy = 1;
			var _this = this.up;
			var x = 0;
			var y = 0;
			var z = -1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 3:
			dy = -1;
			var _this = this.up;
			var x = 0;
			var y = 0;
			var z = 1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 4:
			dz = 1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 5:
			dz = -1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		}
		if(position != null) {
			var _this = this.pos;
			_this.x = position.x;
			_this.y = position.y;
			_this.z = position.z;
			_this.w = position.w;
		}
		var _this = this.target;
		var x = this.pos.x + dx;
		var y = this.pos.y + dy;
		var z = this.pos.z + dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,rayFromScreen: function(pixelX,pixelY) {
		var engine = h3d_Engine.CURRENT;
		var rx = (pixelX / engine.width - 0.5) * 2;
		var ry = (0.5 - pixelY / engine.height) * 2;
		var _this = this.unproject(rx,ry,0);
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p1_x = x;
		var p1_y = y;
		var p1_z = z;
		var _this = this.unproject(rx,ry,1);
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p2_x = x;
		var p2_y = y;
		var p2_z = z;
		var r = new h3d_col_Ray();
		r.px = p1_x;
		r.py = p1_y;
		r.pz = p1_z;
		r.lx = p2_x - p1_x;
		r.ly = p2_y - p1_y;
		r.lz = p2_z - p1_z;
		r.normalize();
		return r;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this = this.target;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,lostUp: function() {
		var _this = this.pos;
		var p2 = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		p2.normalize();
		var v = this.up;
		return Math.abs(p2.x * v.x + p2.y * v.y + p2.z * v.z) > 0.999;
	}
	,movePosAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.pos.x += p_x;
		this.pos.y += p_y;
		this.pos.z += p_z;
	}
	,moveTargetAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.target.x += p_x;
		this.target.y += p_y;
		this.target.z += p_z;
	}
	,forward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 - 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,backward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 + 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this = this.up;
		var x = _this.y * az_z - _this.z * az_y;
		var y = _this.z * az_x - _this.x * az_z;
		var z = _this.x * az_y - _this.y * az_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ax_x = x;
		var ax_y = y;
		var ax_z = z;
		var ax_w = w;
		var k = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k;
		ax_y *= k;
		ax_z *= k;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x = az_y * ax_z - az_z * ax_y;
		var y = az_z * ax_x - az_x * ax_z;
		var z = az_x * ax_y - az_y * ax_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ay_x = x;
		var ay_y = y;
		var ay_z = z;
		var ay_w = w;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(ax_x * v.x + ax_y * v.y + ax_z * v.z);
		var v = this.pos;
		m._42 = -(ay_x * v.x + ay_y * v.y + ay_z * v.z);
		var v = this.pos;
		m._43 = -(az_x * v.x + az_y * v.y + az_z * v.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,project: function(x,y,z,screenWidth,screenHeight,snapToPixel) {
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		var p = new h3d_Vector(x,y,z);
		var m = this.m;
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		p.x = (p.x + 1) * 0.5 * screenWidth;
		p.y = (-p.y + 1) * 0.5 * screenHeight;
		if(snapToPixel) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		}
		return p;
	}
	,load: function(cam) {
		var _this = this.pos;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.target;
		var v = cam.target;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.up;
		var v = cam.up;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		if(cam.orthoBounds != null) {
			this.orthoBounds = new h3d_col_Bounds();
			this.orthoBounds.load(cam.orthoBounds);
		} else {
			this.orthoBounds = null;
		}
		this.fovY = cam.fovY;
		this.screenRatio = cam.screenRatio;
		this.zoom = cam.zoom;
		this.zNear = cam.zNear;
		this.zFar = cam.zFar;
		if(cam.follow != null) {
			this.follow = { pos : cam.follow.pos, target : cam.follow.target};
		} else {
			this.follow = null;
		}
		this.viewX = cam.viewX;
		this.viewY = cam.viewY;
		this.update();
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.getCurrent = function() {
	return h3d_Engine.CURRENT;
};
h3d_Engine.prototype = {
	setDriver: function(d) {
		this.driver = d;
		if(this.mem != null) {
			this.mem.driver = d;
		}
	}
	,setCurrent: function() {
		h3d_Engine.CURRENT = this;
	}
	,init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,driverName: function(details) {
		if(details == null) {
			details = false;
		}
		return this.driver.getDriverName(details);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderTriBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.triIndexes,3,start,max);
	}
	,renderQuadBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.quadIndexes,2,start,max);
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw haxe_Exception.thrown("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.count / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(buffers,indexes,commands) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes.ibuf,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,hasFeature: function(f) {
		return this.driver.hasFeature(f);
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,pushTargets: function(textures) {
		this.pushTarget(this.nullTexture);
		this.targetStack.textures = textures;
		this.needFlushTarget = true;
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,flushTarget: function() {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clearF: function(color,depth,stencil) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color,depth,stencil);
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,dispose: function() {
		this.driver.dispose();
		this.window.removeResizeEvent($bind(this,this.onWindowResize));
	}
	,get_fps: function() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,uploadBytes: function(bytes,dataPos,indices) {
		this.mem.driver.uploadIndexBytes(this.ibuf,0,indices,bytes,dataPos);
	}
	,readBytes: function(bytes,bytesPosition,indices,startIndice) {
		if(startIndice == null) {
			startIndice = 0;
		}
		this.mem.driver.readIndexBytes(this.ibuf,startIndice,indices,bytes,bytesPosition);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.I = function() {
	var m = new h3d_Matrix();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.T = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m = new h3d_Matrix();
	m.initTranslation(x,y,z);
	return m;
};
h3d_Matrix.R = function(x,y,z) {
	var m = new h3d_Matrix();
	m.initRotation(x,y,z);
	return m;
};
h3d_Matrix.S = function(x,y,z) {
	if(z == null) {
		z = 1.0;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	var m = new h3d_Matrix();
	m.initScale(x,y,z);
	return m;
};
h3d_Matrix.lookAtX = function(dir,up,m) {
	if(up == null) {
		up = new h3d_Vector(0,0,1);
	}
	if(m == null) {
		m = new h3d_Matrix();
	}
	var k = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;
	if(k < 1e-10) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = dir.x * k;
	var y = dir.y * k;
	var z = dir.z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var ax_x = x;
	var ax_y = y;
	var ax_z = z;
	var ax_w = 1.;
	var x = up.y * ax_z - up.z * ax_y;
	var y = up.z * ax_x - up.x * ax_z;
	var z = up.x * ax_y - up.y * ax_x;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var _this_w = w;
	var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
	if(k < 1e-10) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = _this_x * k;
	var y = _this_y * k;
	var z = _this_z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var ay_x = x;
	var ay_y = y;
	var ay_z = z;
	var ay_w = 1.;
	if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
		ay_x = ax_y;
		ay_y = ax_z;
		ay_z = ax_x;
	}
	var x = ax_y * ay_z - ax_z * ay_y;
	var y = ax_z * ay_x - ax_x * ay_z;
	var z = ax_x * ay_y - ax_y * ay_x;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var az_x = x;
	var az_y = y;
	var az_z = z;
	var az_w = w;
	m._11 = ax_x;
	m._12 = ax_y;
	m._13 = ax_z;
	m._14 = 0;
	m._21 = ay_x;
	m._22 = ay_y;
	m._23 = ay_z;
	m._24 = 0;
	m._31 = az_x;
	m._32 = az_y;
	m._33 = az_z;
	m._34 = 0;
	m._41 = 0;
	m._42 = 0;
	m._43 = 0;
	m._44 = 1;
	return m;
};
h3d_Matrix.prototype = {
	get_tx: function() {
		return this._41;
	}
	,get_ty: function() {
		return this._42;
	}
	,get_tz: function() {
		return this._43;
	}
	,set_tx: function(v) {
		return this._41 = v;
	}
	,set_ty: function(v) {
		return this._42 = v;
	}
	,set_tz: function(v) {
		return this._43 = v;
	}
	,equal: function(other) {
		if(this._11 == other._11 && this._12 == other._12 && this._13 == other._13 && this._14 == other._14 && this._21 == other._21 && this._22 == other._22 && this._23 == other._23 && this._24 == other._24 && this._31 == other._31 && this._32 == other._32 && this._33 == other._33 && this._34 == other._34 && this._41 == other._41 && this._42 == other._42 && this._43 == other._43) {
			return this._44 == other._44;
		} else {
			return false;
		}
	}
	,zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationX: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = cos;
		this._23 = sin;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = -sin;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationY: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = 0.0;
		this._13 = -sin;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = sin;
		this._32 = 0.0;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationZ: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = sin;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = -sin;
		this._22 = cos;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = x;
		this._42 = y;
		this._43 = z;
		this._44 = 1.0;
	}
	,initScale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 = x;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = y;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = z;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationAxis: function(axis,angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var cos1 = 1 - cos;
		var x = -axis.x;
		var y = -axis.y;
		var z = -axis.z;
		var xx = x * x;
		var yy = y * y;
		var zz = z * z;
		var len = 1. / Math.sqrt(xx + yy + zz);
		x *= len;
		y *= len;
		z *= len;
		var xcos1 = x * cos1;
		var zcos1 = z * cos1;
		this._11 = cos + x * xcos1;
		this._12 = y * xcos1 - z * sin;
		this._13 = x * zcos1 + y * sin;
		this._14 = 0.;
		this._21 = y * xcos1 + z * sin;
		this._22 = cos + y * y * cos1;
		this._23 = y * zcos1 - x * sin;
		this._24 = 0.;
		this._31 = x * zcos1 - y * sin;
		this._32 = y * zcos1 + x * sin;
		this._33 = cos + z * zcos1;
		this._34 = 0.;
		this._41 = 0.;
		this._42 = 0.;
		this._43 = 0.;
		this._44 = 1.;
	}
	,initRotation: function(x,y,z) {
		var cx = Math.cos(x);
		var sx = Math.sin(x);
		var cy = Math.cos(y);
		var sy = Math.sin(y);
		var cz = Math.cos(z);
		var sz = Math.sin(z);
		var cxsy = cx * sy;
		var sxsy = sx * sy;
		this._11 = cy * cz;
		this._12 = cy * sz;
		this._13 = -sy;
		this._14 = 0;
		this._21 = sxsy * cz - cx * sz;
		this._22 = sxsy * sz + cx * cz;
		this._23 = sx * cy;
		this._24 = 0;
		this._31 = cxsy * cz + sx * sz;
		this._32 = cxsy * sz - sx * cz;
		this._33 = cx * cy;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 += x * this._14;
		this._12 += y * this._14;
		this._13 += z * this._14;
		this._21 += x * this._24;
		this._22 += y * this._24;
		this._23 += z * this._24;
		this._31 += x * this._34;
		this._32 += y * this._34;
		this._33 += z * this._34;
		this._41 += x * this._44;
		this._42 += y * this._44;
		this._43 += z * this._44;
	}
	,scale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 *= x;
		this._21 *= x;
		this._31 *= x;
		this._41 *= x;
		this._12 *= y;
		this._22 *= y;
		this._32 *= y;
		this._42 *= y;
		this._13 *= z;
		this._23 *= z;
		this._33 *= z;
		this._43 *= z;
	}
	,rotate: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(this,tmp);
	}
	,rotateAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(this,tmp);
	}
	,getPosition: function(v) {
		if(v == null) {
			v = new h3d_Vector();
		}
		var x = this._41;
		var y = this._42;
		var z = this._43;
		var w = this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		return v;
	}
	,setPosition: function(v) {
		this._41 = v.x;
		this._42 = v.y;
		this._43 = v.z;
		this._44 = v.w;
	}
	,prependTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var vx = this._11 * x + this._21 * y + this._31 * z + this._41;
		var vy = this._12 * x + this._22 * y + this._32 * z + this._42;
		var vz = this._13 * x + this._23 * y + this._33 * z + this._43;
		var vw = this._14 * x + this._24 * y + this._34 * z + this._44;
		this._41 = vx;
		this._42 = vy;
		this._43 = vz;
		this._44 = vw;
	}
	,getScale: function(v) {
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		return v;
	}
	,prependRotation: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(tmp,this);
	}
	,prependRotationAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(tmp,this);
	}
	,prependScale: function(sx,sy,sz) {
		if(sz == null) {
			sz = 1.;
		}
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		var tmp = h3d_Matrix.tmp;
		tmp.initScale(sx,sy,sz);
		this.multiply(tmp,this);
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply3x4inline: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,multiplyValue: function(v) {
		this._11 *= v;
		this._12 *= v;
		this._13 *= v;
		this._14 *= v;
		this._21 *= v;
		this._22 *= v;
		this._23 *= v;
		this._24 *= v;
		this._31 *= v;
		this._32 *= v;
		this._33 *= v;
		this._34 *= v;
		this._41 *= v;
		this._42 *= v;
		this._43 *= v;
		this._44 *= v;
	}
	,invert: function() {
		this.initInverse(this);
	}
	,getDeterminant: function() {
		return this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31);
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,initInverse3x3: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		this._11 = m22 * m33 - m32 * m23;
		this._12 = -m12 * m33 + m32 * m13;
		this._13 = m12 * m23 - m22 * m13;
		this._21 = -m21 * m33 + m31 * m23;
		this._22 = m11 * m33 - m31 * m13;
		this._23 = -m11 * m23 + m21 * m13;
		this._31 = m21 * m32 - m31 * m22;
		this._32 = -m11 * m32 + m31 * m12;
		this._33 = m11 * m22 - m21 * m12;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 = 0;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 = 0;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,front: function() {
		var v = new h3d_Vector(this._11,this._12,this._13);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,right: function() {
		var v = new h3d_Vector(this._21,this._22,this._23);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,up: function() {
		var v = new h3d_Vector(this._31,this._32,this._33);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,transpose: function() {
		var tmp = this._12;
		this._12 = this._21;
		this._21 = tmp;
		tmp = this._13;
		this._13 = this._31;
		this._31 = tmp;
		tmp = this._14;
		this._14 = this._41;
		this._41 = tmp;
		tmp = this._23;
		this._23 = this._32;
		this._32 = tmp;
		tmp = this._24;
		this._24 = this._42;
		this._42 = tmp;
		tmp = this._34;
		this._34 = this._43;
		this._43 = tmp;
	}
	,clone: function() {
		var m = new h3d_Matrix();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,load: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,getFloats: function() {
		return [this._11,this._12,this._13,this._14,this._21,this._22,this._23,this._24,this._31,this._32,this._33,this._34,this._41,this._42,this._43,this._44];
	}
	,getEulerAngles: function() {
		var m = this.clone();
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var s = v;
		m.prependScale(1.0 / s.x,1.0 / s.y,1.0 / s.z);
		var cy = Math.sqrt(m._11 * m._11 + m._12 * m._12);
		if(cy > 0.01) {
			var v1 = new h3d_Vector(Math.atan2(m._23,m._33),Math.atan2(-m._13,cy),Math.atan2(m._12,m._11));
			var v2 = new h3d_Vector(Math.atan2(-m._23,-m._33),Math.atan2(-m._13,-cy),Math.atan2(-m._12,-m._11));
			if(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z < v2.x * v2.x + v2.y * v2.y + v2.z * v2.z) {
				return v1;
			} else {
				return v2;
			}
		} else {
			return new h3d_Vector(Math.atan2(-m._32,m._22),Math.atan2(-m._13,cy),0.0);
		}
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this._11) + ", " + hxd_Math.fmt(this._12) + ", " + hxd_Math.fmt(this._13) + ", " + hxd_Math.fmt(this._14) + " ]\n" + "  [ " + hxd_Math.fmt(this._21) + ", " + hxd_Math.fmt(this._22) + ", " + hxd_Math.fmt(this._23) + ", " + hxd_Math.fmt(this._24) + " ]\n" + "  [ " + hxd_Math.fmt(this._31) + ", " + hxd_Math.fmt(this._32) + ", " + hxd_Math.fmt(this._33) + ", " + hxd_Math.fmt(this._34) + " ]\n" + "  [ " + hxd_Math.fmt(this._41) + ", " + hxd_Math.fmt(this._42) + ", " + hxd_Math.fmt(this._43) + ", " + hxd_Math.fmt(this._44) + " ]\n" + "]";
	}
	,colorHue: function(hue) {
		if(hue == 0.) {
			return;
		}
		var cosA = Math.cos(-hue);
		var sinA = Math.sin(-hue);
		var ch = (1 - cosA) / 3;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorSaturate: function(sat) {
		++sat;
		var is = 1 - sat;
		var r = is * 0.212671;
		var g = is * 0.71516;
		var b = is * 0.072169;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorContrast: function(contrast) {
		var tmp = h3d_Matrix.tmp;
		var v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	,colorLightness: function(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	,colorGain: function(color,alpha) {
		var tmp = h3d_Matrix.tmp;
		tmp._11 = 1 - alpha;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = 1 - alpha;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = 1 - alpha;
		tmp._41 = (color >> 16 & 255) / 255 * alpha;
		tmp._42 = (color >> 8 & 255) / 255 * alpha;
		tmp._43 = (color & 255) / 255 * alpha;
		this.multiply3x4(this,tmp);
	}
	,colorBits: function(bits,blend) {
		var t11 = 0.;
		var t12 = 0.;
		var t13 = 0.;
		var t21 = 0.;
		var t22 = 0.;
		var t23 = 0.;
		var t31 = 0.;
		var t32 = 0.;
		var t33 = 0.;
		var c = bits;
		if((c & 1) == 1) {
			t11 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t12 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t13 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t21 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t22 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t23 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t31 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t32 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t33 = 1;
		}
		c >>= 1;
		var r = t11 + t21 + t31;
		var g = t12 + t22 + t32;
		var b = t13 + t23 + t33;
		if(r > 1) {
			t11 /= r;
			t21 /= r;
			t31 /= r;
		}
		if(g > 1) {
			t12 /= g;
			t22 /= g;
			t32 /= g;
		}
		if(b > 1) {
			t13 /= b;
			t23 /= b;
			t33 /= b;
		}
		var b11 = this._11 * t11 + this._12 * t21 + this._13 * t31;
		var b12 = this._11 * t12 + this._12 * t22 + this._13 * t32;
		var b13 = this._11 * t13 + this._12 * t23 + this._13 * t33;
		var b21 = this._21 * t11 + this._22 * t21 + this._23 * t31;
		var b22 = this._21 * t12 + this._22 * t22 + this._23 * t32;
		var b23 = this._21 * t13 + this._22 * t23 + this._23 * t33;
		var b31 = this._31 * t11 + this._32 * t21 + this._33 * t31;
		var b32 = this._31 * t12 + this._32 * t22 + this._33 * t32;
		var b33 = this._31 * t13 + this._32 * t23 + this._33 * t33;
		var ik = blend;
		var k = 1 - ik;
		this._11 = this._11 * k + b11 * ik;
		this._12 = this._12 * k + b12 * ik;
		this._13 = this._13 * k + b13 * ik;
		this._21 = this._21 * k + b21 * ik;
		this._22 = this._22 * k + b22 * ik;
		this._23 = this._23 * k + b23 * ik;
		this._31 = this._31 * k + b31 * ik;
		this._32 = this._32 * k + b32 * ik;
		this._33 = this._33 * k + b33 * ik;
	}
	,colorAdd: function(c) {
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,colorSet: function(c,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.zero();
		this._44 = alpha;
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,adjustColor: function(col) {
		if(col.hue != null) {
			this.colorHue(col.hue);
		}
		if(col.saturation != null) {
			this.colorSaturate(col.saturation);
		}
		if(col.contrast != null) {
			this.colorContrast(col.contrast);
		}
		if(col.lightness != null) {
			this.colorLightness(col.lightness);
		}
		if(col.gain != null) {
			this.colorGain(col.gain.color,col.gain.alpha);
		}
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,identity: function() {
		this.x = this.y = this.z = 0;
		this.w = 1;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,load: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,clone: function() {
		return new h3d_Quat(this.x,this.y,this.z,this.w);
	}
	,initMoveTo: function(from,to) {
		var hx = from.x + to.x;
		var hy = from.y + to.y;
		var hz = from.z + to.z;
		var h = 1. / Math.sqrt(hx * hx + hy * hy + hz * hz);
		this.x = from.y * hz - from.z * hy;
		this.y = from.z * hx - from.x * hz;
		this.z = from.x * hy - from.y * hx;
		this.w = from.x * hx + from.y * hy + from.z * hz;
		this.normalize();
	}
	,initDirection: function(dir) {
		var x = dir.x;
		var y = dir.y;
		var z = dir.z;
		var w = dir.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var _this_w = w;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ax_x = x;
		var ax_y = y;
		var ax_z = z;
		var ax_w = 1.;
		var x = -ax_y;
		var y = ax_x;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var _this_w = 1.;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ay_x = x;
		var ay_y = y;
		var ay_z = z;
		var ay_w = 1.;
		if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
			ay_x = ax_y;
			ay_y = ax_z;
			ay_z = ax_x;
		}
		var x = ax_y * ay_z - ax_z * ay_y;
		var y = ax_z * ay_x - ax_x * ay_z;
		var z = ax_x * ay_y - ax_y * ay_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		var tr = ax_x + ay_y + az_z;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var is = 1 / s;
			this.x = (ay_z - az_y) * is;
			this.y = (az_x - ax_z) * is;
			this.z = (ax_y - ay_x) * is;
			this.w = 0.25 * s;
		} else if(ax_x > ay_y && ax_x > az_z) {
			var s = Math.sqrt(1.0 + ax_x - ay_y - az_z) * 2;
			var is = 1 / s;
			this.x = 0.25 * s;
			this.y = (ay_x + ax_y) * is;
			this.z = (az_x + ax_z) * is;
			this.w = (ay_z - az_y) * is;
		} else if(ay_y > az_z) {
			var s = Math.sqrt(1.0 + ay_y - ax_x - az_z) * 2;
			var is = 1 / s;
			this.x = (ay_x + ax_y) * is;
			this.y = 0.25 * s;
			this.z = (az_y + ay_z) * is;
			this.w = (az_x - ax_z) * is;
		} else {
			var s = Math.sqrt(1.0 + az_z - ax_x - ay_y) * 2;
			var is = 1 / s;
			this.x = (az_x + ax_z) * is;
			this.y = (az_y + ay_z) * is;
			this.z = 0.25 * s;
			this.w = (ax_y - ay_x) * is;
		}
	}
	,initRotateAxis: function(x,y,z,a) {
		var sin = Math.sin(a / 2);
		var cos = Math.cos(a / 2);
		this.x = x * sin;
		this.y = y * sin;
		this.z = z * sin;
		this.w = cos * Math.sqrt(x * x + y * y + z * z);
		this.normalize();
	}
	,initRotateMatrix: function(m) {
		var tr = m._11 + m._22 + m._33;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var is = 1 / s;
			this.x = (m._23 - m._32) * is;
			this.y = (m._31 - m._13) * is;
			this.z = (m._12 - m._21) * is;
			this.w = 0.25 * s;
		} else if(m._11 > m._22 && m._11 > m._33) {
			var s = Math.sqrt(1.0 + m._11 - m._22 - m._33) * 2;
			var is = 1 / s;
			this.x = 0.25 * s;
			this.y = (m._21 + m._12) * is;
			this.z = (m._31 + m._13) * is;
			this.w = (m._23 - m._32) * is;
		} else if(m._22 > m._33) {
			var s = Math.sqrt(1.0 + m._22 - m._11 - m._33) * 2;
			var is = 1 / s;
			this.x = (m._21 + m._12) * is;
			this.y = 0.25 * s;
			this.z = (m._32 + m._23) * is;
			this.w = (m._31 - m._13) * is;
		} else {
			var s = Math.sqrt(1.0 + m._33 - m._11 - m._22) * 2;
			var is = 1 / s;
			this.x = (m._31 + m._13) * is;
			this.y = (m._32 + m._23) * is;
			this.z = 0.25 * s;
			this.w = (m._12 - m._21) * is;
		}
	}
	,normalize: function() {
		var len = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		if(len < 1e-10) {
			this.x = this.y = this.z = 0;
			this.w = 1;
		} else {
			var m = 1. / Math.sqrt(len);
			this.x *= m;
			this.y *= m;
			this.z *= m;
			this.w *= m;
		}
	}
	,initRotation: function(ax,ay,az) {
		var sinX = Math.sin(ax * 0.5);
		var cosX = Math.cos(ax * 0.5);
		var sinY = Math.sin(ay * 0.5);
		var cosY = Math.cos(ay * 0.5);
		var sinZ = Math.sin(az * 0.5);
		var cosZ = Math.cos(az * 0.5);
		var cosYZ = cosY * cosZ;
		var sinYZ = sinY * sinZ;
		this.x = sinX * cosYZ - cosX * sinYZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
		this.w = cosX * cosYZ + sinX * sinYZ;
	}
	,multiply: function(q1,q2) {
		var x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		var y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		var z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		var w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	,toEuler: function() {
		return this.toMatrix().getEulerAngles();
	}
	,lerp: function(q1,q2,v,nearest) {
		if(nearest == null) {
			nearest = false;
		}
		var v2;
		if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
			v2 = v - 1;
		} else {
			v2 = 1 - v;
		}
		var x = q1.x * v + q2.x * v2;
		var y = q1.y * v + q2.y * v2;
		var z = q1.z * v + q2.z * v2;
		var w = q1.w * v + q2.w * v2;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,slerp: function(q1,q2,v) {
		var cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
		if((cosHalfTheta < 0 ? -cosHalfTheta : cosHalfTheta) >= 1) {
			this.x = q1.x;
			this.y = q1.y;
			this.z = q1.z;
			this.w = q1.w;
			return;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var invSinHalfTheta = 1. / Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
		if((invSinHalfTheta < 0 ? -invSinHalfTheta : invSinHalfTheta) > 1e3) {
			var nearest = true;
			if(nearest == null) {
				nearest = false;
			}
			var v2;
			if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
				v2 = -0.5;
			} else {
				v2 = 0.5;
			}
			var x = q1.x * 0.5 + q2.x * v2;
			var y = q1.y * 0.5 + q2.y * v2;
			var z = q1.z * 0.5 + q2.z * v2;
			var w = q1.w * 0.5 + q2.w * v2;
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return;
		}
		var a = Math.sin((1 - v) * halfTheta) * invSinHalfTheta;
		var b = Math.sin(v * halfTheta) * invSinHalfTheta * (cosHalfTheta < 0 ? -1 : 1);
		this.x = q1.x * a + q2.x * b;
		this.y = q1.y * a + q2.y * b;
		this.z = q1.z * a + q2.z * b;
		this.w = q1.w * a + q2.w * b;
	}
	,conjugate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,negate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		this.w = -this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,getDirection: function() {
		return new h3d_Vector(1 - 2 * (this.y * this.y + this.z * this.z),2 * (this.x * this.y - this.z * this.w),2 * (this.x * this.z + this.y * this.w));
	}
	,toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.fromColor = function(c,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var s = scale / 255;
	return new h3d_Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
};
h3d_Vector.fromArray = function(a) {
	var r = new h3d_Vector();
	if(a.length > 0) {
		r.x = a[0];
	}
	if(a.length > 1) {
		r.y = a[1];
	}
	if(a.length > 2) {
		r.z = a[2];
	}
	if(a.length > 3) {
		r.w = a[3];
	}
	return r;
};
h3d_Vector.prototype = {
	distance: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,distanceSq: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,sub: function(v) {
		return new h3d_Vector(this.x - v.x,this.y - v.y,this.z - v.z,this.w - v.w);
	}
	,add: function(v) {
		return new h3d_Vector(this.x + v.x,this.y + v.y,this.z + v.z,this.w + v.w);
	}
	,cross: function(v) {
		return new h3d_Vector(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x,1);
	}
	,reflect: function(n) {
		var k = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		return new h3d_Vector(this.x - k * n.x,this.y - k * n.y,this.z - k * n.z,1);
	}
	,dot3: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,dot4: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,normalizeFast: function() {
		var k = 1. / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,getNormalized: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		return new h3d_Vector(this.x * k,this.y * k,this.z * k);
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,load: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,scale3: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	,project: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
		this.w = 1;
	}
	,lerp: function(v1,v2,k) {
		var a = v1.x;
		var x = a + k * (v2.x - a);
		var a = v1.y;
		var y = a + k * (v2.y - a);
		var a = v1.z;
		var z = a + k * (v2.z - a);
		var a = v1.w;
		var w = a + k * (v2.w - a);
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,transform3x4: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		this.x = px;
		this.y = py;
		this.z = pz;
		this.w = pw;
	}
	,clone: function() {
		return new h3d_Vector(this.x,this.y,this.z,this.w);
	}
	,toPoint: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,get_a: function() {
		return this.w;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,set_a: function(v) {
		return this.w = v;
	}
	,setColor: function(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
		this.w = (c >>> 24) / 255;
	}
	,makeColor: function(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		var r = hue % 6.2831853071795862;
		hue = r >= 0 ? r : r + 6.2831853071795862;
		var f = 2 * brightness - 1;
		var c = (1 - (f < 0 ? -f : f)) * saturation;
		var f = hue * 3 / 3.14159265358979323 % 2. - 1;
		var x = c * (1 - (f < 0 ? -f : f));
		var m = brightness - c / 2;
		if(hue < 1.0471975511965976) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.0943951023931953) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.1887902047863905) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.2359877559829888) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
		this.w = 1;
	}
	,toColor: function() {
		var f = this.w;
		var f1 = this.x;
		var f2 = this.y;
		var f3 = this.z;
		return ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
	}
	,toColorHSL: function() {
		var a = this.x;
		var b = this.y;
		var a1 = a < b ? b : a;
		var b = this.z;
		var max = a1 < b ? b : a1;
		var a = this.x;
		var b = this.y;
		var a1 = a > b ? b : a;
		var b = this.z;
		var min = a1 > b ? b : a1;
		var h;
		var s;
		var l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			var d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.0471975511965976;
		}
		return new h3d_Vector(h,s,l,this.w);
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function(name) {
	this.objectName = name;
};
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
h3d_anim_AnimatedObject.prototype = {
	clone: function() {
		return new h3d_anim_AnimatedObject(this.objectName);
	}
	,__class__: h3d_anim_AnimatedObject
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getDuration: function() {
		return this.frameCount / (this.sampling * this.speed);
	}
	,getIFrame: function() {
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		return f;
	}
	,unbind: function(objectName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objectName) {
				this.isSync = false;
				o.targetObject = null;
				o.targetSkin = null;
				return;
			}
		}
	}
	,setEvents: function(el) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.frameCount;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(null);
		}
		this.events = _g;
		var e = $getIterator(el);
		while(e.hasNext()) {
			var e1 = e.next();
			if(this.events[e1.frame] == null) {
				this.events[e1.frame] = [];
			}
			this.events[e1.frame].push(e1.data);
		}
	}
	,addEvent: function(frame,data) {
		if(this.events == null) {
			this.events = [];
		}
		if(this.events[frame] == null) {
			this.events[frame] = [data];
		} else {
			this.events[frame].push(data);
		}
	}
	,getEvents: function() {
		return this.events;
	}
	,getObjects: function() {
		return this.objects;
	}
	,setFrame: function(f) {
		this.frame = f;
		this.lastEvent = -1;
		while(this.frame < 0) this.frame += this.frameCount;
		while(this.frame > this.frameCount) this.frame -= this.frameCount;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_Animation(this.name,this.frameCount,this.sampling);
		}
		a.objects = this.objects;
		a.speed = this.speed;
		a.loop = this.loop;
		a.pause = this.pause;
		a.events = this.events;
		a.resourcePath = this.resourcePath;
		return a;
	}
	,initInstance: function() {
		this.isInstance = true;
	}
	,createInstance: function(base) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.objects;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(a.clone());
		}
		var objects = _g;
		var a = this.clone();
		a.objects = objects;
		a.bind(base);
		a.initInstance();
		return a;
	}
	,bind: function(base) {
		var currentSkin = null;
		var _g = 0;
		var _g1 = this.objects.slice();
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(currentSkin != null) {
				var j = currentSkin.skinData.namedJoints.h[a.objectName];
				if(j != null) {
					a.targetSkin = currentSkin;
					a.targetJoint = j.index;
					continue;
				}
			}
			var obj = base.getObjectByName(a.objectName);
			if(obj == null) {
				HxOverrides.remove(this.objects,a);
				continue;
			}
			var joint = ((obj) instanceof h3d_scene_Joint) ? obj : null;
			if(joint != null) {
				currentSkin = joint.parent;
				a.targetSkin = currentSkin;
				a.targetJoint = joint.index;
			} else {
				a.targetObject = obj;
			}
		}
		this.isSync = false;
	}
	,getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,initAndBind: function(obj) {
		this.bind(obj);
		this.initInstance();
		this.pause = true;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: h3d_anim_Animation
};
var h3d_anim_DataLayout = $hxEnums["h3d.anim.DataLayout"] = { __ename__ : true, __constructs__ : ["Position","Rotation","Scale","UV","Alpha","Property","SingleFrame"]
	,Position: {_hx_index:0,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Rotation: {_hx_index:1,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Scale: {_hx_index:2,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,UV: {_hx_index:3,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Alpha: {_hx_index:4,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Property: {_hx_index:5,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,SingleFrame: {_hx_index:6,__enum__:"h3d.anim.DataLayout",toString:$estr}
};
h3d_anim_DataLayout.__empty_constructs__ = [h3d_anim_DataLayout.Position,h3d_anim_DataLayout.Rotation,h3d_anim_DataLayout.Scale,h3d_anim_DataLayout.UV,h3d_anim_DataLayout.Alpha,h3d_anim_DataLayout.Property,h3d_anim_DataLayout.SingleFrame];
var h3d_anim_BufferObject = function(objectName,dataOffset) {
	h3d_anim_AnimatedObject.call(this,objectName);
	this.dataOffset = dataOffset;
};
h3d_anim_BufferObject.__name__ = "h3d.anim.BufferObject";
h3d_anim_BufferObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_BufferObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	getStride: function() {
		var stride = 0;
		if((this.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
			stride += 2;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
			++stride;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
			++stride;
		}
		return stride;
	}
	,clone: function() {
		var o = new h3d_anim_BufferObject(this.objectName,this.dataOffset);
		o.layout = this.layout;
		o.propName = this.propName;
		return o;
	}
	,__class__: h3d_anim_BufferObject
});
var h3d_anim_BufferAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
h3d_anim_BufferAnimation.__name__ = "h3d.anim.BufferAnimation";
h3d_anim_BufferAnimation.__super__ = h3d_anim_Animation;
h3d_anim_BufferAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	setData: function(data,stride) {
		this.data = data;
		this.stride = stride;
	}
	,addObject: function(objName,offset) {
		var f = new h3d_anim_BufferObject(objName,offset);
		this.objects.push(f);
		return f;
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_BufferAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		var la = ((a) instanceof h3d_anim_BufferAnimation) ? a : null;
		la.setData(this.data,this.stride);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if((a.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				a.propCurrentValue = this.data[a.dataOffset];
			}
			var tmp;
			if((a.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe_Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
				a.matrix = new h3d_Matrix();
				a.matrix.identity();
				if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) == 0 && a.targetSkin != null) {
					var m2 = a.targetSkin.getSkinData().allJoints[a.targetJoint].defMat;
					a.matrix._14 = m2._41;
					a.matrix._24 = m2._42;
					a.matrix._34 = m2._43;
				}
			}
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return ((o2.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1) - ((o1.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		var _gthis = this;
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			var layout = o.layout;
			var offset1 = this.stride * frame1 + o.dataOffset;
			var offset2 = this.stride * frame2 + o.dataOffset;
			var frame11 = frame1;
			var frame21 = frame2;
			if((layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
				offset2 = o.dataOffset;
				offset1 = offset2;
			}
			var m = o.matrix;
			if(m != null) {
				if((layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
					m._41 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._42 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._43 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
				} else {
					m._41 = m._14;
					m._42 = m._24;
					m._43 = m._34;
				}
				if((layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
					var q1x = this.data[offset1++];
					var q1y = this.data[offset1++];
					var q1z = this.data[offset1++];
					var f = 1 - (q1x * q1x + q1y * q1y + q1z * q1z);
					var q1w = Math.sqrt(f < 0 ? -f : f);
					var q2x = this.data[offset2++];
					var q2y = this.data[offset2++];
					var q2z = this.data[offset2++];
					var f1 = 1 - (q2x * q2x + q2y * q2y + q2z * q2z);
					var q2w = Math.sqrt(f1 < 0 ? -f1 : f1);
					var dot = q1x * q2x + q1y * q2y + q1z * q2z + q1w * q2w;
					var q2 = dot < 0 ? -k2 : k2;
					var qx = q1x * k1 + q2x * q2;
					var qy = q1y * k1 + q2y * q2;
					var qz = q1z * k1 + q2z * q2;
					var qw = q1w * k1 + q2w * q2;
					var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
					qx *= ql;
					qy *= ql;
					qz *= ql;
					qw *= ql;
					if(decompose) {
						m._12 = qx;
						m._13 = qy;
						m._21 = qz;
						m._23 = qw;
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						} else {
							m._11 = 1;
							m._22 = 1;
							m._33 = 1;
						}
					} else {
						var xx = qx * qx;
						var xy = qx * qy;
						var xz = qx * qz;
						var xw = qx * qw;
						var yy = qy * qy;
						var yz = qy * qz;
						var yw = qy * qw;
						var zz = qz * qz;
						var zw = qz * qw;
						m._11 = 1 - 2 * (yy + zz);
						m._12 = 2 * (xy + zw);
						m._13 = 2 * (xz - yw);
						m._21 = 2 * (xy - zw);
						m._22 = 1 - 2 * (xx + zz);
						m._23 = 2 * (yz + xw);
						m._31 = 2 * (xz + yw);
						m._32 = 2 * (yz - xw);
						m._33 = 1 - 2 * (xx + yy);
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							var sx = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sy = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sz = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._11 *= sx;
							m._12 *= sx;
							m._13 *= sx;
							m._21 *= sy;
							m._22 *= sy;
							m._23 *= sy;
							m._31 *= sz;
							m._32 *= sz;
							m._33 *= sz;
						}
					}
				} else {
					m._12 = 0;
					m._13 = 0;
					m._21 = 0;
					m._23 = decompose ? 1 : 0;
					if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
						m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				}
				if(o.targetSkin != null) {
					o.targetSkin.currentRelPose[o.targetJoint] = m;
					o.targetSkin.jointsUpdated = true;
				} else {
					var _this = o.targetObject;
					_this.defaultTransform = m;
					var f2 = 1;
					var b = true;
					if(b) {
						_this.flags |= f2;
					} else {
						_this.flags &= ~f2;
					}
				}
			}
			if((layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
				var mat = o.targetObject.toMesh().material;
				var s = mat.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat.passes.addShader(new h3d_shader_UVDelta());
					mat.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = this.data[offset1++];
				var v2 = this.data[offset2++];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = this.data[offset1++];
				var v21 = this.data[offset2++];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				var mat1 = o.targetObject.toMesh().material;
				if(mat1.blendMode == h2d_BlendMode.None) {
					mat1.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat1.mshader.color__.w = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				o.propCurrentValue = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_BufferAnimation
});
var h3d_anim_LinearFrame = function() {
};
h3d_anim_LinearFrame.__name__ = "h3d.anim.LinearFrame";
h3d_anim_LinearFrame.prototype = {
	toMatrix: function() {
		var m = new h3d_Matrix();
		new h3d_Quat(this.qx,this.qy,this.qz,this.qw).toMatrix(m);
		m.prependScale(this.sx,this.sy,this.sz);
		m.translate(this.tx,this.ty,this.tz);
		return m;
	}
	,__class__: h3d_anim_LinearFrame
};
var h3d_anim_LinearObject = function(name) {
	this.hasPosition = true;
	h3d_anim_AnimatedObject.call(this,name);
};
h3d_anim_LinearObject.__name__ = "h3d.anim.LinearObject";
h3d_anim_LinearObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_LinearObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	clone: function() {
		var o = new h3d_anim_LinearObject(this.objectName);
		o.hasPosition = this.hasPosition;
		o.hasRotation = this.hasRotation;
		o.hasScale = this.hasScale;
		o.frames = this.frames;
		o.alphas = this.alphas;
		o.uvs = this.uvs;
		o.propName = this.propName;
		o.propValues = this.propValues;
		return o;
	}
	,__class__: h3d_anim_LinearObject
});
var h3d_anim_LinearAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
h3d_anim_LinearAnimation.__name__ = "h3d.anim.LinearAnimation";
h3d_anim_LinearAnimation.__super__ = h3d_anim_Animation;
h3d_anim_LinearAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	addCurve: function(objName,frames,hasPos,hasRot,hasScale) {
		var f = new h3d_anim_LinearObject(objName);
		f.frames = frames;
		f.hasPosition = hasPos;
		f.hasRotation = hasRot;
		f.hasScale = hasScale;
		this.objects.push(f);
	}
	,addAlphaCurve: function(objName,alphas) {
		var f = new h3d_anim_LinearObject(objName);
		f.alphas = alphas;
		this.objects.push(f);
	}
	,addUVCurve: function(objName,uvs) {
		var f = new h3d_anim_LinearObject(objName);
		f.uvs = uvs;
		this.objects.push(f);
	}
	,addPropCurve: function(objName,propName,values) {
		var f = new h3d_anim_LinearObject(objName);
		f.propName = propName;
		f.propValues = values;
		this.objects.push(f);
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_LinearAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if(a.propValues != null) {
				a.propCurrentValue = a.propValues[0];
				continue;
			}
			var tmp;
			if(a.alphas != null) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe_Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if(a.uvs != null || a.alphas != null) {
				continue;
			}
			a.matrix = new h3d_Matrix();
			a.matrix.identity();
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return (o2.frames == null ? 10 : o2.frames.length) - (o1.frames == null ? 10 : o1.frames.length);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			if(o.alphas != null) {
				var mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d_BlendMode.None) {
					mat.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat.mshader.color__.w = o.alphas[frame1] * k1 + o.alphas[frame2] * k2;
				continue;
			}
			if(o.uvs != null) {
				var mat1 = o.targetObject.toMesh().material;
				var s = mat1.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat1.passes.addShader(new h3d_shader_UVDelta());
					mat1.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = o.uvs[frame1 << 1];
				var v2 = o.uvs[frame2 << 1];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = o.uvs[frame1 << 1 | 1];
				var v21 = o.uvs[frame2 << 1 | 1];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
				continue;
			}
			if(o.propValues != null) {
				o.propCurrentValue = o.propValues[frame1] * k1 + o.propValues[frame2] * k2;
				continue;
			}
			var frame11 = frame1;
			var frame21 = frame2;
			if(o.frames.length == 1) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
			}
			var f1 = o.frames[frame11];
			var f2 = o.frames[frame21];
			var m = o.matrix;
			m._41 = f1.tx * k1 + f2.tx * k2;
			m._42 = f1.ty * k1 + f2.ty * k2;
			m._43 = f1.tz * k1 + f2.tz * k2;
			if(o.hasRotation) {
				var dot = f1.qx * f2.qx + f1.qy * f2.qy + f1.qz * f2.qz + f1.qw * f2.qw;
				var q2 = dot < 0 ? -k2 : k2;
				var qx = f1.qx * k1 + f2.qx * q2;
				var qy = f1.qy * k1 + f2.qy * q2;
				var qz = f1.qz * k1 + f2.qz * q2;
				var qw = f1.qw * k1 + f2.qw * q2;
				var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
				qx *= ql;
				qy *= ql;
				qz *= ql;
				qw *= ql;
				if(decompose) {
					m._12 = qx;
					m._13 = qy;
					m._21 = qz;
					m._23 = qw;
					if(o.hasScale) {
						m._11 = f1.sx * k1 + f2.sx * k2;
						m._22 = f1.sy * k1 + f2.sy * k2;
						m._33 = f1.sz * k1 + f2.sz * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				} else {
					var xx = qx * qx;
					var xy = qx * qy;
					var xz = qx * qz;
					var xw = qx * qw;
					var yy = qy * qy;
					var yz = qy * qz;
					var yw = qy * qw;
					var zz = qz * qz;
					var zw = qz * qw;
					m._11 = 1 - 2 * (yy + zz);
					m._12 = 2 * (xy + zw);
					m._13 = 2 * (xz - yw);
					m._21 = 2 * (xy - zw);
					m._22 = 1 - 2 * (xx + zz);
					m._23 = 2 * (yz + xw);
					m._31 = 2 * (xz + yw);
					m._32 = 2 * (yz - xw);
					m._33 = 1 - 2 * (xx + yy);
					if(o.hasScale) {
						var sx = f1.sx * k1 + f2.sx * k2;
						var sy = f1.sy * k1 + f2.sy * k2;
						var sz = f1.sz * k1 + f2.sz * k2;
						m._11 *= sx;
						m._12 *= sx;
						m._13 *= sx;
						m._21 *= sy;
						m._22 *= sy;
						m._23 *= sy;
						m._31 *= sz;
						m._32 *= sz;
						m._33 *= sz;
					}
				}
			} else {
				m._12 = 0;
				m._13 = 0;
				m._21 = 0;
				m._23 = decompose ? 1 : 0;
				if(o.hasScale) {
					m._11 = f1.sx * k1 + f2.sx * k2;
					m._22 = f1.sy * k1 + f2.sy * k2;
					m._33 = f1.sz * k1 + f2.sz * k2;
				} else {
					m._11 = 1;
					m._22 = 1;
					m._33 = 1;
				}
			}
			if(o.targetSkin != null) {
				o.targetSkin.currentRelPose[o.targetJoint] = o.matrix;
				o.targetSkin.jointsUpdated = true;
			} else {
				var _this = o.targetObject;
				var v = o.matrix;
				_this.defaultTransform = v;
				var f = 1;
				var b = true;
				if(b) {
					_this.flags |= f;
				} else {
					_this.flags &= ~f;
				}
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_LinearAnimation
});
var h3d_anim_Joint = function() {
	this.bindIndex = -1;
	this.splitIndex = -1;
	this.subs = [];
};
h3d_anim_Joint.__name__ = "h3d.anim.Joint";
h3d_anim_Joint.prototype = {
	__class__: h3d_anim_Joint
};
var h3d_anim__$Skin_Permut = function() {
};
h3d_anim__$Skin_Permut.__name__ = "h3d.anim._Skin.Permut";
h3d_anim__$Skin_Permut.prototype = {
	__class__: h3d_anim__$Skin_Permut
};
var h3d_anim__$Skin_Influence = function(j,w) {
	this.j = j;
	this.w = w;
};
h3d_anim__$Skin_Influence.__name__ = "h3d.anim._Skin.Influence";
h3d_anim__$Skin_Influence.prototype = {
	__class__: h3d_anim__$Skin_Influence
};
var h3d_anim_Skin = function(name,vertexCount,bonesPerVertex) {
	this.name = name;
	this.vertexCount = vertexCount;
	this.bonesPerVertex = bonesPerVertex;
	if(vertexCount > 0) {
		var this1 = new Array(vertexCount * bonesPerVertex);
		this.vertexJoints = this1;
		var this1 = new Array(vertexCount * bonesPerVertex);
		this.vertexWeights = this1;
		this.envelop = [];
	}
};
h3d_anim_Skin.__name__ = "h3d.anim.Skin";
h3d_anim_Skin.prototype = {
	setJoints: function(joints,roots) {
		this.rootJoints = roots;
		this.allJoints = joints;
		this.namedJoints = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < joints.length) {
			var j = joints[_g];
			++_g;
			if(j.name != null) {
				this.namedJoints.h[j.name] = j;
			}
		}
	}
	,addInfluence: function(vid,j,w) {
		var il = this.envelop[vid];
		if(il == null) {
			il = this.envelop[vid] = [];
		}
		il.push(new h3d_anim__$Skin_Influence(j,w));
	}
	,sortInfluences: function(i1,i2) {
		if(i2.w > i1.w) {
			return 1;
		} else {
			return -1;
		}
	}
	,isSplit: function() {
		return this.splitJoints != null;
	}
	,initWeights: function() {
		this.boundJoints = [];
		var pos = 0;
		var _g = 0;
		var _g1 = this.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var il = this.envelop[i];
			if(il == null) {
				il = [];
			}
			haxe_ds_ArraySort.sort(il,$bind(this,this.sortInfluences));
			if(il.length > this.bonesPerVertex) {
				il = il.slice(0,this.bonesPerVertex);
			}
			var tw = 0.;
			var _g2 = 0;
			while(_g2 < il.length) {
				var i1 = il[_g2];
				++_g2;
				tw += i1.w;
			}
			tw = 1 / tw;
			var _g3 = 0;
			var _g4 = this.bonesPerVertex;
			while(_g3 < _g4) {
				var i2 = _g3++;
				var i3 = il[i2];
				if(i3 == null) {
					this.vertexJoints[pos] = 0;
					this.vertexWeights[pos] = 0;
				} else {
					if(i3.j.bindIndex == -1) {
						i3.j.bindIndex = this.boundJoints.length;
						this.boundJoints.push(i3.j);
					}
					this.vertexJoints[pos] = i3.j.bindIndex;
					this.vertexWeights[pos] = i3.w * tw;
				}
				++pos;
			}
		}
		this.envelop = null;
	}
	,sortByBindIndex: function(j1,j2) {
		return j1.bindIndex - j2.bindIndex;
	}
	,isSub: function(a,b) {
		var j = 0;
		var max = b.length;
		var _g = 0;
		while(_g < a.length) {
			var e = a[_g];
			++_g;
			while(e != b[j++]) if(j >= max) {
				return false;
			}
		}
		return true;
	}
	,merge: function(permuts) {
		var _g = 0;
		while(_g < permuts.length) {
			var p1 = permuts[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < permuts.length) {
				var p2 = permuts[_g1];
				++_g1;
				if(p1 != p2 && p1.material == p2.material && this.isSub(p1.joints,p2.joints)) {
					var _g2 = 0;
					var _g3 = p1.triangles;
					while(_g2 < _g3.length) {
						var t = _g3[_g2];
						++_g2;
						p2.triangles.push(t);
					}
					HxOverrides.remove(permuts,p1);
					return true;
				}
			}
		}
		return false;
	}
	,jointsDiff: function(p1,p2) {
		var diff = 0;
		var i = 0;
		var j = 0;
		var imax = p1.joints.length;
		var jmax = p2.joints.length;
		while(i < imax && j < jmax) {
			var j1 = p1.joints[i];
			var j2 = p2.joints[j];
			if(j1 == j2) {
				++i;
				++j;
			} else {
				++diff;
				if(j1.bindIndex < j2.bindIndex) {
					++i;
				} else {
					++j;
				}
			}
		}
		return diff + (imax - i) + (jmax - j);
	}
	,split: function(maxBones,index,triangleMaterials) {
		if(this.splitJoints != null) {
			return true;
		}
		if(this.boundJoints.length <= maxBones) {
			return false;
		}
		this.splitJoints = [];
		var this1 = new Array(index.length / 3 | 0);
		this.triangleGroups = this1;
		var permuts = [];
		var _g = 0;
		var _g1 = index.length / 3 | 0;
		while(_g < _g1) {
			var tri = _g++;
			var iid = tri * 3;
			var mid = triangleMaterials == null ? 0 : triangleMaterials[tri];
			var jl = [];
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var vid = index[iid + i];
				var _g3 = 0;
				var _g4 = this.bonesPerVertex;
				while(_g3 < _g4) {
					var b = _g3++;
					var bidx = vid * this.bonesPerVertex + b;
					if(this.vertexWeights[bidx] == 0) {
						continue;
					}
					var j = this.boundJoints[this.vertexJoints[bidx]];
					if(j.splitIndex != iid) {
						j.splitIndex = iid;
						jl.push(j);
					}
				}
			}
			jl.sort($bind(this,this.sortByBindIndex));
			var _g5 = 0;
			while(_g5 < permuts.length) {
				var p2 = permuts[_g5];
				++_g5;
				if(p2.material == mid && this.isSub(jl,p2.joints)) {
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var _g6 = 0;
			while(_g6 < permuts.length) {
				var p21 = permuts[_g6];
				++_g6;
				if(p21.material == mid && this.isSub(p21.joints,jl)) {
					p21.joints = jl;
					p21.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var pr = new h3d_anim__$Skin_Permut();
			pr.joints = jl;
			pr.triangles = [tri];
			pr.material = mid;
			permuts.push(pr);
		}
		while(true) {
			while(this.merge(permuts)) {
			}
			var minDif = 100000;
			var minTot = 100000;
			var minP1 = null;
			var minP2 = null;
			var _g = 0;
			var _g1 = permuts.length;
			while(_g < _g1) {
				var i = _g++;
				var p1 = permuts[i];
				if(p1.joints.length == maxBones) {
					continue;
				}
				var _g2 = i + 1;
				var _g3 = permuts.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var p2 = permuts[j];
					if(p2.joints.length == maxBones || p1.material != p2.material) {
						continue;
					}
					var count = this.jointsDiff(p1,p2);
					var tot = count + (p1.joints.length + p2.joints.length - count >> 1);
					if(tot > maxBones || tot > minTot || tot == minTot && count > minDif) {
						continue;
					}
					minDif = count;
					minTot = tot;
					minP1 = p1;
					minP2 = p2;
				}
			}
			if(minP1 == null) {
				break;
			}
			var p11 = minP1;
			var p21 = minP2;
			var _g4 = 0;
			var _g5 = p11.joints;
			while(_g4 < _g5.length) {
				var j1 = _g5[_g4];
				++_g4;
				HxOverrides.remove(p21.joints,j1);
				p21.joints.push(j1);
			}
			p21.joints.sort($bind(this,this.sortByBindIndex));
			var _g6 = 0;
			var _g7 = p11.triangles;
			while(_g6 < _g7.length) {
				var t = _g7[_g6];
				++_g6;
				p21.triangles.push(t);
			}
			HxOverrides.remove(permuts,p11);
		}
		var _g = 0;
		var _g1 = permuts.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = permuts[i].triangles;
			while(_g2 < _g3.length) {
				var tri = _g3[_g2];
				++_g2;
				this.triangleGroups[tri] = i;
			}
		}
		var jointsPermuts = [];
		var _g = 0;
		var _g1 = this.boundJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			while(_g2 < permuts.length) {
				var p = permuts[_g2];
				++_g2;
				if(p.joints.indexOf(j) >= 0) {
					pl.push(p);
				}
			}
			jointsPermuts.push({ j : j, pl : pl});
		}
		jointsPermuts.sort(function(j1,j2) {
			return j2.pl.length - j1.pl.length;
		});
		var _g = 0;
		while(_g < permuts.length) {
			var p = permuts[_g];
			++_g;
			p.indexedJoints = [];
		}
		var _g = 0;
		while(_g < jointsPermuts.length) {
			var j = jointsPermuts[_g];
			++_g;
			j.j.splitIndex = -1;
			var _g1 = 0;
			var _g2 = maxBones;
			while(_g1 < _g2) {
				var id = _g1++;
				var ok = true;
				var _g3 = 0;
				var _g4 = j.pl;
				while(_g3 < _g4.length) {
					var p = _g4[_g3];
					++_g3;
					if(p.indexedJoints[id] != null) {
						ok = false;
						break;
					}
				}
				if(ok) {
					j.j.splitIndex = id;
					var _g5 = 0;
					var _g6 = j.pl;
					while(_g5 < _g6.length) {
						var p1 = _g6[_g5];
						++_g5;
						p1.indexedJoints[id] = j.j;
					}
					break;
				}
			}
			if(j.j.splitIndex < 0) {
				throw haxe_Exception.thrown("Failed to assign index while spliting skin");
			}
		}
		this.splitJoints = [];
		var _g = 0;
		while(_g < permuts.length) {
			var p = permuts[_g];
			++_g;
			var jl = [];
			var _g1 = 0;
			var _g2 = p.indexedJoints.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var j = p.indexedJoints[i];
				if(j == null) {
					j = this.boundJoints[0];
				}
				jl.push(j);
			}
			this.splitJoints.push({ material : p.material, joints : jl});
		}
		var _g = 0;
		var _g1 = this.vertexJoints.length;
		while(_g < _g1) {
			var i = _g++;
			this.vertexJoints[i] = this.boundJoints[this.vertexJoints[i]].splitIndex;
		}
		return true;
	}
	,__class__: h3d_anim_Skin
};
var h3d_col_Collider = function() { };
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.fromPoints = function(min,max) {
	var b = new h3d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.zMin = min.z;
	b.xMax = max.x;
	b.yMax = max.y;
	b.zMax = max.z;
	return b;
};
h3d_col_Bounds.fromValues = function(x,y,z,dx,dy,dz) {
	var b = new h3d_col_Bounds();
	b.xMin = x;
	b.yMin = y;
	b.zMin = z;
	b.xMax = x + dx;
	b.yMax = y + dy;
	b.zMax = z + dz;
	return b;
};
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,inSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var c_x = x;
		var c_y = y;
		var c_z = z;
		var a = this.xMin;
		var a1 = s.x;
		var b = this.xMax;
		var b1 = a1 > b ? b : a1;
		var x = a < b1 ? b1 : a;
		var a = this.yMin;
		var a1 = s.y;
		var b = this.yMax;
		var b1 = a1 > b ? b : a1;
		var y = a < b1 ? b1 : a;
		var a = this.zMin;
		var a1 = s.z;
		var b = this.zMax;
		var b1 = a1 > b ? b : a1;
		var z = a < b1 ? b1 : a;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var dx = p_x - c_x;
		var dy = p_y - c_y;
		var dz = p_z - c_z;
		return dx * dx + dy * dy + dz * dz < s.r * s.r;
	}
	,testPlane: function(p) {
		var a = p.nx;
		var b = p.ny;
		var c = p.nz;
		var dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		return dd + rr - p.d * 2;
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,inFrustumDetails: function(mvp,checkZ) {
		if(checkZ == null) {
			checkZ = true;
		}
		var ret = 1;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = mvp._44 + mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._44 - mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = mvp._44 + mvp._42;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._44 - mvp._42;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		if(checkZ) {
			var p_nx = mvp._13;
			var p_ny = mvp._23;
			var p_nz = mvp._33;
			var p_d = mvp._43;
			var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
			if(m + p_d < 0) {
				return -1;
			}
			var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
			if(n + p_d < 0) {
				ret = 0;
			}
			var p_nx = mvp._14 - mvp._13;
			var p_ny = mvp._24 - mvp._23;
			var p_nz = mvp._34 - mvp._33;
			var p_d = mvp._44 - mvp._43;
			var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
			if(m + p_d < 0) {
				return -1;
			}
			var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
			if(n + p_d < 0) {
				ret = 0;
			}
		}
		return ret;
	}
	,transform3x3: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,collide: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.zMin > b.zMax || this.xMax < b.xMin || this.yMax < b.yMin || this.zMax < b.zMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin && p.y < this.yMax && p.z >= this.zMin) {
			return p.z < this.zMax;
		} else {
			return false;
		}
	}
	,add: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
		if(b.zMin < this.zMin) {
			this.zMin = b.zMin;
		}
		if(b.zMax > this.zMax) {
			this.zMax = b.zMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
		if(p.z < this.zMin) {
			this.zMin = p.z;
		}
		if(p.z > this.zMax) {
			this.zMax = p.z;
		}
	}
	,addPos: function(x,y,z) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(z < this.zMin) {
			this.zMin = z;
		}
		if(z > this.zMax) {
			this.zMax = z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,offset: function(dx,dy,dz) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
		this.zMin += dz;
		this.zMax += dz;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
		this.zMin = p.z;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
		this.zMax = p.z;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.zMin *= v;
		this.xMax *= v;
		this.yMax *= v;
		this.zMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,getMin: function() {
		return new h3d_col_Point(this.xMin,this.yMin,this.zMin);
	}
	,getCenter: function() {
		return new h3d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5);
	}
	,getSize: function() {
		return new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin);
	}
	,getMax: function() {
		return new h3d_col_Point(this.xMax,this.yMax,this.zMax);
	}
	,get_xSize: function() {
		return this.xMax - this.xMin;
	}
	,get_ySize: function() {
		return this.yMax - this.yMin;
	}
	,get_zSize: function() {
		return this.zMax - this.zMin;
	}
	,set_xSize: function(v) {
		this.xMax = this.xMin + v;
		return v;
	}
	,set_ySize: function(v) {
		this.yMax = this.yMin + v;
		return v;
	}
	,set_zSize: function(v) {
		this.zMax = this.zMin + v;
		return v;
	}
	,isEmpty: function() {
		if(!(this.xMax < this.xMin || this.yMax < this.yMin)) {
			return this.zMax < this.zMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.xMax = 1e20;
		this.yMin = -1e20;
		this.yMax = 1e20;
		this.zMin = -1e20;
		this.zMax = 1e20;
	}
	,clone: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.xMin;
		b.xMax = this.xMax;
		b.yMin = this.yMin;
		b.yMax = this.yMax;
		b.zMin = this.zMin;
		b.zMax = this.zMax;
		return b;
	}
	,toString: function() {
		return "Bounds{" + Std.string(new h3d_col_Point(this.xMin,this.yMin,this.zMin)) + "," + Std.string(new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin)) + "}";
	}
	,toSphere: function() {
		var dx = this.xMax - this.xMin;
		var dy = this.yMax - this.yMin;
		var dz = this.zMax - this.zMin;
		return new h3d_col_Sphere((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_OptimizedCollider = function(a,b) {
	this.a = a;
	this.b = b;
};
h3d_col_OptimizedCollider.__name__ = "h3d.col.OptimizedCollider";
h3d_col_OptimizedCollider.__interfaces__ = [h3d_col_Collider,hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_OptimizedCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		if(this.a.rayIntersection(r,bestMatch) < 0) {
			return -1;
		}
		return this.b.rayIntersection(r,bestMatch);
	}
	,contains: function(p) {
		if(this.a.contains(p)) {
			return this.b.contains(p);
		} else {
			return false;
		}
	}
	,inFrustum: function(f,m) {
		if(this.a.inFrustum(f,m)) {
			return this.b.inFrustum(f,m);
		} else {
			return false;
		}
	}
	,inSphere: function(s) {
		if(this.a.inSphere(s)) {
			return this.b.inSphere(s);
		} else {
			return false;
		}
	}
	,__class__: h3d_col_OptimizedCollider
};
var h3d_col_GroupCollider = function(colliders) {
	this.colliders = colliders;
};
h3d_col_GroupCollider.__name__ = "h3d.col.GroupCollider";
h3d_col_GroupCollider.__interfaces__ = [h3d_col_Collider];
h3d_col_GroupCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var best = -1.;
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = c.rayIntersection(r,bestMatch);
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
		}
		return best;
	}
	,contains: function(p) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.contains(p)) {
				return true;
			}
		}
		return false;
	}
	,inFrustum: function(f,m) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inFrustum(f,m)) {
				return true;
			}
		}
		return false;
	}
	,inSphere: function(s) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inSphere(s)) {
				return true;
			}
		}
		return false;
	}
	,__class__: h3d_col_GroupCollider
};
var h3d_col_FPoint = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
h3d_col_FPoint.__name__ = "h3d.col.FPoint";
h3d_col_FPoint.prototype = {
	sub: function(p) {
		return new h3d_col_FPoint(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_FPoint(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_FPoint(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,toString: function() {
		return "FPoint{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_FPoint
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	clone: function() {
		var f = new h3d_col_Frustum();
		var _this = f.pleft;
		var p = this.pleft;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pright;
		var p = this.pright;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.ptop;
		var p = this.ptop;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pbottom;
		var p = this.pbottom;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pnear;
		var p = this.pnear;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pfar;
		var p = this.pfar;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		f.checkNearFar = this.checkNearFar;
		return f;
	}
	,loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pright;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.ptop;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pbottom;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pfar;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pnear;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pright;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.ptop;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pbottom;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pfar;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pnear;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasPoint: function(p) {
		var _this = this.pleft;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
				return false;
			}
		}
		return true;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pnear;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pfar;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.fromPoints = function(p1,p2) {
	var r = new h3d_col_Ray();
	r.px = p1.x;
	r.py = p1.y;
	r.pz = p1.z;
	r.lx = p2.x - p1.x;
	r.ly = p2.y - p1.y;
	r.lz = p2.z - p1.z;
	r.normalize();
	return r;
};
h3d_col_Ray.fromValues = function(x,y,z,dx,dy,dz) {
	var r = new h3d_col_Ray();
	r.px = x;
	r.py = y;
	r.pz = z;
	r.lx = dx;
	r.ly = dy;
	r.lz = dz;
	r.normalize();
	return r;
};
h3d_col_Ray.prototype = {
	clone: function() {
		var r = new h3d_col_Ray();
		r.px = this.px;
		r.py = this.py;
		r.pz = this.pz;
		r.lx = this.lx;
		r.ly = this.ly;
		r.lz = this.lz;
		return r;
	}
	,load: function(r) {
		this.px = r.px;
		this.py = r.py;
		this.pz = r.pz;
		this.lx = r.lx;
		this.ly = r.ly;
		this.lz = r.lz;
	}
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,transform: function(m) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.px = p_x;
		this.py = p_y;
		this.pz = p_z;
		var x = this.lx;
		var y = this.ly;
		var z = this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var l_x = x;
		var l_y = y;
		var l_z = z;
		var l_w = 1.;
		var px = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px;
		l_y = py;
		l_z = pz;
		this.lx = l_x;
		this.ly = l_y;
		this.lz = l_z;
		this.normalize();
	}
	,getPos: function() {
		return new h3d_col_Point(this.px,this.py,this.pz);
	}
	,getDir: function() {
		return new h3d_col_Point(this.lx,this.ly,this.lz);
	}
	,getPoint: function(distance) {
		return new h3d_col_Point(this.px + distance * this.lx,this.py + distance * this.ly,this.pz + distance * this.lz);
	}
	,toString: function() {
		return "Ray{" + Std.string(new h3d_col_Point(this.px,this.py,this.pz)) + "," + Std.string(new h3d_col_Point(this.lx,this.ly,this.lz)) + "}";
	}
	,intersect: function(p) {
		var d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		var nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				return new h3d_col_Point(this.px,this.py,this.pz);
			} else {
				return null;
			}
		} else {
			var k = nd / d;
			return new h3d_col_Point(this.px + this.lx * k,this.py + this.ly * k,this.pz + this.lz * k);
		}
	}
	,collideFrustum: function(mvp) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var a_x = x;
		var a_y = y;
		var a_z = z;
		var a_w = 1.;
		var px = a_x * mvp._11 + a_y * mvp._21 + a_z * mvp._31 + a_w * mvp._41;
		var py = a_x * mvp._12 + a_y * mvp._22 + a_z * mvp._32 + a_w * mvp._42;
		var pz = a_x * mvp._13 + a_y * mvp._23 + a_z * mvp._33 + a_w * mvp._43;
		var iw = 1 / (a_x * mvp._14 + a_y * mvp._24 + a_z * mvp._34 + a_w * mvp._44);
		a_x = px * iw;
		a_y = py * iw;
		a_z = pz * iw;
		a_w = 1;
		var x = this.px + this.lx;
		var y = this.py + this.ly;
		var z = this.pz + this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var b_x = x;
		var b_y = y;
		var b_z = z;
		var b_w = 1.;
		var px = b_x * mvp._11 + b_y * mvp._21 + b_z * mvp._31 + b_w * mvp._41;
		var py = b_x * mvp._12 + b_y * mvp._22 + b_z * mvp._32 + b_w * mvp._42;
		var pz = b_x * mvp._13 + b_y * mvp._23 + b_z * mvp._33 + b_w * mvp._43;
		var iw = 1 / (b_x * mvp._14 + b_y * mvp._24 + b_z * mvp._34 + b_w * mvp._44);
		b_x = px * iw;
		b_y = py * iw;
		b_z = pz * iw;
		b_w = 1;
		var lx = b_x - a_x;
		var ly = b_y - a_y;
		var lz = b_z - a_z;
		var dx = 1 / lx;
		var dy = 1 / ly;
		var dz = 1 / lz;
		var t1 = (-1 - a_x) * dx;
		var t2 = (1 - a_x) * dx;
		var t3 = (-1 - a_y) * dy;
		var t4 = (1 - a_y) * dy;
		var t5 = (0 - a_z) * dz;
		var t6 = (1 - a_z) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b = t5 > t6 ? t6 : t5;
		var tmin = a1 < b ? b : a1;
		var a = t1 < t2 ? t2 : t1;
		var b = t3 < t4 ? t4 : t3;
		var a1 = a > b ? b : a;
		var b = t5 < t6 ? t6 : t5;
		var tmax = a1 > b ? b : a1;
		return !(tmax < 0 || tmin > tmax);
	}
	,collide: function(b) {
		var dx = 1 / this.lx;
		var dy = 1 / this.ly;
		var dz = 1 / this.lz;
		var t1 = (b.xMin - this.px) * dx;
		var t2 = (b.xMax - this.px) * dx;
		var t3 = (b.yMin - this.py) * dy;
		var t4 = (b.yMax - this.py) * dy;
		var t5 = (b.zMin - this.pz) * dz;
		var t6 = (b.zMax - this.pz) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b = t5 > t6 ? t6 : t5;
		var tmin = a1 < b ? b : a1;
		var a = t1 < t2 ? t2 : t1;
		var b = t3 < t4 ? t4 : t3;
		var a1 = a > b ? b : a;
		var b = t5 < t6 ? t6 : t5;
		var tmax = a1 > b ? b : a1;
		if(tmax < 0) {
			return false;
		} else if(tmin > tmax) {
			return false;
		} else {
			return true;
		}
	}
	,__class__: h3d_col_Ray
};
var h3d_col_ObjectCollider = function(obj,collider) {
	this.obj = obj;
	this.collider = collider;
};
h3d_col_ObjectCollider.__name__ = "h3d.col.ObjectCollider";
h3d_col_ObjectCollider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport,h3d_col_Collider];
h3d_col_ObjectCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var tmpRay = h3d_col_ObjectCollider.TMP_RAY;
		h3d_col_ObjectCollider.TMP_RAY = null;
		tmpRay.px = r.px;
		tmpRay.py = r.py;
		tmpRay.pz = r.pz;
		tmpRay.lx = r.lx;
		tmpRay.ly = r.ly;
		tmpRay.lz = r.lz;
		var m = this.obj.getInvPos();
		var x = r.px;
		var y = r.py;
		var z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		r.px = p_x;
		r.py = p_y;
		r.pz = p_z;
		var x = r.lx;
		var y = r.ly;
		var z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var l_x = x;
		var l_y = y;
		var l_z = z;
		var l_w = 1.;
		var px = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px;
		l_y = py;
		l_z = pz;
		r.lx = l_x;
		r.ly = l_y;
		r.lz = l_z;
		r.normalize();
		var hit = this.collider.rayIntersection(r,bestMatch);
		if(hit < 0) {
			r.px = tmpRay.px;
			r.py = tmpRay.py;
			r.pz = tmpRay.pz;
			r.lx = tmpRay.lx;
			r.ly = tmpRay.ly;
			r.lz = tmpRay.lz;
			h3d_col_ObjectCollider.TMP_RAY = tmpRay;
			return hit;
		}
		var x = r.px + hit * r.lx;
		var y = r.py + hit * r.ly;
		var z = r.pz + hit * r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var pt_x = x;
		var pt_y = y;
		var pt_z = z;
		var m = this.obj.absPos;
		var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
		var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
		var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
		pt_x = px;
		pt_y = py;
		pt_z = pz;
		r.px = tmpRay.px;
		r.py = tmpRay.py;
		r.pz = tmpRay.pz;
		r.lx = tmpRay.lx;
		r.ly = tmpRay.ly;
		r.lz = tmpRay.lz;
		h3d_col_ObjectCollider.TMP_RAY = tmpRay;
		var dx = pt_x - r.px;
		var dy = pt_y - r.py;
		var dz = pt_z - r.pz;
		if(dz == null) {
			dz = 0.;
		}
		var dz1 = dz;
		if(dz1 == null) {
			dz1 = 0.;
		}
		return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
	}
	,contains: function(p) {
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ptmp_x = x;
		var ptmp_y = y;
		var ptmp_z = z;
		var m = this.obj.getInvPos();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		p.x = px;
		p.y = py;
		p.z = pz;
		var b = this.collider.contains(p);
		p.x = ptmp_x;
		p.y = ptmp_y;
		p.z = ptmp_z;
		return b;
	}
	,inFrustum: function(f,m) {
		if(m == null) {
			return this.collider.inFrustum(f,this.obj.getAbsPos());
		}
		var mat = h3d_col_ObjectCollider.TMP_MAT;
		var b = this.obj.getAbsPos();
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var a31 = m._31;
		var a32 = m._32;
		var a33 = m._33;
		var a41 = m._41;
		var a42 = m._42;
		var a43 = m._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		mat._11 = m11 * b11 + m12 * b21 + m13 * b31;
		mat._12 = m11 * b12 + m12 * b22 + m13 * b32;
		mat._13 = m11 * b13 + m12 * b23 + m13 * b33;
		mat._14 = 0;
		mat._21 = m21 * b11 + m22 * b21 + m23 * b31;
		mat._22 = m21 * b12 + m22 * b22 + m23 * b32;
		mat._23 = m21 * b13 + m22 * b23 + m23 * b33;
		mat._24 = 0;
		mat._31 = a31 * b11 + a32 * b21 + a33 * b31;
		mat._32 = a31 * b12 + a32 * b22 + a33 * b32;
		mat._33 = a31 * b13 + a32 * b23 + a33 * b33;
		mat._34 = 0;
		mat._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		mat._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		mat._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		mat._44 = 1;
		return this.collider.inFrustum(f,mat);
	}
	,inSphere: function(s) {
		var invMat = this.obj.getInvPos();
		var oldX = s.x;
		var oldY = s.y;
		var oldZ = s.z;
		var oldR = s.r;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var center_x = x;
		var center_y = y;
		var center_z = z;
		var px = center_x * invMat._11 + center_y * invMat._21 + center_z * invMat._31 + invMat._41;
		var py = center_x * invMat._12 + center_y * invMat._22 + center_z * invMat._32 + invMat._42;
		var pz = center_x * invMat._13 + center_y * invMat._23 + center_z * invMat._33 + invMat._43;
		center_x = px;
		center_y = py;
		center_z = pz;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(invMat._11 * invMat._11 + invMat._12 * invMat._12 + invMat._13 * invMat._13);
		v.y = Math.sqrt(invMat._21 * invMat._21 + invMat._22 * invMat._22 + invMat._23 * invMat._23);
		v.z = Math.sqrt(invMat._31 * invMat._31 + invMat._32 * invMat._32 + invMat._33 * invMat._33);
		if(invMat._11 * (invMat._22 * invMat._33 - invMat._23 * invMat._32) + invMat._12 * (invMat._23 * invMat._31 - invMat._21 * invMat._33) + invMat._13 * (invMat._21 * invMat._32 - invMat._22 * invMat._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		s.x = center_x;
		s.y = center_y;
		s.z = center_z;
		s.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = this.collider.inSphere(s);
		s.x = oldX;
		s.y = oldY;
		s.z = oldZ;
		s.r = oldR;
		return res;
	}
	,__class__: h3d_col_ObjectCollider
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.fromPoints = function(p0,p1,p2) {
	var x = p1.x - p0.x;
	var y = p1.y - p0.y;
	var z = p1.z - p0.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var d1_x = x;
	var d1_y = y;
	var d1_z = z;
	var x = p2.x - p0.x;
	var y = p2.y - p0.y;
	var z = p2.z - p0.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var d2_x = x;
	var d2_y = y;
	var d2_z = z;
	var x = d1_y * d2_z - d1_z * d2_y;
	var y = d1_z * d2_x - d1_x * d2_z;
	var z = d1_x * d2_y - d1_y * d2_x;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var n_x = x;
	var n_y = y;
	var n_z = z;
	return new h3d_col_Plane(n_x,n_y,n_z,n_x * p0.x + n_y * p0.y + n_z * p0.z);
};
h3d_col_Plane.fromNormalPoint = function(n,p) {
	return new h3d_col_Plane(n.x,n.y,n.z,n.x * p.x + n.y * p.y + n.z * p.z);
};
h3d_col_Plane.X = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(1,0,0,v);
};
h3d_col_Plane.Y = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,1,0,v);
};
h3d_col_Plane.Z = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,0,1,v);
};
h3d_col_Plane.frustumLeft = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
};
h3d_col_Plane.frustumRight = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
};
h3d_col_Plane.frustumBottom = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
};
h3d_col_Plane.frustumTop = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
};
h3d_col_Plane.frustumNear = function(mvp) {
	return new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
};
h3d_col_Plane.frustumFar = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
};
h3d_col_Plane.prototype = {
	getNormal: function() {
		return new h3d_col_Point(this.nx,this.ny,this.nz);
	}
	,getNormalDistance: function() {
		return this.d;
	}
	,load: function(p) {
		this.nx = p.nx;
		this.ny = p.ny;
		this.nz = p.nz;
		this.d = p.d;
	}
	,transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transformInverseTranspose: function(m) {
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + v_w * m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + v_w * m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + v_w * m._43;
		var pw = v_x * m._14 + v_y * m._24 + v_z * m._34 + v_w * m._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,normalize: function() {
		var len = 1. / Math.sqrt(this.nx * this.nx + this.ny * this.ny + this.nz * this.nz);
		this.nx *= len;
		this.ny *= len;
		this.nz *= len;
		this.d *= len;
	}
	,toString: function() {
		return "Plane{" + Std.string(new h3d_col_Point(this.nx,this.ny,this.nz)) + "," + hxd_Math.fmt(this.d) + "}";
	}
	,distance: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,project: function(p) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		return new h3d_col_Point(p.x - d * this.nx,p.y - d * this.ny,p.z - d * this.nz);
	}
	,projectTo: function(p,out) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		out.x = p.x - d * this.nx;
		out.y = p.y - d * this.ny;
		out.z = p.z - d * this.nz;
	}
	,__class__: h3d_col_Plane
};
var h3d_col_Point = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
h3d_col_Point.__name__ = "h3d.col.Point";
h3d_col_Point.prototype = {
	scale: function(v) {
		this.x *= v;
		this.y *= v;
		this.z *= v;
	}
	,inFrustum: function(f,m) {
		return f.hasPoint(this);
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,multiply: function(f) {
		return new h3d_col_Point(this.x * f,this.y * f,this.z * f);
	}
	,sub: function(p) {
		return new h3d_col_Point(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_Point(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_Point(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,equals: function(other) {
		if(this.x == other.x && this.y == other.y) {
			return this.z == other.z;
		} else {
			return false;
		}
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,setLength: function(len) {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,distanceSq: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,distance: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
		return this;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
		return this;
	}
	,lerp: function(p1,p2,k) {
		var a = p1.x;
		var x = a + k * (p2.x - a);
		var a = p1.y;
		var y = a + k * (p2.y - a);
		var a = p1.z;
		var z = a + k * (p2.z - a);
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,toVector: function() {
		return new h3d_Vector(this.x,this.y,this.z);
	}
	,clone: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
		this.z = p.z;
	}
	,toString: function() {
		return "Point{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_Point
};
var h3d_col_TriPlane = function() {
	this.next = null;
};
h3d_col_TriPlane.__name__ = "h3d.col.TriPlane";
h3d_col_TriPlane.__interfaces__ = [h3d_col_Collider];
h3d_col_TriPlane.prototype = {
	init: function(p0,p1,p2) {
		this.p0x = p0.x;
		this.p0y = p0.y;
		this.p0z = p0.z;
		var x = p1.x - p0.x;
		var y = p1.y - p0.y;
		var z = p1.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var d1_x = x;
		var d1_y = y;
		var d1_z = z;
		var x = p2.x - p0.x;
		var y = p2.y - p0.y;
		var z = p2.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var d2_x = x;
		var d2_y = y;
		var d2_z = z;
		var x = d1_y * d2_z - d1_z * d2_y;
		var y = d1_z * d2_x - d1_x * d2_z;
		var z = d1_x * d2_y - d1_y * d2_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var n_x = x;
		var n_y = y;
		var n_z = z;
		this.d = n_x * p0.x + n_y * p0.y + n_z * p0.z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,clone: function() {
		var clone = new h3d_col_TriPlane();
		clone.p0x = this.p0x;
		clone.p0y = this.p0y;
		clone.p0z = this.p0z;
		clone.d1x = this.d1x;
		clone.d1y = this.d1y;
		clone.d1z = this.d1z;
		clone.d2x = this.d2x;
		clone.d2y = this.d2y;
		clone.d2z = this.d2z;
		clone.dot00 = this.dot00;
		clone.dot01 = this.dot01;
		clone.dot11 = this.dot11;
		clone.invDenom = this.invDenom;
		clone.nx = this.nx;
		clone.ny = this.ny;
		clone.nz = this.nz;
		clone.d = this.d;
		if(this.next != null) {
			clone.next = this.next.clone();
		}
		return clone;
	}
	,load: function(tp) {
		this.p0x = tp.p0x;
		this.p0y = tp.p0y;
		this.p0z = tp.p0z;
		this.d1x = tp.d1x;
		this.d1y = tp.d1y;
		this.d1z = tp.d1z;
		this.d2x = tp.d2x;
		this.d2y = tp.d2y;
		this.d2z = tp.d2z;
		this.dot00 = tp.dot00;
		this.dot01 = tp.dot01;
		this.dot11 = tp.dot11;
		this.invDenom = tp.invDenom;
		this.nx = tp.nx;
		this.ny = tp.ny;
		this.nz = tp.nz;
		this.d = tp.d;
	}
	,transform: function(m) {
		var x = this.p0x;
		var y = this.p0y;
		var z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p0_x = x;
		var p0_y = y;
		var p0_z = z;
		var x = this.d1x + this.p0x;
		var y = this.d1y + this.p0y;
		var z = this.d1z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p1_x = x;
		var p1_y = y;
		var p1_z = z;
		var x = this.d2x + this.p0x;
		var y = this.d2y + this.p0y;
		var z = this.d2z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p2_x = x;
		var p2_y = y;
		var p2_z = z;
		var px = p0_x * m._11 + p0_y * m._21 + p0_z * m._31 + m._41;
		var py = p0_x * m._12 + p0_y * m._22 + p0_z * m._32 + m._42;
		var pz = p0_x * m._13 + p0_y * m._23 + p0_z * m._33 + m._43;
		p0_x = px;
		p0_y = py;
		p0_z = pz;
		var px = p1_x * m._11 + p1_y * m._21 + p1_z * m._31 + m._41;
		var py = p1_x * m._12 + p1_y * m._22 + p1_z * m._32 + m._42;
		var pz = p1_x * m._13 + p1_y * m._23 + p1_z * m._33 + m._43;
		p1_x = px;
		p1_y = py;
		p1_z = pz;
		var px = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
		var py = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
		var pz = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
		p2_x = px;
		p2_y = py;
		p2_z = pz;
		this.p0x = p0_x;
		this.p0y = p0_y;
		this.p0z = p0_z;
		var x = p1_x - p0_x;
		var y = p1_y - p0_y;
		var z = p1_z - p0_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var d1_x = x;
		var d1_y = y;
		var d1_z = z;
		var x = p2_x - p0_x;
		var y = p2_y - p0_y;
		var z = p2_z - p0_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var d2_x = x;
		var d2_y = y;
		var d2_z = z;
		var x = d1_y * d2_z - d1_z * d2_y;
		var y = d1_z * d2_x - d1_x * d2_z;
		var z = d1_x * d2_y - d1_y * d2_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var n_x = x;
		var n_y = y;
		var n_z = z;
		this.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,contains: function(p) {
		var x = p.x - this.p0x;
		var y = p.y - this.p0y;
		var z = p.z - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v2_x = x;
		var v2_y = y;
		var v2_z = z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var dr = r.lx * this.nx + r.ly * this.ny + r.lz * this.nz;
		if(dr >= 0) {
			return -1.;
		}
		var nd = this.d - (r.px * this.nx + r.py * this.ny + r.pz * this.nz);
		var k = nd / dr;
		if(k < 0) {
			return -1;
		}
		var px = r.px + r.lx * k;
		var py = r.py + r.ly * k;
		var pz = r.pz + r.lz * k;
		var x = px - this.p0x;
		var y = py - this.p0y;
		var z = pz - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v2_x = x;
		var v2_y = y;
		var v2_z = z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(!(u >= 0 && v >= 0 && u + v < 1)) {
			return -1;
		}
		return k;
	}
	,isPointInTriangle: function(x,y,z) {
		var x1 = x - this.p0x;
		var y1 = y - this.p0y;
		var z1 = z - this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v2_x = x1;
		var v2_y = y1;
		var v2_z = z1;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,getPoints: function() {
		return [new h3d_col_Point(this.p0x,this.p0y,this.p0z),new h3d_col_Point(this.d1x + this.p0x,this.d1y + this.p0y,this.d1z + this.p0z),new h3d_col_Point(this.d2x + this.p0x,this.d2y + this.p0y,this.d2z + this.p0z)];
	}
	,__class__: h3d_col_TriPlane
};
var h3d_col_Polygon = function() {
};
h3d_col_Polygon.__name__ = "h3d.col.Polygon";
h3d_col_Polygon.__interfaces__ = [h3d_col_Collider];
h3d_col_Polygon.prototype = {
	addBuffers: function(vertexes,indexes,stride) {
		if(stride == null) {
			stride = 3;
		}
		var _g = 0;
		var _g1 = indexes.length / 3 | 0;
		while(_g < _g1) {
			var i = _g++;
			var k = i * 3;
			var t = new h3d_col_TriPlane();
			var i0 = indexes[k] * stride;
			var i1 = indexes[k + 1] * stride;
			var i2 = indexes[k + 2] * stride;
			var x = vertexes[i0];
			var y = vertexes[i0 + 1];
			var z = vertexes[i0 + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var x1 = vertexes[i1];
			var y1 = vertexes[i1 + 1];
			var z1 = vertexes[i1 + 2];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var x2 = vertexes[i2];
			var y2 = vertexes[i2 + 1];
			var z2 = vertexes[i2 + 2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var d1_x = x3;
			var d1_y = y3;
			var d1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d2_x = x4;
			var d2_y = y4;
			var d2_z = z4;
			var x5 = d1_y * d2_z - d1_z * d2_y;
			var y5 = d1_z * d2_x - d1_x * d2_z;
			var z5 = d1_x * d2_y - d1_y * d2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x = x5;
			var n_y = y5;
			var n_z = z5;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = this.triPlanes;
			this.triPlanes = t;
		}
	}
	,isConvex: function() {
		return true;
	}
	,clone: function() {
		var clone = new h3d_col_Polygon();
		clone.triPlanes = new h3d_col_TriPlane();
		var _this = this.triPlanes;
		var clone1 = new h3d_col_TriPlane();
		clone1.p0x = _this.p0x;
		clone1.p0y = _this.p0y;
		clone1.p0z = _this.p0z;
		clone1.d1x = _this.d1x;
		clone1.d1y = _this.d1y;
		clone1.d1z = _this.d1z;
		clone1.d2x = _this.d2x;
		clone1.d2y = _this.d2y;
		clone1.d2z = _this.d2z;
		clone1.dot00 = _this.dot00;
		clone1.dot01 = _this.dot01;
		clone1.dot11 = _this.dot11;
		clone1.invDenom = _this.invDenom;
		clone1.nx = _this.nx;
		clone1.ny = _this.ny;
		clone1.nz = _this.nz;
		clone1.d = _this.d;
		if(_this.next != null) {
			var _this1 = _this.next;
			var clone2 = new h3d_col_TriPlane();
			clone2.p0x = _this1.p0x;
			clone2.p0y = _this1.p0y;
			clone2.p0z = _this1.p0z;
			clone2.d1x = _this1.d1x;
			clone2.d1y = _this1.d1y;
			clone2.d1z = _this1.d1z;
			clone2.d2x = _this1.d2x;
			clone2.d2y = _this1.d2y;
			clone2.d2z = _this1.d2z;
			clone2.dot00 = _this1.dot00;
			clone2.dot01 = _this1.dot01;
			clone2.dot11 = _this1.dot11;
			clone2.invDenom = _this1.invDenom;
			clone2.nx = _this1.nx;
			clone2.ny = _this1.ny;
			clone2.nz = _this1.nz;
			clone2.d = _this1.d;
			if(_this1.next != null) {
				clone2.next = _this1.next.clone();
			}
			clone1.next = clone2;
		}
		clone.triPlanes = clone1;
		return clone;
	}
	,transform: function(m) {
		var t = this.triPlanes;
		while(t != null) {
			t.transform(m);
			t = t.next;
		}
	}
	,getPoints: function() {
		var ret = [];
		var t = this.triPlanes;
		while(t != null) {
			ret = ret.concat(t.getPoints());
			t = t.next;
		}
		return ret;
	}
	,getBounds: function(bnds) {
		if(bnds == null) {
			bnds = new h3d_col_Bounds();
		}
		bnds.xMin = 1e20;
		bnds.xMax = -1e20;
		bnds.yMin = 1e20;
		bnds.yMax = -1e20;
		bnds.zMin = 1e20;
		bnds.zMax = -1e20;
		var t = this.triPlanes;
		while(t != null) {
			var x = t.p0x;
			var y = t.p0y;
			var z = t.p0z;
			if(x < bnds.xMin) {
				bnds.xMin = x;
			}
			if(x > bnds.xMax) {
				bnds.xMax = x;
			}
			if(y < bnds.yMin) {
				bnds.yMin = y;
			}
			if(y > bnds.yMax) {
				bnds.yMax = y;
			}
			if(z < bnds.zMin) {
				bnds.zMin = z;
			}
			if(z > bnds.zMax) {
				bnds.zMax = z;
			}
			var x1 = t.d1x + t.p0x;
			var y1 = t.d1y + t.p0y;
			var z1 = t.d1z + t.p0z;
			if(x1 < bnds.xMin) {
				bnds.xMin = x1;
			}
			if(x1 > bnds.xMax) {
				bnds.xMax = x1;
			}
			if(y1 < bnds.yMin) {
				bnds.yMin = y1;
			}
			if(y1 > bnds.yMax) {
				bnds.yMax = y1;
			}
			if(z1 < bnds.zMin) {
				bnds.zMin = z1;
			}
			if(z1 > bnds.zMax) {
				bnds.zMax = z1;
			}
			var x2 = t.d2x + t.p0x;
			var y2 = t.d2y + t.p0y;
			var z2 = t.d2z + t.p0z;
			if(x2 < bnds.xMin) {
				bnds.xMin = x2;
			}
			if(x2 > bnds.xMax) {
				bnds.xMax = x2;
			}
			if(y2 < bnds.yMin) {
				bnds.yMin = y2;
			}
			if(y2 > bnds.yMax) {
				bnds.yMax = y2;
			}
			if(z2 < bnds.zMin) {
				bnds.zMin = z2;
			}
			if(z2 > bnds.zMax) {
				bnds.zMax = z2;
			}
			t = t.next;
		}
		return bnds;
	}
	,contains: function(p) {
		if(!this.isConvex()) {
			throw haxe_Exception.thrown("Not implemented for concave polygon");
		}
		var t = this.triPlanes;
		while(t != null) {
			if(t.nx * p.x + t.ny * p.y + t.nz * p.z - t.d >= 0) {
				return false;
			}
			t = t.next;
		}
		return true;
	}
	,rayIntersection: function(r,bestMatch) {
		var t = this.triPlanes;
		var best = -1.;
		while(t != null) {
			var dr = r.lx * t.nx + r.ly * t.ny + r.lz * t.nz;
			var d;
			if(dr >= 0) {
				d = -1.;
			} else {
				var nd = t.d - (r.px * t.nx + r.py * t.ny + r.pz * t.nz);
				var k = nd / dr;
				if(k < 0) {
					d = -1;
				} else {
					var px = r.px + r.lx * k;
					var py = r.py + r.ly * k;
					var pz = r.pz + r.lz * k;
					var x = px - t.p0x;
					var y = py - t.p0y;
					var z = pz - t.p0z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var v2_x = x;
					var v2_y = y;
					var v2_z = z;
					var dot02 = t.d1x * v2_x + t.d1y * v2_y + t.d1z * v2_z;
					var dot12 = t.d2x * v2_x + t.d2y * v2_y + t.d2z * v2_z;
					var u = (t.dot11 * dot02 - t.dot01 * dot12) * t.invDenom;
					var v = (t.dot00 * dot12 - t.dot01 * dot02) * t.invDenom;
					d = !(u >= 0 && v >= 0 && u + v < 1) ? -1 : k;
				}
			}
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
			t = t.next;
		}
		return best;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: h3d_col_Polygon
};
var h3d_col_PolygonBuffer = function() {
};
h3d_col_PolygonBuffer.__name__ = "h3d.col.PolygonBuffer";
h3d_col_PolygonBuffer.__interfaces__ = [h3d_col_Collider];
h3d_col_PolygonBuffer.prototype = {
	setData: function(buffer,indexes,startIndex,triCount) {
		if(triCount == null) {
			triCount = -1;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		this.buffer = buffer;
		this.indexes = indexes;
		this.startIndex = startIndex;
		this.triCount = triCount >= 0 ? triCount : (indexes.length - startIndex) / 3 | 0;
	}
	,contains: function(p) {
		var i = this.startIndex;
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x = this.buffer[i0++];
			var y = this.buffer[i0++];
			var z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var i1 = this.indexes[i++] * 3;
			var x1 = this.buffer[i1++];
			var y1 = this.buffer[i1++];
			var z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var i2 = this.indexes[i++] * 3;
			var x2 = this.buffer[i2++];
			var y2 = this.buffer[i2++];
			var z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var d1_x = x3;
			var d1_y = y3;
			var d1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d2_x = x4;
			var d2_y = y4;
			var d2_z = z4;
			var x5 = d1_y * d2_z - d1_z * d2_y;
			var y5 = d1_z * d2_x - d1_x * d2_z;
			var z5 = d1_x * d2_y - d1_y * d2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x = x5;
			var n_y = y5;
			var n_z = z5;
			var d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			if(n_x * p_x + n_y * p_y + n_z * p_z >= d) {
				return false;
			}
		}
		return true;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var i = this.startIndex;
		var x = r.lx;
		var y = r.ly;
		var z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var rdir_x = x;
		var rdir_y = y;
		var rdir_z = z;
		var x = r.px;
		var y = r.py;
		var z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var r0_x = x;
		var r0_y = y;
		var r0_z = z;
		var best = -1.;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x = this.buffer[i0++];
			var y = this.buffer[i0++];
			var z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var i1 = this.indexes[i++] * 3;
			var x1 = this.buffer[i1++];
			var y1 = this.buffer[i1++];
			var z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var i2 = this.indexes[i++] * 3;
			var x2 = this.buffer[i2++];
			var y2 = this.buffer[i2++];
			var z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var e1_x = x3;
			var e1_y = y3;
			var e1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var e2_x = x4;
			var e2_y = y4;
			var e2_z = z4;
			var x5 = rdir_y * e2_z - rdir_z * e2_y;
			var y5 = rdir_z * e2_x - rdir_x * e2_z;
			var z5 = rdir_x * e2_y - rdir_y * e2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x = x5;
			var p_y = y5;
			var p_z = z5;
			var det = e1_x * p_x + e1_y * p_y + e1_z * p_z;
			if(det < 1e-10) {
				continue;
			}
			var invDet = 1 / det;
			var x6 = r0_x - p0_x;
			var y6 = r0_y - p0_y;
			var z6 = r0_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var T_x = x6;
			var T_y = y6;
			var T_z = z6;
			var u = (T_x * p_x + T_y * p_y + T_z * p_z) * invDet;
			if(u < 0 || u > 1) {
				continue;
			}
			var x7 = T_y * e1_z - T_z * e1_y;
			var y7 = T_z * e1_x - T_x * e1_z;
			var z7 = T_x * e1_y - T_y * e1_x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var q_x = x7;
			var q_y = y7;
			var q_z = z7;
			var v = (rdir_x * q_x + rdir_y * q_y + rdir_z * q_z) * invDet;
			if(v < 0 || u + v > 1) {
				continue;
			}
			var t1 = (e2_x * q_x + e2_y * q_y + e2_z * q_z) * invDet;
			if(t1 < 1e-10) {
				continue;
			}
			if(!bestMatch) {
				return t1;
			}
			if(best < 0 || t1 < best) {
				best = t1;
			}
		}
		return best;
	}
	,__class__: h3d_col_PolygonBuffer
};
var h3d_col_SkinCollider = function(obj,col) {
	this.obj = obj;
	this.col = col;
	this.transform = new h3d_col_PolygonBuffer();
	var tmp = this.transform;
	var this1 = col.buffer;
	var this2 = new Array(this1.length);
	var r = this2;
	haxe_ds_Vector.blit(this1,0,r,0,this1.length);
	tmp.setData(r,col.indexes,col.startIndex,col.triCount);
};
h3d_col_SkinCollider.__name__ = "h3d.col.SkinCollider";
h3d_col_SkinCollider.__interfaces__ = [h3d_col_Collider,hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_SkinCollider.prototype = {
	contains: function(p) {
		this.applyTransform();
		return this.transform.contains(p);
	}
	,inFrustum: function(p,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		this.applyTransform();
		return this.transform.inFrustum(p);
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		this.applyTransform();
		return this.transform.rayIntersection(r,bestMatch);
	}
	,applyTransform: function() {
		if(!this.obj.jointsUpdated && this.lastFrame == this.obj.lastFrame) {
			return;
		}
		this.lastFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		var j = 0;
		var v = 0;
		var nbones = this.obj.skinData.bonesPerVertex;
		var _g = 0;
		var _g1 = this.obj.skinData.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var px = 0.;
			var py = 0.;
			var pz = 0.;
			var x = this.col.buffer[v];
			var y = this.col.buffer[v + 1];
			var z = this.col.buffer[v + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var _g2 = 0;
			var _g3 = nbones;
			while(_g2 < _g3) {
				var k = _g2++;
				var w = this.obj.skinData.vertexWeights[j];
				if(w == 0) {
					++j;
					continue;
				}
				var bid = this.obj.skinData.vertexJoints[j++];
				var x1 = p_x;
				var y1 = p_y;
				var z1 = p_z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p2_x = x1;
				var p2_y = y1;
				var p2_z = z1;
				var m = this.obj.currentPalette[bid];
				var px1 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
				var py1 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
				var pz1 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
				p2_x = px1;
				p2_y = py1;
				p2_z = pz1;
				px += p2_x * w;
				py += p2_y * w;
				pz += p2_z * w;
			}
			this.transform.buffer[v++] = px;
			this.transform.buffer[v++] = py;
			this.transform.buffer[v++] = pz;
		}
	}
	,__class__: h3d_col_SkinCollider
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	load: function(sx,sy,sz,sr) {
		if(sr == null) {
			sr = 0.;
		}
		if(sz == null) {
			sz = 0.;
		}
		if(sy == null) {
			sy = 0.;
		}
		if(sx == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	,getCenter: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,contains: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz < this.r * this.r;
	}
	,rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,inSphere: function(s) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var dx = p_x - _this_x;
		var dy = p_y - _this_y;
		var dz = p_z - _this_z;
		return dx * dx + dy * dy + dz * dz < (s.r + this.r) * (s.r + this.r);
	}
	,toString: function() {
		return "Sphere{" + Std.string(new h3d_col_Point(this.x,this.y,this.z)) + "," + hxd_Math.fmt(this.r) + "}";
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe","InstancedRendering"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_QueryKind = $hxEnums["h3d.impl.QueryKind"] = { __ename__ : true, __constructs__ : ["TimeStamp","Samples"]
	,TimeStamp: {_hx_index:0,__enum__:"h3d.impl.QueryKind",toString:$estr}
	,Samples: {_hx_index:1,__enum__:"h3d.impl.QueryKind",toString:$estr}
};
h3d_impl_QueryKind.__empty_constructs__ = [h3d_impl_QueryKind.TimeStamp,h3d_impl_QueryKind.Samples];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var i = h3d_impl_InputNames.CACHE.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		h3d_impl_InputNames.CACHE.h[key] = i;
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,dispose: function() {
	}
	,begin: function(frame) {
	}
	,log: function(str) {
		if(this.logEnable) {
			this.logImpl(str);
		}
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,getNativeShaderCode: function(shader) {
		return null;
	}
	,logImpl: function(str) {
	}
	,clear: function(color,depth,stencil) {
	}
	,captureRenderBuffer: function(pixels) {
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		throw haxe_Exception.thrown("Can't capture pixels on this platform");
	}
	,getDriverName: function(details) {
		return "Not available";
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,getShaderInputNames: function() {
		return null;
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,present: function() {
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,allocInstanceBuffer: function(b,bytes) {
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,disposeInstanceBuffer: function(b) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,readVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw haxe_Exception.thrown("Driver does not allow to read vertex bytes");
	}
	,readIndexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw haxe_Exception.thrown("Driver does not allow to read index bytes");
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,allocQuery: function(queryKind) {
		return null;
	}
	,deleteQuery: function(q) {
	}
	,beginQuery: function(q) {
	}
	,endQuery: function(q) {
	}
	,queryResultAvailable: function(q) {
		return true;
	}
	,queryResult: function(q) {
		return 0.;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.hasMultiIndirect = false;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,logImpl: function(str) {
		console.log(str);
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getShaderInputNames: function() {
		return this.curShader.inputs;
	}
	,getNativeShaderCode: function(shader) {
		return "// vertex:\n" + hxsl_GlslOut.compile(shader.vertex.data) + "// fragment:\n" + hxsl_GlslOut.compile(shader.fragment.data);
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _g = tt.size;
				if(_g._hx_index == 0) {
					var t1 = tt.t;
					var n = _g.v;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				var _g1 = tt.size;
				tt = hxsl_Type.TSampler2D;
				break;
			default:
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g;
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g3 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw haxe_Exception.thrown("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					this.gl.bindBufferBase(35345,i,buf.buffers[i].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			var _g = t.format;
			var tmp;
			if(_g._hx_index == 18) {
				var _g1 = _g.v;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,discardError: function() {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,streamData: function(data,pos,length) {
		return data;
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw haxe_Exception.thrown("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var bufLen = pixels.stride * pixels.height;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		var _g = t.format;
		var tmp;
		if(_g._hx_index == 18) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos * 4,vertexCount * stride * 4);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos << bits,indiceCount << bits);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,updateDivisor: function(a) {
		if(this.currentDivisor[a.index] != a.divisor) {
			this.currentDivisor[a.index] = a.divisor;
			this.gl.vertexAttribDivisor(a.index,a.divisor);
		}
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw haxe_Exception.thrown("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g = 0;
			var _g1 = this.curShader.attribs.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.curShader.attribs[i];
				var pos;
				var _g2 = this.curShader.inputs.names[i];
				switch(_g2) {
				case "normal":
					if(m.stride < 6) {
						throw haxe_Exception.thrown("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos = 3;
					break;
				case "position":
					pos = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw haxe_Exception.thrown("Buffer is missing UV data, set it to RAW format ?");
					}
					pos = 6;
					break;
				default:
					var s = _g2;
					pos = offset;
					offset += a.size;
					if(offset > m.stride) {
						throw haxe_Exception.thrown("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		}
	}
	,selectMultiBuffers: function(buffers) {
		var _g = 0;
		var _g1 = this.curShader.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.gl.bindBuffer(34962,buffers.buffer.buffer.vbuf.b);
			this.gl.vertexAttribPointer(a.index,a.size,a.type,false,buffers.buffer.buffer.stride * 4,buffers.offset * 4);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
			buffers = buffers.next;
		}
		this.curBuffer = null;
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,allocInstanceBuffer: function(b,bytes) {
		var data = [];
		var _g = 0;
		var _g1 = b.commandCount;
		while(_g < _g1) {
			var i = _g++;
			var p = i * 5 * 4;
			var indexCount = bytes.getInt32(p);
			var instanceCount = bytes.getInt32(p + 4);
			var offIndex = bytes.getInt32(p + 8);
			var offVertex = bytes.getInt32(p + 12);
			var offInstance = bytes.getInt32(p + 16);
			if(offVertex != 0 || offInstance != 0) {
				throw haxe_Exception.thrown("baseVertex and baseInstance must be zero on this platform");
			}
			data.push(indexCount);
			data.push(offIndex);
			data.push(instanceCount);
		}
		b.data = data;
	}
	,disposeInstanceBuffer: function(b) {
		b.data = null;
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				var args1 = p++;
				var args2 = p++;
				this.gl.drawElementsInstanced(this.drawMode,args[args1],ibuf.is32 ? 5125 : 5123,args[args2],args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,ibuf.is32 ? 5125 : 5123,0,commands.commandCount);
		}
	}
	,end: function() {
	}
	,present: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		var pixels;
		var x;
		var y;
		if(region != null) {
			if(region.xMax > tex.width) {
				region.xMax = tex.width;
			}
			if(region.yMax > tex.height) {
				region.yMax = tex.height;
			}
			if(region.xMin < 0) {
				region.xMin = 0;
			}
			if(region.yMin < 0) {
				region.yMin = 0;
			}
			pixels = hxd_Pixels.alloc(region.xMax - region.xMin >> mipLevel,region.yMax - region.yMin >> mipLevel,tex.format);
			x = region.xMin;
			y = region.yMin;
		} else {
			pixels = hxd_Pixels.alloc(tex.width >> mipLevel,tex.height >> mipLevel,tex.format);
			x = 0;
			y = 0;
		}
		if(pixels.width == 0 || pixels.height == 0) {
			return pixels;
		}
		var old = this.curTarget;
		var oldCount = this.numTargets;
		var oldLayer = this.curTargetLayer;
		var oldMip = this.curTargetMip;
		if(oldCount > 1) {
			this.numTargets = 1;
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,null,0);
				}
			}
		}
		this.setRenderTarget(tex,layer,mipLevel);
		this.captureSubRenderBuffer(pixels,x,y);
		this.setRenderTarget(old,oldLayer,oldMip);
		if(oldCount > 1) {
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
				}
			}
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,uploadTextureVideoElement: function(t,v,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw haxe_Exception.thrown("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		if(this.glES >= 3) {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,v.videoWidth,v.videoHeight,0,this.getChannels(t.t),t.t.pixelFmt,v);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,t.t.internalFmt,t.t.pixelFmt,v);
		}
		this.restoreBind();
	}
	,captureRenderBuffer: function(pixels) {
		this.captureSubRenderBuffer(pixels,0,0);
	}
	,captureSubRenderBuffer: function(pixels,x,y) {
		if(this.curTarget == null) {
			throw haxe_Exception.thrown("Can't capture main render buffer in GL");
		}
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var buffer = pixels.bytes.b;
		switch(this.curTarget.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(buffer.buffer);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(buffer.buffer);
			break;
		case 16:case 17:
			buffer = new Uint32Array(buffer.buffer);
			break;
		default:
		}
		this.gl.readPixels(x,y,pixels.width,pixels.height,this.getChannels(this.curTarget.t),this.curTarget.t.pixelFmt,buffer);
		var error = this.gl.getError();
		if(error != 0) {
			throw haxe_Exception.thrown("Failed to capture pixels (error " + error + ")");
		}
		pixels.set_innerFormat(this.curTarget.format);
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
	this.indexCount = 0;
};
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	setCommand: function(commandCount,indexCount) {
		this.commandCount = commandCount;
		this.indexCount = indexCount;
		this.triCount = commandCount * indexCount / 3 | 0;
	}
	,setBuffer: function(commandCount,bytes) {
		this.dispose();
		var _g = 0;
		var _g1 = commandCount;
		while(_g < _g1) {
			var i = _g++;
			var idxCount = bytes.getInt32(i * 20);
			var instCount = bytes.getInt32(i * 20 + 4);
			var tri = idxCount * instCount / 3 | 0;
			this.triCount += tri;
		}
		this.commandCount = commandCount;
		this.indexCount = 0;
		this.driver = h3d_Engine.CURRENT.driver;
		this.driver.allocInstanceBuffer(this,bytes);
	}
	,dispose: function() {
		if(this.data != null) {
			this.driver.disposeInstanceBuffer(this);
		}
	}
	,__class__: h3d_impl_InstanceBuffer
};
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,uploadVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.uploadVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,readVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.readVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,alloc: function(vertices,align) {
		var p = this.allocPosition(vertices,align);
		if(p < 0) {
			return null;
		}
		var b = new h3d_Buffer(vertices,this.stride,[h3d_BufferFlag.NoAlloc]);
		b.position = p;
		b.buffer = this;
		return b;
	}
	,getFreeVertices: function() {
		var m = 0;
		var l = this.freeList;
		while(l != null) {
			m += l.count;
			l = l.next;
		}
		return m;
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw haxe_Exception.thrown("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,isDisposed: function() {
		return this.vbuf == null;
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this1 = new Array(0);
		var indices = this1;
		var p = 0;
		var _g = 0;
		var _g1 = 16383;
		while(_g < _g1) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw haxe_Exception.thrown("Too many buffers");
				}
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max && (b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) == 0 && (b.flags & 1 << h3d_BufferFlag.LargeBuffer._hx_index) == 0) {
			if(max == 65534) {
				throw haxe_Exception.thrown("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw haxe_Exception.thrown("assert");
			}
			return;
		}
		var m = this.buffers[stride];
		var prev = null;
		while(m != null) {
			if(m.allocBuffer(b)) {
				return;
			}
			prev = m;
			m = m.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m != null) {
					if(m.allocBuffer(b)) {
						var flags = [];
						var _g = 0;
						var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g < _g1.length) {
							var f = _g1[_g];
							++_g;
							if((b.flags & 1 << f._hx_index) != 0) {
								flags.push(f);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags);
						return;
					}
					m = m.next;
				}
			}
			b.vertices = total;
		}
		m = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m;
		} else {
			prev.next = m;
		}
		if(!m.allocBuffer(b)) {
			throw haxe_Exception.thrown("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.depths.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		var _g = 0;
		var _g1 = this.indexes.slice();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,stats: function() {
		var total = 0;
		var free = 0;
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				total += b1.stride * b1.size * 4;
				var f = b1.freeList;
				while(f != null) {
					free += f.count * b1.stride * 4;
					f = f.next;
				}
				++count;
				b1 = b1.next;
			}
		}
		return { bufferCount : this.bufferCount, freeManagedMemory : free, managedMemory : total, totalMemory : this.usedMemory + this.texMemory, textureCount : this.textures.length, textureMemory : this.texMemory};
	}
	,allocStats: function() {
		return [];
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_Step = $hxEnums["h3d.impl.Step"] = { __ename__ : true, __constructs__ : ["BeforeLighting","BeforeTonemappingFX","BeforeTonemapping","AfterTonemapping","AfterUI"]
	,BeforeLighting: {_hx_index:0,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemappingFX: {_hx_index:1,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemapping: {_hx_index:2,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterTonemapping: {_hx_index:3,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterUI: {_hx_index:4,__enum__:"h3d.impl.Step",toString:$estr}
};
h3d_impl_Step.__empty_constructs__ = [h3d_impl_Step.BeforeLighting,h3d_impl_Step.BeforeTonemappingFX,h3d_impl_Step.BeforeTonemapping,h3d_impl_Step.AfterTonemapping,h3d_impl_Step.AfterUI];
var h3d_impl_RendererFX = function() { };
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	get: function(index) {
		if(index == null) {
			index = 0;
		}
		return this.cache[index];
	}
	,getNamed: function(name) {
		var _g = 0;
		var _g1 = this.position;
		while(_g < _g1) {
			var i = _g++;
			if(this.cache[i].name == name) {
				return this.cache[i];
			}
		}
		return null;
	}
	,set: function(t,index) {
		this.cache[index] = t;
	}
	,begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTargetScale: function(name,scale,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var e = h3d_Engine.CURRENT;
		return this.allocTarget(name,Math.ceil(e.width * scale),Math.ceil(e.height * scale),defaultDepth,format);
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,setDefaultProps: function(kind) {
		this.set_props(this.getDefaultProps(kind));
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,get_mainPass: function() {
		return this.passes;
	}
	,getPasses: function() {
		var p = this.passes;
		var out = [];
		while(p != null) {
			out.push(p);
			p = p.nextPass;
		}
		return out;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,allocPass: function(name,inheritMain) {
		if(inheritMain == null) {
			inheritMain = true;
		}
		var p = this.getPass(name);
		if(p != null) {
			return p;
		}
		var p = new h3d_mat_Pass(name,null,inheritMain ? this.passes : null);
		if(inheritMain && this.passes != null) {
			p.set_batchMode(this.passes.batchMode);
		}
		this.addPass(p);
		return p;
	}
	,clone: function(m) {
		if(m == null) {
			m = new h3d_mat_BaseMaterial();
		}
		m.passes.load(this.passes);
		m.name = this.name;
		m.set_props(this.props);
		return m;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
h3d_mat_Defaults.makeVolumeDecal = function(bounds) {
	return new h3d_shader_VolumeDecal(bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.create = function(tex) {
	var mat = h3d_mat_MaterialSetup.current.createMaterial();
	mat.set_texture(tex);
	mat.set_props(mat.getDefaultProps());
	return mat;
};
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	get_specularPower: function() {
		return this.mshader.specularPower__;
	}
	,set_specularPower: function(v) {
		return this.mshader.specularPower__ = v;
	}
	,get_specularAmount: function() {
		return this.mshader.specularAmount__;
	}
	,set_specularAmount: function(v) {
		return this.mshader.specularAmount__ = v;
	}
	,get_color: function() {
		return this.mshader.color__;
	}
	,set_color: function(v) {
		return this.mshader.color__ = v;
	}
	,get_shadows: function() {
		if(this.castShadows) {
			return this.receiveShadows;
		} else {
			return false;
		}
	}
	,set_shadows: function(v) {
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		return v;
	}
	,set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_staticShadows: function(v) {
		var p = this.getPass("shadow");
		if(p != null) {
			p.set_isStatic(v);
		}
		return this.staticShadows = v;
	}
	,clone: function(m) {
		var m1 = m == null ? new h3d_mat_Material() : m;
		h3d_mat_BaseMaterial.prototype.clone.call(this,m1);
		m1.set_castShadows(this.castShadows);
		m1.set_receiveShadows(this.receiveShadows);
		m1.set_texture(this.get_texture());
		m1.set_specularTexture(this.get_specularTexture());
		m1.set_normalMap(this.get_normalMap());
		if(this.textureShader != null) {
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.additive__ = this.textureShader.additive__;
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.killAlpha__ = this.textureShader.killAlpha__;
			m1.textureShader.killAlphaThreshold__ = this.textureShader.killAlphaThreshold__;
		}
		m1.mshader.color__ = this.mshader.color__;
		m1.set_blendMode(this.blendMode);
		return m1;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,get_specularTexture: function() {
		if(this.specularShader == null) {
			return null;
		} else {
			return this.specularShader.texture__;
		}
	}
	,get_texture: function() {
		if(this.textureShader == null) {
			return null;
		} else {
			return this.textureShader.texture__;
		}
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,get_normalMap: function() {
		if(this.normalShader == null) {
			return null;
		} else {
			return this.normalShader.texture__;
		}
	}
	,set_normalMap: function(t) {
		if(t == null) {
			if(this.normalShader != null) {
				this.passes.removeShader(this.normalShader);
				this.normalShader = null;
			}
		} else {
			if(this.normalShader == null) {
				this.normalShader = new h3d_shader_NormalMap();
				if(this.textureShader != null) {
					this.passes.addShaderAtIndex(this.normalShader,this.passes.getShaderIndex(this.textureShader) + 1);
				} else {
					this.passes.addShader(this.normalShader);
				}
			}
			this.normalShader.texture__ = t;
		}
		return t;
	}
	,set_specularTexture: function(t) {
		if(t == null) {
			if(this.specularShader != null) {
				this.passes.removeShader(this.specularShader);
				this.specularShader = null;
			}
		} else {
			if(this.specularShader == null) {
				this.specularShader = new h3d_shader_SpecularTexture();
				this.passes.addShader(this.specularShader);
			}
			this.specularShader.texture__ = t;
		}
		return t;
	}
	,getDefaultModelProps: function() {
		var props = this.getDefaultProps();
		switch(this.blendMode._hx_index) {
		case 0:
			break;
		case 1:
			props.kind = "Alpha";
			break;
		case 2:
			props.kind = "Add";
			props.culling = false;
			props.shadows = false;
			props.light = false;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported HMD material " + Std.string(this.blendMode));
		}
		return props;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
	this.db = new haxe_ds_StringMap();
};
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	getFilePath: function(model) {
		return model.entry.get_directory() + "/materials.props";
	}
	,getModelData: function(model) {
		if(model == null) {
			return null;
		}
		var this1 = this.db;
		var key = model.entry.get_directory();
		var cached = this1.h[key];
		if(cached != null) {
			return cached.v;
		}
		var file = this.getFilePath(model);
		var value;
		try {
			value = JSON.parse(hxd_res_Loader.currentInstance.load(file).toText());
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof hxd_fs_NotFound)) {
				value = { };
			} else {
				throw _g;
			}
		}
		var this1 = this.db;
		var key = model.entry.get_directory();
		this1.h[key] = { v : value};
		return value;
	}
	,saveData: function(model,data) {
		var file = this.getFilePath(model);
		throw haxe_Exception.thrown("Can't save material props database " + file);
	}
	,loadMatProps: function(material,setup) {
		var p = this.getModelData(material.model);
		if(p == null) {
			return p;
		}
		p = p.materials;
		if(p == null) {
			return p;
		}
		p = Reflect.field(p,setup.name);
		if(p == null) {
			return p;
		}
		return Reflect.field(p,material.name);
	}
	,saveMatProps: function(material,setup) {
		var path = ["materials",setup.name,material.name];
		var root = this.getModelData(material.model);
		if(root == null) {
			return;
		}
		var realRoot = root;
		var prevs = [];
		var _g = 0;
		var _g1 = path.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var next = Reflect.field(root,path[i]);
			if(next == null) {
				next = { };
				root[path[i]] = next;
			}
			prevs.push(root);
			root = next;
		}
		var name = path.pop();
		Reflect.deleteField(root,name);
		var currentProps = material.props;
		var defaultProps = material.getDefaultProps();
		if(currentProps == null || Std.string(defaultProps) == Std.string(currentProps)) {
			while(path.length > 0) {
				var name1 = path.pop();
				var root1 = prevs.pop();
				if(Reflect.fields(Reflect.field(root1,name1)).length != 0) {
					break;
				}
				Reflect.deleteField(root1,name1);
			}
		} else {
			root[name] = currentProps;
		}
		var file = this.getFilePath(material.model);
		if(Reflect.fields(realRoot).length == 0) {
			realRoot = null;
		}
		this.saveData(material.model,realRoot);
	}
	,__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,getDefaults: function(kind) {
		if(this.emptyMat == null) {
			this.emptyMat = this.createMaterial();
		}
		return this.emptyMat.getDefaultProps(kind);
	}
	,loadMaterialProps: function(material) {
		return this.database.loadMatProps(material,this);
	}
	,saveMaterialProps: function(material) {
		this.database.saveMatProps(material,this);
	}
	,customMeshInit: function(mesh) {
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.getEnableLights = function(v) {
	return v & 1;
};
h3d_mat_Pass.getDynamicParameters = function(v) {
	return v >> 1 & 1;
};
h3d_mat_Pass.getIsStatic = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getBatchMode = function(v) {
	return v >> 3 & 1;
};
h3d_mat_Pass.getCulling = function(v) {
	return v & 3;
};
h3d_mat_Pass.getDepthWrite = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getDepthTest = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Pass.getBlendSrc = function(v) {
	return v >> 6 & 15;
};
h3d_mat_Pass.getBlendDst = function(v) {
	return v >> 10 & 15;
};
h3d_mat_Pass.getBlendAlphaSrc = function(v) {
	return v >> 14 & 15;
};
h3d_mat_Pass.getBlendAlphaDst = function(v) {
	return v >> 18 & 15;
};
h3d_mat_Pass.getBlendOp = function(v) {
	return v >> 22 & 7;
};
h3d_mat_Pass.getBlendAlphaOp = function(v) {
	return v >> 25 & 7;
};
h3d_mat_Pass.getWireframe = function(v) {
	return v >> 28 & 1;
};
h3d_mat_Pass.getReserved = function(v) {
	return v >> 29 & 1;
};
h3d_mat_Pass.prototype = {
	load: function(p) {
		this.name = p.name;
		this.passId = p.passId;
		this.bits = p.bits;
		this.set_enableLights(p.enableLights);
		this.set_dynamicParameters(p.dynamicParameters);
		this.set_culling(p.culling);
		this.set_depthWrite(p.depthWrite);
		this.set_depthTest(p.depthTest);
		this.set_blendSrc(p.blendSrc);
		this.set_blendDst(p.blendDst);
		this.set_blendOp(p.blendOp);
		this.set_blendAlphaSrc(p.blendAlphaSrc);
		this.set_blendAlphaDst(p.blendAlphaDst);
		this.set_blendAlphaOp(p.blendAlphaOp);
		this.colorMask = p.colorMask;
		if(p.stencil != null) {
			if(this.stencil == null) {
				this.stencil = new h3d_mat_Stencil();
			}
			this.stencil.load(p.stencil);
		}
	}
	,setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,blend: function(src,dst) {
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,setColorMask: function(r,g,b,a) {
		this.colorMask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
	}
	,setColorChannel: function(c) {
		switch(c._hx_index) {
		case 1:
			this.setColorMask(true,false,false,false);
			break;
		case 2:
			this.setColorMask(false,true,false,false);
			break;
		case 3:
			this.setColorMask(false,false,true,false);
			break;
		case 4:
			this.setColorMask(false,false,false,true);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported channel " + Std.string(c));
		}
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,addShaderAtIndex: function(s,index) {
		var prev = null;
		var cur = this.shaders;
		while(index > 0 && cur != this.parentShaders) {
			prev = cur;
			cur = cur.next;
			--index;
		}
		if(prev == null) {
			this.shaders = new hxsl_ShaderList(s,cur);
		} else {
			prev.next = new hxsl_ShaderList(s,cur);
		}
		return s;
	}
	,getShaderIndex: function(s) {
		var index = 0;
		var cur = this.shaders;
		while(cur != this.parentShaders) {
			if(cur.s == s) {
				return index;
			}
			cur = cur.next;
			++index;
		}
		return -1;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShader: function(t) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			var value = s.s;
			var sh = js_Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,getShaderByName: function(name) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			if(s.s.shader.data.name == name) {
				return s.s;
			}
			s = s.next;
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,this.parentShaders);
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,clone: function() {
		var p = new h3d_mat_Pass(this.name,this.shaders.clone());
		p.bits = this.bits;
		p.set_enableLights(this.enableLights);
		if(this.stencil != null) {
			p.stencil = this.stencil.clone();
		}
		return p;
	}
	,getDebugShaderCode: function(scene,toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var shader = scene.renderer.debugCompileShader(this);
		if(toHxsl) {
			var varId = true;
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,varId);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_dynamicParameters: function(v) {
		this.flags = this.flags & -3 | (v ? 1 : 0) << 1;
		return this.dynamicParameters = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_batchMode: function(v) {
		this.flags = this.flags & -9 | (v ? 1 : 0) << 3;
		return this.batchMode = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,set_wireframe: function(v) {
		this.bits = this.bits & -268435457 | (v ? 1 : 0) << 28;
		return this.wireframe = v;
	}
	,set_reserved: function(v) {
		this.bits = this.bits & -536870913 | (v ? 1 : 0) << 29;
		return this.reserved = v;
	}
	,loadFlags: function(bits) {
		this.flags = bits;
		this.set_enableLights((this.flags & 1) != 0);
		this.set_dynamicParameters((this.flags >> 1 & 1) != 0);
		this.set_isStatic((this.flags >> 2 & 1) != 0);
		this.set_batchMode((this.flags >> 3 & 1) != 0);
	}
	,loadBits: function(bits) {
		this.bits = bits;
		this.set_culling(Type.createEnumIndex(h3d_mat_Face,this.bits & 3));
		this.set_depthWrite((this.bits >> 2 & 1) != 0);
		this.set_depthTest(Type.createEnumIndex(h3d_mat_Compare,this.bits >> 3 & 7));
		this.set_blendSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 6 & 15));
		this.set_blendDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 10 & 15));
		this.set_blendAlphaSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 14 & 15));
		this.set_blendAlphaDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 18 & 15));
		this.set_blendOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 22 & 7));
		this.set_blendAlphaOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 25 & 7));
		this.set_wireframe((this.bits >> 28 & 1) != 0);
		this.set_reserved((this.bits >> 29 & 1) != 0);
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.getReadMask = function(v) {
	return v & 255;
};
h3d_mat_Stencil.getWriteMask = function(v) {
	return v >> 8 & 255;
};
h3d_mat_Stencil.getReference = function(v) {
	return v >> 16 & 255;
};
h3d_mat_Stencil.getFrontTest = function(v) {
	return v & 7;
};
h3d_mat_Stencil.getFrontPass = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Stencil.getFrontSTfail = function(v) {
	return v >> 6 & 7;
};
h3d_mat_Stencil.getFrontDPfail = function(v) {
	return v >> 9 & 7;
};
h3d_mat_Stencil.getBackTest = function(v) {
	return v >> 12 & 7;
};
h3d_mat_Stencil.getBackPass = function(v) {
	return v >> 15 & 7;
};
h3d_mat_Stencil.getBackSTfail = function(v) {
	return v >> 18 & 7;
};
h3d_mat_Stencil.getBackDPfail = function(v) {
	return v >> 21 & 7;
};
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,clone: function() {
		var s = new h3d_mat_Stencil();
		s.opBits = this.opBits;
		s.maskBits = this.maskBits;
		return s;
	}
	,load: function(s) {
		this.opBits = s.opBits;
		this.maskBits = s.maskBits;
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,loadOpBits: function(bits) {
		this.opBits = bits;
		this.set_frontTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits & 7));
		this.set_frontPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 3 & 7));
		this.set_frontSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 6 & 7));
		this.set_frontDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 9 & 7));
		this.set_backTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits >> 12 & 7));
		this.set_backPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 15 & 7));
		this.set_backSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 18 & 7));
		this.set_backDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 21 & 7));
	}
	,loadMaskBits: function(bits) {
		this.maskBits = bits;
		this.set_readMask(this.maskBits & 255);
		this.set_writeMask(this.maskBits >> 8 & 255);
		this.set_reference(this.maskBits >> 16 & 255);
	}
	,__class__: h3d_mat_Stencil
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
var h3d_mat_Texture = function(w,h,flags,format) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromBitmap = function(bmp) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromPixels = function(pixels) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.genDisc = function(size,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	return h3d_mat_Texture.genTexture(0,size,color,alpha);
};
h3d_mat_Texture.genTexture = function(mode,size,color,alpha) {
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	color = color & 16777215 | aval << 24;
	var key = (size << 16 | mode) + "," + color;
	var k = h3d_mat_Texture.genTextureKeys.h[key];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.genTextureKeys.h[key] = k;
	}
	t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target]);
	t.realloc = function() {
		h3d_mat_Texture.drawGenTexture(t,color,mode);
	};
	h3d_mat_Texture.drawGenTexture(t,color,mode);
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.drawGenTexture = function(t,color,mode) {
	var s = new h3d_pass_ScreenFx(new h3d_shader_GenTexture());
	var engine = h3d_Engine.CURRENT;
	var _this = s.shader;
	_this.constModified = true;
	_this.mode__ = mode;
	var _this = s.shader.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
	engine.pushTarget(t);
	s.render();
	engine.popTarget();
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.genChecker = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.checkerTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.checkerTextureKeys.h[size] = k;
	}
	var t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t1 = t;
	var size1 = size;
	t.realloc = function() {
		h3d_mat_Texture.allocChecker(t1,size1);
	};
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.genNoise = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.noiseTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.noiseTextureKeys.h[size] = k;
	}
	var t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t1 = t;
	var size1 = size;
	t.realloc = function() {
		h3d_mat_Texture.allocNoise(t1,size1);
	};
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.allocNoise = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = size;
		while(_g2 < _g3) {
			var y = _g2++;
			var n = Std.random(256);
			b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.allocChecker = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	b.clear(-1);
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = size >> 1;
		while(_g2 < _g3) {
			var y = _g2++;
			b.setPixel(x,y,-16777216);
			b.setPixel(x + (size >> 1),y + (size >> 1),-16777216);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,isSRGB: function() {
		switch(this.format._hx_index) {
		case 14:case 15:
			return true;
		default:
			return false;
		}
	}
	,checkAlloc: function() {
		if(this.t == null && this.realloc != null) {
			this.alloc();
			this.realloc();
		}
	}
	,clone: function() {
		this.checkAlloc();
		if(this.t == null) {
			throw haxe_Exception.thrown("Can't clone disposed texture");
		}
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var flags = [];
		var f = h3d_mat_TextureFlags.Target;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.Cube;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.MipMapped;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.IsArray;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var t = new h3d_mat_Texture(this.width,this.height,flags,this.format);
		t.name = this.name;
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			h3d_pass_CubeCopy.run(this,t);
		} else {
			h3d_pass_Copy.run(this,t);
		}
		this.set_lastFrame(old);
		return t;
	}
	,preventAutoDispose: function() {
		this.set_lastFrame(h3d_mat_Texture.PREVENT_AUTO_DISPOSE);
	}
	,waitLoad: function(f) {
		if((this.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) == 0) {
			f();
			return;
		}
		if(this.waitLoads == null) {
			this.waitLoads = [];
		}
		this.waitLoads.push(f);
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,isDisposed: function() {
		if(this.t == null) {
			return this.realloc == null;
		} else {
			return false;
		}
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clearF: function(r,g,b,a,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(a == null) {
			a = 0.;
		}
		if(b == null) {
			b = 0.;
		}
		if(g == null) {
			g = 0.;
		}
		if(r == null) {
			r = 0.;
		}
		this.alloc();
		if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
			throw haxe_Exception.thrown("Texture should be target");
		}
		var engine = h3d_Engine.CURRENT;
		var color = new h3d_Vector(r,g,b,a);
		if(layer < 0) {
			var _g = 0;
			var _g1 = this.get_layerCount();
			while(_g < _g1) {
				var i = _g++;
				engine.pushTarget(this,i);
				engine.clearF(color);
				engine.popTarget();
			}
		} else {
			engine.pushTarget(this,layer);
			engine.clearF(color);
			engine.popTarget();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		if(width != this.width >> mip || height != this.height >> mip) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mip) + "x" + (this.height >> mip));
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,swapTexture: function(t) {
		this.checkAlloc();
		t.checkAlloc();
		if(this.t == null && this.realloc == null || t.t == null && t.realloc == null) {
			throw haxe_Exception.thrown("One of the two texture is disposed");
		}
		var tmp = this.t;
		this.t = t.t;
		t.t = tmp;
	}
	,capturePixels: function(face,mipLevel,region) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var pix = this.mem.driver.capturePixels(this,face,mipLevel,region);
		this.set_lastFrame(old);
		return pix;
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,clone: function() {
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var t = new h3d_mat_TextureArray(this.width,this.height,this.layers,null,this.format);
		h3d_pass_Copy.run(this,t);
		this.set_lastFrame(old);
		return t;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Base = function(name) {
	this.name = name;
};
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	compileShader: function(p) {
		throw haxe_Exception.thrown("Not implemented for this pass");
	}
	,setContext: function(ctx) {
		this.ctx = ctx;
	}
	,dispose: function() {
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.run = function(shader,output,layer) {
	var engine = h3d_Engine.CURRENT;
	engine.pushTarget(output,layer);
	new h3d_pass_ScreenFx(shader).render();
	engine.popTarget();
};
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,copy: function(src,dst) {
		h3d_pass_Copy.run(src,dst);
	}
	,setGlobals: function(ctx) {
		var _g = 0;
		var _g1 = ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
	}
	,addShader: function(s) {
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return this.pass.addShader(s);
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,getShader: function(cl) {
		var _g_l = this.shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var si = js_Boot.__downcastCheck(s1,cl) ? s1 : null;
			if(si != null) {
				return si;
			}
		}
		return null;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,getKernelSize: function() {
		if(this.values == null) {
			this.calcValues();
		}
		if(this.radius <= 0) {
			return 0;
		} else {
			return this.values.length * 2 - 1;
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,clone: function() {
		return this;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ScreenShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		return s;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Border_BorderShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_ArrayCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.layer__ = this.layer__;
		return s;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass_ArrayCopy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_ArrayCopyShader());
};
h3d_pass_ArrayCopy.__name__ = "h3d.pass.ArrayCopy";
h3d_pass_ArrayCopy.run = function(from,fromLayer,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_ArrayCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_ArrayCopy();
		engine.resCache.set(h3d_pass_ArrayCopy,inst);
	}
	inst.apply(from,fromLayer,to,blend,pass,layer);
};
h3d_pass_ArrayCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_ArrayCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,fromLayer,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		this.shader.layer__ = fromLayer;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		this.shader.layer__ = 0;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_ArrayCopy
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_CopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$CubeCopy_CubeCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_CubeCopy = function() {
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_pass__$CubeCopy_CubeCopyShader());
};
h3d_pass_CubeCopy.__name__ = "h3d.pass.CubeCopy";
h3d_pass_CubeCopy.run = function(from,to,blend,pass) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_CubeCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_CubeCopy();
		engine.resCache.set(h3d_pass_CubeCopy,inst);
	}
	inst.apply(from,to,blend,pass);
};
h3d_pass_CubeCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_CubeCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass) {
		this.shader.texture__ = from;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(to != null) {
				this.get_engine().pushTarget(to,i);
			}
			this.shader.mat__ = this.cubeDir[i];
			if(customPass != null) {
				var old = this.pass;
				this.pass = customPass;
				if(blend != null) {
					this.pass.setBlendMode(blend);
				}
				var h = this.shaders;
				while(h.next != null) h = h.next;
				h.next = this.pass.shaders;
				this.render();
				this.pass = old;
				h.next = null;
			} else {
				this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
				this.render();
			}
			if(to != null) {
				this.get_engine().popTarget();
			}
		}
		this.shader.texture__ = null;
	}
	,__class__: h3d_pass_CubeCopy
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	get_globals: function() {
		return this.manager.globals;
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,compileShader: function(p) {
		var o = new h3d_pass_PassObject();
		o.pass = p;
		this.setupShaders(new h3d_pass_PassList(o));
		return this.manager.compileShaders(o.shaders,p.batchMode);
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,log: function(str) {
		var _this = this.ctx.engine.driver;
		if(_this.logEnable) {
			_this.logImpl(str);
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,get_cameraView: function() {
		return this.manager.globals.map.h[this.cameraView_id];
	}
	,set_cameraView: function(v) {
		this.manager.globals.map.h[this.cameraView_id] = v;
		return v;
	}
	,get_cameraNear: function() {
		return this.manager.globals.map.h[this.cameraNear_id];
	}
	,set_cameraNear: function(v) {
		this.manager.globals.map.h[this.cameraNear_id] = v;
		return v;
	}
	,get_cameraFar: function() {
		return this.manager.globals.map.h[this.cameraFar_id];
	}
	,set_cameraFar: function(v) {
		this.manager.globals.map.h[this.cameraFar_id] = v;
		return v;
	}
	,get_cameraProj: function() {
		return this.manager.globals.map.h[this.cameraProj_id];
	}
	,set_cameraProj: function(v) {
		this.manager.globals.map.h[this.cameraProj_id] = v;
		return v;
	}
	,get_cameraPos: function() {
		return this.manager.globals.map.h[this.cameraPos_id];
	}
	,set_cameraPos: function(v) {
		this.manager.globals.map.h[this.cameraPos_id] = v;
		return v;
	}
	,get_cameraProjDiag: function() {
		return this.manager.globals.map.h[this.cameraProjDiag_id];
	}
	,set_cameraProjDiag: function(v) {
		this.manager.globals.map.h[this.cameraProjDiag_id] = v;
		return v;
	}
	,get_cameraProjFlip: function() {
		return this.manager.globals.map.h[this.cameraProjFlip_id];
	}
	,set_cameraProjFlip: function(v) {
		this.manager.globals.map.h[this.cameraProjFlip_id] = v;
		return v;
	}
	,get_cameraViewProj: function() {
		return this.manager.globals.map.h[this.cameraViewProj_id];
	}
	,set_cameraViewProj: function(v) {
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
		return v;
	}
	,get_cameraInverseViewProj: function() {
		return this.manager.globals.map.h[this.cameraInverseViewProj_id];
	}
	,set_cameraInverseViewProj: function(v) {
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v;
		return v;
	}
	,get_globalTime: function() {
		return this.manager.globals.map.h[this.globalTime_id];
	}
	,set_globalTime: function(v) {
		this.manager.globals.map.h[this.globalTime_id] = v;
		return v;
	}
	,get_pixelSize: function() {
		return this.manager.globals.map.h[this.pixelSize_id];
	}
	,set_pixelSize: function(v) {
		this.manager.globals.map.h[this.pixelSize_id] = v;
		return v;
	}
	,get_globalModelView: function() {
		return this.manager.globals.map.h[this.globalModelView_id];
	}
	,set_globalModelView: function(v) {
		this.manager.globals.map.h[this.globalModelView_id] = v;
		return v;
	}
	,get_globalModelViewInverse: function() {
		return this.manager.globals.map.h[this.globalModelViewInverse_id];
	}
	,set_globalModelViewInverse: function(v) {
		this.manager.globals.map.h[this.globalModelViewInverse_id] = v;
		return v;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this1;
		var this1 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this1;
		var this1 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this1;
		var this1 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this1;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v;
		var v = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v;
		var v = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v;
		var v = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v;
		var v = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v;
		var v = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v;
		var v = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v;
		var v = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v;
		var v = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_mode: function(m) {
		if(m != h3d_pass_RenderMode.None) {
			throw haxe_Exception.thrown("Shadow mode " + Std.string(m) + " not supported for " + Std.string(this.light));
		}
		return this.mode = m;
	}
	,set_enabled: function(b) {
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.blur.dispose();
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,getShadowTex: function() {
		return null;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,loadStaticData: function(bytes) {
		return false;
	}
	,saveStaticData: function() {
		return null;
	}
	,computeStatic: function(passes) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,cullPasses: function(passes,f) {
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_enabled: function(b) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d_pass_RenderMode.None;
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.customDepth && this.depth != null) {
			this.depth.dispose();
		}
		this.border.dispose();
	}
	,getShadowTex: function() {
		return this.dshader.shadowMap__;
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			mtmp.multiply3x4(m.getAbsPos(),camera.mcam);
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMax;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMin;
			var y = b.yMax;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMin;
			var y = b.yMax;
			var z = b.zMax;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMax;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMax;
			var y = b.yMin;
			var z = b.zMax;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMax;
			var y = b.yMax;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x = b.xMax;
			var y = b.yMax;
			var z = b.zMax;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m = camera.mcam;
				var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
				var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
				var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
				var pw = pt.x * m._14 + pt.y * m._24 + pt.z * m._34 + pt.w * m._44;
				pt.x = px;
				pt.y = py;
				pt.z = pz;
				pt.w = pw;
				var x = pt.x;
				var y = pt.y;
				var z = pt.z;
				if(x < cameraBounds.xMin) {
					cameraBounds.xMin = x;
				}
				if(x > cameraBounds.xMax) {
					cameraBounds.xMax = x;
				}
				if(y < cameraBounds.yMin) {
					cameraBounds.yMin = y;
				}
				if(y > cameraBounds.yMax) {
					cameraBounds.yMax = y;
				}
				if(z < cameraBounds.zMin) {
					cameraBounds.zMin = z;
				}
				if(z > cameraBounds.zMax) {
					cameraBounds.zMax = z;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this = this.dshader;
		_this.constModified = true;
		_this.pcfQuality__ = this.pcfQuality;
	}
	,saveStaticData: function() {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw haxe_Exception.thrown("Data not computed");
		}
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels().bytes,9);
		var buffer = new haxe_io_BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		buffer.addFloat(this.lightCamera.pos.x);
		buffer.addFloat(this.lightCamera.pos.y);
		buffer.addFloat(this.lightCamera.pos.z);
		buffer.addFloat(this.lightCamera.target.x);
		buffer.addFloat(this.lightCamera.target.y);
		buffer.addFloat(this.lightCamera.target.z);
		buffer.addFloat(this.lightCamera.orthoBounds.xMin);
		buffer.addFloat(this.lightCamera.orthoBounds.yMin);
		buffer.addFloat(this.lightCamera.orthoBounds.zMin);
		buffer.addFloat(this.lightCamera.orthoBounds.xMax);
		buffer.addFloat(this.lightCamera.orthoBounds.yMax);
		buffer.addFloat(this.lightCamera.orthoBounds.zMax);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	,loadStaticData: function(bytes) {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static || bytes == null) {
			return false;
		}
		var buffer = new haxe_io_BytesInput(bytes);
		var size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.lightCamera.pos.x = buffer.readFloat();
		this.lightCamera.pos.y = buffer.readFloat();
		this.lightCamera.pos.z = buffer.readFloat();
		this.lightCamera.target.x = buffer.readFloat();
		this.lightCamera.target.y = buffer.readFloat();
		this.lightCamera.target.z = buffer.readFloat();
		this.lightCamera.orthoBounds.xMin = buffer.readFloat();
		this.lightCamera.orthoBounds.yMin = buffer.readFloat();
		this.lightCamera.orthoBounds.zMin = buffer.readFloat();
		this.lightCamera.orthoBounds.xMax = buffer.readFloat();
		this.lightCamera.orthoBounds.yMax = buffer.readFloat();
		this.lightCamera.orthoBounds.zMax = buffer.readFloat();
		this.lightCamera.update();
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target],this.format);
		this.staticTexture.uploadPixels(pixels);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.syncShader(this.staticTexture);
		return true;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			_this.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,computeStatic: function(passes) {
		if(this.mode != h3d_pass_RenderMode.Static && this.mode != h3d_pass_RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
		var texture = this.dshader.shadowMap__;
		var old = this.staticTexture;
		this.staticTexture = texture.clone();
		this.staticTexture.name = "StaticDirShadowMap";
		this.staticTexture.preventAutoDispose();
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = this.staticTexture;
		if(old != null) {
			old.dispose();
		}
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	get_colorID: function() {
		return this.colorID__;
	}
	,set_colorID: function(_v) {
		return this.colorID__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$HardwarePick_FixedColor.prototype);
		s.shader = this.shader;
		s.colorID__ = this.colorID__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_HardwarePick = function() {
	this.pickedIndex = -1;
	this.fixedColor = new h3d_pass__$HardwarePick_FixedColor();
	h3d_pass_Default.call(this,"hwpick");
	this.material = new h3d_mat_Pass("");
	var _this = this.material;
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	_this.set_blendSrc(src);
	_this.set_blendAlphaSrc(src);
	_this.set_blendDst(dst);
	_this.set_blendAlphaDst(dst);
	this.texOut = new h3d_mat_Texture(3,3,[h3d_mat_TextureFlags.Target]);
	this.texOut.depthBuffer = new h3d_mat_DepthBuffer(3,3);
};
h3d_pass_HardwarePick.__name__ = "h3d.pass.HardwarePick";
h3d_pass_HardwarePick.__super__ = h3d_pass_Default;
h3d_pass_HardwarePick.prototype = $extend(h3d_pass_Default.prototype,{
	dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.texOut.dispose();
		this.texOut.depthBuffer.dispose();
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.colorID")];
	}
	,drawObject: function(p) {
		h3d_pass_Default.prototype.drawObject.call(this,p);
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,nextID: function() {
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,draw: function(passes,sort) {
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var cur = tmp;
			var mask = 268435392;
			cur.pass.bits &= ~mask;
			cur.pass.bits |= this.material.bits & mask;
		}
		this.colorID = 0;
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var _this = this.fixedColor.viewport__;
		var x = -(this.pickX * 2 / this.ctx.engine.width - 1);
		var y = this.pickY * 2 / this.ctx.engine.height - 1;
		var z = this.ctx.engine.width / this.texOut.width;
		var w = this.ctx.engine.height / this.texOut.height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.ctx.engine.pushTarget(this.texOut);
		this.ctx.engine.clear(-16777216,1);
		this.ctx.extraShaders = this.ctx.allocShaderList(this.fixedColor);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.extraShaders = null;
		this.ctx.engine.popTarget();
		var _g1_o = passes.current;
		while(_g1_o != null) {
			var tmp = _g1_o;
			_g1_o = _g1_o.next;
			var cur = tmp;
			cur.pass.set_blendSrc(cur.pass.blendSrc);
			cur.pass.set_blendDst(cur.pass.blendDst);
			cur.pass.set_blendOp(cur.pass.blendOp);
			cur.pass.set_blendAlphaSrc(cur.pass.blendAlphaSrc);
			cur.pass.set_blendAlphaDst(cur.pass.blendAlphaDst);
			cur.pass.set_blendAlphaOp(cur.pass.blendAlphaOp);
			cur.pass.colorMask = cur.pass.colorMask;
		}
		this.ctx.engine.clear(null,null,0);
		var pix = this.texOut.capturePixels();
		this.pickedIndex = (pix.getPixel(pix.width >> 1,pix.height >> 1) & 16777215) - 1;
	}
	,__class__: h3d_pass_HardwarePick
});
var h3d_pass_PassListIterator = function(o) {
	this.o = o;
};
h3d_pass_PassListIterator.__name__ = "h3d.pass.PassListIterator";
h3d_pass_PassListIterator.prototype = {
	hasNext: function() {
		return this.o != null;
	}
	,next: function() {
		var tmp = this.o;
		this.o = this.o.next;
		return tmp;
	}
	,__class__: h3d_pass_PassListIterator
};
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	init: function(pass) {
		this.current = pass;
		this.discarded = this.lastDisc = null;
	}
	,reset: function() {
		if(this.discarded != null) {
			this.lastDisc.next = this.current;
			this.current = this.discarded;
			this.discarded = this.lastDisc = null;
		}
	}
	,save: function() {
		return this.lastDisc;
	}
	,load: function(p) {
		if(this.lastDisc != p) {
			this.lastDisc.next = this.current;
			if(p == null) {
				this.current = this.discarded;
				this.discarded = null;
			} else {
				this.current = p.next;
				p.next = null;
			}
			this.lastDisc = p;
		}
	}
	,isEmpty: function() {
		return this.current == null;
	}
	,clear: function() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		var p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	,sort: function(f) {
		var list = this.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || f(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.current = tmp;
	}
	,filter: function(f) {
		var head = null;
		var prev = null;
		var disc = this.discarded;
		var discQueue = this.lastDisc;
		var cur = this.current;
		while(cur != null) {
			if(f(cur)) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		this.current = head;
		this.discarded = disc;
		this.lastDisc = discQueue;
	}
	,iterator: function() {
		return new h3d_pass_PassListIterator(this.current);
	}
	,getFiltered: function() {
		return new h3d_pass_PassListIterator(this.discarded);
	}
	,__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g = type.size;
			var _g1 = type.t;
			switch(_g1._hx_index) {
			case 3:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g2 = 0;
					var _g3 = count;
					while(_g2 < _g3) {
						var i = _g2++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g1.size == 4) {
					if(_g1.t._hx_index == 1) {
						if(_g._hx_index == 0) {
							var len = _g.v;
							var v1 = v;
							var _g2 = 0;
							var _g3 = len;
							while(_g2 < _g3) {
								var i = _g2++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g._hx_index == 0) {
						var len = _g.v;
						var t = _g1;
						var v1 = v;
						var size = 0;
						var _g2 = 0;
						var _g3 = len;
						while(_g2 < _g3) {
							var i = _g2++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g._hx_index == 0) {
					var len = _g.v;
					var t = _g1;
					var v1 = v;
					var size = 0;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var v1 = v;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var t = _g1;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,getPtr: function(data) {
		return data;
	}
	,getParamValue: function(p,shaders,opt) {
		if(opt == null) {
			opt = false;
		}
		if(p.perObjectGlobal != null) {
			var v = this.globals.map.h[p.perObjectGlobal.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p.perObjectGlobal.path));
			}
			var _g = p.type;
			var tmp;
			if(_g._hx_index == 17) {
				var _g1 = _g.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return v.texture;
			}
			return v;
		}
		var si = shaders;
		var n = p.instance;
		while(--n > 0) si = si.next;
		var v = si.s.getParamValue(p.index);
		if(v == null && !opt) {
			throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
		}
		return v;
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s1 = s.fragment;
		var g = s1.globals;
		var ptr = buf.fragment.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				t = v1;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				b = v1;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		var buf1 = buf.fragment;
		var s1 = s.fragment;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				t = v1;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				b = v1;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp1 = (d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.count / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.totalVertices() / 3 | 0;
		}
	}
	,vertexCount: function() {
		return 0;
	}
	,getCollider: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,selectMaterial: function(material) {
	}
	,buildNormalsDisplay: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h3d_prim_BigPrimitive = function(stride,isRaw) {
	if(isRaw == null) {
		isRaw = false;
	}
	this.isStatic = true;
	this.hasTangents = false;
	this.startIndex = 0;
	this.idxPos = 0;
	this.bufPos = 0;
	h3d_prim_Primitive.call(this);
	this.isRaw = isRaw;
	this.buffers = [];
	this.allIndexes = [];
	this.bounds = new h3d_col_Bounds();
	this.stride = stride;
	if(stride < 3) {
		throw haxe_Exception.thrown("Minimum stride = 3");
	}
};
h3d_prim_BigPrimitive.__name__ = "h3d.prim.BigPrimitive";
h3d_prim_BigPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_BigPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	begin: function(vcount,icount) {
		this.startIndex = this.bufPos / this.stride | 0;
		if(this.startIndex + vcount >= 65535) {
			if(vcount >= 65535) {
				throw haxe_Exception.thrown("Too many vertices in begin()");
			}
			this.flush();
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = h3d_prim_BigPrimitive.PREV_BUFFER;
			if(this.tmpBuf == null) {
				var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
				this.tmpBuf = this1;
			} else {
				h3d_prim_BigPrimitive.PREV_BUFFER = null;
			}
			if(this.isStatic) {
				var this1 = this.tmpBuf;
				var _g = this1.pos;
				var _g1 = 65535 * this.stride;
				while(_g < _g1) {
					var i = _g++;
					if(this1.pos == this1.array.length) {
						var newSize = this1.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						var newArray = new Float32Array(newSize);
						newArray.set(this1.array);
						this1.array = newArray;
					}
					this1.array[this1.pos++] = 0.;
				}
			}
		}
		if(!this.isStatic) {
			var this1 = this.tmpBuf;
			var _g = this1.pos;
			var _g1 = vcount * this.stride + this.bufPos;
			while(_g < _g1) {
				var i = _g++;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = 0.;
			}
		}
		if(this.tmpIdx == null) {
			this.tmpIdx = h3d_prim_BigPrimitive.PREV_INDEX;
			if(this.tmpIdx == null) {
				var this1 = new Array(0);
				this.tmpIdx = this1;
			} else {
				h3d_prim_BigPrimitive.PREV_INDEX = null;
			}
		}
		if(this.idxPos + icount > this.tmpIdx.length) {
			var size = this.tmpIdx.length == 0 ? 1024 : this.tmpIdx.length;
			var req = this.idxPos + icount;
			while(size < req) size <<= 1;
			var this1 = this.tmpIdx;
			while(this1.length < size) this1.push(0);
		}
	}
	,addPoint: function(x,y,z) {
		this.tmpBuf.array[this.bufPos++] = x;
		this.tmpBuf.array[this.bufPos++] = y;
		this.tmpBuf.array[this.bufPos++] = z;
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addBounds: function(x,y,z) {
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addVertexValue: function(v) {
		this.tmpBuf.array[this.bufPos++] = v;
	}
	,addIndex: function(i) {
		this.tmpIdx[this.idxPos++] = i + this.startIndex;
	}
	,triCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			count += i.count;
		}
		count += this.idxPos;
		return count / 3 | 0;
	}
	,vertexCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			count += b.vertices;
		}
		count += this.bufPos / this.stride | 0;
		return count;
	}
	,flush: function() {
		if(this.tmpBuf != null) {
			if(this.bufPos > 0 && this.idxPos > 0) {
				this.flushing = true;
				var b = h3d_Buffer.ofSubFloats(this.tmpBuf,this.stride,this.bufPos / this.stride | 0);
				if(this.isRaw) {
					b.flags |= 1 << h3d_BufferFlag.RawFormat._hx_index;
				}
				this.buffers.push(b);
				var idx = h3d_Indexes.alloc(this.tmpIdx,0,this.idxPos);
				this.allIndexes.push(idx);
				this.flushing = false;
			}
			if(h3d_prim_BigPrimitive.PREV_BUFFER == null || h3d_prim_BigPrimitive.PREV_BUFFER.pos < this.tmpBuf.pos) {
				h3d_prim_BigPrimitive.PREV_BUFFER = this.tmpBuf;
			}
			if(h3d_prim_BigPrimitive.PREV_INDEX == null || h3d_prim_BigPrimitive.PREV_INDEX.length < this.tmpIdx.length) {
				h3d_prim_BigPrimitive.PREV_INDEX = this.tmpIdx;
			}
			this.tmpBuf = null;
			this.tmpIdx = null;
			this.bufPos = 0;
			this.idxPos = 0;
			this.startIndex = 0;
		}
	}
	,render: function(engine) {
		if(this.tmpBuf != null) {
			this.flush();
		}
		var _g = 0;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			engine.renderIndexed(this.buffers[i],this.allIndexes[i]);
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,dispose: function() {
		this.clear();
	}
	,clear: function() {
		if(this.flushing) {
			throw haxe_Exception.thrown("Cannot clear() BigPrimitive while it's flushing");
		}
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.dispose();
		}
		this.buffers = [];
		this.allIndexes = [];
		this.bufPos = 0;
		this.idxPos = 0;
		this.tmpBuf = null;
		this.tmpIdx = null;
	}
	,add: function(buf,idx,dx,dy,dz,rotation,scale,stride) {
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.addSub(buf,idx,0,0,buf.pos / (stride < 0 ? this.stride : stride) | 0,idx.length / 3 | 0,dx,dy,dz,rotation,scale,stride);
	}
	,addSub: function(buf,idx,startVert,startTri,nvert,triCount,dx,dy,dz,rotation,scale,stride,deltaU,deltaV,color,mat) {
		if(color == null) {
			color = 1.;
		}
		if(deltaV == null) {
			deltaV = 0.;
		}
		if(deltaU == null) {
			deltaU = 0.;
		}
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		if(stride < 0) {
			stride = this.stride;
		}
		if(stride < this.stride) {
			throw haxe_Exception.thrown("only stride >= " + this.stride + " allowed");
		}
		this.begin(nvert,triCount * 3);
		var start = this.startIndex;
		var cr = Math.cos(rotation);
		var sr = Math.sin(rotation);
		var pos = this.bufPos;
		var tmpBuf = this.tmpBuf;
		var _g = 0;
		var _g1 = nvert;
		while(_g < _g1) {
			var i = _g++;
			var p = (i + startVert) * stride;
			var x = buf.array[p++];
			var y = buf.array[p++];
			var z = buf.array[p++];
			if(mat != null) {
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var pt_x = x1;
				var pt_y = y1;
				var pt_z = z1;
				var px = pt_x * mat._11 + pt_y * mat._21 + pt_z * mat._31 + mat._41;
				var py = pt_x * mat._12 + pt_y * mat._22 + pt_z * mat._32 + mat._42;
				var pz = pt_x * mat._13 + pt_y * mat._23 + pt_z * mat._33 + mat._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				tmpBuf.array[pos++] = pt_x;
				tmpBuf.array[pos++] = pt_y;
				tmpBuf.array[pos++] = pt_z;
				var _this = this.bounds;
				if(pt_x < _this.xMin) {
					_this.xMin = pt_x;
				}
				if(pt_x > _this.xMax) {
					_this.xMax = pt_x;
				}
				if(pt_y < _this.yMin) {
					_this.yMin = pt_y;
				}
				if(pt_y > _this.yMax) {
					_this.yMax = pt_y;
				}
				if(pt_z < _this.zMin) {
					_this.zMin = pt_z;
				}
				if(pt_z > _this.zMax) {
					_this.zMax = pt_z;
				}
			} else {
				var tx = (x * cr - y * sr) * scale;
				var ty = (x * sr + y * cr) * scale;
				var vx = dx + tx;
				var vy = dy + ty;
				var vz = dz + z * scale;
				tmpBuf.array[pos++] = vx;
				tmpBuf.array[pos++] = vy;
				tmpBuf.array[pos++] = vz;
				var _this1 = this.bounds;
				if(vx < _this1.xMin) {
					_this1.xMin = vx;
				}
				if(vx > _this1.xMax) {
					_this1.xMax = vx;
				}
				if(vy < _this1.yMin) {
					_this1.yMin = vy;
				}
				if(vy > _this1.yMax) {
					_this1.yMax = vy;
				}
				if(vz < _this1.zMin) {
					_this1.zMin = vz;
				}
				if(vz > _this1.zMax) {
					_this1.zMax = vz;
				}
			}
			if(this.stride >= 6) {
				var nx = buf.array[p++];
				var ny = buf.array[p++];
				var nz = buf.array[p++];
				if(mat != null) {
					var x2 = nx;
					var y2 = ny;
					var z2 = nz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var pt_x1 = x2;
					var pt_y1 = y2;
					var pt_z1 = z2;
					var px1 = pt_x1 * mat._11 + pt_y1 * mat._21 + pt_z1 * mat._31;
					var py1 = pt_x1 * mat._12 + pt_y1 * mat._22 + pt_z1 * mat._32;
					var pz1 = pt_x1 * mat._13 + pt_y1 * mat._23 + pt_z1 * mat._33;
					pt_x1 = px1;
					pt_y1 = py1;
					pt_z1 = pz1;
					var k = pt_x1 * pt_x1 + pt_y1 * pt_y1 + pt_z1 * pt_z1;
					k = 1. / Math.sqrt(k);
					pt_x1 *= k;
					pt_y1 *= k;
					pt_z1 *= k;
					tmpBuf.array[pos++] = pt_x1;
					tmpBuf.array[pos++] = pt_y1;
					tmpBuf.array[pos++] = pt_z1;
				} else {
					var tnx = nx * cr - ny * sr;
					var tny = nx * sr + ny * cr;
					tmpBuf.array[pos++] = tnx;
					tmpBuf.array[pos++] = tny;
					tmpBuf.array[pos++] = nz;
				}
			}
			var stride1 = this.stride;
			if(this.hasTangents) {
				var tx1 = buf.array[p++];
				var ty1 = buf.array[p++];
				var tz = buf.array[p++];
				if(mat != null) {
					var x3 = tx1;
					var y3 = ty1;
					var z3 = tz;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var pt_x2 = x3;
					var pt_y2 = y3;
					var pt_z2 = z3;
					var len = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					var px2 = pt_x2 * mat._11 + pt_y2 * mat._21 + pt_z2 * mat._31;
					var py2 = pt_x2 * mat._12 + pt_y2 * mat._22 + pt_z2 * mat._32;
					var pz2 = pt_x2 * mat._13 + pt_y2 * mat._23 + pt_z2 * mat._33;
					pt_x2 = px2;
					pt_y2 = py2;
					pt_z2 = pz2;
					var k1 = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					k1 = 1. / Math.sqrt(k1);
					pt_x2 *= k1;
					pt_y2 *= k1;
					pt_z2 *= k1;
					if(len < 0.5) {
						pt_x2 *= 0.5;
						pt_y2 *= 0.5;
						pt_z2 *= 0.5;
					}
					tmpBuf.array[pos++] = pt_x2;
					tmpBuf.array[pos++] = pt_y2;
					tmpBuf.array[pos++] = pt_z2;
				} else {
					var tnx1 = tx1 * cr - ty1 * sr;
					var tny1 = tx1 * sr + ty1 * cr;
					tmpBuf.array[pos++] = tnx1;
					tmpBuf.array[pos++] = tny1;
					tmpBuf.array[pos++] = tz;
				}
				stride1 -= 3;
			}
			switch(stride1) {
			case 3:case 6:
				continue;
			case 4:case 7:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				break;
			case 5:case 8:case 9:case 10:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				var _g2 = 8;
				var _g3 = stride1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
				break;
			default:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				var _g4 = 11;
				var _g5 = stride1;
				while(_g4 < _g5) {
					var i2 = _g4++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
			}
		}
		this.bufPos = pos;
		start -= startVert;
		var _g = 0;
		var _g1 = triCount * 3;
		while(_g < _g1) {
			var i = _g++;
			var tmp = idx[i + startTri * 3] + start;
			this.tmpIdx[this.idxPos++] = tmp;
		}
	}
	,__class__: h3d_prim_BigPrimitive
});
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	allocBuffer: function(engine,name) {
		return null;
	}
	,hasBuffer: function(name) {
		if(this.bufferCache == null) {
			return false;
		}
		var this1 = this.bufferCache;
		var key = hxsl_Globals.allocID(name);
		return this1.h.hasOwnProperty(key);
	}
	,addBuffer: function(name,buf,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		var id = hxsl_Globals.allocID(name);
		var old = this.bufferCache.h[id];
		if(old != null) {
			old.dispose();
		}
		var this1 = this.bufferCache;
		var value = new h3d_BufferOffset(buf,offset);
		this1.h[id] = value;
		this.layouts = null;
	}
	,dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.bufferCache != null) {
			var b = this.bufferCache.iterator();
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
		}
		this.bufferCache = null;
		this.layouts = null;
	}
	,getBuffers: function(engine) {
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		if(this.layouts == null) {
			this.layouts = new haxe_ds_IntMap();
		}
		var inputs = engine.driver.getShaderInputNames();
		var buffers = this.layouts.h[inputs.id];
		if(buffers != null) {
			return buffers;
		}
		var prev = null;
		var _g = 0;
		var _g1 = inputs.names;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var id = hxsl_Globals.allocID(name);
			var b = this.bufferCache.h[id];
			if(b == null) {
				b = this.allocBuffer(engine,name);
				if(b == null) {
					throw haxe_Exception.thrown("Buffer " + name + " is not available");
				}
				this.bufferCache.h[id] = b;
			}
			var b1 = new h3d_BufferOffset(b.buffer,b.offset);
			b = b1;
			if(prev == null) {
				prev = b;
				buffers = prev;
			} else {
				prev.next = b;
				prev = b;
			}
		}
		this.layouts.h[inputs.id] = buffers;
		return buffers;
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes);
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_Polygon = function(points,idx) {
	this.translatedZ = 0.;
	this.translatedY = 0.;
	this.translatedX = 0.;
	this.scaled = 1.;
	h3d_prim_MeshPrimitive.call(this);
	this.points = points;
	this.idx = idx;
};
h3d_prim_Polygon.__name__ = "h3d.prim.Polygon";
h3d_prim_Polygon.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_Polygon.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	getBounds: function() {
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	,alloc: function(engine) {
		this.dispose();
		var size = 3;
		var names = ["position"];
		var positions = [0];
		if(this.normals != null) {
			names.push("normal");
			positions.push(size);
			size += 3;
		}
		if(this.tangents != null) {
			names.push("tangent");
			positions.push(size);
			size += 3;
		}
		if(this.uvs != null) {
			names.push("uv");
			positions.push(size);
			size += 2;
		}
		if(this.colors != null) {
			names.push("color");
			positions.push(size);
			size += 3;
		}
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var buf = this1;
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var k = _g++;
			var p = this.points[k];
			var v = p.x;
			if(buf.pos == buf.array.length) {
				var newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v;
			var v1 = p.y;
			if(buf.pos == buf.array.length) {
				var newSize1 = buf.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(buf.array);
				buf.array = newArray1;
			}
			buf.array[buf.pos++] = v1;
			var v2 = p.z;
			if(buf.pos == buf.array.length) {
				var newSize2 = buf.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(buf.array);
				buf.array = newArray2;
			}
			buf.array[buf.pos++] = v2;
			if(this.normals != null) {
				var n = this.normals[k];
				var v3 = n.x;
				if(buf.pos == buf.array.length) {
					var newSize3 = buf.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(buf.array);
					buf.array = newArray3;
				}
				buf.array[buf.pos++] = v3;
				var v4 = n.y;
				if(buf.pos == buf.array.length) {
					var newSize4 = buf.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(buf.array);
					buf.array = newArray4;
				}
				buf.array[buf.pos++] = v4;
				var v5 = n.z;
				if(buf.pos == buf.array.length) {
					var newSize5 = buf.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(buf.array);
					buf.array = newArray5;
				}
				buf.array[buf.pos++] = v5;
			}
			if(this.tangents != null) {
				var t = this.tangents[k];
				var v6 = t.x;
				if(buf.pos == buf.array.length) {
					var newSize6 = buf.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(buf.array);
					buf.array = newArray6;
				}
				buf.array[buf.pos++] = v6;
				var v7 = t.y;
				if(buf.pos == buf.array.length) {
					var newSize7 = buf.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(buf.array);
					buf.array = newArray7;
				}
				buf.array[buf.pos++] = v7;
				var v8 = t.z;
				if(buf.pos == buf.array.length) {
					var newSize8 = buf.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(buf.array);
					buf.array = newArray8;
				}
				buf.array[buf.pos++] = v8;
			}
			if(this.uvs != null) {
				var t1 = this.uvs[k];
				var v9 = t1.u;
				if(buf.pos == buf.array.length) {
					var newSize9 = buf.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(buf.array);
					buf.array = newArray9;
				}
				buf.array[buf.pos++] = v9;
				var v10 = t1.v;
				if(buf.pos == buf.array.length) {
					var newSize10 = buf.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(buf.array);
					buf.array = newArray10;
				}
				buf.array[buf.pos++] = v10;
			}
			if(this.colors != null) {
				var c = this.colors[k];
				var v11 = c.x;
				if(buf.pos == buf.array.length) {
					var newSize11 = buf.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(buf.array);
					buf.array = newArray11;
				}
				buf.array[buf.pos++] = v11;
				var v12 = c.y;
				if(buf.pos == buf.array.length) {
					var newSize12 = buf.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(buf.array);
					buf.array = newArray12;
				}
				buf.array[buf.pos++] = v12;
				var v13 = c.z;
				if(buf.pos == buf.array.length) {
					var newSize13 = buf.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(buf.array);
					buf.array = newArray13;
				}
				buf.array[buf.pos++] = v13;
			}
		}
		var flags = [];
		if(this.idx == null) {
			flags.push(h3d_BufferFlag.Triangles);
		}
		if(this.normals == null || this.tangents != null) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(buf,size,flags);
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = _g++;
			this.addBuffer(names[i],this.buffer,positions[i]);
		}
		if(this.idx != null) {
			this.indexes = h3d_Indexes.alloc(this.idx);
		}
	}
	,unindex: function() {
		if(this.idx != null && this.points.length != this.idx.length) {
			var p = [];
			var _g = 0;
			var _g1 = this.idx.length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.points[this.idx[i]];
				p.push(new h3d_col_Point(_this.x,_this.y,_this.z));
			}
			if(this.normals != null) {
				var n = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.normals[this.idx[i]];
					n.push(new h3d_col_Point(_this.x,_this.y,_this.z));
				}
				this.normals = n;
			}
			if(this.tangents != null) {
				var t = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.tangents[this.idx[i]];
					t.push(new h3d_col_Point(_this.x,_this.y,_this.z));
				}
				this.tangents = t;
			}
			if(this.colors != null) {
				var n = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.colors[this.idx[i]];
					n.push(new h3d_col_Point(_this.x,_this.y,_this.z));
				}
				this.colors = n;
			}
			if(this.uvs != null) {
				var t = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					t.push(this.uvs[this.idx[i]].clone());
				}
				this.uvs = t;
			}
			this.points = p;
			this.idx = null;
		}
	}
	,translate: function(dx,dy,dz) {
		this.translatedX += dx;
		this.translatedY += dy;
		this.translatedZ += dz;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	,scale: function(s) {
		this.scaled *= s;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x *= s;
			p.y *= s;
			p.z *= s;
		}
	}
	,addNormals: function() {
		this.normals = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.normals[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g = 0;
		var _g1 = this.triCount();
		while(_g < _g1) {
			var i = _g++;
			var i0;
			var i1;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i1];
			var p2 = this.points[i2];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x1 = p2.x - p0.x;
			var y1 = p2.y - p0.y;
			var z1 = p2.z - p0.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x = x1;
			var p_y = y1;
			var p_z = z1;
			var x2 = _this_y * p_z - _this_z * p_y;
			var y2 = _this_z * p_x - _this_x * p_z;
			var z2 = _this_x * p_y - _this_y * p_x;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var n_x = x2;
			var n_y = y2;
			var n_z = z2;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i1].x += n_x;
			this.normals[i1].y += n_y;
			this.normals[i1].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
		}
		var _g = 0;
		var _g1 = this.normals;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.normalize();
		}
	}
	,addTangents: function() {
		if(this.normals == null) {
			this.addNormals();
		}
		if(this.uvs == null) {
			this.addUVs();
		}
		this.tangents = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.tangents[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g = 0;
		var _g1 = this.triCount();
		while(_g < _g1) {
			var i = _g++;
			var i0;
			var i1;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i1];
			var p2 = this.points[i2];
			var uv0 = this.uvs[i0];
			var uv1 = this.uvs[i1];
			var uv2 = this.uvs[i2];
			var n = this.normals[i0];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var k0_x = x;
			var k0_y = y;
			var k0_z = z;
			var x1 = p2.x - p0.x;
			var y1 = p2.y - p0.y;
			var z1 = p2.z - p0.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var k1_x = x1;
			var k1_y = y1;
			var k1_z = z1;
			var v = uv2.v - uv0.v;
			k0_x *= v;
			k0_y *= v;
			k0_z *= v;
			var v1 = uv1.v - uv0.v;
			k1_x *= v1;
			k1_y *= v1;
			k1_z *= v1;
			var t = new h3d_col_Point(k0_x - k1_x,k0_y - k1_y,k0_z - k1_z);
			var b = new h3d_col_Point(n.y * t.z - n.z * t.y,n.z * t.x - n.x * t.z,n.x * t.y - n.y * t.x);
			b.normalize();
			t = new h3d_col_Point(b.y * n.z - b.z * n.y,b.z * n.x - b.x * n.z,b.x * n.y - b.y * n.x);
			t.normalize();
			this.tangents[i0].x += t.x;
			this.tangents[i0].y += t.y;
			this.tangents[i0].z += t.z;
			this.tangents[i1].x += t.x;
			this.tangents[i1].y += t.y;
			this.tangents[i1].z += t.z;
			this.tangents[i2].x += t.x;
			this.tangents[i2].y += t.y;
			this.tangents[i2].z += t.z;
		}
		var _g = 0;
		var _g1 = this.tangents;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.normalize();
		}
	}
	,addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.uvs[i] = new h3d_prim_UV(this.points[i].x,this.points[i].y);
		}
	}
	,uvScale: function(su,sv) {
		if(this.uvs == null) {
			throw haxe_Exception.thrown("Missing UVs");
		}
		var m = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = this.uvs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(m.h.__keys__[t.__id__] != null) {
				continue;
			}
			m.set(t,true);
			t.u *= su;
			t.v *= sv;
		}
	}
	,triCount: function() {
		var n = h3d_prim_MeshPrimitive.prototype.triCount.call(this);
		if(n != 0) {
			return n;
		}
		return (this.idx == null ? this.points.length : this.idx.length) / 3 | 0;
	}
	,vertexCount: function() {
		return this.points.length;
	}
	,getCollider: function() {
		var this1 = new Array(this.points.length * 3);
		var vertexes = this1;
		var this1 = new Array(this.idx.length);
		var indexes = this1;
		var vid = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			vertexes[vid++] = p.x;
			vertexes[vid++] = p.y;
			vertexes[vid++] = p.z;
		}
		var _g = 0;
		var _g1 = this.idx.length;
		while(_g < _g1) {
			var i = _g++;
			indexes[i] = this.idx[i];
		}
		var poly = new h3d_col_Polygon();
		poly.addBuffers(vertexes,indexes);
		return poly;
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		var bufs = this.getBuffers(engine);
		if(this.indexes != null) {
			engine.renderMultiBuffers(bufs,this.indexes);
		} else if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
			engine.renderMultiBuffers(bufs,engine.mem.quadIndexes,0,this.triCount());
		} else {
			engine.renderMultiBuffers(bufs,engine.mem.triIndexes,0,this.triCount());
		}
	}
	,__class__: h3d_prim_Polygon
});
var h3d_prim_Cube = function(x,y,z,centered) {
	if(centered == null) {
		centered = false;
	}
	if(z == null) {
		z = 1.;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	this.sizeX = x;
	this.sizeY = y;
	this.sizeZ = z;
	var p = [new h3d_col_Point(0,0,0),new h3d_col_Point(x,0,0),new h3d_col_Point(0,y,0),new h3d_col_Point(0,0,z),new h3d_col_Point(x,y,0),new h3d_col_Point(x,0,z),new h3d_col_Point(0,y,z),new h3d_col_Point(x,y,z)];
	var this1 = new Array(0);
	var idx = this1;
	idx.push(0);
	idx.push(1);
	idx.push(5);
	idx.push(0);
	idx.push(5);
	idx.push(3);
	idx.push(1);
	idx.push(4);
	idx.push(7);
	idx.push(1);
	idx.push(7);
	idx.push(5);
	idx.push(3);
	idx.push(5);
	idx.push(7);
	idx.push(3);
	idx.push(7);
	idx.push(6);
	idx.push(0);
	idx.push(6);
	idx.push(2);
	idx.push(0);
	idx.push(3);
	idx.push(6);
	idx.push(2);
	idx.push(7);
	idx.push(4);
	idx.push(2);
	idx.push(6);
	idx.push(7);
	idx.push(0);
	idx.push(4);
	idx.push(1);
	idx.push(0);
	idx.push(2);
	idx.push(4);
	h3d_prim_Polygon.call(this,p,idx);
	if(centered) {
		this.translate(-x * 0.5,-y * 0.5,-z * 0.5);
	}
};
h3d_prim_Cube.__name__ = "h3d.prim.Cube";
h3d_prim_Cube.defaultUnitCube = function() {
	var engine = h3d_Engine.CURRENT;
	var c = engine.resCache.h[h3d_prim_Cube.__id__];
	if(c != null) {
		return c;
	}
	c = new h3d_prim_Cube(1,1,1);
	c.translate(-0.5,-0.5,-0.5);
	c.unindex();
	c.addNormals();
	c.addUniformUVs(1.0);
	c.addTangents();
	engine.resCache.set(h3d_prim_Cube,c);
	return c;
};
h3d_prim_Cube.__super__ = h3d_prim_Polygon;
h3d_prim_Cube.prototype = $extend(h3d_prim_Polygon.prototype,{
	addUVs: function() {
		this.unindex();
		var z = new h3d_prim_UV(0,1);
		var x = new h3d_prim_UV(1,1);
		var y = new h3d_prim_UV(0,0);
		var o = new h3d_prim_UV(1,0);
		this.uvs = [x,z,y,x,y,o,x,z,y,x,y,o,x,z,y,x,y,o,z,o,x,z,y,o,z,o,x,z,y,o,z,o,x,z,y,o];
	}
	,addUniformUVs: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		this.unindex();
		var v = scale;
		this.uvs = [new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0)];
	}
	,getCollider: function() {
		var x = this.translatedX;
		var y = this.translatedY;
		var z = this.translatedZ;
		var dx = this.sizeX * this.scaled;
		var dy = this.sizeY * this.scaled;
		var dz = this.sizeZ * this.scaled;
		var b = new h3d_col_Bounds();
		b.xMin = x;
		b.yMin = y;
		b.zMin = z;
		b.xMax = x + dx;
		b.yMax = y + dy;
		b.zMax = z + dz;
		return b;
	}
	,__class__: h3d_prim_Cube
});
var h3d_prim_Quads = function(pts,uvs,normals) {
	h3d_prim_Primitive.call(this);
	this.pts = pts;
	this.uvs = uvs;
	this.normals = normals;
};
h3d_prim_Quads.__name__ = "h3d.prim.Quads";
h3d_prim_Quads.__super__ = h3d_prim_Primitive;
h3d_prim_Quads.prototype = $extend(h3d_prim_Primitive.prototype,{
	getBounds: function() {
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.pts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	,triCount: function() {
		return this.pts.length >> 1;
	}
	,vertexCount: function() {
		return this.pts.length;
	}
	,transform: function(m) {
		var _g = 0;
		var _g1 = this.pts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
			var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
			var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
			p.x = px;
			p.y = py;
			p.z = pz;
		}
		if(this.normals != null) {
			var _g = 0;
			var _g1 = this.normals;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var px = n.x * m._11 + n.y * m._21 + n.z * m._31;
				var py = n.x * m._12 + n.y * m._22 + n.z * m._32;
				var pz = n.x * m._13 + n.y * m._23 + n.z * m._33;
				n.x = px;
				n.y = py;
				n.z = pz;
				n.normalize();
			}
		}
	}
	,translate: function(dx,dy,dz) {
		var _g = 0;
		var _g1 = this.pts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	,scale: function(x,y,z) {
		var _g = 0;
		var _g1 = this.pts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x *= x;
			p.y *= y;
			p.z *= z;
		}
	}
	,addUVs: function() {
		this.uvs = [];
		var a = new h3d_prim_UV(0,1);
		var b = new h3d_prim_UV(1,1);
		var c = new h3d_prim_UV(0,0);
		var d = new h3d_prim_UV(1,0);
		var _g = 0;
		var _g1 = this.pts.length >> 2;
		while(_g < _g1) {
			var i = _g++;
			this.uvs.push(a);
			this.uvs.push(b);
			this.uvs.push(c);
			this.uvs.push(d);
		}
	}
	,alloc: function(engine) {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = this1;
		var _g = 0;
		var _g1 = this.pts.length;
		while(_g < _g1) {
			var i = _g++;
			var pt = this.pts[i];
			var v1 = pt.x;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = v1;
			var v2 = pt.y;
			if(v.pos == v.array.length) {
				var newSize1 = v.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(v.array);
				v.array = newArray1;
			}
			v.array[v.pos++] = v2;
			var v3 = pt.z;
			if(v.pos == v.array.length) {
				var newSize2 = v.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(v.array);
				v.array = newArray2;
			}
			v.array[v.pos++] = v3;
			if(this.normals != null) {
				var n = this.normals[i];
				var v4 = n.x;
				if(v.pos == v.array.length) {
					var newSize3 = v.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(v.array);
					v.array = newArray3;
				}
				v.array[v.pos++] = v4;
				var v5 = n.y;
				if(v.pos == v.array.length) {
					var newSize4 = v.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(v.array);
					v.array = newArray4;
				}
				v.array[v.pos++] = v5;
				var v6 = n.z;
				if(v.pos == v.array.length) {
					var newSize5 = v.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(v.array);
					v.array = newArray5;
				}
				v.array[v.pos++] = v6;
			}
			if(this.uvs != null) {
				var t = this.uvs[i];
				var v7 = t.u;
				if(v.pos == v.array.length) {
					var newSize6 = v.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(v.array);
					v.array = newArray6;
				}
				v.array[v.pos++] = v7;
				var v8 = t.v;
				if(v.pos == v.array.length) {
					var newSize7 = v.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(v.array);
					v.array = newArray7;
				}
				v.array[v.pos++] = v8;
			}
		}
		var size = 3;
		if(this.normals != null) {
			size += 3;
		}
		if(this.uvs != null) {
			size += 2;
		}
		var flags = [h3d_BufferFlag.Quads];
		if(this.normals == null) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(v,size,flags);
	}
	,addNormals: function() {
		this.normals = [];
		var points = this.pts;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			this.normals[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g = 0;
		var _g1 = points.length >> 2;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i << 2;
			var i0 = i1;
			var i11 = i1 + 1;
			var i2 = i1 + 2;
			var p0 = points[i0];
			var p1 = points[i11];
			var p2 = points[i2];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x1 = p2.x - p0.x;
			var y1 = p2.y - p0.y;
			var z1 = p2.z - p0.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x = x1;
			var p_y = y1;
			var p_z = z1;
			var x2 = _this_y * p_z - _this_z * p_y;
			var y2 = _this_z * p_x - _this_x * p_z;
			var z2 = _this_x * p_y - _this_y * p_x;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var n_x = x2;
			var n_y = y2;
			var n_z = z2;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i11].x += n_x;
			this.normals[i11].y += n_y;
			this.normals[i11].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
			var i01 = i1 + 3;
			var i12 = i1 + 2;
			var i21 = i1 + 1;
			var p01 = points[i01];
			var p11 = points[i12];
			var p21 = points[i21];
			var x3 = p11.x - p01.x;
			var y3 = p11.y - p01.y;
			var z3 = p11.z - p01.z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var _this_x1 = x3;
			var _this_y1 = y3;
			var _this_z1 = z3;
			var x4 = p21.x - p01.x;
			var y4 = p21.y - p01.y;
			var z4 = p21.z - p01.z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p_x1 = x4;
			var p_y1 = y4;
			var p_z1 = z4;
			var x5 = _this_y1 * p_z1 - _this_z1 * p_y1;
			var y5 = _this_z1 * p_x1 - _this_x1 * p_z1;
			var z5 = _this_x1 * p_y1 - _this_y1 * p_x1;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x1 = x5;
			var n_y1 = y5;
			var n_z1 = z5;
			this.normals[i01].x += n_x1;
			this.normals[i01].y += n_y1;
			this.normals[i01].z += n_z1;
			this.normals[i12].x += n_x1;
			this.normals[i12].y += n_y1;
			this.normals[i12].z += n_z1;
			this.normals[i21].x += n_x1;
			this.normals[i21].y += n_y1;
			this.normals[i21].z += n_z1;
		}
		var _g = 0;
		var _g1 = this.normals;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.normalize();
		}
	}
	,getPoints: function() {
		return this.pts;
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Quads
});
var h3d_prim_Cylinder = function(segs,ray,height,centered) {
	if(centered == null) {
		centered = false;
	}
	if(height == null) {
		height = 1.0;
	}
	if(ray == null) {
		ray = 1.0;
	}
	var pts = [];
	var normals = [];
	var ds = Math.PI * 2 / segs;
	this.segs = segs;
	var z0 = centered ? -height * 0.5 : 0;
	var z1 = centered ? -z0 : height;
	var _g = 0;
	var _g1 = segs;
	while(_g < _g1) {
		var s = _g++;
		var a = s * ds;
		var a2 = (s + 1) * ds;
		var x = Math.cos(a) * ray;
		var y = Math.sin(a) * ray;
		var x2 = Math.cos(a2) * ray;
		var y2 = Math.sin(a2) * ray;
		pts.push(new h3d_col_Point(x,y,z0));
		pts.push(new h3d_col_Point(x2,y2,z0));
		pts.push(new h3d_col_Point(x,y,z1));
		pts.push(new h3d_col_Point(x2,y2,z1));
		var n0 = new h3d_col_Point(Math.cos(a),Math.sin(a),0);
		var n1 = new h3d_col_Point(Math.cos(a2),Math.sin(a2),0);
		normals.push(n0);
		normals.push(n1);
		normals.push(new h3d_col_Point(n0.x,n0.y,n0.z));
		normals.push(new h3d_col_Point(n1.x,n1.y,n1.z));
	}
	h3d_prim_Quads.call(this,pts,null,normals);
};
h3d_prim_Cylinder.__name__ = "h3d.prim.Cylinder";
h3d_prim_Cylinder.defaultUnitCylinder = function(segs) {
	if(segs == null) {
		segs = 16;
	}
	var engine = h3d_Engine.CURRENT;
	var c = engine.resCache.h[h3d_prim_Cylinder.__id__];
	if(c != null) {
		return c;
	}
	c = new h3d_prim_Cylinder(segs,0.5);
	c.addUVs();
	engine.resCache.set(h3d_prim_Cylinder,c);
	return c;
};
h3d_prim_Cylinder.__super__ = h3d_prim_Quads;
h3d_prim_Cylinder.prototype = $extend(h3d_prim_Quads.prototype,{
	addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.segs;
		while(_g < _g1) {
			var s = _g++;
			var u = s / this.segs;
			var u2 = (s + 1) / this.segs;
			this.uvs.push(new h3d_prim_UV(1 - u,1));
			this.uvs.push(new h3d_prim_UV(1 - u2,1));
			this.uvs.push(new h3d_prim_UV(1 - u,0));
			this.uvs.push(new h3d_prim_UV(1 - u2,0));
		}
	}
	,__class__: h3d_prim_Cylinder
});
var h3d_prim_HMDModel = function(data,dataPos,lib) {
	this.bufferAliases = new haxe_ds_StringMap();
	h3d_prim_MeshPrimitive.call(this);
	this.data = data;
	this.dataPosition = dataPos;
	this.lib = lib;
};
h3d_prim_HMDModel.__name__ = "h3d.prim.HMDModel";
h3d_prim_HMDModel.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_HMDModel.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	triCount: function() {
		return this.data.get_indexCount() / 3 | 0;
	}
	,vertexCount: function() {
		return this.data.vertexCount;
	}
	,getBounds: function() {
		return this.data.bounds;
	}
	,selectMaterial: function(i) {
		this.curMaterial = i;
	}
	,getDataBuffers: function(fmt,defaults,material) {
		return this.lib.getBuffers(this.data,fmt,defaults,material);
	}
	,loadSkin: function(skin) {
		this.lib.loadSkin(this.data,skin);
	}
	,addAlias: function(name,realName,offset) {
		if(offset == null) {
			offset = 0;
		}
		var old = this.bufferAliases.h[name];
		if(old != null) {
			if(old.realName != realName || old.offset != offset) {
				throw haxe_Exception.thrown("Conflicting alias " + name);
			}
			return;
		}
		this.bufferAliases.h[name] = { realName : realName, offset : offset};
		if(this.bufferCache != null) {
			this.allocAlias(name);
		}
	}
	,alloc: function(engine) {
		this.dispose();
		this.buffer = new h3d_Buffer(this.data.vertexCount,this.data.vertexStride);
		var entry = this.lib.resource.entry;
		entry.open();
		entry.skip(this.dataPosition + this.data.vertexPosition);
		var size = this.data.vertexCount * this.data.vertexStride * 4;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
		entry.read(bytes,0,size);
		this.buffer.uploadBytes(bytes,0,this.data.vertexCount);
		this.indexCount = 0;
		this.indexesTriPos = [];
		var _g = 0;
		var _g1 = this.data.indexCounts;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			this.indexesTriPos.push(this.indexCount / 3 | 0);
			this.indexCount += n;
		}
		this.indexes = new h3d_Indexes(this.indexCount);
		entry.skip(this.data.indexPosition - (this.data.vertexPosition + size));
		var bytes = new haxe_io_Bytes(new ArrayBuffer(this.indexCount * 2));
		entry.read(bytes,0,this.indexCount * 2);
		this.indexes.uploadBytes(bytes,0,this.indexCount);
		entry.close();
		var pos = 0;
		var _g = 0;
		var _g1 = this.data.vertexFormat;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addBuffer(f.name,this.buffer,pos);
			pos += f.format & 7;
		}
		if(this.normalsRecomputed != null) {
			this.recomputeNormals(this.normalsRecomputed);
		}
		var name = haxe_ds_StringMap.keysIterator(this.bufferAliases.h);
		while(name.hasNext()) {
			var name1 = name.next();
			this.allocAlias(name1);
		}
	}
	,allocAlias: function(name) {
		var alias = this.bufferAliases.h[name];
		var this1 = this.bufferCache;
		var key = hxsl_Globals.allocID(alias.realName);
		var buffer = this1.h[key];
		if(buffer == null) {
			throw haxe_Exception.thrown("Buffer " + alias.realName + " not found for alias " + name);
		}
		if(buffer.offset + alias.offset > buffer.buffer.buffer.stride) {
			throw haxe_Exception.thrown("Alias " + name + " for buffer " + alias.realName + " outside stride");
		}
		this.addBuffer(name,buffer.buffer,buffer.offset + alias.offset);
	}
	,recomputeNormals: function(name) {
		if(name == null) {
			name = "normal";
		}
		var pos = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		var ids = [];
		var pts = [];
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var added = false;
			var px = pos.vertexes[i * 3];
			var py = pos.vertexes[i * 3 + 1];
			var pz = pos.vertexes[i * 3 + 2];
			var _g2 = 0;
			var _g3 = pts.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = pts[i1];
				if(p.x == px && p.y == py && p.z == pz) {
					ids.push(i1);
					added = true;
					break;
				}
			}
			if(!added) {
				ids.push(pts.length);
				pts.push(new h3d_col_Point(px,py,pz));
			}
		}
		var this1 = new Array(0);
		var idx = this1;
		var _g = 0;
		var _g1 = pos.indexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			idx.push(ids[i]);
		}
		var pol = new h3d_prim_Polygon(pts,idx);
		pol.addNormals();
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = this1;
		var _g = v.pos;
		var _g1 = this.data.vertexCount * 3;
		while(_g < _g1) {
			var i = _g++;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		var k = 0;
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var n = pol.normals[ids[i]];
			v.array[k++] = n.x;
			v.array[k++] = n.y;
			v.array[k++] = n.z;
		}
		var buf = h3d_Buffer.ofFloats(v,3);
		this.addBuffer(name,buf,0);
		this.normalsRecomputed = name;
	}
	,render: function(engine) {
		if(this.curMaterial < 0) {
			h3d_prim_MeshPrimitive.prototype.render.call(this,engine);
			return;
		}
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		this.curMaterial = -1;
	}
	,initCollider: function(poly) {
		var buf = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		poly.setData(buf.vertexes,buf.indexes);
		if(this.collider == null) {
			var _this = this.data.bounds;
			var dx = _this.xMax - _this.xMin;
			var dy = _this.yMax - _this.yMin;
			var dz = _this.zMax - _this.zMin;
			var sphere = new h3d_col_Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
			this.collider = new h3d_col_OptimizedCollider(sphere,poly);
		}
	}
	,getCollider: function() {
		if(this.collider != null) {
			return this.collider;
		}
		var poly = new h3d_col_PolygonBuffer();
		poly.source = { entry : this.lib.resource.entry, geometryName : null};
		var _g = 0;
		var _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(this.lib.header.geometries[h.geometry] == this.data) {
				poly.source.geometryName = h.name;
				break;
			}
		}
		this.initCollider(poly);
		return this.collider;
	}
	,__class__: h3d_prim_HMDModel
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,vertexCount: function() {
		return 4;
	}
	,alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,vertexCount: function() {
		return this.vcount;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_prim_Sphere = function(ray,segsW,segsH) {
	if(segsH == null) {
		segsH = 6;
	}
	if(segsW == null) {
		segsW = 8;
	}
	if(ray == null) {
		ray = 1.;
	}
	this.ray = ray;
	this.segsH = segsH;
	this.segsW = segsW;
	var dp = Math.PI * 2 / segsW;
	var pts = [];
	var this1 = new Array(0);
	var idx = this1;
	var dx = 1;
	var dy = segsW + 1;
	var _g = 0;
	var _g1 = segsH + 1;
	while(_g < _g1) {
		var y = _g++;
		var t = y / segsH * Math.PI;
		var st = Math.sin(t);
		var pz = Math.cos(t);
		var p = 0.;
		var _g2 = 0;
		var _g3 = segsW + 1;
		while(_g2 < _g3) {
			var x = _g2++;
			var px = st * Math.cos(p);
			var py = st * Math.sin(p);
			var i = pts.length;
			pts.push(new h3d_col_Point(px * ray,py * ray,pz * ray));
			p += dp;
		}
	}
	var _g = 0;
	var _g1 = segsH;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = segsW;
		while(_g2 < _g3) {
			var x = _g2++;
			var v1 = x + 1 + y * (segsW + 1);
			var v2 = x + y * (segsW + 1);
			var v3 = x + (y + 1) * (segsW + 1);
			var v4 = x + 1 + (y + 1) * (segsW + 1);
			if(y != 0) {
				idx.push(v1);
				idx.push(v2);
				idx.push(v4);
			}
			if(y != segsH - 1) {
				idx.push(v2);
				idx.push(v3);
				idx.push(v4);
			}
		}
	}
	h3d_prim_Polygon.call(this,pts,idx);
};
h3d_prim_Sphere.__name__ = "h3d.prim.Sphere";
h3d_prim_Sphere.defaultUnitSphere = function() {
	var engine = h3d_Engine.CURRENT;
	var s = engine.resCache.h[h3d_prim_Sphere.__id__];
	if(s != null) {
		return s;
	}
	s = new h3d_prim_Sphere(1,16,16);
	s.addNormals();
	s.addUVs();
	engine.resCache.set(h3d_prim_Sphere,s);
	return s;
};
h3d_prim_Sphere.__super__ = h3d_prim_Polygon;
h3d_prim_Sphere.prototype = $extend(h3d_prim_Polygon.prototype,{
	getCollider: function() {
		return new h3d_col_Sphere(this.translatedX,this.translatedY,this.translatedZ,this.ray * this.scaled);
	}
	,addNormals: function() {
		this.normals = this.points;
	}
	,addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.segsH + 1;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.segsW + 1;
			while(_g2 < _g3) {
				var x = _g2++;
				this.uvs.push(new h3d_prim_UV(1 - x / this.segsW,y / this.segsH));
			}
		}
	}
	,__class__: h3d_prim_Sphere
});
var h3d_prim_UV = function(u,v) {
	this.u = u;
	this.v = v;
};
h3d_prim_UV.__name__ = "h3d.prim.UV";
h3d_prim_UV.prototype = {
	clone: function() {
		return new h3d_prim_UV(this.u,this.v);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.u) + "," + hxd_Math.fmt(this.v) + "}";
	}
	,__class__: h3d_prim_UV
};
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,get_visible: function() {
		return (this.flags & 2) != 0;
	}
	,get_allocated: function() {
		return (this.flags & 32) != 0;
	}
	,get_posChanged: function() {
		return (this.flags & 1) != 0;
	}
	,get_culled: function() {
		return (this.flags & 4) != 0;
	}
	,get_followPositionOnly: function() {
		return (this.flags & 8) != 0;
	}
	,get_lightCameraCenter: function() {
		return (this.flags & 16) != 0;
	}
	,get_alwaysSync: function() {
		return (this.flags & 64) != 0;
	}
	,get_inheritCulled: function() {
		return (this.flags & 128) != 0;
	}
	,get_ignoreBounds: function() {
		return (this.flags & 512) != 0;
	}
	,get_ignoreCollide: function() {
		return (this.flags & 1024) != 0;
	}
	,get_allowSerialize: function() {
		return (this.flags & 256) == 0;
	}
	,get_ignoreParentTransform: function() {
		return (this.flags & 2048) != 0;
	}
	,get_cullingColliderInherited: function() {
		return (this.flags & 4096) != 0;
	}
	,set_posChanged: function(b) {
		var f = 1;
		var b1 = b || this.follow != null;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b1;
	}
	,set_culled: function(b) {
		var f = 4;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_visible: function(b) {
		var f = 2;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allocated: function(b) {
		var f = 32;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_followPositionOnly: function(b) {
		var f = 8;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_lightCameraCenter: function(b) {
		var f = 16;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_alwaysSync: function(b) {
		var f = 64;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreBounds: function(b) {
		var f = 512;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_inheritCulled: function(b) {
		var f = 128;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreCollide: function(b) {
		var f = 1024;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allowSerialize: function(b) {
		var f = 256;
		var b1 = !b;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return !b1;
	}
	,set_ignoreParentTransform: function(b) {
		var f = 2048;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_cullingColliderInherited: function(b) {
		var f = 4096;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,playAnimation: function(a) {
		return this.currentAnimation = a.createInstance(this);
	}
	,switchToAnimation: function(a) {
		return this.currentAnimation = a;
	}
	,stopAnimation: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.currentAnimation = null;
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.stopAnimation(true);
			}
		}
	}
	,applyAnimationTransform: function(recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.defaultTransform != null) {
			var _this = this.defaultTransform;
			var v = null;
			if(v == null) {
				v = new h3d_Vector();
			}
			v.x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
			v.y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
			v.z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
			if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
				v.x *= -1;
				v.y *= -1;
				v.z *= -1;
			}
			var s = v;
			var v = s.x;
			this.scaleX = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = s.y;
			this.scaleY = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = s.z;
			this.scaleZ = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.qRot.initRotateMatrix(this.defaultTransform);
			var v = this.defaultTransform._41;
			this.x = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = this.defaultTransform._42;
			this.y = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = this.defaultTransform._43;
			this.z = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = null;
			this.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.applyAnimationTransform();
			}
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var m = o.getMaterialByName(name);
			if(m != null) {
				return m;
			}
		}
		return null;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.getMaterials(a);
		}
		return a;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,globalToLocal: function(pt) {
		var m = this.getInvPos();
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,getBounds: function(b) {
		if(b == null) {
			b = new h3d_col_Bounds();
		}
		if(this.parent != null) {
			this.parent.syncPos();
		}
		return this.getBoundsRec(b);
	}
	,getBoundsRec: function(b) {
		if((this.flags & 1) != 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
			var f = 1;
			var b1 = this.follow != null;
			if(b1) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.getBoundsRec(b);
		}
		return b;
	}
	,getMeshes: function(out) {
		if(out == null) {
			out = [];
		}
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			out.push(m);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.getMeshes(out);
		}
		return out;
	}
	,getMeshByName: function(name) {
		var value = this.getObjectByName(name);
		if(((value) instanceof h3d_scene_Mesh)) {
			return value;
		} else {
			return null;
		}
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,clone: function(o) {
		if(o == null) {
			o = new h3d_scene_Object();
		}
		if(js_Boot.getClass(o) != js_Boot.getClass(this)) {
			throw haxe_Exception.thrown(Std.string(this) + " is missing clone()");
		}
		var v = this.x;
		o.x = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.y;
		o.y = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.z;
		o.z = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleX;
		o.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleY;
		o.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleZ;
		o.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var _this = o.qRot;
		var q = this.qRot;
		_this.x = q.x;
		_this.y = q.y;
		_this.z = q.z;
		_this.w = q.w;
		o.name = this.name;
		o.set_follow(this.follow);
		var b = (this.flags & 8) != 0;
		var f = 8;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var b = (this.flags & 2) != 0;
		var f = 2;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if(this.defaultTransform != null) {
			var v = this.defaultTransform.clone();
			o.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var c1 = c.clone();
			c1.parent = o;
			o.children.push(c1);
		}
		return o;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,isMesh: function() {
		return (((this) instanceof h3d_scene_Mesh) ? this : null) != null;
	}
	,toMesh: function() {
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			return m;
		}
		throw haxe_Exception.thrown(Std.string(this) + " is not a Mesh");
	}
	,getCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var colliders = [];
		var col = this.getGlobalCollider();
		if(col != null) {
			colliders.push(col);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var c = obj.getCollider();
			if(c == null) {
				continue;
			}
			var cgrp = ((c) instanceof h3d_col_GroupCollider) ? c : null;
			if(cgrp != null) {
				var _g2 = 0;
				var _g3 = cgrp.colliders;
				while(_g2 < _g3.length) {
					var c1 = _g3[_g2];
					++_g2;
					colliders.push(c1);
				}
			} else {
				colliders.push(c);
			}
		}
		if(colliders.length == 0) {
			return null;
		}
		if(colliders.length == 1) {
			return colliders[0];
		}
		return new h3d_col_GroupCollider(colliders);
	}
	,getGlobalCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var col = this.getLocalCollider();
		if(col == null) {
			return null;
		} else {
			return new h3d_col_ObjectCollider(this,col);
		}
	}
	,getLocalCollider: function() {
		return null;
	}
	,draw: function(ctx) {
	}
	,set_follow: function(v) {
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return this.follow = v;
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
	,set_x: function(v) {
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_y: function(v) {
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_z: function(v) {
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleX: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleY: function(v) {
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleZ: function(v) {
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_defaultTransform: function(v) {
		this.defaultTransform = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,setPosition: function(x,y,z) {
		this.x = x;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = y;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.z = z;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setTransform: function(mat) {
		var v = h3d_scene_Object.tmpVec;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(mat._11 * mat._11 + mat._12 * mat._12 + mat._13 * mat._13);
		v.y = Math.sqrt(mat._21 * mat._21 + mat._22 * mat._22 + mat._23 * mat._23);
		v.z = Math.sqrt(mat._31 * mat._31 + mat._32 * mat._32 + mat._33 * mat._33);
		if(mat._11 * (mat._22 * mat._33 - mat._23 * mat._32) + mat._12 * (mat._23 * mat._31 - mat._21 * mat._33) + mat._13 * (mat._21 * mat._32 - mat._22 * mat._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var s = v;
		var v = mat._41;
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = mat._42;
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = mat._43;
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s.x;
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s.y;
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s.z;
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		h3d_scene_Object.tmpMat.load(mat);
		h3d_scene_Object.tmpMat.prependScale(1.0 / s.x,1.0 / s.y,1.0 / s.z);
		this.qRot.initRotateMatrix(h3d_scene_Object.tmpMat);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,rotate: function(rx,ry,rz) {
		var qTmp = new h3d_Quat();
		qTmp.initRotation(rx,ry,rz);
		this.qRot.multiply(qTmp,this.qRot);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotation: function(rx,ry,rz) {
		this.qRot.initRotation(rx,ry,rz);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotationAxis: function(ax,ay,az,angle) {
		this.qRot.initRotateAxis(ax,ay,az,angle);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setDirection: function(v) {
		this.qRot.initDirection(v);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,getDirection: function() {
		var _this = this.qRot;
		return new h3d_Vector(1 - 2 * (_this.y * _this.y + _this.z * _this.z),2 * (_this.x * _this.y - _this.z * _this.w),2 * (_this.x * _this.z + _this.y * _this.w));
	}
	,getRotationQuat: function() {
		return this.qRot;
	}
	,setRotationQuat: function(q) {
		this.qRot = q;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,scale: function(v) {
		var _g = this;
		var v1 = _g.scaleX * v;
		_g.scaleX = v1;
		var f = 1;
		var b = true;
		if(b) {
			_g.flags |= f;
		} else {
			_g.flags &= ~f;
		}
		var _g = this;
		var v1 = _g.scaleY * v;
		_g.scaleY = v1;
		var f = 1;
		var b = true;
		if(b) {
			_g.flags |= f;
		} else {
			_g.flags &= ~f;
		}
		var _g = this;
		var v1 = _g.scaleZ * v;
		_g.scaleZ = v1;
		var f = 1;
		var b = true;
		if(b) {
			_g.flags |= f;
		} else {
			_g.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setScale: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop() + (this.name == null ? "" : "(" + this.name + ")");
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h3d_$scene_$Object(this.children);
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_CameraController = function(distance,parent) {
	this.targetOffset = new h3d_Vector(0,0,0,0);
	this.targetPos = new h3d_Vector(0.4,Math.PI / 4,Math.PI * 5 / 13);
	this.curOffset = new h3d_Vector();
	this.curPos = new h3d_Vector();
	this.moveY = 0.;
	this.moveX = 0.;
	this.pushStartY = 0.;
	this.pushStartX = 0.;
	this.pushY = 0.;
	this.pushX = 0.;
	this.pushing = -1;
	this.lockZPlanes = false;
	this.smooth = 0.6;
	this.panSpeed = 1.;
	this.fovZoomAmount = 1.1;
	this.zoomAmount = 1.15;
	this.rotateSpeed = 1.;
	this.friction = 0.4;
	h3d_scene_Object.call(this,parent);
	this.name = "CameraController";
	this.set(distance);
	var f = 256;
	this.flags |= f;
	var _this = this.curPos;
	var v = this.targetPos;
	_this.x = v.x;
	_this.y = v.y;
	_this.z = v.z;
	_this.w = v.w;
	var _this = this.curOffset;
	var v = this.targetOffset;
	_this.x = v.x;
	_this.y = v.y;
	_this.z = v.z;
	_this.w = v.w;
};
h3d_scene_CameraController.__name__ = "h3d.scene.CameraController";
h3d_scene_CameraController.__super__ = h3d_scene_Object;
h3d_scene_CameraController.prototype = $extend(h3d_scene_Object.prototype,{
	get_distance: function() {
		return this.curPos.x / this.curOffset.w;
	}
	,get_theta: function() {
		return this.curPos.y;
	}
	,get_phi: function() {
		return this.curPos.z;
	}
	,get_fovY: function() {
		return this.curOffset.w;
	}
	,get_target: function() {
		var _this = this.curOffset;
		return new h3d_col_Point(_this.x,_this.y,_this.z);
	}
	,set: function(distance,theta,phi,target,fovY) {
		if(theta != null) {
			this.targetPos.y = theta;
		}
		if(phi != null) {
			this.targetPos.z = phi;
		}
		if(target != null) {
			var _this = this.targetOffset;
			var x = target.x;
			var y = target.y;
			var z = target.z;
			var w = this.targetOffset.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		if(fovY != null) {
			this.targetOffset.w = fovY;
		}
		if(distance != null) {
			this.targetPos.x = distance * (this.targetOffset.w == 0 ? 1 : this.targetOffset.w);
		}
	}
	,loadFromCamera: function(animate) {
		if(animate == null) {
			animate = false;
		}
		var scene = this.scene == null ? this.getScene() : this.scene;
		if(scene == null) {
			throw haxe_Exception.thrown("Not in scene");
		}
		var _this = this.targetOffset;
		var v = scene.camera.target;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		this.targetOffset.w = scene.camera.fovY;
		var _this = scene.camera.pos;
		var v = scene.camera.target;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var pos_x = x;
		var pos_y = y;
		var pos_z = z;
		var pos_w = w;
		var r = Math.sqrt(pos_x * pos_x + pos_y * pos_y + pos_z * pos_z);
		var _this = this.targetPos;
		var x = r;
		var y = Math.atan2(pos_y,pos_x);
		var z = Math.acos(pos_z / r);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.targetPos.x *= this.targetOffset.w;
		this.curOffset.w = scene.camera.fovY;
		if(!animate) {
			this.toTarget();
		} else {
			this.syncCamera();
		}
	}
	,initFromScene: function() {
		var scene = this.getScene();
		if(scene == null) {
			throw haxe_Exception.thrown("Not in scene");
		}
		var bounds = scene.getBounds();
		var x = (bounds.xMin + bounds.xMax) * 0.5;
		var y = (bounds.yMin + bounds.yMax) * 0.5;
		var z = (bounds.zMin + bounds.zMax) * 0.5;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var center_x = x;
		var center_y = y;
		var center_z = z;
		var _this = scene.camera.target;
		var x = center_x;
		var y = center_y;
		var z = center_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = 1.;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		_this.w = v_w;
		var x = bounds.xMax;
		var y = bounds.yMax;
		var z = bounds.zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var d = new h3d_col_Point(_this_x - center_x,_this_y - center_y,_this_z - center_z);
		d.x *= 5;
		d.y *= 5;
		d.z *= 5;
		d.z *= 0.5;
		d = new h3d_col_Point(d.x + center_x,d.y + center_y,d.z + center_z);
		var _this = scene.camera.pos;
		var x = d.x;
		var y = d.y;
		var z = d.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = 1.;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		_this.w = v_w;
		this.loadFromCamera();
	}
	,toTarget: function() {
		var _this = this.curPos;
		var v = this.targetPos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.curOffset;
		var v = this.targetOffset;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		this.syncCamera();
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		this.scene = this.getScene();
		this.scene.addEventListener($bind(this,this.onEvent));
		if(this.curOffset.w == 0) {
			this.curPos.x *= this.scene.camera.fovY;
		}
		this.curOffset.w = this.scene.camera.fovY;
		var _this = this.targetPos;
		var v = this.curPos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.targetOffset;
		var v = this.curOffset;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
	}
	,onRemove: function() {
		h3d_scene_Object.prototype.onRemove.call(this);
		this.scene.removeEventListener($bind(this,this.onEvent));
		this.scene = null;
	}
	,onClick: function(e) {
	}
	,onEvent: function(e) {
		var _gthis = this;
		var p = this;
		while(p != null) {
			if((p.flags & 2) == 0) {
				e.propagate = true;
				return;
			}
			p = p.parent;
		}
		switch(e.kind._hx_index) {
		case 0:
			this.scene.events.startDrag($bind(this,this.onEvent),function() {
				_gthis.pushing = -1;
			},e);
			this.pushing = e.button;
			this.pushTime = HxOverrides.now() / 1000;
			this.pushStartX = this.pushX = e.relX;
			this.pushStartY = this.pushY = e.relY;
			break;
		case 1:case 10:
			if(this.pushing == e.button) {
				this.pushing = -1;
				this.scene.events.stopDrag();
				var tmp;
				if(e.kind == hxd_EventKind.ERelease && HxOverrides.now() / 1000 - this.pushTime < 0.2) {
					var dx = e.relX - this.pushStartX;
					var dy = e.relY - this.pushStartY;
					var dz = 0.;
					if(dz == null) {
						dz = 0.;
					}
					tmp = Math.sqrt(dx * dx + dy * dy + dz * dz) < 5;
				} else {
					tmp = false;
				}
				if(tmp) {
					this.onClick(e);
				}
			}
			break;
		case 2:
			switch(this.pushing) {
			case 0:
				if(hxd_Key.isDown(18)) {
					this.zoom(-(e.relX - this.pushX + (e.relY - this.pushY)) * 0.03);
				} else {
					this.rot(e.relX - this.pushX,e.relY - this.pushY);
				}
				this.pushX = e.relX;
				this.pushY = e.relY;
				break;
			case 1:
				var m = 0.001 * this.curPos.x * this.panSpeed / 25;
				this.pan(-(e.relX - this.pushX) * m,(e.relY - this.pushY) * m);
				this.pushX = e.relX;
				this.pushY = e.relY;
				break;
			case 2:
				this.rot(e.relX - this.pushX,e.relY - this.pushY);
				this.pushX = e.relX;
				this.pushY = e.relY;
				break;
			default:
			}
			break;
		case 5:
			if(hxd_Key.isDown(17)) {
				this.fov(e.wheelDelta * this.fovZoomAmount * 2);
			} else {
				this.zoom(e.wheelDelta);
			}
			break;
		default:
		}
	}
	,fov: function(delta) {
		this.targetOffset.w += delta;
		if(this.targetOffset.w >= 179) {
			this.targetOffset.w = 179;
		}
		if(this.targetOffset.w < 1) {
			this.targetOffset.w = 1;
		}
	}
	,zoom: function(delta) {
		this.targetPos.x *= Math.pow(this.zoomAmount,delta);
	}
	,rot: function(dx,dy) {
		this.moveX += dx;
		this.moveY += dy;
	}
	,pan: function(dx,dy) {
		var x = dx;
		var y = dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = 0.;
		var v_w = 1.;
		this.scene.camera.update();
		var m = this.scene.camera.getInverseView();
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = 0;
		var _this = this.targetOffset;
		this.targetOffset = new h3d_Vector(_this.x + v_x,_this.y + v_y,_this.z + v_z,_this.w + v_w);
	}
	,syncCamera: function() {
		var cam = this.getScene().camera;
		var distance = this.curPos.x / this.curOffset.w;
		var _this = cam.target;
		var v = this.curOffset;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		cam.target.w = 1;
		var _this = cam.pos;
		var x = distance * Math.cos(this.curPos.y) * Math.sin(this.curPos.z) + cam.target.x;
		var y = distance * Math.sin(this.curPos.y) * Math.sin(this.curPos.z) + cam.target.y;
		var z = distance * Math.cos(this.curPos.z) + cam.target.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		if(!this.lockZPlanes) {
			cam.zNear = distance * 0.01;
			cam.zFar = distance * 100;
		}
		cam.fovY = this.curOffset.w;
	}
	,sync: function(ctx) {
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			h3d_scene_Object.prototype.sync.call(this,ctx);
			return;
		}
		if(this.moveX != 0) {
			this.targetPos.y += this.moveX * 0.003 * this.rotateSpeed;
			this.moveX *= 1 - this.friction;
			if(Math.abs(this.moveX) < 1) {
				this.moveX = 0;
			}
		}
		if(this.moveY != 0) {
			this.targetPos.z -= this.moveY * 0.003 * this.rotateSpeed;
			var E = 2e-5;
			var bound = Math.PI - E;
			if(this.targetPos.z < E) {
				this.targetPos.z = E;
			}
			if(this.targetPos.z > bound) {
				this.targetPos.z = bound;
			}
			this.moveY *= 1 - this.friction;
			if(Math.abs(this.moveY) < 1) {
				this.moveY = 0;
			}
		}
		var b = 1 - Math.pow(this.smooth,ctx.elapsedTime * 60);
		var dt = 1 > b ? b : 1;
		var cam = this.scene.camera;
		var _this = this.curOffset;
		var v1 = this.curOffset;
		var v2 = this.targetOffset;
		var a = v1.x;
		var x = a + dt * (v2.x - a);
		var a = v1.y;
		var y = a + dt * (v2.y - a);
		var a = v1.z;
		var z = a + dt * (v2.z - a);
		var a = v1.w;
		var w = a + dt * (v2.w - a);
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		var _this = this.curPos;
		var v1 = this.curPos;
		var v2 = this.targetPos;
		var a = v1.x;
		var x = a + dt * (v2.x - a);
		var a = v1.y;
		var y = a + dt * (v2.y - a);
		var a = v1.z;
		var z = a + dt * (v2.z - a);
		var a = v1.w;
		var w = a + dt * (v2.w - a);
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.syncCamera();
		h3d_scene_Object.prototype.sync.call(this,ctx);
	}
	,__class__: h3d_scene_CameraController
});
var h3d_scene__$Graphics_GPoint = function(x,y,z,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
h3d_scene__$Graphics_GPoint.__name__ = "h3d.scene._Graphics.GPoint";
h3d_scene__$Graphics_GPoint.prototype = {
	__class__: h3d_scene__$Graphics_GPoint
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	getMeshMaterials: function() {
		return [this.material];
	}
	,getBoundsRec: function(b) {
		b = h3d_scene_Object.prototype.getBoundsRec.call(this,b);
		if(this.primitive == null || (this.flags & 512) != 0) {
			return b;
		}
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		tmp.transform(this.absPos);
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_Mesh(null,this.material) : o;
		m.set_primitive(this.primitive);
		m.material = this.material.clone();
		h3d_scene_Object.prototype.clone.call(this,m);
		return m;
	}
	,getLocalCollider: function() {
		return this.primitive.getCollider();
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,getMaterialByName: function(name) {
		if(this.material != null && this.material.name == name) {
			return this.material;
		}
		return h3d_scene_Object.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		if(this.material != null && a.indexOf(this.material) < 0) {
			a.push(this.material);
		}
		return h3d_scene_Object.prototype.getMaterials.call(this,a);
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Graphics = function(parent) {
	this.lineSize = 0.;
	this.curR = 0.;
	this.curZ = 0.;
	this.curY = 0.;
	this.curX = 0.;
	this.bprim = new h3d_prim_BigPrimitive(12);
	this.bprim.isStatic = false;
	h3d_scene_Mesh.call(this,this.bprim,null,parent);
	this.tmpPoints = [];
	this.lineShader = new h3d_shader_LineShader();
	this.lineShader.setPriority(-100);
	var _this = this.material;
	_this.set_castShadows(false);
	_this.set_receiveShadows(false);
	this.material.passes.set_enableLights(false);
	this.material.passes.addShader(this.lineShader);
	var vcolor = new h3d_shader_VertexColorAlpha();
	vcolor.setPriority(-100);
	this.material.passes.addShader(vcolor);
	this.material.passes.set_culling(h3d_mat_Face.None);
};
h3d_scene_Graphics.__name__ = "h3d.scene.Graphics";
h3d_scene_Graphics.__super__ = h3d_scene_Mesh;
h3d_scene_Graphics.prototype = $extend(h3d_scene_Mesh.prototype,{
	onRemove: function() {
		h3d_scene_Mesh.prototype.onRemove.call(this);
		this.bprim.clear();
	}
	,set_is3D: function(v) {
		if(this.is3D == v) {
			return v;
		}
		if(v) {
			this.material.passes.removeShader(this.lineShader);
		} else {
			this.material.passes.addShader(this.lineShader);
		}
		this.bprim.clear();
		this.tmpPoints = [];
		return this.is3D = v;
	}
	,flushLine: function() {
		var _gthis = this;
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y && p.z == prev.z;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h3d_scene__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,prev.z * 2 - prevLast.z,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h3d_scene__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,p.z * 2 - pNext.z,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var start = this.bprim.vertexCount();
		var pindex = start;
		var v = 0.;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			var hasIndex = i < count - 1 || closed;
			this.bprim.begin(2,hasIndex ? 6 : 0);
			var _this = _gthis.bprim;
			_this.tmpBuf.array[_this.bufPos++] = p.x + nx;
			var _this1 = _gthis.bprim;
			_this1.tmpBuf.array[_this1.bufPos++] = p.y + ny;
			var _this2 = _gthis.bprim;
			_this2.tmpBuf.array[_this2.bufPos++] = p.z;
			var _this3 = _gthis.bprim;
			_this3.tmpBuf.array[_this3.bufPos++] = 0;
			var _this4 = _gthis.bprim;
			_this4.tmpBuf.array[_this4.bufPos++] = 0;
			var _this5 = _gthis.bprim;
			_this5.tmpBuf.array[_this5.bufPos++] = 1;
			var _this6 = _gthis.bprim;
			_this6.tmpBuf.array[_this6.bufPos++] = 0;
			var _this7 = _gthis.bprim;
			_this7.tmpBuf.array[_this7.bufPos++] = v;
			var _this8 = _gthis.bprim;
			_this8.tmpBuf.array[_this8.bufPos++] = p.r;
			var _this9 = _gthis.bprim;
			_this9.tmpBuf.array[_this9.bufPos++] = p.g;
			var _this10 = _gthis.bprim;
			_this10.tmpBuf.array[_this10.bufPos++] = p.b;
			var _this11 = _gthis.bprim;
			_this11.tmpBuf.array[_this11.bufPos++] = p.a;
			var _this12 = _gthis.bprim;
			_this12.tmpBuf.array[_this12.bufPos++] = p.x - nx;
			var _this13 = _gthis.bprim;
			_this13.tmpBuf.array[_this13.bufPos++] = p.y - ny;
			var _this14 = _gthis.bprim;
			_this14.tmpBuf.array[_this14.bufPos++] = p.z;
			var _this15 = _gthis.bprim;
			_this15.tmpBuf.array[_this15.bufPos++] = 0;
			var _this16 = _gthis.bprim;
			_this16.tmpBuf.array[_this16.bufPos++] = 0;
			var _this17 = _gthis.bprim;
			_this17.tmpBuf.array[_this17.bufPos++] = 1;
			var _this18 = _gthis.bprim;
			_this18.tmpBuf.array[_this18.bufPos++] = 1;
			var _this19 = _gthis.bprim;
			_this19.tmpBuf.array[_this19.bufPos++] = v;
			var _this20 = _gthis.bprim;
			_this20.tmpBuf.array[_this20.bufPos++] = p.r;
			var _this21 = _gthis.bprim;
			_this21.tmpBuf.array[_this21.bufPos++] = p.g;
			var _this22 = _gthis.bprim;
			_this22.tmpBuf.array[_this22.bufPos++] = p.b;
			var _this23 = _gthis.bprim;
			_this23.tmpBuf.array[_this23.bufPos++] = p.a;
			v = 1 - v;
			if(hasIndex) {
				var pnext = i == last ? start - pindex : 2;
				var _this24 = this.bprim;
				_this24.tmpIdx[_this24.idxPos++] = _this24.startIndex;
				var _this25 = this.bprim;
				_this25.tmpIdx[_this25.idxPos++] = 1 + _this25.startIndex;
				var _this26 = this.bprim;
				_this26.tmpIdx[_this26.idxPos++] = pnext + _this26.startIndex;
				var _this27 = this.bprim;
				_this27.tmpIdx[_this27.idxPos++] = pnext + _this27.startIndex;
				var _this28 = this.bprim;
				_this28.tmpIdx[_this28.idxPos++] = 1 + _this28.startIndex;
				var _this29 = this.bprim;
				_this29.tmpIdx[_this29.idxPos++] = pnext + 1 + _this29.startIndex;
			}
			pindex += 2;
			prev = p;
			p = next;
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.is3D) {
			this.flushLine();
			this.tmpPoints = [];
		}
	}
	,sync: function(ctx) {
		h3d_scene_Mesh.prototype.sync.call(this,ctx);
		this.flush();
		this.bprim.flush();
	}
	,draw: function(ctx) {
		this.flush();
		this.bprim.flush();
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,clear: function() {
		this.flush();
		this.bprim.clear();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0.;
		}
		this.flush();
		if(size > 0 && this.lineSize != size) {
			this.lineSize = size;
			if(!this.is3D) {
				this.lineShader.width__ = this.lineSize;
			}
		}
		this.setColor(color,alpha);
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawLine: function(p1,p2) {
		this.moveTo(p1.x,p1.y,p1.z);
		this.lineTo(p2.x,p2.y,p2.z);
	}
	,moveTo: function(x,y,z) {
		if(this.is3D) {
			this.flush();
			this.lineTo(x,y,z);
		} else {
			this.curX = x;
			this.curY = y;
			this.curZ = z;
		}
	}
	,addVertex: function(x,y,z,r,g,b,a) {
		this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,r,g,b,a));
	}
	,lineTo: function(x,y,z) {
		var _gthis = this;
		if(this.is3D) {
			this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,this.curR,this.curG,this.curB,this.curA));
			return;
		}
		this.bprim.begin(4,6);
		var nx = x - this.curX;
		var ny = y - this.curY;
		var nz = z - this.curZ;
		var x1 = this.curX;
		var y1 = this.curY;
		var z1 = this.curZ;
		var _this = this.bprim.bounds;
		if(x1 < _this.xMin) {
			_this.xMin = x1;
		}
		if(x1 > _this.xMax) {
			_this.xMax = x1;
		}
		if(y1 < _this.yMin) {
			_this.yMin = y1;
		}
		if(y1 > _this.yMax) {
			_this.yMax = y1;
		}
		if(z1 < _this.zMin) {
			_this.zMin = z1;
		}
		if(z1 > _this.zMax) {
			_this.zMax = z1;
		}
		var _this = this.bprim.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 1 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 2 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 2 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 3 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 1 + _this.startIndex;
		this.curX = x;
		this.curY = y;
		this.curZ = z;
	}
	,__class__: h3d_scene_Graphics
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	get_color: function() {
		return new h3d_Vector();
	}
	,set_color: function(v) {
		return v;
	}
	,get_enableSpecular: function() {
		return false;
	}
	,set_enableSpecular: function(b) {
		if(b) {
			throw haxe_Exception.thrown("Not implemented for this light");
		}
		return false;
	}
	,emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.drawPasses = 0;
	this.ambientLight = new h3d_Vector(1,1,1);
};
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene_MultiMaterial = function(prim,mats,parent) {
	h3d_scene_Mesh.call(this,prim,mats == null ? null : mats[0],parent);
	this.materials = mats == null ? [this.material] : mats;
};
h3d_scene_MultiMaterial.__name__ = "h3d.scene.MultiMaterial";
h3d_scene_MultiMaterial.__super__ = h3d_scene_Mesh;
h3d_scene_MultiMaterial.prototype = $extend(h3d_scene_Mesh.prototype,{
	getMeshMaterials: function() {
		return this.materials.slice();
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_MultiMaterial(null,this.materials) : o;
		m.materials = [];
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			m.materials.push(mat == null ? null : mat.clone());
		}
		h3d_scene_Mesh.prototype.clone.call(this,m);
		m.material = m.materials[0];
		return m;
	}
	,emit: function(ctx) {
		var _g = 0;
		var _g1 = this.materials.length;
		while(_g < _g1) {
			var i = _g++;
			var m = this.materials[i];
			if(m != null) {
				var index = i;
				if(index == null) {
					index = 0;
				}
				var p = m.passes;
				while(p != null) {
					ctx.emitPass(p,this).index = index;
					p = p.nextPass;
				}
			}
		}
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && m.name == name) {
				return m;
			}
		}
		return h3d_scene_Mesh.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && a.indexOf(m) < 0) {
				a.push(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.getMaterials(a);
		}
		return a;
	}
	,draw: function(ctx) {
		if(this.materials.length > 1) {
			this.primitive.selectMaterial(ctx.drawPass.index);
		}
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,__class__: h3d_scene_MultiMaterial
});
var h3d_scene_ObjectFlags = {};
h3d_scene_ObjectFlags._new = function(value) {
	var this1 = value;
	return this1;
};
h3d_scene_ObjectFlags.toInt = function(this1) {
	return this1;
};
h3d_scene_ObjectFlags.has = function(this1,f) {
	return (this1 & f) != 0;
};
h3d_scene_ObjectFlags.set = function(this1,f,b) {
	if(b) {
		this1 |= f;
	} else {
		this1 &= ~f;
	}
	return b;
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	emit: function(mat,obj,index) {
		if(index == null) {
			index = 0;
		}
		var p = mat.passes;
		while(p != null) {
			this.emitPass(p,obj).index = index;
			p = p.nextPass;
		}
	}
	,start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,nextPass: function() {
		this.cachedPos = 0;
		this.drawPass = null;
	}
	,getGlobal: function(name) {
		var id = hxsl_Globals.allocID(name);
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == id) {
				return g.value;
			}
		}
		return null;
	}
	,setGlobal: function(name,value) {
		this.setGlobalID(hxsl_Globals.allocID(name),value);
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,uploadParams: function() {
		this.currentManager.fillParams(this.shaderBuffers,this.drawPass.shader,this.drawPass.shaders);
		this.engine.uploadShaderBuffers(this.shaderBuffers,1);
		this.engine.uploadShaderBuffers(this.shaderBuffers,2);
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_RenderMode = $hxEnums["h3d.scene.RenderMode"] = { __ename__ : true, __constructs__ : ["Default","LightProbe"]
	,Default: {_hx_index:0,__enum__:"h3d.scene.RenderMode",toString:$estr}
	,LightProbe: {_hx_index:1,__enum__:"h3d.scene.RenderMode",toString:$estr}
};
h3d_scene_RenderMode.__empty_constructs__ = [h3d_scene_RenderMode.Default,h3d_scene_RenderMode.LightProbe];
var h3d_scene_Renderer = function() {
	this.renderMode = h3d_scene_RenderMode.Default;
	this.effects = [];
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = $bind(this,this.depthSort);
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g(frontToBack,passes);
	};
	var _g1 = $bind(this,this.depthSort);
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1(frontToBack1,passes);
	};
};
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	dispose: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.dispose();
		}
		this.passObjects = new haxe_ds_StringMap();
	}
	,mark: function(id) {
	}
	,getPass: function(c) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(p,c)) {
				return p;
			}
		}
		return null;
	}
	,getPassByName: function(name) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.name == name) {
				return p;
			}
		}
		return null;
	}
	,debugCompileShader: function(pass) {
		var p = this.getPassByName(pass.name);
		if(p == null) {
			p = this.defaultPass;
		}
		p.setContext(this.ctx);
		return p.compileShader(pass);
	}
	,hasFeature: function(f) {
		return h3d_Engine.CURRENT.driver.hasFeature(f);
	}
	,getDefaultLight: function(l) {
		return l;
	}
	,getLightSystem: function() {
		return this.ctx.scene.lightSystem;
	}
	,time: function(name) {
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,clear: function(color,depth,stencil) {
		this.ctx.engine.clear(color,depth,stencil);
	}
	,allocTarget: function(name,depth,size,format) {
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		return this.ctx.textures.allocTarget(name,Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,format);
	}
	,copy: function(from,to,blend) {
		h3d_pass_Copy.run(from,to,blend);
	}
	,setTarget: function(tex) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTarget(tex);
		this.hasSetTarget = true;
	}
	,setTargets: function(textures) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTargets(textures);
		this.hasSetTarget = true;
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,draw: function(name) {
		this.defaultPass.draw(this.get(name));
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	this.checkPasses = true;
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p2_x = x;
			var p2_y = y;
			var p2_z = z;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x = r1.px;
				var y = r1.py;
				var z = r1.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x1 = r1.lx;
				var y1 = r1.ly;
				var z1 = r1.lz;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var l_x = x1;
				var l_y = y1;
				var l_z = z1;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x2 = r1.px + hit * r1.lx;
				var y2 = r1.py + hit * r1.ly;
				var z2 = r1.pz + hit * r1.lz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var hitPoint_x = x2;
				var hitPoint_y = y2;
				var hitPoint_z = z2;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null) {
						var x = r1.px;
						var y = r1.py;
						var z = r1.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						var p_x = x;
						var p_y = y;
						var p_z = z;
						var p_w = 1.;
						var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
						var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
						var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r1.px = p_x;
						r1.py = p_y;
						r1.pz = p_z;
						var x1 = r1.lx;
						var y1 = r1.ly;
						var z1 = r1.lz;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						var l_x = x1;
						var l_y = y1;
						var l_z = z1;
						var l_w = 1.;
						var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
						var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
						var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
						l_x = px1;
						l_y = py1;
						l_z = pz1;
						r1.lx = l_x;
						r1.ly = l_y;
						r1.lz = l_z;
						r1.normalize();
						var hit = i.preciseShape.rayIntersection(r1,i.bestMatch);
						if(hit > 0) {
							var x2 = r1.px + hit * r1.lx;
							var y2 = r1.py + hit * r1.ly;
							var z2 = r1.pz + hit * r1.lz;
							if(z2 == null) {
								z2 = 0.;
							}
							if(y2 == null) {
								y2 = 0.;
							}
							if(x2 == null) {
								x2 = 0.;
							}
							var hitPoint_x = x2;
							var hitPoint_y = y2;
							var hitPoint_z = z2;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x3 = _this.x;
					var y3 = _this.y;
					var z3 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var p_x1 = x3;
					var p_y1 = y3;
					var p_z1 = z3;
					var p_w1 = w;
					p_w1 = 1;
					var m1 = i.absPos;
					var px2 = p_x1 * m1._11 + p_y1 * m1._21 + p_z1 * m1._31 + p_w1 * m1._41;
					var py2 = p_x1 * m1._12 + p_y1 * m1._22 + p_z1 * m1._32 + p_w1 * m1._42;
					var pz2 = p_x1 * m1._13 + p_y1 * m1._23 + p_z1 * m1._33 + p_w1 * m1._43;
					p_x1 = px2;
					p_y1 = py2;
					p_z1 = pz2;
					var m2 = this.camera.m;
					var px3 = p_x1 * m2._11 + p_y1 * m2._21 + p_z1 * m2._31 + p_w1 * m2._41;
					var py3 = p_x1 * m2._12 + p_y1 * m2._22 + p_z1 * m2._32 + p_w1 * m2._42;
					var pz3 = p_x1 * m2._13 + p_y1 * m2._23 + p_z1 * m2._33 + p_w1 * m2._43;
					var iw = 1 / (p_x1 * m2._14 + p_y1 * m2._24 + p_z1 * m2._34 + p_w1 * m2._44);
					p_x1 = px3 * iw;
					p_y1 = py3 * iw;
					p_z1 = pz3 * iw;
					p_w1 = 1;
					i.hitPoint.w = p_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,clone: function(o) {
		var s = o == null ? new h3d_scene_Scene() : o;
		s.camera = this.camera.clone();
		h3d_scene_Object.prototype.clone.call(this,s);
		return s;
	}
	,dispose: function() {
		if((this.flags & 32) != 0) {
			this.onRemove();
		}
		if(this.hardwarePass != null) {
			this.hardwarePass.dispose();
			this.hardwarePass = null;
		}
		this.ctx.dispose();
		if(this.renderer != null) {
			this.renderer.dispose();
			this.set_renderer(new h3d_scene_Renderer());
		}
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,hardwarePick: function(pixelX,pixelY) {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		this.camera.screenRatio = engine.width / engine.height;
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		var ray = this.camera.rayFromScreen(pixelX,pixelY);
		var savedRay_pz;
		var savedRay_py;
		var savedRay_px;
		var savedRay_lz;
		var savedRay_ly;
		var savedRay_lx;
		savedRay_px = ray.px;
		savedRay_py = ray.py;
		savedRay_pz = ray.pz;
		savedRay_lx = ray.lx;
		savedRay_ly = ray.ly;
		savedRay_lz = ray.lz;
		this.iterVisibleMeshes(function(m) {
			if(m.primitive == null) {
				return;
			}
			var m1 = m.getInvPos();
			var x = ray.px;
			var y = ray.py;
			var z = ray.pz;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var p_w = 1.;
			var px = p_x * m1._11 + p_y * m1._21 + p_z * m1._31 + p_w * m1._41;
			var py = p_x * m1._12 + p_y * m1._22 + p_z * m1._32 + p_w * m1._42;
			var pz = p_x * m1._13 + p_y * m1._23 + p_z * m1._33 + p_w * m1._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			ray.px = p_x;
			ray.py = p_y;
			ray.pz = p_z;
			var x = ray.lx;
			var y = ray.ly;
			var z = ray.lz;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var l_x = x;
			var l_y = y;
			var l_z = z;
			var l_w = 1.;
			var px = l_x * m1._11 + l_y * m1._21 + l_z * m1._31;
			var py = l_x * m1._12 + l_y * m1._22 + l_z * m1._32;
			var pz = l_x * m1._13 + l_y * m1._23 + l_z * m1._33;
			l_x = px;
			l_y = py;
			l_z = pz;
			ray.lx = l_x;
			ray.ly = l_y;
			ray.lz = l_z;
			ray.normalize();
			if(m.primitive.getBounds().rayIntersection(ray,false) >= 0) {
				_gthis.ctx.emitPass(m.material.passes,m);
			}
			ray.px = savedRay_px;
			ray.py = savedRay_py;
			ray.pz = savedRay_pz;
			ray.lx = savedRay_lx;
			ray.ly = savedRay_ly;
			ray.lz = savedRay_lz;
		});
		this.ctx.lightSystem = null;
		var found = null;
		var passes = new h3d_pass_PassList(this.ctx.passes);
		if(passes.current != null) {
			var p = this.hardwarePass;
			if(p == null) {
				p = new h3d_pass_HardwarePick();
				this.hardwarePass = p;
			}
			var _this = this.ctx;
			var value = { texture : h3d_mat_Texture.fromColor(267386880,0)};
			_this.setGlobalID(hxsl_Globals.allocID("depthMap"),value);
			p.pickX = pixelX;
			p.pickY = pixelY;
			p.setContext(this.ctx);
			p.draw(passes);
			if(p.pickedIndex >= 0) {
				var _g_o = passes.current;
				while(_g_o != null) {
					var tmp = _g_o;
					_g_o = _g_o.next;
					var po = tmp;
					if(p.pickedIndex-- == 0) {
						found = po.obj;
						break;
					}
				}
			}
		}
		this.ctx.done();
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
		return found;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
	}
	,computeStatic: function() {
		var old = this.ctx.elapsedTime;
		this.ctx.elapsedTime = 0;
		this.ctx.computingStatic = true;
		this.render(h3d_Engine.CURRENT);
		this.ctx.computingStatic = false;
		this.ctx.elapsedTime = old;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p = curPass;
			var prev = null;
			while(p != null && p.pass.passId == passId) {
				prev = p;
				p = p.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(!this.ctx.computingStatic && this.checkPasses) {
			var _g = 0;
			while(_g < passes.length) {
				var p = passes[_g];
				++_g;
				if(!p.rendered) {
					haxe_Log.trace("Pass " + p.name + " has not been rendered : don't know how to handle.",{ fileName : "h3d/scene/Scene.hx", lineNumber : 438, className : "h3d.scene.Scene", methodName : "render"});
				}
			}
		}
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,serializeScene: function() {
		throw haxe_Exception.thrown("You need -lib hxbit to serialize the scene data");
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_Joint = function(skin,j) {
	h3d_scene_Object.call(this,null);
	this.name = j.name;
	this.skin = skin;
	this.parent = skin;
	this.index = j.index;
};
h3d_scene_Joint.__name__ = "h3d.scene.Joint";
h3d_scene_Joint.__super__ = h3d_scene_Object;
h3d_scene_Joint.prototype = $extend(h3d_scene_Object.prototype,{
	getObjectByName: function(name) {
		var sk = this.skin.getSkinData();
		var j = sk.namedJoints.h[name];
		if(j == null) {
			return null;
		}
		var cur = sk.allJoints[this.index];
		if(cur.index != this.index) {
			throw haxe_Exception.thrown("assert");
		}
		var jp = j.parent;
		while(jp != null) {
			if(jp == cur) {
				var jo = new h3d_scene_Joint(this.skin,j);
				jo.parent = this;
				return jo;
			}
			jp = jp.parent;
		}
		return null;
	}
	,syncPos: function() {
		var p = this.parent;
		while(p != null) {
			if((p.flags & 1) != 0) {
				if(this.skin.jointsAbsPosInv == null) {
					this.skin.jointsAbsPosInv = new h3d_Matrix();
					this.skin.jointsAbsPosInv.zero();
				}
				if(this.skin.jointsAbsPosInv._44 == 0) {
					this.skin.jointsAbsPosInv.inverse3x4(this.parent.absPos);
				}
				this.parent.syncPos();
				this.lastFrame = -1;
				break;
			}
			p = p.parent;
		}
		if(this.lastFrame != this.skin.lastFrame) {
			this.lastFrame = this.skin.lastFrame;
			this.absPos.load(this.skin.currentAbsPose[this.index]);
			if(this.skin.jointsAbsPosInv != null && this.skin.jointsAbsPosInv._44 != 0) {
				this.absPos.multiply3x4(this.absPos,this.skin.jointsAbsPosInv);
				this.absPos.multiply3x4(this.absPos,this.parent.absPos);
			}
		}
	}
	,__class__: h3d_scene_Joint
});
var h3d_scene_Skin = function(s,mat,parent) {
	h3d_scene_MultiMaterial.call(this,null,mat,parent);
	if(s != null) {
		this.setSkinData(s);
	}
};
h3d_scene_Skin.__name__ = "h3d.scene.Skin";
h3d_scene_Skin.__super__ = h3d_scene_MultiMaterial;
h3d_scene_Skin.prototype = $extend(h3d_scene_MultiMaterial.prototype,{
	clone: function(o) {
		var s = o == null ? new h3d_scene_Skin(null,this.materials.slice()) : o;
		h3d_scene_MultiMaterial.prototype.clone.call(this,s);
		s.setSkinData(this.skinData);
		s.currentRelPose = this.currentRelPose.slice();
		return s;
	}
	,getBoundsRec: function(b) {
		b = h3d_scene_MultiMaterial.prototype.getBoundsRec.call(this,b);
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		var b0 = this.skinData.allJoints[0];
		if(b0 != null && b0.parent == null) {
			var mtmp = this.absPos.clone();
			var r = this.currentRelPose[b0.index];
			if(r != null) {
				mtmp.multiply3x4(r,mtmp);
			} else {
				mtmp.multiply3x4(b0.defMat,mtmp);
			}
			if(b0.transPos != null) {
				mtmp.multiply3x4(b0.transPos,mtmp);
			}
			tmp.transform(mtmp);
		} else {
			tmp.transform(this.absPos);
		}
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,getObjectByName: function(name) {
		if(this.skinData != null && this.skinData.name == name) {
			return this;
		}
		var o = h3d_scene_MultiMaterial.prototype.getObjectByName.call(this,name);
		if(o != null) {
			return o;
		}
		if(this.skinData != null) {
			var j = this.skinData.namedJoints.h[name];
			if(j != null) {
				return new h3d_scene_Joint(this,j);
			}
		}
		return null;
	}
	,getLocalCollider: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getGlobalCollider: function() {
		var col = js_Boot.__cast(this.primitive.getCollider() , h3d_col_OptimizedCollider);
		(js_Boot.__cast(this.primitive , h3d_prim_HMDModel)).loadSkin(this.skinData);
		return new h3d_col_SkinCollider(this,js_Boot.__cast(col.b , h3d_col_PolygonBuffer));
	}
	,calcAbsPos: function() {
		h3d_scene_MultiMaterial.prototype.calcAbsPos.call(this);
		this.jointsUpdated = true;
	}
	,getSkinData: function() {
		return this.skinData;
	}
	,setSkinData: function(s,shaderInit) {
		if(shaderInit == null) {
			shaderInit = true;
		}
		this.skinData = s;
		this.jointsUpdated = true;
		this.set_primitive(s.primitive);
		if(shaderInit) {
			var hasNormalMap = false;
			var _g = 0;
			var _g1 = this.materials;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m != null && m.get_normalMap() != null) {
					hasNormalMap = true;
					break;
				}
			}
			this.skinShader = hasNormalMap ? new h3d_shader_SkinTangent() : new h3d_shader_Skin();
			var maxBones = 0;
			if(this.skinData.splitJoints != null) {
				var _g = 0;
				var _g1 = this.skinData.splitJoints;
				while(_g < _g1.length) {
					var s = _g1[_g];
					++_g;
					if(s.joints.length > maxBones) {
						maxBones = s.joints.length;
					}
				}
			} else {
				maxBones = this.skinData.boundJoints.length;
			}
			if(this.skinShader.MaxBones__ < maxBones) {
				var _this = this.skinShader;
				_this.constModified = true;
				_this.MaxBones__ = maxBones;
			}
			var _g = 0;
			var _g1 = this.materials;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m != null) {
					if(m.get_normalMap() != null) {
						m.passes.addShaderAtIndex(this.skinShader,m.passes.getShaderIndex(m.normalShader) + 1);
					} else {
						m.passes.addShader(this.skinShader);
					}
					if(this.skinData.splitJoints != null) {
						m.passes.set_dynamicParameters(true);
					}
				}
			}
		}
		this.currentRelPose = [];
		this.currentAbsPose = [];
		this.currentPalette = [];
		this.paletteChanged = true;
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			this.currentAbsPose.push(h3d_Matrix.I());
		}
		var _g = 0;
		var _g1 = this.skinData.boundJoints.length;
		while(_g < _g1) {
			var i = _g++;
			this.currentPalette.push(h3d_Matrix.I());
		}
		if(this.skinData.splitJoints != null) {
			this.splitPalette = [];
			var _g = 0;
			var _g1 = this.skinData.splitJoints;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var tmp = this.splitPalette;
				var _g2 = [];
				var _g3 = 0;
				var _g4 = a.joints;
				while(_g3 < _g4.length) {
					var j = _g4[_g3];
					++_g3;
					_g2.push(this.currentPalette[j.bindIndex]);
				}
				tmp.push(_g2);
			}
		} else {
			this.splitPalette = null;
		}
	}
	,sync: function(ctx) {
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			return;
		}
		this.syncJoints();
	}
	,syncJoints: function() {
		if(!this.jointsUpdated) {
			return;
		}
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			var id = j.index;
			var m = this.currentAbsPose[id];
			var r = this.currentRelPose[id];
			var bid = j.bindIndex;
			if(r == null) {
				r = j.defMat;
			} else if(j.retargetAnim) {
				r._41 = j.defMat._41;
				r._42 = j.defMat._42;
				r._43 = j.defMat._43;
			}
			if(j.parent == null) {
				var b = this.absPos;
				var m11 = r._11;
				var m12 = r._12;
				var m13 = r._13;
				var m21 = r._21;
				var m22 = r._22;
				var m23 = r._23;
				var a31 = r._31;
				var a32 = r._32;
				var a33 = r._33;
				var a41 = r._41;
				var a42 = r._42;
				var a43 = r._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				m._11 = m11 * b11 + m12 * b21 + m13 * b31;
				m._12 = m11 * b12 + m12 * b22 + m13 * b32;
				m._13 = m11 * b13 + m12 * b23 + m13 * b33;
				m._14 = 0;
				m._21 = m21 * b11 + m22 * b21 + m23 * b31;
				m._22 = m21 * b12 + m22 * b22 + m23 * b32;
				m._23 = m21 * b13 + m22 * b23 + m23 * b33;
				m._24 = 0;
				m._31 = a31 * b11 + a32 * b21 + a33 * b31;
				m._32 = a31 * b12 + a32 * b22 + a33 * b32;
				m._33 = a31 * b13 + a32 * b23 + a33 * b33;
				m._34 = 0;
				m._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				m._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				m._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				m._44 = 1;
			} else {
				var b1 = this.currentAbsPose[j.parent.index];
				var m111 = r._11;
				var m121 = r._12;
				var m131 = r._13;
				var m211 = r._21;
				var m221 = r._22;
				var m231 = r._23;
				var a311 = r._31;
				var a321 = r._32;
				var a331 = r._33;
				var a411 = r._41;
				var a421 = r._42;
				var a431 = r._43;
				var b111 = b1._11;
				var b121 = b1._12;
				var b131 = b1._13;
				var b211 = b1._21;
				var b221 = b1._22;
				var b231 = b1._23;
				var b311 = b1._31;
				var b321 = b1._32;
				var b331 = b1._33;
				var b411 = b1._41;
				var b421 = b1._42;
				var b431 = b1._43;
				m._11 = m111 * b111 + m121 * b211 + m131 * b311;
				m._12 = m111 * b121 + m121 * b221 + m131 * b321;
				m._13 = m111 * b131 + m121 * b231 + m131 * b331;
				m._14 = 0;
				m._21 = m211 * b111 + m221 * b211 + m231 * b311;
				m._22 = m211 * b121 + m221 * b221 + m231 * b321;
				m._23 = m211 * b131 + m221 * b231 + m231 * b331;
				m._24 = 0;
				m._31 = a311 * b111 + a321 * b211 + a331 * b311;
				m._32 = a311 * b121 + a321 * b221 + a331 * b321;
				m._33 = a311 * b131 + a321 * b231 + a331 * b331;
				m._34 = 0;
				m._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
				m._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
				m._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
				m._44 = 1;
			}
			if(bid >= 0) {
				var _this = this.currentPalette[bid];
				var a = j.transPos;
				var m112 = a._11;
				var m122 = a._12;
				var m132 = a._13;
				var m212 = a._21;
				var m222 = a._22;
				var m232 = a._23;
				var a312 = a._31;
				var a322 = a._32;
				var a332 = a._33;
				var a412 = a._41;
				var a422 = a._42;
				var a432 = a._43;
				var b112 = m._11;
				var b122 = m._12;
				var b132 = m._13;
				var b212 = m._21;
				var b222 = m._22;
				var b232 = m._23;
				var b312 = m._31;
				var b322 = m._32;
				var b332 = m._33;
				var b412 = m._41;
				var b422 = m._42;
				var b432 = m._43;
				_this._11 = m112 * b112 + m122 * b212 + m132 * b312;
				_this._12 = m112 * b122 + m122 * b222 + m132 * b322;
				_this._13 = m112 * b132 + m122 * b232 + m132 * b332;
				_this._14 = 0;
				_this._21 = m212 * b112 + m222 * b212 + m232 * b312;
				_this._22 = m212 * b122 + m222 * b222 + m232 * b322;
				_this._23 = m212 * b132 + m222 * b232 + m232 * b332;
				_this._24 = 0;
				_this._31 = a312 * b112 + a322 * b212 + a332 * b312;
				_this._32 = a312 * b122 + a322 * b222 + a332 * b322;
				_this._33 = a312 * b132 + a322 * b232 + a332 * b332;
				_this._34 = 0;
				_this._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
				_this._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
				_this._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
				_this._44 = 1;
			}
		}
		this.skinShader.bonesMatrixes__ = this.currentPalette;
		if(this.jointsAbsPosInv != null) {
			this.jointsAbsPosInv._44 = 0;
		}
		this.jointsUpdated = false;
	}
	,emit: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.emit.call(this,ctx);
		} else {
			var _g = 0;
			var _g1 = this.splitPalette.length;
			while(_g < _g1) {
				var i = _g++;
				var m = this.materials[this.skinData.splitJoints[i].material];
				if(m != null) {
					var index = i;
					if(index == null) {
						index = 0;
					}
					var p = m.passes;
					while(p != null) {
						ctx.emitPass(p,this).index = index;
						p = p.nextPass;
					}
				}
			}
		}
		if(this.showJoints) {
			if(this.jointsGraphics == null) {
				this.jointsGraphics = new h3d_scene_Graphics(this);
				this.jointsGraphics.material.passes.depth(false,h3d_mat_Compare.Always);
				this.jointsGraphics.material.passes.setPassName("add");
			}
			var topParent = this;
			while(topParent.parent != null) topParent = topParent.parent;
			this.jointsGraphics.set_follow(topParent);
			var g = this.jointsGraphics;
			g.clear();
			var _g = 0;
			var _g1 = this.skinData.allJoints;
			while(_g < _g1.length) {
				var j = _g1[_g];
				++_g;
				var m = this.currentAbsPose[j.index];
				var mp = j.parent == null ? this.absPos : this.currentAbsPose[j.parent.index];
				g.lineStyle(1,j.parent == null ? -16776961 : -256);
				g.moveTo(mp._41,mp._42,mp._43);
				g.lineTo(m._41,m._42,m._43);
			}
		} else if(this.jointsGraphics != null) {
			var _this = this.jointsGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.jointsGraphics = null;
		}
	}
	,draw: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.draw.call(this,ctx);
		} else {
			var i = ctx.drawPass.index;
			this.skinShader.bonesMatrixes__ = this.splitPalette[i];
			this.primitive.selectMaterial(i);
			ctx.uploadParams();
			this.primitive.render(ctx.engine);
		}
	}
	,__class__: h3d_scene_Skin
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	get_additiveLighting: function() {
		var value = this.ambientShader;
		return (((value) instanceof h3d_shader_AmbientLight) ? value : null).additive__;
	}
	,set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	get_def: function() {
		return this.defaultPass;
	}
	,renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,getPassByName: function(name) {
		if(name == "alpha" || name == "additive") {
			return this.defaultPass;
		}
		return h3d_scene_Renderer.prototype.getPassByName.call(this,name);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_scene_pbr_Light = function(shader,parent) {
	this.isMainLight = false;
	this.power = 1.;
	h3d_scene_Light.call(this,shader,parent);
	this._color = new h3d_Vector(1,1,1,1);
	if(this.shadows == null) {
		this.shadows = new h3d_pass_Shadows(this);
	}
};
h3d_scene_pbr_Light.__name__ = "h3d.scene.pbr.Light";
h3d_scene_pbr_Light.__super__ = h3d_scene_Light;
h3d_scene_pbr_Light.prototype = $extend(h3d_scene_Light.prototype,{
	onRemove: function() {
		h3d_scene_Light.prototype.onRemove.call(this);
		if(this.shadows != null) {
			this.shadows.dispose();
		}
	}
	,sync: function(ctx) {
		h3d_scene_Light.prototype.sync.call(this,ctx);
		if(this.isMainLight) {
			var value = this._color;
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightColor"),value);
			var value = this.power;
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightPower"),value);
			var value = new h3d_Vector(this.absPos._41,this.absPos._42,this.absPos._43);
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightPos"),value);
			var _this = this.absPos;
			var v = new h3d_Vector(_this._11,_this._12,_this._13);
			var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
			v.x *= k;
			v.y *= k;
			v.z *= k;
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightDir"),v);
			var value = this.shadows.getShadowTex();
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightShadowMap"),value);
			var value = this.shadows.getShadowProj();
			ctx.setGlobalID(hxsl_Globals.allocID("mainLightViewProj"),value);
		}
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(v) {
		return this._color = v;
	}
	,get_enableSpecular: function() {
		return true;
	}
	,set_enableSpecular: function(b) {
		if(!b) {
			throw haxe_Exception.thrown("Not implemented for this light");
		}
		return true;
	}
	,__class__: h3d_scene_pbr_Light
});
var h3d_scene_pbr_DirLight = function(dir,parent) {
	this.pbr = new h3d_shader_pbr_DirLight();
	this.shadows = new h3d_pass_DirShadowMap(this);
	h3d_scene_pbr_Light.call(this,this.pbr,parent);
	if(dir != null) {
		this.setDirection(dir);
	}
};
h3d_scene_pbr_DirLight.__name__ = "h3d.scene.pbr.DirLight";
h3d_scene_pbr_DirLight.__super__ = h3d_scene_pbr_Light;
h3d_scene_pbr_DirLight.prototype = $extend(h3d_scene_pbr_Light.prototype,{
	clone: function(o) {
		var dl = o == null ? new h3d_scene_pbr_DirLight(null) : o;
		h3d_scene_pbr_Light.prototype.clone.call(this,dl);
		return dl;
	}
	,getShadowDirection: function() {
		var _this = this.absPos;
		var v = new h3d_Vector(_this._11,_this._12,_this._13);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,emit: function(ctx) {
		var _this = this.pbr.lightColor__;
		var v = this._color;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.pbr.lightColor__;
		var f = this.power * this.power;
		_this.x *= f;
		_this.y *= f;
		_this.z *= f;
		var _this = this.pbr.lightDir__;
		var _this1 = this.absPos;
		var x = _this1._11;
		var y = _this1._12;
		var z = _this1._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = 1.;
		var k = 1. / Math.sqrt(v_x * v_x + v_y * v_y + v_z * v_z);
		v_x *= k;
		v_y *= k;
		v_z *= k;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		_this.w = v_w;
		var _this = this.pbr.lightDir__;
		_this.x *= -1;
		_this.y *= -1;
		_this.z *= -1;
		this.pbr.lightDir__.normalize();
		this.pbr.occlusionFactor__ = this.occlusionFactor;
		h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
	}
	,__class__: h3d_scene_pbr_DirLight
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_AmbientLight.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Base2d.prototype);
		s.shader = this.shader;
		s.zValue__ = this.zValue__;
		s.texture__ = this.texture__;
		s.isRelative__ = this.isRelative__;
		s.color__ = this.color__;
		s.absoluteMatrixA__ = this.absoluteMatrixA__;
		s.absoluteMatrixB__ = this.absoluteMatrixB__;
		s.filterMatrixA__ = this.filterMatrixA__;
		s.filterMatrixB__ = this.filterMatrixB__;
		s.hasUVPos__ = this.hasUVPos__;
		s.uvPos__ = this.uvPos__;
		s.killAlpha__ = this.killAlpha__;
		s.pixelAlign__ = this.pixelAlign__;
		s.halfPixelInverse__ = this.halfPixelInverse__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_BaseMesh.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specularPower__ = this.specularPower__;
		s.specularAmount__ = this.specularAmount__;
		s.specularColor__ = this.specularColor__;
		return s;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_hasNormal: function() {
		return this.hasNormal__;
	}
	,set_hasNormal: function(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Blur.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.texture__ = this.texture__;
		s.depthTexture__ = this.depthTexture__;
		s.Quality__ = this.Quality__;
		s.isDepth__ = this.isDepth__;
		s.values__ = this.values__;
		s.offsets__ = this.offsets__;
		s.pixel__ = this.pixel__;
		s.hasFixedColor__ = this.hasFixedColor__;
		s.smoothFixedColor__ = this.smoothFixedColor__;
		s.fixedColor__ = this.fixedColor__;
		s.isDepthDependant__ = this.isDepthDependant__;
		s.hasNormal__ = this.hasNormal__;
		s.normalTexture__ = this.normalTexture__;
		s.isCube__ = this.isCube__;
		s.cubeTexture__ = this.cubeTexture__;
		s.cubeDir__ = this.cubeDir__;
		return s;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this1 = new Array(s.bufferCount);
		tmp = this1;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this1 = new Array(nb);
			this.buffers = this1;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	grow: function(s) {
		this.vertex.grow(s.vertex);
		this.fragment.grow(s.fragment);
	}
	,__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorAdd.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorKey.prototype);
		s.shader = this.shader;
		s.colorKey__ = this.colorKey__;
		return s;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorMatrix.prototype);
		s.shader = this.shader;
		s.matrix__ = this.matrix__;
		return s;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_pcfQuality: function() {
		return this.pcfQuality__;
	}
	,set_pcfQuality: function(_v) {
		this.constModified = true;
		return this.pcfQuality__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowMapChannel: function() {
		return this.shadowMapChannel__;
	}
	,set_shadowMapChannel: function(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDiskLow: function() {
		return this.poissonDiskLow__;
	}
	,set_poissonDiskLow: function(_v) {
		return this.poissonDiskLow__ = _v;
	}
	,get_poissonDiskHigh: function() {
		return this.poissonDiskHigh__;
	}
	,set_poissonDiskHigh: function(_v) {
		return this.poissonDiskHigh__ = _v;
	}
	,get_poissonDiskVeryHigh: function() {
		return this.poissonDiskVeryHigh__;
	}
	,set_poissonDiskVeryHigh: function(_v) {
		return this.poissonDiskVeryHigh__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_DirShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.pcfQuality__ = this.pcfQuality__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDiskLow__ = this.poissonDiskLow__;
		s.poissonDiskHigh__ = this.poissonDiskHigh__;
		s.poissonDiskVeryHigh__ = this.poissonDiskVeryHigh__;
		return s;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector();
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_GenTexture.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.mode__ = this.mode__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_LineShader.prototype);
		s.shader = this.shader;
		s.lengthScale__ = this.lengthScale__;
		s.width__ = this.width__;
		return s;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_MinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		return s;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_CubeMinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_NormalMap.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinBase.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Skin.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinTangent.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SpecularTexture.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Texture.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		s.killAlpha__ = this.killAlpha__;
		s.specularAlpha__ = this.specularAlpha__;
		s.killAlphaThreshold__ = this.killAlphaThreshold__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_UVDelta.prototype);
		s.shader = this.shader;
		s.uvDelta__ = this.uvDelta__;
		s.uvScale__ = this.uvScale__;
		return s;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VertexColorAlpha.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VolumeDecal.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.isCentered__ = this.isCentered__;
		return s;
	}
	,__class__: h3d_shader_VolumeDecal
});
var h3d_shader_pbr_Light = function() {
	this.occlusionFactor__ = 0;
	this.lightColor__ = new h3d_Vector(0.5,0.5,0.5);
	hxsl_Shader.call(this);
};
h3d_shader_pbr_Light.__name__ = "h3d.shader.pbr.Light";
h3d_shader_pbr_Light.__super__ = hxsl_Shader;
h3d_shader_pbr_Light.prototype = $extend(hxsl_Shader.prototype,{
	get_lightColor: function() {
		return this.lightColor__;
	}
	,set_lightColor: function(_v) {
		return this.lightColor__ = _v;
	}
	,get_occlusionFactor: function() {
		return this.occlusionFactor__;
	}
	,set_occlusionFactor: function(_v) {
		return this.occlusionFactor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.occlusionFactor__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Light.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		return s;
	}
	,__class__: h3d_shader_pbr_Light
});
var h3d_shader_pbr_SpotLight = function() {
	this.lightProj__ = new h3d_Matrix();
	this.range__ = 0;
	this.invLightRange4__ = 0;
	this.fallOff__ = 0;
	this.angle__ = 0;
	this.lightPos__ = new h3d_Vector();
	this.spotDir__ = new h3d_Vector();
	h3d_shader_pbr_Light.call(this);
};
h3d_shader_pbr_SpotLight.__name__ = "h3d.shader.pbr.SpotLight";
h3d_shader_pbr_SpotLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_SpotLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_spotDir: function() {
		return this.spotDir__;
	}
	,set_spotDir: function(_v) {
		return this.spotDir__ = _v;
	}
	,get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_angle: function() {
		return this.angle__;
	}
	,set_angle: function(_v) {
		return this.angle__ = _v;
	}
	,get_fallOff: function() {
		return this.fallOff__;
	}
	,set_fallOff: function(_v) {
		return this.fallOff__ = _v;
	}
	,get_invLightRange4: function() {
		return this.invLightRange4__;
	}
	,set_invLightRange4: function(_v) {
		return this.invLightRange4__ = _v;
	}
	,get_range: function() {
		return this.range__;
	}
	,set_range: function(_v) {
		return this.range__ = _v;
	}
	,get_lightProj: function() {
		return this.lightProj__;
	}
	,set_lightProj: function(_v) {
		return this.lightProj__ = _v;
	}
	,get_useCookie: function() {
		return this.useCookie__;
	}
	,set_useCookie: function(_v) {
		this.constModified = true;
		return this.useCookie__ = _v;
	}
	,get_cookieTex: function() {
		return this.cookieTex__;
	}
	,set_cookieTex: function(_v) {
		return this.cookieTex__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useCookie__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.spotDir__;
		case 3:
			return this.lightPos__;
		case 4:
			return this.angle__;
		case 5:
			return this.fallOff__;
		case 6:
			return this.invLightRange4__;
		case 7:
			return this.range__;
		case 8:
			return this.lightProj__;
		case 9:
			return this.useCookie__;
		case 10:
			return this.cookieTex__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 4:
			return this.angle__;
		case 5:
			return this.fallOff__;
		case 6:
			return this.invLightRange4__;
		case 7:
			return this.range__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_SpotLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.spotDir__ = this.spotDir__;
		s.lightPos__ = this.lightPos__;
		s.angle__ = this.angle__;
		s.fallOff__ = this.fallOff__;
		s.invLightRange4__ = this.invLightRange4__;
		s.range__ = this.range__;
		s.lightProj__ = this.lightProj__;
		s.useCookie__ = this.useCookie__;
		s.cookieTex__ = this.cookieTex__;
		return s;
	}
	,__class__: h3d_shader_pbr_SpotLight
});
var h3d_shader_pbr_PointLight = function() {
	this.pointSize__ = 0;
	this.invLightRange4__ = 0;
	this.lightPos__ = new h3d_Vector();
	h3d_shader_pbr_Light.call(this);
};
h3d_shader_pbr_PointLight.__name__ = "h3d.shader.pbr.PointLight";
h3d_shader_pbr_PointLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_PointLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_invLightRange4: function() {
		return this.invLightRange4__;
	}
	,set_invLightRange4: function(_v) {
		return this.invLightRange4__ = _v;
	}
	,get_pointSize: function() {
		return this.pointSize__;
	}
	,set_pointSize: function(_v) {
		return this.pointSize__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.lightPos__;
		case 3:
			return this.invLightRange4__;
		case 4:
			return this.pointSize__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 3:
			return this.invLightRange4__;
		case 4:
			return this.pointSize__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_PointLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.lightPos__ = this.lightPos__;
		s.invLightRange4__ = this.invLightRange4__;
		s.pointSize__ = this.pointSize__;
		return s;
	}
	,__class__: h3d_shader_pbr_PointLight
});
var h3d_shader_pbr_DirLight = function() {
	this.lightDir__ = new h3d_Vector();
	h3d_shader_pbr_Light.call(this);
};
h3d_shader_pbr_DirLight.__name__ = "h3d.shader.pbr.DirLight";
h3d_shader_pbr_DirLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_DirLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_lightDir: function() {
		return this.lightDir__;
	}
	,set_lightDir: function(_v) {
		return this.lightDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.lightDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.occlusionFactor__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_DirLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.lightDir__ = this.lightDir__;
		return s;
	}
	,__class__: h3d_shader_pbr_DirLight
});
var haxe_EntryPoint = function() { };
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Vector = {};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_zip_Compress = function() { };
haxe_zip_Compress.__name__ = "haxe.zip.Compress";
haxe_zip_Compress.run = function(s,level) {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.notImplemented = function() {
	throw haxe_Exception.thrown("Not implemented");
};
hxd_BitmapData.fromNative = function(data) {
	var b = new hxd_BitmapData(-101,-102);
	b.ctx = data;
	return b;
};
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,draw: function(x,y,src,srcX,srcY,width,height,blendMode) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,drawScaled: function(x,y,width,height,src,srcX,srcY,srcWidth,srcHeight,blendMode,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		if(blendMode == null) {
			blendMode = h2d_BlendMode.Alpha;
		}
		throw haxe_Exception.thrown("Not implemented");
	}
	,line: function(x0,y0,x1,y1,color) {
		var dx = x1 - x0;
		var dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				var tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			if(y0 < 0) {
				y0 = 0;
			}
			if(y1 > this.ctx.canvas.height - 1) {
				y1 = this.ctx.canvas.height - 1;
			}
			var _g = y0;
			var _g1 = y1 + 1;
			while(_g < _g1) {
				var y = _g++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				var tmp = x0;
				x0 = x1;
				x1 = tmp;
			}
			if(x0 < 0) {
				x0 = 0;
			}
			if(x1 > this.ctx.canvas.width - 1) {
				x1 = this.ctx.canvas.width - 1;
			}
			var _g = x0;
			var _g1 = x1 + 1;
			while(_g < _g1) {
				var x = _g++;
				this.setPixel(x,y0,color);
			}
		} else {
			var sx;
			var sy;
			var clip_x0;
			var clip_y0;
			var clip_x1;
			var clip_y1;
			if(x0 < x1) {
				if(x0 >= this.ctx.canvas.width || x1 < 0) {
					return;
				}
				sx = 1;
				clip_x0 = 0;
				clip_x1 = this.ctx.canvas.width - 1;
			} else {
				if(x1 >= this.ctx.canvas.width || x0 < 0) {
					return;
				}
				sx = -1;
				x1 = -x1;
				x0 = -x0;
				clip_x0 = 1 - this.ctx.canvas.width;
				clip_x1 = 0;
			}
			if(y0 < y1) {
				if(y0 >= this.ctx.canvas.height || y1 < 0) {
					return;
				}
				sy = 1;
				clip_y0 = 0;
				clip_y1 = this.ctx.canvas.height - 1;
			} else {
				if(y1 >= this.ctx.canvas.width || y0 < 0) {
					return;
				}
				sy = -1;
				y1 = -y1;
				y0 = -y0;
				clip_y0 = 1 - this.ctx.canvas.height;
				clip_y1 = 0;
			}
			dx = x1 - x0;
			dy = y1 - y0;
			var d2x = dx << 1;
			var d2y = dy << 1;
			var x = x0;
			var y = y0;
			if(dx >= dy) {
				var delta = d2y - dx;
				var tracing_can_start = false;
				if(y0 < clip_y0) {
					var temp = d2x;
					temp = temp * (clip_y0 - y0) - dx;
					var xinc = temp / d2y;
					x += xinc | 0;
					if(x > clip_x1) {
						return;
					}
					if(x >= clip_x0) {
						temp -= xinc * d2y;
						delta -= (temp | 0) + dx;
						y = clip_y0;
						if(temp > 0) {
							++x;
							delta += d2y;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && x0 < clip_x0) {
					var temp = d2y;
					temp *= clip_x0 - x0;
					var yinc = temp / d2x;
					y += yinc | 0;
					temp %= d2x;
					if(y > clip_y1 || y == clip_y1 && temp > dx) {
						return;
					}
					x = clip_x0;
					delta += temp | 0;
					if(temp >= dx) {
						++y;
						delta -= d2x;
					}
				}
				var xend = x1;
				if(y1 > clip_y1) {
					var temp = d2x;
					temp = temp * (clip_y1 - y1) + dx;
					var xinc = temp / d2y;
					xend += xinc | 0;
					if(temp - xinc * d2y == 0) {
						--xend;
					}
				}
				if(xend > clip_x1) {
					xend = clip_x1 + 1;
				} else {
					++xend;
				}
				if(sx == -1) {
					x = -x;
					xend = -xend;
				}
				if(sy == -1) {
					y = -y;
				}
				d2x -= d2y;
				while(x != xend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						y += sy;
						delta -= d2x;
					} else {
						delta += d2y;
					}
					x += sx;
				}
			} else {
				var delta = d2x - dy;
				var tracing_can_start = false;
				if(x0 < clip_x0) {
					var temp = d2y;
					temp = temp * (clip_x0 - x0) - dy;
					var yinc = temp / d2x;
					y += yinc | 0;
					if(y > clip_y1) {
						return;
					}
					if(y >= clip_y0) {
						temp -= yinc * d2x;
						delta -= (temp | 0) + dy;
						x = clip_x0;
						if(temp > 0) {
							++y;
							delta += d2x;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && y0 < clip_y0) {
					var temp = d2x;
					temp *= clip_y0 - y0;
					var xinc = temp / d2y;
					x += xinc | 0;
					temp %= d2y;
					if(x > clip_x1 || x == clip_x1 && temp > dy) {
						return;
					}
					y = clip_y0;
					delta += temp | 0;
					if(temp >= dy) {
						++x;
						delta -= d2y;
					}
				}
				var yend = y1;
				if(x1 > clip_x1) {
					var temp = d2y;
					temp = temp * (clip_x1 - x1) + dy;
					var yinc = temp / d2x;
					yend += yinc | 0;
					if(temp - yinc * d2x == 0) {
						--yend;
					}
				}
				if(yend > clip_y1) {
					yend = clip_y1 + 1;
				} else {
					++yend;
				}
				if(sx == -1) {
					x = -x;
				}
				if(sy == -1) {
					y = -y;
					yend = -yend;
				}
				d2y -= d2x;
				while(y != yend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						x += sx;
						delta -= d2y;
					} else {
						delta += d2x;
					}
					y += sy;
				}
			}
		}
	}
	,dispose: function() {
		this.ctx = null;
		this.pixel = null;
	}
	,clone: function() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	,sub: function(x,y,w,h) {
		var canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		var ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y,w,h,0,0,w,h);
		return hxd_BitmapData.fromNative(ctx);
	}
	,lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i = this.pixel;
		if(i == null) {
			i = this.ctx.createImageData(1,1);
			this.pixel = i;
		}
		i.data[0] = c >> 16 & 255;
		i.data[1] = c >> 8 & 255;
		i.data[2] = c & 255;
		i.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i,x,y);
	}
	,get_width: function() {
		return this.ctx.canvas.width;
	}
	,get_height: function() {
		return this.ctx.canvas.height;
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw haxe_Exception.thrown("Invalid pixels size");
		}
		pixels.setFlip(false);
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g = 0;
		var _g1 = pixels.width * pixels.height * 4;
		while(_g < _g1) {
			var i = _g++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,toNative: function() {
		return this.ctx;
	}
	,toPNG: function() {
		var pixels = this.getPixels();
		var png = pixels.toPNG();
		pixels.dispose();
		return png;
	}
	,__class__: hxd_BitmapData
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.getNativeCursor = function(name) {
	var c = new hxd_CustomCursor([],0,0,0);
	c.alloc = [name];
	return hxd_Cursor.Custom(c);
};
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.ctx = null;
			f.pixel = null;
		}
		this.frames = [];
		if(this.alloc != null) {
			this.alloc = null;
		}
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var tmp1;
		switch(this.kind._hx_index) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
	,__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	var this1 = { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
hxd__$FloatBuffer_Float32Expand.get_length = function(this1) {
	return this1.pos;
};
hxd__$FloatBuffer_Float32Expand.set_length = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
	return v;
};
hxd__$FloatBuffer_Float32Expand.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_Float32Expand.get = function(this1,index) {
	return this1.array[index];
};
hxd__$FloatBuffer_Float32Expand.set = function(this1,index,v) {
	return this1.array[index] = v;
};
hxd__$FloatBuffer_Float32Expand.toF32Array = function(this1) {
	return this1.array;
};
hxd__$FloatBuffer_Float32Expand.toArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.pos;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.array[i]);
	}
	return _g;
};
var hxd__$FloatBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.pos;
	this.pos = 0;
};
hxd__$FloatBuffer_InnerIterator.__name__ = "hxd._FloatBuffer.InnerIterator";
hxd__$FloatBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b.array[this.pos++];
	}
	,__class__: hxd__$FloatBuffer_InnerIterator
};
var hxd_FloatBuffer = {};
hxd_FloatBuffer._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = hxd__$FloatBuffer_Float32Expand._new(length);
	return this1;
};
hxd_FloatBuffer.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd_FloatBuffer.grow = function(this1,v) {
	var _g = this1.pos;
	var _g1 = v;
	while(_g < _g1) {
		var i = _g++;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0.;
	}
};
hxd_FloatBuffer.resize = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
};
hxd_FloatBuffer.arrayRead = function(this1,key) {
	return this1.array[key];
};
hxd_FloatBuffer.arrayWrite = function(this1,key,value) {
	return this1.array[key] = value;
};
hxd_FloatBuffer.getNative = function(this1) {
	return this1;
};
hxd_FloatBuffer.iterator = function(this1) {
	return new hxd__$FloatBuffer_InnerIterator(this1);
};
hxd_FloatBuffer.get_length = function(this1) {
	return this1.pos;
};
var hxd__$IndexBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.length;
	this.pos = 0;
};
hxd__$IndexBuffer_InnerIterator.__name__ = "hxd._IndexBuffer.InnerIterator";
hxd__$IndexBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b[this.pos++];
	}
	,__class__: hxd__$IndexBuffer_InnerIterator
};
var hxd_IndexBuffer = {};
hxd_IndexBuffer._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new Array(length);
	return this1;
};
hxd_IndexBuffer.push = function(this1,v) {
	this1.push(v);
};
hxd_IndexBuffer.grow = function(this1,v) {
	while(this1.length < v) this1.push(0);
};
hxd_IndexBuffer.arrayRead = function(this1,key) {
	return this1[key];
};
hxd_IndexBuffer.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
hxd_IndexBuffer.getNative = function(this1) {
	return this1;
};
hxd_IndexBuffer.iterator = function(this1) {
	return new hxd__$IndexBuffer_InnerIterator(this1);
};
hxd_IndexBuffer.get_length = function(this1) {
	return this1.length;
};
var hxd_Key = function() { };
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.getFrame = function() {
	return hxd_Timer.frameCount + 1;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.isReleased = function(code) {
	return hxd_Key.keyPressed[code] == -(hxd_Timer.frameCount + 1) + 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
hxd_Key.getKeyName = function(keyCode) {
	var c = keyCode;
	switch(c) {
	case 0:
		return "MouseLeft";
	case 1:
		return "MouseRight";
	case 2:
		return "MouseMiddle";
	case 3:
		return "Mouse3";
	case 4:
		return "Mouse4";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 13:
		return "Enter";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "PauseBreak";
	case 20:
		return "CapsLock";
	case 27:
		return "Escape";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 91:
		return "LeftWindowKey";
	case 92:
		return "RightWindowKey";
	case 93:
		return "ContextMenu";
	case 106:
		return "NumPad*";
	case 107:
		return "NumPad+";
	case 108:
		return "NumPadEnter";
	case 109:
		return "NumPad-";
	case 110:
		return "NumPad.";
	case 111:
		return "NumPad/";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 186:
		return "Semicolon";
	case 187:
		return "Equals";
	case 188:
		return "Comma";
	case 189:
		return "Minus";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "Tilde";
	case 219:
		return "BracketLeft";
	case 220:
		return "Backslash";
	case 221:
		return "BacketRight";
	case 222:
		return "Quote";
	case 226:
		return "IntlBackslash";
	case 272:
		return "LShift";
	case 273:
		return "LCtrl";
	case 274:
		return "LAlt";
	case 528:
		return "RShift";
	case 529:
		return "RCtrl";
	case 530:
		return "RAlt";
	default:
		if(c >= 48 && c <= 57) {
			return "" + (c - 48);
		} else if(c >= 96 && c <= 105) {
			return "NumPad" + (c - 96);
		} else if(c >= 65 && c <= 90) {
			return String.fromCodePoint((65 + c - 65));
		} else if(c >= 112 && c <= 135) {
			return "F" + (c - 112 + 1);
		} else {
			return null;
		}
	}
};
var hxd_Math = function() { };
hxd_Math.__name__ = "hxd.Math";
hxd_Math.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
hxd_Math.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
hxd_Math.get_NaN = function() {
	return NaN;
};
hxd_Math.isNaN = function(v) {
	return isNaN(v);
};
hxd_Math.fmt = function(v) {
	var neg;
	if(v < 0) {
		neg = -1.0;
		v = -v;
	} else {
		neg = 1.0;
	}
	if(isNaN(v) || !isFinite(v)) {
		return v;
	}
	var digits = 4 - Math.log(v) / Math.log(10) | 0;
	if(digits < 1) {
		digits = 1;
	} else if(digits >= 10) {
		return 0.;
	}
	var exp = Math.pow(10,digits);
	return Math.floor(v * exp + .49999) * neg / exp;
};
hxd_Math.floor = function(f) {
	return Math.floor(f);
};
hxd_Math.ceil = function(f) {
	return Math.ceil(f);
};
hxd_Math.round = function(f) {
	return Math.round(f);
};
hxd_Math.clamp = function(f,min,max) {
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	if(f < min) {
		return min;
	} else if(f > max) {
		return max;
	} else {
		return f;
	}
};
hxd_Math.pow = function(v,p) {
	return Math.pow(v,p);
};
hxd_Math.scaleTime = function(v,et) {
	return Math.pow(v,et * hxd_Timer.wantedFPS);
};
hxd_Math.cos = function(f) {
	return Math.cos(f);
};
hxd_Math.sin = function(f) {
	return Math.sin(f);
};
hxd_Math.tan = function(f) {
	return Math.tan(f);
};
hxd_Math.acos = function(f) {
	return Math.acos(f);
};
hxd_Math.asin = function(f) {
	return Math.asin(f);
};
hxd_Math.atan = function(f) {
	return Math.atan(f);
};
hxd_Math.sqrt = function(f) {
	return Math.sqrt(f);
};
hxd_Math.invSqrt = function(f) {
	return 1. / Math.sqrt(f);
};
hxd_Math.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
hxd_Math.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
hxd_Math.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
hxd_Math.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iclamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
hxd_Math.lerp = function(a,b,k) {
	return a + k * (b - a);
};
hxd_Math.bitCount = function(v) {
	v -= v >> 1 & 1431655765;
	v = (v & 858993459) + (v >> 2 & 858993459);
	return (v + (v >> 4) & 252645135) * 16843009 >> 24;
};
hxd_Math.isPOT = function(v) {
	return (v & v - 1) == 0;
};
hxd_Math.nextPOT = function(v) {
	--v;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	return ++v;
};
hxd_Math.distanceSq = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	return dx * dx + dy * dy + dz * dz;
};
hxd_Math.distance = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	var dz1 = dz;
	if(dz1 == null) {
		dz1 = 0.;
	}
	return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
};
hxd_Math.colorLerp = function(c1,c2,k) {
	var a1 = c1 >>> 24;
	var r1 = c1 >> 16 & 255;
	var g1 = c1 >> 8 & 255;
	var b1 = c1 & 255;
	var a2 = c2 >>> 24;
	var r2 = c2 >> 16 & 255;
	var g2 = c2 >> 8 & 255;
	var b2 = c2 & 255;
	var a = a1 * (1 - k) + a2 * k | 0;
	var r = r1 * (1 - k) + r2 * k | 0;
	var g = g1 * (1 - k) + g2 * k | 0;
	var b = b1 * (1 - k) + b2 * k | 0;
	return a << 24 | r << 16 | g << 8 | b;
};
hxd_Math.angle = function(da) {
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	return da;
};
hxd_Math.angleLerp = function(a,b,k) {
	var da = b - a;
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	return a + da * k;
};
hxd_Math.angleMove = function(a,b,max) {
	var da = b - a;
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	var da1 = da;
	if(da1 > -max && da1 < max) {
		return b;
	} else {
		return a + (da1 < 0 ? -max : max);
	}
};
hxd_Math.shuffle = function(a) {
	var len = a.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var x = Std.random(len);
		var y = Std.random(len);
		var tmp = a[x];
		a[x] = a[y];
		a[y] = tmp;
	}
};
hxd_Math.random = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return Math.random() * max;
};
hxd_Math.srand = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return (Math.random() - 0.5) * (max * 2);
};
hxd_Math.b2f = function(v) {
	return (v & 255) * 0.0039215686274509803921568627451;
};
hxd_Math.f2b = function(v) {
	return (v < 0. ? 0. : v > 1. ? 1. : v) * 255.0 | 0;
};
hxd_Math.umod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.ufmod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.degToRad = function(deg) {
	return deg * 3.14159265358979323 / 180.0;
};
hxd_Math.radToDeg = function(rad) {
	return rad * 180.0 / 3.14159265358979323;
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.getPixel = function(this1,x,y) {
	var v = this1.bytes.getInt32((x + y * this1.width << 2) + this1.offset);
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_PixelsARGB.setPixel = function(this1,x,y,v) {
	this1.bytes.setInt32((x + y * this1.width << 2) + this1.offset,v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24);
};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_PixelsFloat = {};
hxd_PixelsFloat.getPixelF = function(this1,x,y) {
	switch(this1.innerFormat._hx_index) {
	case 4:
		var pix = (x + y * this1.width << 4) + this1.offset;
		return new h3d_Vector(this1.bytes.getFloat(pix),this1.bytes.getFloat(pix + 4),this1.bytes.getFloat(pix + 8),this1.bytes.getFloat(pix + 12));
	case 7:
		var pix = (x + y * this1.width << 2) + this1.offset;
		return new h3d_Vector(this1.bytes.getFloat(pix));
	default:
		this1.invalidFormat();
		return null;
	}
};
hxd_PixelsFloat.setPixelF = function(this1,x,y,v) {
	switch(this1.innerFormat._hx_index) {
	case 4:
		var pix = (x + y * this1.width << 4) + this1.offset;
		this1.bytes.setFloat(pix,v.x);
		this1.bytes.setFloat(pix + 4,v.y);
		this1.bytes.setFloat(pix + 8,v.z);
		this1.bytes.setFloat(pix + 12,v.w);
		break;
	case 7:
		var pix = (x + y * this1.width << 2) + this1.offset;
		this1.bytes.setFloat(pix,v.x);
		break;
	default:
		this1.invalidFormat();
	}
};
hxd_PixelsFloat.fromPixels = function(p) {
	p.setFlip(false);
	return p;
};
hxd_PixelsFloat.convert = function(this1,target) {
	if(this1.innerFormat == target) {
		return;
	}
	if((this1.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
		this1.copyInner();
	}
	var this2 = this1.bytes.b;
	var bytes = this2;
	if(this1.innerFormat._hx_index == 4) {
		if(target._hx_index == 7) {
			var nbytes = new haxe_io_Bytes(new ArrayBuffer(this1.height * this1.width * 4));
			var this2 = nbytes.b;
			var out = this2;
			var _g = 0;
			var _g1 = this1.width * this1.height;
			while(_g < _g1) {
				var i = _g++;
				nbytes.setFloat(i << 2,this1.bytes.getFloat(i << 4));
			}
			this1.bytes = nbytes;
		} else {
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this1.innerFormat) + " to " + Std.string(target));
		}
	} else {
		throw haxe_Exception.thrown("Cannot convert from " + Std.string(this1.innerFormat) + " to " + Std.string(target));
	}
	this1.set_innerFormat(target);
};
var hxd_Channel = {};
hxd_Channel.toInt = function(this1) {
	return this1;
};
hxd_Channel.fromInt = function(v) {
	return v;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.switchEndian = function(v) {
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_Pixels.switchBR = function(v) {
	return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 18:
		var n = format.v;
		if(n == 1 || n == 4) {
			return width >> 1;
		}
		tmp = 1;
		break;
	}
	return width * tmp;
};
hxd_Pixels.getChannelOffset = function(format,channel) {
	switch(format._hx_index) {
	case 0:
		return [1,2,3,0][channel];
	case 1:
		return [2,1,0,3][channel];
	case 3:
		return channel * 2;
	case 4:
		return channel * 4;
	case 5:case 6:case 7:
		if(channel == 0) {
			return 0;
		} else {
			return -1;
		}
		break;
	case 8:case 9:case 10:
		var p = hxd_Pixels.calcStride(1,format);
		return [0,p,-1,-1][channel];
	case 11:case 12:case 13:
		var p = hxd_Pixels.calcStride(1,format);
		return [0,p,p << 1,-1][channel];
	case 2:case 14:case 15:
		return channel;
	case 16:case 17:
		throw haxe_Exception.thrown("Bit packed format");
	case 18:
		var _g = format.v;
		throw haxe_Exception.thrown("Not supported");
	}
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
};
hxd_Pixels.prototype = {
	get_format: function() {
		return this.innerFormat;
	}
	,set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,sub: function(x,y,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe_Exception.thrown("Pixels.sub() outside bounds");
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(height * this.stride));
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var outP = 0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var y1 = y + dy;
			var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y1 : y1) * this.width) * this.bytesPerPixel + this.offset;
			out.blit(outP,this.bytes,p,stride);
			outP += stride;
		}
		return new hxd_Pixels(width,height,out,this.innerFormat);
	}
	,yflip: function(y) {
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0) {
			return this.height - 1 - y;
		} else {
			return y;
		}
	}
	,blit: function(x,y,src,srcX,srcY,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe_Exception.thrown("Pixels.blit() outside bounds");
		}
		if(srcX < 0 || srcX < 0 || srcX + width > src.width || srcY + height > src.height) {
			throw haxe_Exception.thrown("Pixels.blit() outside src bounds");
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		src.convert(this.innerFormat);
		var bpp = this.bytesPerPixel;
		if(bpp == 0) {
			throw haxe_Exception.thrown("assert");
		}
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var y1 = dy + srcY;
			var srcP = (srcX + ((src.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? src.height - 1 - y1 : y1) * src.width) * bpp + src.offset;
			var y2 = dy + y;
			var dstP = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y2 : y2) * this.width) * bpp + this.offset;
			this.bytes.blit(dstP,src.bytes,srcP,stride);
		}
	}
	,clear: function(color,preserveMask) {
		if(preserveMask == null) {
			preserveMask = 0;
		}
		var mask = preserveMask;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if((color & 255) == (color >> 8 & 255) && (color & 65535) == color >>> 16 && mask == 0) {
			this.bytes.fill(this.offset,this.width * this.height * this.bytesPerPixel,color & 255);
			return;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			color = color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24;
			mask = mask >>> 24 | mask >> 8 & 65280 | mask << 8 & 16711680 | mask << 24;
			break;
		case 1:
			break;
		case 2:
			color = color & -16711936 | color << 16 & 16711680 | color >> 16 & 255;
			mask = mask & -16711936 | mask << 16 & 16711680 | mask >> 16 & 255;
			break;
		default:
			this.invalidFormat();
		}
		var p = this.offset;
		if(mask == 0) {
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				this.bytes.setInt32(p,color);
				p += 4;
			}
		} else {
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				this.bytes.setInt32(p,color | this.bytes.getInt32(p) & mask);
				p += 4;
			}
		}
	}
	,toVector: function() {
		var this1 = new Array(this.width * this.height);
		var vec = this1;
		var idx = 0;
		var p = this.offset;
		var dl = 0;
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0) {
			p += (this.height - 1) * this.width * this.bytesPerPixel;
			dl = -this.width * 2 * this.bytesPerPixel;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g3 = (tw - w) * bpp >> 2;
			while(_g2 < _g3) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g = 0;
		var _g1 = (th - h) * tw * bpp >> 2;
		while(_g < _g1) {
			var i = _g++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,willChange: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var this1 = nbytes.b;
				var out = this1;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				var a = _g.v;
				var b = target.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v = this.bytes.getInt32(p);
			return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,setPixel: function(x,y,color) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		case 5:
			this.bytes.b[p] = color;
			break;
		default:
			this.invalidFormat();
		}
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toPNG: function(level) {
		if(level == null) {
			level = 9;
		}
		var png;
		this.setFlip(false);
		if(this.innerFormat._hx_index == 0) {
			png = format_png_Tools.build32ARGB(this.width,this.height,this.bytes,level);
		} else {
			this.convert(hxd_PixelFormat.BGRA);
			png = format_png_Tools.build32BGRA(this.width,this.height,this.bytes,level);
		}
		var o = new haxe_io_BytesOutput();
		new format_png_Writer(o).write(png);
		return o.getBytes();
	}
	,clone: function() {
		var p = new hxd_Pixels(this.width,this.height,null,this.innerFormat);
		p.flags = this.flags;
		p.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
		if(this.bytes != null) {
			var size = this.height * this.stride;
			p.bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			p.bytes.blit(0,this.bytes,this.offset,size);
		}
		return p;
	}
	,__class__: hxd_Pixels
};
var hxd_Rand = function(seed) {
	this.init(seed);
};
hxd_Rand.__name__ = "hxd.Rand";
hxd_Rand.hash = function(n,seed) {
	if(seed == null) {
		seed = 5381;
	}
	var n1 = n;
	n1 = haxe_Int32._mul(n1,-862048943);
	n1 = n1 << 15 | n1 >>> 17;
	n1 = haxe_Int32._mul(n1,461845907);
	var h = seed;
	h ^= n1;
	h = h << 13 | h >>> 19;
	h = haxe_Int32._mul(h,5) + (-430675100) | 0;
	h ^= h >> 16;
	h = haxe_Int32._mul(h,-2048144789);
	h ^= h >> 13;
	h = haxe_Int32._mul(h,-1028477387);
	return h ^= h >> 16;
};
hxd_Rand.inlineHash = function(n,seed) {
	var n1 = n;
	n1 = haxe_Int32._mul(n1,-862048943);
	n1 = n1 << 15 | n1 >>> 17;
	n1 = haxe_Int32._mul(n1,461845907);
	var h = seed;
	h ^= n1;
	h = h << 13 | h >>> 19;
	h = haxe_Int32._mul(h,5) + (-430675100) | 0;
	h ^= h >> 16;
	h = haxe_Int32._mul(h,-2048144789);
	h ^= h >> 13;
	h = haxe_Int32._mul(h,-1028477387);
	h ^= h >> 16;
	return h;
};
hxd_Rand.create = function() {
	return new hxd_Rand(Std.random(2147483647));
};
hxd_Rand.prototype = {
	init: function(seed) {
		this.seed = seed;
		this.seed2 = hxd_Rand.hash(seed);
		if(this.seed == 0) {
			this.seed = 1;
		}
		if(this.seed2 == 0) {
			this.seed2 = 1;
		}
	}
	,random: function(n) {
		this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
		this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
		return (((this.seed << 16) + this.seed2 | 0) & 1073741823) % n;
	}
	,shuffle: function(a) {
		var len = a.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
			this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
			var x = (((this.seed << 16) + this.seed2 | 0) & 1073741823) % len;
			this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
			this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
			var y = (((this.seed << 16) + this.seed2 | 0) & 1073741823) % len;
			var tmp = a[x];
			a[x] = a[y];
			a[y] = tmp;
		}
	}
	,rand: function() {
		this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
		this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
		return (((this.seed << 16) + this.seed2 | 0) & 1073741823) % 10007 / 10007.0;
	}
	,srand: function(scale) {
		if(scale == null) {
			scale = 1.0;
		}
		this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
		this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
		return ((this.seed << 16) + this.seed2 | 0) % 10007 / 10007.0 * scale;
	}
	,int: function() {
		this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
		this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
		return (this.seed << 16) + this.seed2 | 0;
	}
	,uint: function() {
		this.seed = 36969 * (this.seed & 65535) + (this.seed >> 16);
		this.seed2 = 18000 * (this.seed2 & 65535) + (this.seed2 >> 16);
		return ((this.seed << 16) + this.seed2 | 0) & 1073741823;
	}
	,__class__: hxd_Rand
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	setMousePos: function(xPos,yPos) {
		this.mouseX = xPos;
		this.mouseY = yPos;
	}
	,onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,removeScene: function(s) {
		if(HxOverrides.remove(this.scenes,s)) {
			s.setEvents(null);
		}
	}
	,dispose: function() {
		this.window.removeEventTarget($bind(this,this.onEvent));
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				while(true) {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
					if(!(i < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startDrag: function(f,onCancel,refEvent) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : refEvent == null ? null : refEvent.touchId, onCancel : onCancel};
	}
	,stopDrag: function() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	,getFocus: function() {
		return this.currentFocus;
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,set_defaultCursor: function(c) {
		if(Type.enumEq(c,this.defaultCursor)) {
			return c;
		}
		this.defaultCursor = c;
		this.selectCursor();
		return c;
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.get_tmod = function() {
	return hxd_Timer.dt * hxd_Timer.wantedFPS;
};
hxd_Timer.set_tmod = function(v) {
	hxd_Timer.dt = v / hxd_Timer.wantedFPS;
	return v;
};
hxd_Timer.fps = function() {
	return 1. / hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
hxd_Timer.reset = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
	hxd_Timer.dt = hxd_Timer.currentDT = 1. / hxd_Timer.wantedFPS;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = $bind(this,this.onFocus);
	var b = false;
	var tmp = function() {
		_g(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = $bind(this,this.onFocus);
	var b1 = true;
	var tmp = function() {
		_g1(b1);
	};
	this.element.addEventListener("focus",tmp);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		this.timer.stop();
	}
	,onClose: function() {
		return true;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setFullScreen: function(v) {
		var doc = window.document;
		var elt = doc.documentElement;
		if(doc.fullscreenElement == elt == v) {
			return;
		}
		if(v) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
	}
	,setCurrent: function() {
		hxd_Window.inst = this;
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,get_mouseLock: function() {
		return false;
	}
	,set_mouseLock: function(v) {
		if(v) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return false;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw haxe_Exception.thrown("Can't disable vsync on this platform");
		}
		return true;
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,get_displayMode: function() {
		var doc = window.document;
		if(doc.fullscreenElement != null) {
			return hxd_DisplayMode.Borderless;
		}
		return hxd_DisplayMode.Windowed;
	}
	,set_displayMode: function(m) {
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,get_title: function() {
		return window.document.title;
	}
	,set_title: function(t) {
		return window.document.title = t;
	}
	,__class__: hxd_Window
};
var hxd_System = function() { };
hxd_System.__name__ = "hxd.System";
hxd_System.timeoutTick = function() {
};
hxd_System.getCurrentLoop = function() {
	return hxd_System.loopFunc;
};
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g = c.f;
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDeviceName = function() {
	return "Unknown";
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.exit = function() {
};
hxd_System.openURL = function(url) {
	window.open(url,"_blank");
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_width = function() {
	return Math.round(window.document.body.clientWidth * window.devicePixelRatio);
};
hxd_System.get_height = function() {
	return Math.round(window.document.body.clientHeight * window.devicePixelRatio);
};
hxd_System.get_lang = function() {
	return "en";
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
hxd_System.get_screenDPI = function() {
	return 72;
};
hxd_System.get_allowTimeout = function() {
	return false;
};
hxd_System.set_allowTimeout = function(b) {
	return false;
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : true, __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_fmt_hmd_GeometryDataFormat = {};
hxd_fmt_hmd_GeometryDataFormat._new = function(v) {
	var this1 = v;
	return this1;
};
hxd_fmt_hmd_GeometryDataFormat.getSize = function(this1) {
	return this1 & 7;
};
hxd_fmt_hmd_GeometryDataFormat.toInt = function(this1) {
	return this1;
};
hxd_fmt_hmd_GeometryDataFormat.toString = function(this1) {
	var this2 = this1;
	switch(this2) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	}
};
hxd_fmt_hmd_GeometryDataFormat.fromInt = function(v) {
	var this1 = v;
	return this1;
};
var hxd_fmt_hmd_Property = $hxEnums["hxd.fmt.hmd.Property"] = { __ename__ : true, __constructs__ : ["CameraFOVY","Unused_HasMaterialFlags","HasExtraTextures"]
	,CameraFOVY: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxd.fmt.hmd.Property",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Unused_HasMaterialFlags: {_hx_index:1,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,HasExtraTextures: {_hx_index:2,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
};
hxd_fmt_hmd_Property.__empty_constructs__ = [hxd_fmt_hmd_Property.Unused_HasMaterialFlags,hxd_fmt_hmd_Property.HasExtraTextures];
var hxd_fmt_hmd_Position = function() {
};
hxd_fmt_hmd_Position.__name__ = "hxd.fmt.hmd.Position";
hxd_fmt_hmd_Position.prototype = {
	loadQuaternion: function(q) {
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
	}
	,get_qw: function() {
		var qw = 1 - (this.qx * this.qx + this.qy * this.qy + this.qz * this.qz);
		if(qw < 0) {
			return -Math.sqrt(-qw);
		} else {
			return Math.sqrt(qw);
		}
	}
	,toMatrix: function(postScale) {
		if(postScale == null) {
			postScale = false;
		}
		var m = new h3d_Matrix();
		var q = hxd_fmt_hmd_Position.QTMP;
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
		q.toMatrix(m);
		if(postScale) {
			m.translate(this.x,this.y,this.z);
			m.scale(this.sx,this.sy,this.sz);
		} else {
			m._11 *= this.sx;
			m._12 *= this.sx;
			m._13 *= this.sx;
			m._21 *= this.sy;
			m._22 *= this.sy;
			m._23 *= this.sy;
			m._31 *= this.sz;
			m._32 *= this.sz;
			m._33 *= this.sz;
			m.translate(this.x,this.y,this.z);
		}
		return m;
	}
	,__class__: hxd_fmt_hmd_Position
};
var hxd_fmt_hmd_GeometryFormat = function(name,format) {
	this.name = name;
	this.format = format;
};
hxd_fmt_hmd_GeometryFormat.__name__ = "hxd.fmt.hmd.GeometryFormat";
hxd_fmt_hmd_GeometryFormat.prototype = {
	__class__: hxd_fmt_hmd_GeometryFormat
};
var hxd_fmt_hmd_Geometry = function() {
};
hxd_fmt_hmd_Geometry.__name__ = "hxd.fmt.hmd.Geometry";
hxd_fmt_hmd_Geometry.prototype = {
	get_indexCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.indexCounts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			k += i;
		}
		return k;
	}
	,__class__: hxd_fmt_hmd_Geometry
};
var hxd_fmt_hmd_Material = function() {
};
hxd_fmt_hmd_Material.__name__ = "hxd.fmt.hmd.Material";
hxd_fmt_hmd_Material.prototype = {
	__class__: hxd_fmt_hmd_Material
};
var hxd_fmt_hmd_SkinJoint = function() {
};
hxd_fmt_hmd_SkinJoint.__name__ = "hxd.fmt.hmd.SkinJoint";
hxd_fmt_hmd_SkinJoint.prototype = {
	__class__: hxd_fmt_hmd_SkinJoint
};
var hxd_fmt_hmd_SkinSplit = function() {
};
hxd_fmt_hmd_SkinSplit.__name__ = "hxd.fmt.hmd.SkinSplit";
hxd_fmt_hmd_SkinSplit.prototype = {
	__class__: hxd_fmt_hmd_SkinSplit
};
var hxd_fmt_hmd_Skin = function() {
};
hxd_fmt_hmd_Skin.__name__ = "hxd.fmt.hmd.Skin";
hxd_fmt_hmd_Skin.prototype = {
	__class__: hxd_fmt_hmd_Skin
};
var hxd_fmt_hmd_Model = function() {
};
hxd_fmt_hmd_Model.__name__ = "hxd.fmt.hmd.Model";
hxd_fmt_hmd_Model.prototype = {
	__class__: hxd_fmt_hmd_Model
};
var hxd_fmt_hmd_AnimationFlag = $hxEnums["hxd.fmt.hmd.AnimationFlag"] = { __ename__ : true, __constructs__ : ["HasPosition","HasRotation","HasScale","HasUV","HasAlpha","SingleFrame","HasProps","Reserved"]
	,HasPosition: {_hx_index:0,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasRotation: {_hx_index:1,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasScale: {_hx_index:2,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasUV: {_hx_index:3,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasAlpha: {_hx_index:4,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,SingleFrame: {_hx_index:5,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasProps: {_hx_index:6,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,Reserved: {_hx_index:7,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
};
hxd_fmt_hmd_AnimationFlag.__empty_constructs__ = [hxd_fmt_hmd_AnimationFlag.HasPosition,hxd_fmt_hmd_AnimationFlag.HasRotation,hxd_fmt_hmd_AnimationFlag.HasScale,hxd_fmt_hmd_AnimationFlag.HasUV,hxd_fmt_hmd_AnimationFlag.HasAlpha,hxd_fmt_hmd_AnimationFlag.SingleFrame,hxd_fmt_hmd_AnimationFlag.HasProps,hxd_fmt_hmd_AnimationFlag.Reserved];
var hxd_fmt_hmd_AnimationObject = function() {
};
hxd_fmt_hmd_AnimationObject.__name__ = "hxd.fmt.hmd.AnimationObject";
hxd_fmt_hmd_AnimationObject.prototype = {
	getStride: function() {
		var stride = 0;
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
			stride += 2;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
			++stride;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
			stride += this.props.length;
		}
		return stride;
	}
	,__class__: hxd_fmt_hmd_AnimationObject
};
var hxd_fmt_hmd_AnimationEvent = function() {
};
hxd_fmt_hmd_AnimationEvent.__name__ = "hxd.fmt.hmd.AnimationEvent";
hxd_fmt_hmd_AnimationEvent.prototype = {
	__class__: hxd_fmt_hmd_AnimationEvent
};
var hxd_fmt_hmd_Animation = function() {
};
hxd_fmt_hmd_Animation.__name__ = "hxd.fmt.hmd.Animation";
hxd_fmt_hmd_Animation.prototype = {
	__class__: hxd_fmt_hmd_Animation
};
var hxd_fmt_hmd_Data = function() {
};
hxd_fmt_hmd_Data.__name__ = "hxd.fmt.hmd.Data";
hxd_fmt_hmd_Data.prototype = {
	__class__: hxd_fmt_hmd_Data
};
var hxd_fmt_hmd__$Library_FormatMap = function(size,offset,def,next) {
	this.size = size;
	this.offset = offset;
	this.def = def;
	this.next = next;
};
hxd_fmt_hmd__$Library_FormatMap.__name__ = "hxd.fmt.hmd._Library.FormatMap";
hxd_fmt_hmd__$Library_FormatMap.prototype = {
	__class__: hxd_fmt_hmd__$Library_FormatMap
};
var hxd_fmt_hmd_GeometryBuffer = function() {
};
hxd_fmt_hmd_GeometryBuffer.__name__ = "hxd.fmt.hmd.GeometryBuffer";
hxd_fmt_hmd_GeometryBuffer.prototype = {
	__class__: hxd_fmt_hmd_GeometryBuffer
};
var hxd_fmt_hmd_Library = function(res,header) {
	this.tmp = new haxe_io_Bytes(new ArrayBuffer(4));
	this.resource = res;
	this.header = header;
	this.cachedPrimitives = [];
	this.cachedAnimations = new haxe_ds_StringMap();
	this.cachedSkin = new haxe_ds_StringMap();
};
hxd_fmt_hmd_Library.__name__ = "hxd.fmt.hmd.Library";
hxd_fmt_hmd_Library.prototype = {
	getData: function() {
		var entry = this.resource.entry;
		var b = new haxe_io_Bytes(new ArrayBuffer(entry.get_size() - this.header.dataPosition));
		entry.open();
		entry.skip(this.header.dataPosition);
		entry.read(b,0,b.length);
		entry.close();
		return b;
	}
	,getDefaultFormat: function(stride) {
		var format = [new hxd_fmt_hmd_GeometryFormat("position",3)];
		var defs = [null];
		if(stride > 3) {
			format.push(new hxd_fmt_hmd_GeometryFormat("normal",3));
			defs.push(null);
		}
		if(stride > 6) {
			format.push(new hxd_fmt_hmd_GeometryFormat("uv",2));
			defs.push(null);
		}
		if(stride > 8) {
			format.push(new hxd_fmt_hmd_GeometryFormat("color",3));
			defs.push(new h3d_Vector(1,1,1));
		}
		if(stride > 11) {
			throw haxe_Exception.thrown("Unsupported stride");
		}
		return { format : format, defs : defs};
	}
	,load: function(format,defaults,modelIndex) {
		if(modelIndex == null) {
			modelIndex = -1;
		}
		var vtmp_x = 0.;
		var vtmp_y = 0.;
		var vtmp_z = 0.;
		var vtmp_w = 1.;
		var models = modelIndex < 0 ? this.header.models : [this.header.models[modelIndex]];
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var outVertex = this1;
		var this1 = new Array(0);
		var outIndex = this1;
		var stride = 0;
		var mid = -1;
		var _g = 0;
		while(_g < format.length) {
			var f = format[_g];
			++_g;
			stride += f.format & 7;
		}
		var _g = 0;
		while(_g < models.length) {
			var m = models[_g];
			++_g;
			var geom = this.header.geometries[m.geometry];
			if(geom == null) {
				continue;
			}
			var _g1 = 0;
			var _g2 = m.materials;
			while(_g1 < _g2.length) {
				var mat = _g2[_g1];
				++_g1;
				if(mid < 0) {
					mid = mat;
				}
				if(mid != mat) {
					throw haxe_Exception.thrown("Models have several materials");
				}
			}
			var pos = m.position.toMatrix();
			var data = this.getBuffers(geom,format,defaults);
			var start = outVertex.pos / stride | 0;
			var _g3 = 0;
			var _g4 = data.vertexes.length / stride | 0;
			while(_g3 < _g4) {
				var i = _g3++;
				var p = i * stride;
				vtmp_x = data.vertexes[p++];
				vtmp_y = data.vertexes[p++];
				vtmp_z = data.vertexes[p++];
				var px = vtmp_x * pos._11 + vtmp_y * pos._21 + vtmp_z * pos._31 + vtmp_w * pos._41;
				var py = vtmp_x * pos._12 + vtmp_y * pos._22 + vtmp_z * pos._32 + vtmp_w * pos._42;
				var pz = vtmp_x * pos._13 + vtmp_y * pos._23 + vtmp_z * pos._33 + vtmp_w * pos._43;
				vtmp_x = px;
				vtmp_y = py;
				vtmp_z = pz;
				if(outVertex.pos == outVertex.array.length) {
					var newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_x;
				if(outVertex.pos == outVertex.array.length) {
					var newSize1 = outVertex.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(outVertex.array);
					outVertex.array = newArray1;
				}
				outVertex.array[outVertex.pos++] = vtmp_y;
				if(outVertex.pos == outVertex.array.length) {
					var newSize2 = outVertex.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(outVertex.array);
					outVertex.array = newArray2;
				}
				outVertex.array[outVertex.pos++] = vtmp_z;
				var _g5 = 0;
				var _g6 = stride - 3;
				while(_g5 < _g6) {
					var j = _g5++;
					var v = data.vertexes[p++];
					if(outVertex.pos == outVertex.array.length) {
						var newSize3 = outVertex.array.length << 1;
						if(newSize3 < 128) {
							newSize3 = 128;
						}
						var newArray3 = new Float32Array(newSize3);
						newArray3.set(outVertex.array);
						outVertex.array = newArray3;
					}
					outVertex.array[outVertex.pos++] = v;
				}
			}
			var _g7 = 0;
			var _g8 = data.indexes;
			while(_g7 < _g8.length) {
				var idx = _g8[_g7];
				++_g7;
				outIndex.push(idx + start);
			}
		}
		return { vertex : outVertex, index : outIndex};
	}
	,getBuffers: function(geom,format,defaults,material) {
		if(material == 0 && geom.indexCounts.length == 1) {
			material = null;
		}
		var map = null;
		var stride = 0;
		var _g = 0;
		var _g1 = format.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = format.length - 1 - i;
			var f = format[i1];
			var size = f.format & 7;
			var offset = 0;
			var found = false;
			var _g2 = 0;
			var _g3 = geom.vertexFormat;
			while(_g2 < _g3.length) {
				var f2 = _g3[_g2];
				++_g2;
				if(f2.name == f.name) {
					if((f2.format & 7) < size) {
						throw haxe_Exception.thrown("Requested " + f.name + " data has only " + (f2.format & 7) + " regs instead of " + size);
					}
					found = true;
					break;
				}
				offset += f2.format & 7;
			}
			if(found) {
				map = new hxd_fmt_hmd__$Library_FormatMap(size,offset,null,map);
			} else {
				var def = defaults == null ? null : defaults[i1];
				if(def == null) {
					throw haxe_Exception.thrown("Missing required " + f.name);
				}
				map = new hxd_fmt_hmd__$Library_FormatMap(size,0,def,map);
			}
			stride += size;
		}
		var vsize = geom.vertexCount * geom.vertexStride * 4;
		var vbuf = new haxe_io_Bytes(new ArrayBuffer(vsize));
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + geom.vertexPosition);
		entry.read(vbuf,0,vsize);
		entry.skip(geom.indexPosition - (geom.vertexPosition + vsize));
		var isize;
		if(material == null) {
			isize = geom.get_indexCount() * 2;
		} else {
			var ipos = 0;
			var _g = 0;
			var _g1 = material;
			while(_g < _g1) {
				var i = _g++;
				ipos += geom.indexCounts[i];
			}
			entry.skip(ipos * 2);
			isize = geom.indexCounts[material] * 2;
		}
		var ibuf = new haxe_io_Bytes(new ArrayBuffer(isize));
		entry.read(ibuf,0,isize);
		var buf = new hxd_fmt_hmd_GeometryBuffer();
		if(material == null) {
			var this1 = new Array(stride * geom.vertexCount);
			buf.vertexes = this1;
			var this1 = new Array(geom.get_indexCount());
			buf.indexes = this1;
			var w = 0;
			var _g = 0;
			var _g1 = geom.vertexCount;
			while(_g < _g1) {
				var vid = _g++;
				var m = map;
				while(m != null) {
					if(m.def == null) {
						var r = vid * geom.vertexStride;
						var _g2 = 0;
						var _g3 = m.size;
						while(_g2 < _g3) {
							var i = _g2++;
							buf.vertexes[w++] = vbuf.getFloat(r + m.offset + i << 2);
						}
					} else {
						switch(m.size) {
						case 1:
							buf.vertexes[w++] = m.def.x;
							break;
						case 2:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							break;
						case 3:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							break;
						default:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							buf.vertexes[w++] = m.def.w;
						}
					}
					m = m.next;
				}
			}
			var r = 0;
			var _g = 0;
			var _g1 = buf.indexes.length;
			while(_g < _g1) {
				var i = _g++;
				buf.indexes[i] = ibuf.b[r++] | ibuf.b[r++] << 8;
			}
		} else {
			var icount = geom.indexCounts[material];
			var this1 = new Array(geom.vertexCount);
			var vmap = this1;
			var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			var vertexes = this1;
			var this1 = new Array(icount);
			buf.indexes = this1;
			var r = 0;
			var vcount = 0;
			var _g = 0;
			var _g1 = buf.indexes.length;
			while(_g < _g1) {
				var i = _g++;
				var vid = ibuf.b[r++] | ibuf.b[r++] << 8;
				var rid = vmap[vid];
				if(rid == 0) {
					++vcount;
					rid = vcount;
					vmap[vid] = rid;
					var m = map;
					while(m != null) {
						if(m.def == null) {
							var r1 = vid * geom.vertexStride;
							var _g2 = 0;
							var _g3 = m.size;
							while(_g2 < _g3) {
								var i1 = _g2++;
								var v = vbuf.getFloat(r1 + m.offset + i1 << 2);
								if(vertexes.pos == vertexes.array.length) {
									var newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									var newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
							}
						} else {
							switch(m.size) {
							case 1:
								var v1 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize1 = vertexes.array.length << 1;
									if(newSize1 < 128) {
										newSize1 = 128;
									}
									var newArray1 = new Float32Array(newSize1);
									newArray1.set(vertexes.array);
									vertexes.array = newArray1;
								}
								vertexes.array[vertexes.pos++] = v1;
								break;
							case 2:
								var v2 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize2 = vertexes.array.length << 1;
									if(newSize2 < 128) {
										newSize2 = 128;
									}
									var newArray2 = new Float32Array(newSize2);
									newArray2.set(vertexes.array);
									vertexes.array = newArray2;
								}
								vertexes.array[vertexes.pos++] = v2;
								var v3 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize3 = vertexes.array.length << 1;
									if(newSize3 < 128) {
										newSize3 = 128;
									}
									var newArray3 = new Float32Array(newSize3);
									newArray3.set(vertexes.array);
									vertexes.array = newArray3;
								}
								vertexes.array[vertexes.pos++] = v3;
								break;
							case 3:
								var v4 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize4 = vertexes.array.length << 1;
									if(newSize4 < 128) {
										newSize4 = 128;
									}
									var newArray4 = new Float32Array(newSize4);
									newArray4.set(vertexes.array);
									vertexes.array = newArray4;
								}
								vertexes.array[vertexes.pos++] = v4;
								var v5 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize5 = vertexes.array.length << 1;
									if(newSize5 < 128) {
										newSize5 = 128;
									}
									var newArray5 = new Float32Array(newSize5);
									newArray5.set(vertexes.array);
									vertexes.array = newArray5;
								}
								vertexes.array[vertexes.pos++] = v5;
								var v6 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize6 = vertexes.array.length << 1;
									if(newSize6 < 128) {
										newSize6 = 128;
									}
									var newArray6 = new Float32Array(newSize6);
									newArray6.set(vertexes.array);
									vertexes.array = newArray6;
								}
								vertexes.array[vertexes.pos++] = v6;
								break;
							default:
								var v7 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize7 = vertexes.array.length << 1;
									if(newSize7 < 128) {
										newSize7 = 128;
									}
									var newArray7 = new Float32Array(newSize7);
									newArray7.set(vertexes.array);
									vertexes.array = newArray7;
								}
								vertexes.array[vertexes.pos++] = v7;
								var v8 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize8 = vertexes.array.length << 1;
									if(newSize8 < 128) {
										newSize8 = 128;
									}
									var newArray8 = new Float32Array(newSize8);
									newArray8.set(vertexes.array);
									vertexes.array = newArray8;
								}
								vertexes.array[vertexes.pos++] = v8;
								var v9 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize9 = vertexes.array.length << 1;
									if(newSize9 < 128) {
										newSize9 = 128;
									}
									var newArray9 = new Float32Array(newSize9);
									newArray9.set(vertexes.array);
									vertexes.array = newArray9;
								}
								vertexes.array[vertexes.pos++] = v9;
								var v10 = m.def.w;
								if(vertexes.pos == vertexes.array.length) {
									var newSize10 = vertexes.array.length << 1;
									if(newSize10 < 128) {
										newSize10 = 128;
									}
									var newArray10 = new Float32Array(newSize10);
									newArray10.set(vertexes.array);
									vertexes.array = newArray10;
								}
								vertexes.array[vertexes.pos++] = v10;
							}
						}
						m = m.next;
					}
				}
				buf.indexes[i] = rid - 1;
			}
			var this1 = vertexes;
			var _g = [];
			var _g1 = 0;
			var _g2 = this1.pos;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this1.array[i]);
			}
			buf.vertexes = _g;
		}
		entry.close();
		return buf;
	}
	,makePrimitive: function(id) {
		var p = this.cachedPrimitives[id];
		if(p != null) {
			return p;
		}
		p = new h3d_prim_HMDModel(this.header.geometries[id],this.header.dataPosition,this);
		p.incref();
		this.cachedPrimitives[id] = p;
		return p;
	}
	,makeMaterial: function(model,mid,loadTexture) {
		var m = this.header.materials[mid];
		var mat = h3d_mat_MaterialSetup.current.createMaterial();
		mat.name = m.name;
		if(m.diffuseTexture != null) {
			mat.set_texture(loadTexture(m.diffuseTexture));
			if(mat.get_texture() == null) {
				mat.set_texture(h3d_mat_Texture.fromColor(16711935));
			}
		}
		if(m.specularTexture != null) {
			mat.set_specularTexture(loadTexture(m.specularTexture));
		}
		if(m.normalMap != null) {
			mat.set_normalMap(loadTexture(m.normalMap));
		}
		mat.set_blendMode(m.blendMode);
		mat.model = this.resource;
		var props = h3d_mat_MaterialSetup.current.loadMaterialProps(mat);
		if(props == null) {
			props = mat.getDefaultModelProps();
		}
		mat.set_props(props);
		return mat;
	}
	,makeSkin: function(skin) {
		var s = this.cachedSkin.h[skin.name];
		if(s != null) {
			return s;
		}
		s = new h3d_anim_Skin(skin.name,0,3);
		s.namedJoints = new haxe_ds_StringMap();
		s.allJoints = [];
		s.boundJoints = [];
		s.rootJoints = [];
		var _g = 0;
		var _g1 = skin.joints;
		while(_g < _g1.length) {
			var joint = _g1[_g];
			++_g;
			var j = new h3d_anim_Joint();
			j.name = joint.name;
			j.index = s.allJoints.length;
			j.defMat = joint.position.toMatrix();
			if(joint.bind >= 0) {
				j.bindIndex = joint.bind;
				j.transPos = joint.transpos.toMatrix(true);
				s.boundJoints[j.bindIndex] = j;
			}
			if(joint.parent >= 0) {
				var p = s.allJoints[joint.parent];
				p.subs.push(j);
				j.parent = p;
			} else {
				s.rootJoints.push(j);
			}
			s.allJoints.push(j);
			s.namedJoints.h[j.name] = j;
		}
		if(skin.split != null) {
			s.splitJoints = [];
			var _g = 0;
			var _g1 = skin.split;
			while(_g < _g1.length) {
				var ss = _g1[_g];
				++_g;
				var s1 = s.splitJoints;
				var ss1 = ss.materialIndex;
				var _g2 = [];
				var _g3 = 0;
				var _g4 = ss.joints;
				while(_g3 < _g4.length) {
					var j = _g4[_g3];
					++_g3;
					_g2.push(s.allJoints[j]);
				}
				s1.push({ material : ss1, joints : _g2});
			}
		}
		this.cachedSkin.h[skin.name] = s;
		return s;
	}
	,getModelProperty: function(objName,p,def) {
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == objName) {
				if(m.props != null) {
					var _g2 = 0;
					var _g3 = m.props;
					while(_g2 < _g3.length) {
						var pr = _g3[_g2];
						++_g2;
						if(pr._hx_index == p._hx_index) {
							return Type.enumParameters(pr)[0];
						}
					}
				}
				return def;
			}
		}
		if(def == null) {
			throw haxe_Exception.thrown("Model " + objName + " not found");
		}
		return def;
	}
	,makeObject: function(loadTexture) {
		if(loadTexture == null) {
			loadTexture = function(_) {
				return h3d_mat_Texture.fromColor(16711935);
			};
		}
		if(this.header.models.length == 0) {
			throw haxe_Exception.thrown("This file does not contain any model");
		}
		var objs = [];
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var obj;
			if(m.geometry < 0) {
				obj = new h3d_scene_Object();
			} else {
				var prim = this.makePrimitive(m.geometry);
				if(m.skin != null) {
					var skinData = this.makeSkin(m.skin);
					skinData.primitive = prim;
					var _g2 = [];
					var _g3 = 0;
					var _g4 = m.materials;
					while(_g3 < _g4.length) {
						var mat = _g4[_g3];
						++_g3;
						_g2.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d_scene_Skin(skinData,_g2);
				} else if(m.materials.length == 1) {
					obj = new h3d_scene_Mesh(prim,this.makeMaterial(m,m.materials[0],loadTexture));
				} else {
					var _g5 = [];
					var _g6 = 0;
					var _g7 = m.materials;
					while(_g6 < _g7.length) {
						var mat1 = _g7[_g6];
						++_g6;
						_g5.push(this.makeMaterial(m,mat1,loadTexture));
					}
					obj = new h3d_scene_MultiMaterial(prim,_g5);
				}
			}
			obj.name = m.name;
			var v = m.position.toMatrix();
			obj.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				obj.flags |= f;
			} else {
				obj.flags &= ~f;
			}
			objs.push(obj);
			var p = objs[m.parent];
			if(p != null) {
				p.addChild(obj);
			}
		}
		return objs[0];
	}
	,loadAnimation: function(name) {
		var a = this.cachedAnimations.h[name == null ? "" : name];
		if(a != null) {
			return a;
		}
		var a = null;
		if(name == null) {
			if(this.header.animations.length == 0) {
				return null;
			}
			a = this.header.animations[0];
		} else {
			var _g = 0;
			var _g1 = this.header.animations;
			while(_g < _g1.length) {
				var a2 = _g1[_g];
				++_g;
				if(a2.name == name) {
					a = a2;
					break;
				}
			}
			if(a == null) {
				throw haxe_Exception.thrown("Animation " + name + " not found !");
			}
		}
		var l = this.header.version <= 2 ? this.makeLinearAnimation(a) : this.makeAnimation(a);
		l.speed = a.speed;
		l.loop = a.loop;
		if(a.events != null) {
			l.setEvents(a.events);
		}
		l.resourcePath = this.resource.entry.get_path();
		this.cachedAnimations.h[a.name] = l;
		if(name == null) {
			this.cachedAnimations.h[""] = l;
		}
		return l;
	}
	,makeAnimation: function(a) {
		var b = new h3d_anim_BufferAnimation(a.name,a.frames,a.sampling);
		var stride = 0;
		var singleFrames = [];
		var otherFrames = [];
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var c = b.addObject(o.name,0);
			var sm = 1;
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.SingleFrame._hx_index;
				singleFrames.push(c);
				sm = 0;
			} else {
				otherFrames.push(c);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Position._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Rotation._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Scale._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.UV._hx_index;
				stride += 2 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Alpha._hx_index;
				stride += sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g2 = 0;
				var _g3 = o.props.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var c1 = c;
					if(i > 0) {
						c1 = b.addObject(o.name,0);
						if(sm == 0) {
							singleFrames.push(c1);
						} else {
							otherFrames.push(c1);
						}
					}
					c1.layout |= 1 << h3d_anim_DataLayout.Property._hx_index;
					c1.propName = o.props[i];
					stride += sm;
				}
			}
		}
		var pos = 0;
		var _g = 0;
		while(_g < singleFrames.length) {
			var b1 = singleFrames[_g];
			++_g;
			b1.dataOffset = pos;
			pos += b1.getStride();
		}
		var singleStride = pos;
		var _g = 0;
		while(_g < otherFrames.length) {
			var b1 = otherFrames[_g];
			++_g;
			b1.dataOffset = pos;
			pos += b1.getStride();
		}
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + a.dataPosition);
		var count = stride * a.frames + singleStride;
		var data = new haxe_io_Bytes(new ArrayBuffer(count * 4));
		entry.read(data,0,data.length);
		entry.close();
		b.setData(new Float32Array(data.b.buffer),stride);
		return b;
	}
	,makeLinearAnimation: function(a) {
		var l = new h3d_anim_LinearAnimation(a.name,a.frames,a.sampling);
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + a.dataPosition);
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var pos = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0;
			var rot = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0;
			var scale = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0;
			if(pos || rot || scale) {
				var frameCount = a.frames;
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
					frameCount = 1;
				}
				var this1 = new Array(frameCount);
				var fl = this1;
				var size = ((pos ? 3 : 0) + (rot ? 3 : 0) + (scale ? 3 : 0)) * 4 * frameCount;
				var data = new haxe_io_Bytes(new ArrayBuffer(size));
				entry.read(data,0,size);
				var p = 0;
				var _g2 = 0;
				var _g3 = frameCount;
				while(_g2 < _g3) {
					var i = _g2++;
					var f = new h3d_anim_LinearFrame();
					if(pos) {
						f.tx = data.getFloat(p);
						p += 4;
						f.ty = data.getFloat(p);
						p += 4;
						f.tz = data.getFloat(p);
						p += 4;
					} else {
						f.tx = 0;
						f.ty = 0;
						f.tz = 0;
					}
					if(rot) {
						f.qx = data.getFloat(p);
						p += 4;
						f.qy = data.getFloat(p);
						p += 4;
						f.qz = data.getFloat(p);
						p += 4;
						var qw = 1 - (f.qx * f.qx + f.qy * f.qy + f.qz * f.qz);
						f.qw = qw < 0 ? -Math.sqrt(-qw) : Math.sqrt(qw);
					} else {
						f.qx = 0;
						f.qy = 0;
						f.qz = 0;
						f.qw = 1;
					}
					if(scale) {
						f.sx = data.getFloat(p);
						p += 4;
						f.sy = data.getFloat(p);
						p += 4;
						f.sz = data.getFloat(p);
						p += 4;
					} else {
						f.sx = 1;
						f.sy = 1;
						f.sz = 1;
					}
					fl[i] = f;
				}
				l.addCurve(o.name,fl,true,rot,scale);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				var this2 = new Array(a.frames * 2);
				var fl1 = this2;
				var size1 = 8 * a.frames;
				var data1 = new haxe_io_Bytes(new ArrayBuffer(size1));
				entry.read(data1,0,size1);
				var _g4 = 0;
				var _g5 = fl1.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					fl1[i1] = data1.getFloat(i1 * 4);
				}
				l.addUVCurve(o.name,fl1);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				var this3 = new Array(a.frames);
				var fl2 = this3;
				var size2 = 4 * a.frames;
				var data2 = new haxe_io_Bytes(new ArrayBuffer(size2));
				entry.read(data2,0,size2);
				var _g6 = 0;
				var _g7 = fl2.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					fl2[i2] = data2.getFloat(i2 * 4);
				}
				l.addAlphaCurve(o.name,fl2);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g8 = 0;
				var _g9 = o.props;
				while(_g8 < _g9.length) {
					var p1 = _g9[_g8];
					++_g8;
					var this4 = new Array(a.frames);
					var fl3 = this4;
					var size3 = 4 * a.frames;
					var data3 = new haxe_io_Bytes(new ArrayBuffer(size3));
					entry.read(data3,0,size3);
					var _g10 = 0;
					var _g11 = fl3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						fl3[i3] = data3.getFloat(i3 * 4);
					}
					l.addPropCurve(o.name,p1,fl3);
				}
			}
		}
		entry.close();
		return l;
	}
	,loadSkin: function(geom,skin) {
		if(skin.vertexWeights != null) {
			return;
		}
		skin.vertexCount = geom.vertexCount;
		var w = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("weights",3)]).vertexes;
		var this1 = new Array(skin.vertexCount * skin.bonesPerVertex);
		skin.vertexWeights = this1;
		var this1 = new Array(skin.vertexCount * skin.bonesPerVertex);
		skin.vertexJoints = this1;
		var _g = 0;
		var _g1 = skin.vertexWeights.length;
		while(_g < _g1) {
			var i = _g++;
			skin.vertexWeights[i] = w[i];
		}
		var vidx = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("indexes",9)]).vertexes;
		var j = 0;
		var _g = 0;
		var _g1 = skin.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var v = this.ftoint32(vidx[i]);
			skin.vertexJoints[j++] = v & 255;
			skin.vertexJoints[j++] = v >> 8 & 255;
			skin.vertexJoints[j++] = v >> 16 & 255;
		}
	}
	,ftoint32: function(v) {
		this.tmp.setFloat(0,v);
		return this.tmp.getInt32(0);
	}
	,__class__: hxd_fmt_hmd_Library
};
var hxd_fmt_hmd_Reader = function(i) {
	this.i = i;
};
hxd_fmt_hmd_Reader.__name__ = "hxd.fmt.hmd.Reader";
hxd_fmt_hmd_Reader.prototype = {
	readProperty: function() {
		var _g = this.i.readByte();
		switch(_g) {
		case 0:
			return hxd_fmt_hmd_Property.CameraFOVY(this.i.readFloat());
		case 1:
			throw haxe_Exception.thrown("Obsolete HasMaterialFlags");
		case 2:
			return hxd_fmt_hmd_Property.HasExtraTextures;
		default:
			var unk = _g;
			throw haxe_Exception.thrown("Unknown property #" + unk);
		}
	}
	,readProps: function() {
		if(this.version == 1) {
			return null;
		}
		var n = this.i.readByte();
		if(n == 0) {
			return null;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = n;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.readProperty());
		}
		return _g;
	}
	,readName: function() {
		var b = this.i.readByte();
		if(b == 255) {
			return null;
		}
		return this.i.readString(b);
	}
	,readCachedName: function() {
		var name = this.readName();
		if(name == null) {
			return null;
		}
		if(hxd_fmt_hmd_Reader.HMD_STRINGS == null) {
			hxd_fmt_hmd_Reader.HMD_STRINGS = new haxe_ds_StringMap();
		}
		var n = hxd_fmt_hmd_Reader.HMD_STRINGS.h[name];
		if(n != null) {
			return n;
		}
		hxd_fmt_hmd_Reader.HMD_STRINGS.h[name] = name;
		return name;
	}
	,readPosition: function(hasScale) {
		if(hasScale == null) {
			hasScale = true;
		}
		var p = new hxd_fmt_hmd_Position();
		p.x = this.i.readFloat();
		p.y = this.i.readFloat();
		p.z = this.i.readFloat();
		p.qx = this.i.readFloat();
		p.qy = this.i.readFloat();
		p.qz = this.i.readFloat();
		if(hasScale) {
			p.sx = this.i.readFloat();
			p.sy = this.i.readFloat();
			p.sz = this.i.readFloat();
		} else {
			p.sx = 1;
			p.sy = 1;
			p.sz = 1;
		}
		return p;
	}
	,readBounds: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.i.readFloat();
		b.yMin = this.i.readFloat();
		b.zMin = this.i.readFloat();
		b.xMax = this.i.readFloat();
		b.yMax = this.i.readFloat();
		b.zMax = this.i.readFloat();
		return b;
	}
	,readSkin: function() {
		var name = this.readCachedName();
		if(name == null) {
			return null;
		}
		var s = new hxd_fmt_hmd_Skin();
		s.props = this.readProps();
		s.name = name;
		s.joints = [];
		var _g = 0;
		var _g1 = this.i.readUInt16();
		while(_g < _g1) {
			var k = _g++;
			var j = new hxd_fmt_hmd_SkinJoint();
			j.props = this.readProps();
			j.name = this.readCachedName();
			var pid = this.i.readUInt16();
			var hasScale = (pid & 32768) != 0;
			if(hasScale) {
				pid &= 32767;
			}
			j.parent = pid - 1;
			j.position = this.readPosition(hasScale);
			j.bind = this.i.readUInt16() - 1;
			if(j.bind >= 0) {
				j.transpos = this.readPosition(hasScale);
			}
			s.joints.push(j);
		}
		var count = this.i.readByte();
		if(count > 0) {
			s.split = [];
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var k = _g++;
				var ss = new hxd_fmt_hmd_SkinSplit();
				ss.materialIndex = this.i.readByte();
				var _g2 = [];
				var _g3 = 0;
				var _g4 = this.i.readByte();
				while(_g3 < _g4) {
					var k1 = _g3++;
					_g2.push(this.i.readUInt16());
				}
				ss.joints = _g2;
				s.split.push(ss);
			}
		}
		return s;
	}
	,readHeader: function() {
		var d = new hxd_fmt_hmd_Data();
		var h = this.i.readString(3);
		if(h != "HMD") {
			if(HxOverrides.cca(h,0) == 59) {
				throw haxe_Exception.thrown("FBX was not converted to HMD");
			}
			throw haxe_Exception.thrown("Invalid HMD header " + encodeURIComponent(h));
		}
		this.version = this.i.readByte();
		if(this.version > 3) {
			throw haxe_Exception.thrown("Can't read HMD v" + this.version);
		}
		d.version = this.version;
		d.geometries = [];
		d.dataPosition = this.i.readInt32();
		d.props = this.readProps();
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var g = new hxd_fmt_hmd_Geometry();
			g.props = this.readProps();
			g.vertexCount = this.i.readInt32();
			g.vertexStride = this.i.readByte();
			var _g2 = [];
			var _g3 = 0;
			var _g4 = this.i.readByte();
			while(_g3 < _g4) {
				var k1 = _g3++;
				var tmp = this.readCachedName();
				var this1 = this.i.readByte();
				_g2.push(new hxd_fmt_hmd_GeometryFormat(tmp,this1));
			}
			g.vertexFormat = _g2;
			g.vertexPosition = this.i.readInt32();
			var _g5 = [];
			var _g6 = 0;
			var _g7 = this.i.readByte();
			while(_g6 < _g7) {
				var k2 = _g6++;
				_g5.push(this.i.readInt32());
			}
			g.indexCounts = _g5;
			g.indexPosition = this.i.readInt32();
			g.bounds = this.readBounds();
			d.geometries.push(g);
		}
		d.materials = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var m = new hxd_fmt_hmd_Material();
			m.props = this.readProps();
			m.name = this.readName();
			m.diffuseTexture = this.readName();
			m.blendMode = hxd_fmt_hmd_Reader.BLEND[this.i.readByte()];
			this.i.readByte();
			this.i.readFloat();
			if(m.props != null && m.props.indexOf(hxd_fmt_hmd_Property.HasExtraTextures) >= 0) {
				m.specularTexture = this.readName();
				m.normalMap = this.readName();
			}
			d.materials.push(m);
		}
		d.models = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var m = new hxd_fmt_hmd_Model();
			m.props = this.readProps();
			m.name = this.readCachedName();
			m.parent = this.i.readInt32() - 1;
			m.follow = this.readCachedName();
			m.position = this.readPosition();
			m.geometry = this.i.readInt32() - 1;
			d.models.push(m);
			if(m.geometry < 0) {
				continue;
			}
			m.materials = [];
			var _g2 = 0;
			var _g3 = this.i.readByte();
			while(_g2 < _g3) {
				var k1 = _g2++;
				m.materials.push(this.i.readInt32());
			}
			m.skin = this.readSkin();
		}
		d.animations = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var a = new hxd_fmt_hmd_Animation();
			a.props = this.readProps();
			a.name = this.readName();
			a.frames = this.i.readInt32();
			a.sampling = this.i.readFloat();
			a.speed = this.i.readFloat();
			var flags = this.i.readByte();
			a.loop = (flags & 1) != 0;
			a.dataPosition = this.i.readInt32();
			a.objects = [];
			var _g2 = 0;
			var _g3 = this.i.readInt32();
			while(_g2 < _g3) {
				var k1 = _g2++;
				var o = new hxd_fmt_hmd_AnimationObject();
				o.name = this.readCachedName();
				var i = this.i.readByte();
				if(i == null) {
					i = 0;
				}
				var this1 = i;
				o.flags = this1;
				a.objects.push(o);
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
					var _g4 = [];
					var _g5 = 0;
					var _g6 = this.i.readByte();
					while(_g5 < _g6) {
						var i1 = _g5++;
						_g4.push(this.readName());
					}
					o.props = _g4;
				}
			}
			if((flags & 2) != 0) {
				a.events = [];
				var _g7 = 0;
				var _g8 = this.i.readInt32();
				while(_g7 < _g8) {
					var k2 = _g7++;
					var e = new hxd_fmt_hmd_AnimationEvent();
					e.frame = this.i.readInt32();
					e.data = this.readCachedName();
					a.events.push(e);
				}
			}
			d.animations.push(a);
		}
		return d;
	}
	,read: function() {
		var h = this.readHeader();
		h.data = this.i.read(this.i.readInt32());
		return h;
	}
	,__class__: hxd_fmt_hmd_Reader
};
var hxd_fs_FileEntry = function() { };
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getSign: function() {
		return 0;
	}
	,getBytes: function() {
		return null;
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_isDirectory: function() {
		return false;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_directory: function() {
		var p = this.get_path().split("/");
		p.pop();
		return p.join("/");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getSign: function() {
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,open: function() {
		this.pos = 0;
	}
	,skip: function(nbytes) {
		this.pos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.pos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.pos,size);
		this.pos += size;
	}
	,close: function() {
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw haxe_Exception.thrown("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			var this1 = img;
			onLoaded(this1);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry([]);
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getRoot: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytes: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,exists: function(path) {
		return this.getBytes(path) != null;
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw haxe_Exception.thrown("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,dispose: function() {
	}
	,dir: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap._new = function(data) {
	var this1 = data;
	return this1;
};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
hxd_fs_LoadedBitmap.toNative = function(this1) {
	return this1;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_BufferFlags = {};
hxd_impl_BufferFlags.toInt = function(this1) {
	return this1;
};
var hxd_impl_Allocator = function() {
};
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.set = function(a) {
	hxd_impl_Allocator.inst = a;
};
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	allocBuffer: function(vertices,stride,flags) {
		var tmp;
		switch(flags) {
		case 0:
			tmp = [h3d_BufferFlag.Dynamic];
			break;
		case 1:
			tmp = [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
			break;
		}
		return new h3d_Buffer(vertices,stride,tmp);
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return new h3d_Indexes(count);
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,allocFloats: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		var this1 = hxd__$FloatBuffer_Float32Expand._new(length);
		return this1;
	}
	,disposeFloats: function(f) {
	}
	,allocIndexes: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		var this1 = new Array(length);
		return this1;
	}
	,disposeIndexes: function(i) {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_Api = function() { };
hxd_impl_Api.__name__ = "hxd.impl.Api";
hxd_impl_Api.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
var hxd_impl_ArrayIterator = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator.__name__ = "hxd.impl.ArrayIterator";
hxd_impl_ArrayIterator.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator
};
var hxd_impl_ArrayIterator_$h2d_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator_$h2d_$Object.__name__ = "hxd.impl.ArrayIterator_h2d_Object";
hxd_impl_ArrayIterator_$h2d_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$Object
};
var hxd_impl_ArrayIterator_$h3d_$scene_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator_$h3d_$scene_$Object.__name__ = "hxd.impl.ArrayIterator_h3d_scene_Object";
hxd_impl_ArrayIterator_$h3d_$scene_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h3d_$scene_$Object
};
var hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.__name__ = "hxd.impl.ArrayIterator_hxd_fs_FileEntry";
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry
};
var hxd_impl_ArrayIterator_$hxd_$res_$Any = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator_$hxd_$res_$Any.__name__ = "hxd.impl.ArrayIterator_hxd_res_Any";
hxd_impl_ArrayIterator_$hxd_$res_$Any.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$res_$Any
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_impl_UncheckedBytes = {};
hxd_impl_UncheckedBytes._new = function(v) {
	var this1 = v;
	return this1;
};
hxd_impl_UncheckedBytes.get = function(this1,i) {
	return this1[i];
};
hxd_impl_UncheckedBytes.set = function(this1,i,v) {
	this1[i] = v;
	return v;
};
hxd_impl_UncheckedBytes.fromBytes = function(b) {
	var this1 = b.b;
	return this1;
};
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	get_name: function() {
		return this.entry.name;
	}
	,toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toModel: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Model);
	}
	,toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toText: function() {
		return this.entry.getBytes().toString();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,toPrefab: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Resource);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,iterator: function() {
		var _g = [];
		var _g1 = this.entry.iterator();
		while(_g1.i < _g1.l) {
			var f = _g1.a[_g1.i++];
			_g.push(new hxd_res_Any(this.loader,f));
		}
		return new hxd_impl_ArrayIterator_$hxd_$res_$Any(_g);
	}
	,__class__: hxd_res_Any
});
var hxd_res_ImageFormat = {};
hxd_res_ImageFormat.get_useAsyncDecode = function(this1) {
	return this1 == 0;
};
hxd_res_ImageFormat.toInt = function(this1) {
	return this1;
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var bc = 0;
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 17476:
			format = 4;
			f.skip(10);
			height = f.readInt32();
			width = f.readInt32();
			f.skip(64);
			var fourCC = f.readInt32();
			switch(fourCC & 16777215) {
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				switch(v) {
				case 1:
					bc = 4;
					break;
				case 2:
					bc = 5;
					break;
				default:
					bc = 0;
				}
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				switch(dxt) {
				case 1:
					bc = 1;
					break;
				case 2:case 3:
					bc = 2;
					break;
				case 4:case 5:
					bc = 3;
					break;
				default:
					bc = 0;
				}
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(40);
					var dxgi = f.readInt32();
					switch(dxgi) {
					case 95:
						bc = 6;
						break;
					case 98:
						bc = 7;
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
				}
			}
			if(bc == 0) {
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24)));
			}
			break;
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				height = f.readUInt16();
				width = f.readUInt16();
				break _hx_loop2;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				format = 3;
				f.skip(10);
				width = f.readUInt16();
				height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				format = 5;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
				}
				height = size;
				width = height;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		this.inf = { width : width, height : height, format : format, bc : bc};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		switch(this.inf.format) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd_PixelsARGB.fromPixels(pixels);
			var p = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = w;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,hxd_PixelFormat.S3TC(this.inf.bc),128 + (this.inf.bc >= 6 ? 20 : 0));
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,hxd_PixelFormat.R32F);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getSize();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(_gthis.tex.format);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels = bmp1.getPixels();
					pixels.makeSquare();
					_gthis.tex.uploadPixels(pixels);
					pixels.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		var format = h3d_mat_Texture.nativeFormat;
		switch(this.inf.format) {
		case 4:
			format = hxd_PixelFormat.S3TC(this.inf.bc);
			break;
		case 5:
			format = hxd_PixelFormat.R32F;
			break;
		default:
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc],format);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	cleanCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,dir: function(path) {
		var r = [];
		var entries = this.fs.dir(path);
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			r.push(new hxd_res_Any(this,e));
		}
		return r;
	}
	,exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,dispose: function() {
		this.cleanCache();
		this.fs.dispose();
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Model = function(entry) {
	hxd_res_Resource.call(this,entry);
};
hxd_res_Model.__name__ = "hxd.res.Model";
hxd_res_Model.__super__ = hxd_res_Resource;
hxd_res_Model.prototype = $extend(hxd_res_Resource.prototype,{
	toHmd: function() {
		var fs = new hxd_fs_FileInput(this.entry);
		var hmd = new hxd_fmt_hmd_Reader(fs).readHeader();
		fs.close();
		return new hxd_fmt_hmd_Library(this,hmd);
	}
	,__class__: hxd_res_Model
});
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_FastBytes = {};
hxd_res__$NanoJpeg_FastBytes._new = function(b) {
	var this1 = b;
	return this1;
};
hxd_res__$NanoJpeg_FastBytes.get = function(this1,i) {
	return this1.b[i];
};
hxd_res__$NanoJpeg_FastBytes.set = function(this1,i,v) {
	this1.b[i] = v;
};
var hxd_res__$NanoJpeg_Component = function() {
};
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this1 = new Array(16);
	this.counts = this1;
	var this1 = new Array(64);
	this.block = this1;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.CF = function(x) {
	var x1 = x + 64 >> 7;
	if(x1 < 0) {
		return 0;
	} else if(x1 > 255) {
		return 255;
	} else {
		return x1;
	}
};
hxd_res_NanoJpeg.njClip = function(x) {
	if(x < 0) {
		return 0;
	} else if(x > 255) {
		return 255;
	} else {
		return x;
	}
};
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	alloc: function(nbytes) {
		return new haxe_io_Bytes(new ArrayBuffer(nbytes));
	}
	,free: function(bytes) {
	}
	,njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njSkip: function(count) {
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,syntax: function(flag) {
		if(flag) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,get: function(p) {
		return this.bytes.b[this.pos + p];
	}
	,njDecode16: function(p) {
		return this.bytes.b[this.pos + p] << 8 | this.bytes.b[this.pos + (p + 1)];
	}
	,njByteAlign: function() {
		this.bufbits &= 248;
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				if(this.size == 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					if((marker & 248) != 208) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njSkipBits: function(bits) {
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
	}
	,njGetBits: function(bits) {
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		return r;
	}
	,njDecodeLength: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njSkipMarker: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeSOF: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 9) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		if(this.length < this.ncomp * 3) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if(c.ssx == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if(c.ssy == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			if((c.qtsel & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDQT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			if((i & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDHT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			if((i & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				if(this.length < currcnt) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				remain -= currcnt << 16 - codelen;
				if(remain < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDRI: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njGetVLC: function(vlc) {
		var value = this.njShowBits(16);
		var bits = vlc.b[value << 1];
		if(bits == 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value = vlc.b[value << 1 | 1];
		this.vlcCode = value;
		bits = value & 15;
		if(bits == 0) {
			return 0;
		}
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		value = r;
		if(value < 1 << bits - 1) {
			value += (-1 << bits) + 1;
		}
		return value;
	}
	,njRowIDCT: function(bp) {
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
			return;
		}
		var x0 = (this.block[bp] << 11) + 128;
		var x8 = 565 * (x4 + x5);
		x4 = x8 + 2276 * x4;
		x5 = x8 - 3406 * x5;
		x8 = 2408 * (x6 + x7);
		x6 = x8 - 799 * x6;
		x7 = x8 - 4017 * x7;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2);
		x2 = x1 - 3784 * x2;
		x3 = x1 + 1568 * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		this.block[bp] = x7 + x1 >> 8;
		this.block[bp + 1] = x3 + x2 >> 8;
		this.block[bp + 2] = x0 + x4 >> 8;
		this.block[bp + 3] = x8 + x6 >> 8;
		this.block[bp + 4] = x8 - x6 >> 8;
		this.block[bp + 5] = x0 - x4 >> 8;
		this.block[bp + 6] = x3 - x2 >> 8;
		this.block[bp + 7] = x7 - x1 >> 8;
	}
	,njColIDCT: function(bp,out,po,stride) {
		var x1 = this.block[bp + 32] << 8;
		var x2 = this.block[bp + 48];
		var x3 = this.block[bp + 16];
		var x4 = this.block[bp + 8];
		var x5 = this.block[bp + 56];
		var x6 = this.block[bp + 40];
		var x7 = this.block[bp + 24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[bp] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			return;
		}
		var x0 = (this.block[bp] << 8) + 8192;
		var x8 = 565 * (x4 + x5) + 4;
		x4 = x8 + 2276 * x4 >> 3;
		x5 = x8 - 3406 * x5 >> 3;
		x8 = 2408 * (x6 + x7) + 4;
		x6 = x8 - 799 * x6 >> 3;
		x7 = x8 - 4017 * x7 >> 3;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2) + 4;
		x2 = x1 - 3784 * x2 >> 3;
		x3 = x1 + 1568 * x3 >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		var x = (x7 + x1 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x3 + x2 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x0 + x4 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x8 + x6 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x8 - x6 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x0 - x4 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x3 - x2 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x7 - x1 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(bits == 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(bits == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			if((this.vlcCode & 15) == 0 && this.vlcCode != 240) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			coef += (this.vlcCode >> 4) + 1;
			if(coef > 63) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 4 + 2 * this.ncomp) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			if(this.bytes.b[this.pos] != c.cid) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((this.bytes.b[this.pos + 1] & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				if((i1 & 65528) != 65488 || (i1 & 7) != nextrst) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this1 = c.pixels;
		var lin = this1;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this1 = c.pixels;
		var cin = this1;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this1 = out;
		var lout = this1;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this1 = this.comps[1].pixels;
			var pcb = this1;
			var this1 = this.comps[2].pixels;
			var pcr = this1;
			var this1 = pixels;
			var pix = this1;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		_hx_loop1: while(true) {
			if(this.size < 2 || this.bytes.b[this.pos] != 255) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				if(this.size < 2) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				if(this.length > this.size) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					if(this.size < 2) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					if(this.length > this.size) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_SoundFormat = $hxEnums["hxd.res.SoundFormat"] = { __ename__ : true, __constructs__ : ["Wav","Mp3","OggVorbis"]
	,Wav: {_hx_index:0,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,Mp3: {_hx_index:1,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,OggVorbis: {_hx_index:2,__enum__:"hxd.res.SoundFormat",toString:$estr}
};
hxd_res_SoundFormat.__empty_constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.supportedFormat = function(fmt) {
	switch(fmt._hx_index) {
	case 0:case 1:
		return true;
	case 2:
		return false;
	}
};
hxd_res_Sound.startWorker = function() {
	return false;
};
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw haxe_Exception.thrown("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw haxe_Exception.thrown("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,dispose: function() {
		this.stop();
		this.data = null;
	}
	,stop: function() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = HxOverrides.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	getEffect: function(etype) {
		if(this.effects == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var e1 = js_Boot.__downcastCheck(e,etype) ? e : null;
			if(e1 != null) {
				return e1;
			}
		}
		return null;
	}
	,set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,fadeTo: function(volume,time,onEnd) {
		if(time == null) {
			time = 1.;
		}
		this.currentFade = { start : HxOverrides.now() / 1000, duration : time, startVolume : this.volume, targetVolume : volume, onEnd : onEnd};
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,addEffect: function(e) {
		if(e == null) {
			throw haxe_Exception.thrown("Can't add null effect");
		}
		if(this.effects.indexOf(e) >= 0) {
			throw haxe_Exception.thrown("effect already added on this channel");
		}
		this.effects.push(e);
		return e;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = HxOverrides.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = HxOverrides.now() / 1000;
		}
		return this.pause = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,queueSound: function(sound) {
		this.queue.push(sound);
	}
	,stop: function() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	,isReleased: function() {
		return this.manager == null;
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"]
	,UI8: {_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.formatBytes = function(format) {
	switch(format._hx_index) {
	case 0:
		return 1;
	case 1:
		return 2;
	case 2:
		return 4;
	}
};
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw haxe_Exception.thrown(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data = new hxd_snd_WavData(null);
		data.channels = channels;
		data.samples = newSamples;
		data.sampleFormat = format;
		data.samplingRate = rate;
		data.rawData = out2;
		return data;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) != 0) {
						sl |= -65536;
					}
					if((sr & 32768) != 0) {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g = 0;
		var _g1 = newSamples;
		while(_g < _g1) {
			var i = _g++;
			var targetSample = i / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g2 = 0;
			var _g3 = commonChannels;
			while(_g2 < _g3) {
				var k = _g2++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g4 = 0;
			var _g5 = extraChannels;
			while(_g4 < _g5) {
				var i1 = _g4++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__ : true, __constructs__ : ["MasterVolume"]
	,MasterVolume: {_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	syncCamera: function(cam) {
		var _this = this.position;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this = this.direction;
		var x = cam.target.x - cam.pos.x;
		var y = cam.target.y - cam.pos.y;
		var z = cam.target.z - cam.pos.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.direction.normalize();
		var _this = this.up;
		var v = cam.up;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
	}
	,__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroySource(this.handle);
	}
	,__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.end = 0;
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = HxOverrides.now() / 1000;
};
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( _g ) {
		if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
			this.driver = null;
		} else {
			throw _g;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,stopAll: function() {
		while(this.channels != null) this.channels.stop();
	}
	,stopAllNotLooping: function() {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(!c.loop) {
				c.stop();
			}
			c = n;
		}
	}
	,stopByName: function(name) {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(c.soundGroup != null && c.soundGroup.name == name) {
				c.stop();
			}
			c = n;
		}
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,cleanCache: function() {
		var i = 0;
		while(i < this.soundBufferKeys.length) {
			var k = this.soundBufferKeys[i];
			var b = this.soundBufferMap.h[k];
			++i;
			if(b.refs > 0) {
				continue;
			}
			var _this = this.soundBufferMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
				delete(_this.h[k]);
			}
			HxOverrides.remove(this.soundBufferKeys,k);
			--i;
			b.dispose();
			--this.soundBufferCount;
		}
	}
	,dispose: function() {
		this.stopAll();
		if(this.driver != null) {
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				s.dispose();
			}
			var b = haxe_ds_StringMap.valueIterator(this.soundBufferMap.h);
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
			var _g = 0;
			var _g1 = this.freeStreamBuffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.dispose();
			}
			var _g = 0;
			var _g1 = this.effectGC;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.driver.release();
			}
			this.driver.dispose();
		}
		this.sources = null;
		this.soundBufferMap = null;
		this.soundBufferKeys = null;
		this.freeStreamBuffers = null;
		this.effectGC = null;
		this.updateEvent.stop();
		hxd_snd_Manager.instance = null;
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw haxe_Exception.thrown(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = s.buffers;
				while(_g2 < _g3.length) {
					var b = _g3[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = HxOverrides.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s.handle);
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var b = this.unqueueBuffer(s);
				if(b == null) {
					continue;
				}
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue[0];
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				haxe_Log.trace("playedSamples should positive : bug in driver",{ fileName : "hxd/snd/Manager.hx", lineNumber : 360, className : "hxd.snd.Manager", methodName : "update"});
				playedSamples = 0;
			}
			c.set_position((s.start + playedSamples) / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b1 = s.buffers[s.buffers.length - 1];
				if(!b1.isEnd) {
					this.queueBuffer(s,b1.sound,b1.start + b1.samples);
				} else if(c.queue.length > 0) {
					var snd = c.queue[0];
					if(this.queueBuffer(s,snd,0)) {
						c.queue.shift();
					}
				} else if(c.loop) {
					this.queueBuffer(s,b1.sound,0);
				}
			}
		}
		var c = this.channels;
		while(c != null) {
			c.calcAudibleVolume(this.now);
			if(c.isLoading && !c.sound.getData().isLoading()) {
				c.isLoading = false;
			}
			c.isVirtual = this.suspended || c.pause || c.mute || c.channelGroup.mute || c.allowVirtual && c.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c.isLoading;
			c = c.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c = this.channels;
		while(c != null && !c.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c.isVirtual = true;
			} else if(c.soundGroup.maxAudible >= 0) {
				if(c.soundGroup.lastUpdate != this.now) {
					c.soundGroup.lastUpdate = this.now;
					c.soundGroup.numAudible = 0;
				}
				if(++c.soundGroup.numAudible > c.soundGroup.maxAudible) {
					c.isVirtual = true;
					--audibleCount;
				}
			}
			c = c.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.channel == null || !s.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s);
		}
		var c = this.channels;
		while(c != null) {
			if(c.source != null || c.isVirtual) {
				c = c.next;
				continue;
			}
			var s = null;
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s2 = _g1[_g];
				++_g;
				if(s2.channel == null) {
					s = s2;
					break;
				}
			}
			if(s == null) {
				throw haxe_Exception.thrown("could not get a source");
			}
			s.channel = c;
			c.source = s;
			this.checkTargetFormat(c.sound.getData(),c.soundGroup.mono);
			s.start = Math.floor(c.position * this.targetRate);
			if(s.start < 0) {
				s.start = 0;
			}
			this.queueBuffer(s,c.sound,s.start);
			c.positionChanged = false;
			c = c.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var v = c.currentVolume * volume;
			if(s.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s.volume = v;
				this.driver.setSourceVolume(s.handle,v);
			}
			if(!s.playing) {
				this.driver.playSource(s.handle);
				s.playing = true;
			}
			var i = c.bindedEffects.length;
			while(--i >= 0) {
				var e = c.bindedEffects[i];
				if(c.effects.indexOf(e) < 0 && c.channelGroup.effects.indexOf(e) < 0) {
					this.unbindEffect(c,s,e);
				}
			}
			var _g2 = 0;
			var _g3 = c.channelGroup.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				if(c.bindedEffects.indexOf(e1) < 0) {
					this.bindEffect(c,s,e1);
				}
			}
			var _g4 = 0;
			var _g5 = c.effects;
			while(_g4 < _g5.length) {
				var e2 = _g5[_g4];
				++_g4;
				if(c.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c,s,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c.bindedEffects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e3);
			}
		}
		var list = usedEffects;
		var cmp = $bind(this,this.sortEffect);
		if(list == null) {
			usedEffects = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			usedEffects = list;
		}
		var e = usedEffects;
		while(e != null) {
			e.driver.update(e);
			e = e.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = c.bindedEffects;
			while(_g2 < _g3.length) {
				var e = _g3[_g2];
				++_g2;
				e.driver.apply(e,s.handle);
			}
		}
		var _g = 0;
		var _g1 = this.effectGC;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(this.now - e.lastStamp > e.retainTime) {
				e.driver.release();
				HxOverrides.remove(this.effectGC,e);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		this.listener.direction.normalize();
		this.listener.up.normalize();
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = HxOverrides.now() / 1000;
			var i = 0;
			while(i < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i];
				var b = this.soundBufferMap.h[k];
				++i;
				if(b.refs > 0 || b.lastStop + 60.0 > now) {
					continue;
				}
				var _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i;
				b.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = HxOverrides.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var b = this.soundBufferMap.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		if(dist < b) {
			dist = b;
		}
		if(this.maxDistance != null) {
			var b = this.maxDistance;
			if(dist > b) {
				dist = b;
			}
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i = 0;
				while(i < channels.length) {
					channels[i][j] *= fade;
					++i;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( _g ) {
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( _g ) {
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw haxe_Exception.thrown("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.getGain = function() {
	if(hxd_snd_webaudio_Context.gainPool.length != 0) {
		return hxd_snd_webaudio_Context.gainPool.pop();
	} else {
		return hxd_snd_webaudio_Context.ctx.createGain();
	}
};
hxd_snd_webaudio_Context.putGain = function(gain) {
	hxd_snd_webaudio_Context.gainPool.push(gain);
	gain.gain.value = 1;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	getBuffer: function(channels,sampleCount,rate) {
		return hxd_snd_webaudio_Context.getBuffer(channels,sampleCount,rate);
	}
	,putBuffer: function(buf) {
		hxd_snd_webaudio_Context.putBuffer(buf);
	}
	,getGain: function() {
		if(hxd_snd_webaudio_Context.gainPool.length != 0) {
			return hxd_snd_webaudio_Context.gainPool.pop();
		} else {
			return hxd_snd_webaudio_Context.ctx.createGain();
		}
	}
	,putGain: function(gain) {
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
	}
	,hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,destroySource: function(source) {
		this.stopSource(source);
		source.gain.disconnect();
		source.driver = null;
		var gain = source.gain;
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
		source.gain = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.stop();
			b.clear();
			this.playbackPool.push(b);
		}
		source.buffers = [];
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = ui8[r] / 255;
					right[i] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = i16[i] / 32768;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = i16[r] / 32768;
					right[i] = i16[r + 1] / 32768;
					r += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = f32[i];
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = f32[r];
					right[i] = f32[r + 1];
					r += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,dispose: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,get_masterGain: function() {
		return hxd_snd_webaudio_Context.masterGain;
	}
	,set_destination: function(node) {
		return hxd_snd_webaudio_Context.destination = node;
	}
	,get_destination: function() {
		return hxd_snd_webaudio_Context.destination;
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel","TMat2"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TMat2: {_hx_index:18,__enum__:"hxsl.Type",toString:$estr}
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EParenthesis","EField","EBinop","EUnop","ECall","EBlock","EVars","EFunction","EIf","EDiscard","EFor","EReturn","EBreak","EContinue","EArray","EArrayDecl","ESwitch","EWhile","EMeta"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["i"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["f"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,EDiscard: {_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["v","loop","block"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBreak: {_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","eindex"],$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["cond","loop","normalWhile"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
};
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID","FragCoord"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g1 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				var _g2 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	var _g = v.type;
	if(_g._hx_index == 13) {
		var _g1 = _g.vl;
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.isArray = function(v) {
	var _g = v.type;
	if(_g._hx_index == 15) {
		var _g1 = _g.size;
		var _g1 = _g.t;
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t1 = t.t;
		var tmp = hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s = t.size;
		var t1 = t.t;
		var tmp = "buffer " + hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t._hx_index) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		return false;
	case 1:
		var _g1 = _g.v;
		return false;
	case 2:
		var _g1 = _g.g;
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g1 = _g.e2;
		var _g2 = _g.e1;
		var _g3 = _g.op;
		switch(_g3._hx_index) {
		case 4:
			return true;
		case 20:
			var _g4 = _g3.op;
			return true;
		default:
			var e2 = _g1;
			var e1 = _g2;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		var _g1 = _g.init;
		var _g1 = _g.v;
		return true;
	case 8:
		var pl = _g.args;
		var e = _g.e;
		var _g1 = e.e;
		var tmp;
		if(_g1._hx_index == 2) {
			var _g2 = _g1.g;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			return true;
		}
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(p)) {
				return true;
			}
		}
		return false;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g1 = _g.e;
		return true;
	case 13:
		var _g1 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e = _g.e;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e = _g.e;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var loop = _g.loop;
		var e = _g.e;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var _g1 = _g.args;
		var _g1 = _g.m;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		break;
	case 1:
		var _g1 = _g.v;
		break;
	case 2:
		var _g1 = _g.g;
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var _g1 = _g.op;
		var e2 = _g.e2;
		var e1 = _g.e1;
		f(e1);
		f(e2);
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var _g1 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e = _g.e;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		f(e);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var _g1 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e = _g.e;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e = _g.e;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var loop = _g.loop;
		var e = _g.e;
		f(e);
		f(loop);
		break;
	case 20:
		var _g1 = _g.args;
		var _g1 = _g.m;
		var e = _g.e;
		f(e);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g1 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g1 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e2 = _g.e2;
		var e1 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var e1 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e1 = _g.e;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var c = _g.regs;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v = _g.v;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e1 = _g.e;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop = _g.loop;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var e1 = _g.e;
		var args = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		var _g = t.variants;
		return 0;
	case 15:
		var _g = t.size;
		var _g1 = t.t;
		switch(_g._hx_index) {
		case 0:
			var t1 = _g1;
			var v = _g.v;
			return hxsl_Tools.size(t1) * v;
		case 1:
			var _g1 = _g.v;
			return 0;
		}
		break;
	case 16:
		var _g = t.size;
		if(_g._hx_index == 0) {
			var t1 = t.t;
			var v = _g.v;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	case 18:
		return 4;
	}
};
hxsl_Tools.evalConst = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var c = _g.c;
		switch(c._hx_index) {
		case 0:
			return null;
		case 1:
			var b = c.b;
			return b;
		case 2:
			var i = c.v;
			return i;
		case 3:
			var f = c.v;
			return f;
		case 4:
			var s = c.v;
			return s;
		}
		break;
	case 8:
		var _g1 = _g.args;
		var _g2 = _g.e;
		var _g = _g2.t;
		var _g = _g2.p;
		var _g = _g2.e;
		if(_g._hx_index == 2) {
			switch(_g.g._hx_index) {
			case 40:case 41:case 42:
				var args = _g1;
				var _g = [];
				var _g1 = 0;
				while(_g1 < args.length) {
					var a = args[_g1];
					++_g1;
					_g.push(hxsl_Tools.evalConst(a));
				}
				var vals = _g;
				if(vals.length == 1) {
					return new h3d_Vector(vals[0],vals[0],vals[0],vals[0]);
				}
				return new h3d_Vector(vals[0],vals[1],vals[2],vals[3]);
			default:
				throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
			}
		} else {
			throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
		}
		break;
	default:
		throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
	}
};
var hxsl_Tools2 = function() { };
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_Tools3 = function() { };
hxsl_Tools3.__name__ = "hxsl.Tools3";
hxsl_Tools3.toString = function(s) {
	return hxsl_Printer.shaderToString(s);
};
var hxsl_Tools4 = function() { };
hxsl_Tools4.__name__ = "hxsl.Tools4";
hxsl_Tools4.toString = function(e) {
	return hxsl_Printer.toString(e);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(hxsl_BatchShader.prototype);
		s.shader = this.shader;
		s.Batch_Count__ = this.Batch_Count__;
		s.Batch_Buffer__ = this.Batch_Buffer__;
		return s;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
};
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.set = function(c) {
	hxsl_Cache.INST = c;
};
hxsl_Cache.clear = function() {
	hxsl_Cache.INST = null;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size = v.size;
				var vname = v.v;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var comps = v.swiz;
				var v1 = v.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var _g = 0;
		while(_g < shaderDatas.length) {
			var s = shaderDatas[_g];
			++_g;
			hxsl_Printer.check(s.inst.shader);
		}
		var linker = new hxsl_Linker(batchMode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(batchMode) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s1 = shaderDatas[_g1];
			++_g1;
			_g.push(s1.inst.shader);
		}
		hxsl_Printer.check(s,_g);
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g2 = v.v.type;
				if(_g2._hx_index == 13) {
					var _g3 = _g2.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s;
		var s1;
		try {
			s1 = new hxsl_Splitter().split(s);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		hxsl_Printer.check(s1.vertex,[prev]);
		hxsl_Printer.check(s1.fragment,[prev]);
		var prev = s1;
		var s = new hxsl_Dce().dce(s1.vertex,s1.fragment);
		hxsl_Printer.check(s.vertex,[prev.vertex]);
		hxsl_Printer.check(s.fragment,[prev.fragment]);
		var r = this.buildRuntimeShader(s.vertex,s.fragment,paramVars);
		var _g = [];
		var _g7_l = shaders;
		var _g7_last = null;
		while(_g7_l != _g7_last) {
			var s = _g7_l.s;
			_g7_l = _g7_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		hxsl_Printer.check(r.vertex.data,[vertex]);
		hxsl_Printer.check(r.fragment.data,[fragment]);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g5 = _g4.size;
					var _g6 = _g4.t;
					if(_g6._hx_index == 5) {
						if(_g6.size == 4) {
							if(_g6.t._hx_index == 1) {
								if(_g5._hx_index == 0) {
									var size = _g5.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g8 = a1.v.type;
					if(_g8._hx_index == 15) {
						var _g9 = _g8.size;
						var t = _g8.t;
						if(hxsl_Tools.isSampler(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g10 = 0;
				var _g11 = out1.length - 1;
				while(_g10 < _g11) {
					var i1 = _g10++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g12 = g1.type;
				if(_g12._hx_index == 15) {
					var _g13 = _g12.size;
					var _g14 = _g12.t;
					var t1 = _g14;
					if(hxsl_Tools.isSampler(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_g14._hx_index) {
						case 5:
							if(_g14.size == 4) {
								if(_g14.t._hx_index == 1) {
									if(_g13._hx_index == 0) {
										var size1 = _g13.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							var _g15 = _g14.size;
							var _g16 = _g14.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,makeBatchShader: function(rt) {
		var sh = this.batchShaders.h[rt.id];
		if(sh == null) {
			sh = this.createBatchShader(rt);
			this.batchShaders.h[rt.id] = sh;
		}
		var shader = Object.create(hxsl_BatchShader.prototype);
		shader.shader = sh;
		return shader;
	}
	,createBatchShader: function(rt) {
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(rt.spec.signature,0,8);
		var declVar = function(name,t,kind) {
			return { id : hxsl_Tools.allocVarId(), type : t, name : name, kind : kind};
		};
		var pos = null;
		var vcount = declVar("Batch_Count",hxsl_Type.TInt,hxsl_VarKind.Param);
		var vbuffer = declVar("Batch_Buffer",hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SVar(vcount)),hxsl_VarKind.Param);
		var voffset = declVar("Batch_Offset",hxsl_Type.TInt,hxsl_VarKind.Local);
		var ebuffer = { e : hxsl_TExprDef.TVar(vbuffer), p : pos, t : vbuffer.type};
		var eoffset = { e : hxsl_TExprDef.TVar(voffset), p : pos, t : voffset.type};
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var countBits = 16;
		vcount.qualifiers = [hxsl_VarQualifier.Const(1 << countBits)];
		s.data = { name : "batchShader_" + id, vars : [vcount,vbuffer,voffset], funs : []};
		var stride = rt.vertex.paramsSize + rt.fragment.paramsSize;
		var parentVars = new haxe_ds_ObjectMap();
		var swiz = [[hxsl_Component.X],[hxsl_Component.Y],[hxsl_Component.Z],[hxsl_Component.W]];
		var readOffset = function(index) {
			return { e : hxsl_TExprDef.TArray(ebuffer,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,eoffset,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos}), t : tvec4, p : pos};
		};
		var extractVar = function(v,offset) {
			var vreal = declVar(v.name,v.type,hxsl_VarKind.Local);
			if(v.perObjectGlobal != null) {
				var path = v.perObjectGlobal.path.split(".");
				path.pop();
				var cur = vreal;
				while(path.length > 0) {
					var key = path.join(".");
					var name = path.pop();
					var vp = parentVars.h[path.__id__];
					if(vp == null) {
						vp = declVar(name,hxsl_Type.TStruct([]),hxsl_VarKind.Local);
						parentVars.set(path,vp);
					}
					var _g = vp.type;
					if(_g._hx_index == 13) {
						var vl = _g.vl;
						vl.push(cur);
					}
					cur.parent = vp;
					cur = vp;
				}
			}
			s.data.vars.push(vreal);
			var index = (v.pos >> 2) + offset;
			var extract;
			var _g = v.type;
			switch(_g._hx_index) {
			case 3:
				extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),swiz[v.pos & 3])};
				break;
			case 5:
				var _g1 = _g.t;
				switch(_g.size) {
				case 2:
					if(_g1._hx_index == 1) {
						var swiz1;
						switch(v.pos & 3) {
						case 0:
							swiz1 = [hxsl_Component.X,hxsl_Component.Y];
							break;
						case 1:
							swiz1 = [hxsl_Component.Y,hxsl_Component.Z];
							break;
						default:
							swiz1 = [hxsl_Component.Z,hxsl_Component.W];
						}
						extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),swiz1)};
					} else {
						throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				case 3:
					if(_g1._hx_index == 1) {
						extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),(v.pos & 3) == 0 ? [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z] : [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W])};
					} else {
						throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				case 4:
					if(_g1._hx_index == 1) {
						extract = readOffset(index);
					} else {
						throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				default:
					throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(v.type));
				}
				break;
			case 7:
				extract = { p : pos, t : v.type, e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), t : hxsl_Type.TVoid, p : pos},[readOffset(index),readOffset(index + 1),readOffset(index + 2),readOffset(index + 3)])};
				break;
			default:
				throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(v.type));
			}
			return { p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(vreal), p : pos, t : v.type},extract), t : hxsl_Type.TVoid};
		};
		var exprs = [];
		var p = rt.vertex.params;
		while(p != null) {
			exprs.push(extractVar(p,0));
			p = p.next;
		}
		var p = rt.fragment.params;
		while(p != null) {
			exprs.push(extractVar(p,rt.vertex.paramsSize));
			p = p.next;
		}
		exprs.unshift({ p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,eoffset,{ p : pos, t : hxsl_Type.TInt, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,{ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.InstanceID), t : hxsl_Type.TInt, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), p : pos, t : hxsl_Type.TInt})}), t : hxsl_Type.TVoid});
		var fv = declVar("init",hxsl_Type.TFun([]),hxsl_VarKind.Function);
		var f = { kind : hxsl_FunctionKind.Init, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(exprs), p : pos, t : hxsl_Type.TVoid}};
		s.data.funs.push(f);
		s.consts = new hxsl_ShaderConst(vcount,0,countBits);
		s.consts.globalId = 0;
		return s;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_Exit = function() {
};
hxsl__$Dce_Exit.__name__ = "hxsl._Dce.Exit";
hxsl__$Dce_Exit.prototype = {
	__class__: hxsl__$Dce_Exit
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	debug: function(msg,pos) {
	}
	,dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = fragment.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2);
			}
			outExprs = [];
			var _g1 = 0;
			var _g2 = vertex.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				outExprs.push(this.mapExpr(f.expr,false));
			}
			var _g3 = 0;
			var _g4 = fragment.funs;
			while(_g3 < _g4.length) {
				var f1 = _g4[_g3];
				++_g3;
				outExprs.push(this.mapExpr(f1.expr,false));
			}
			this.markAsKeep = false;
			var _g5 = 0;
			while(_g5 < outExprs.length) {
				var e = outExprs[_g5];
				++_g5;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v1.v);
			HxOverrides.remove(fragment.vars,v1.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			var _g3 = _g.op;
			switch(_g3._hx_index) {
			case 4:
				var _g4 = _g2.t;
				var _g4 = _g2.p;
				var _g4 = _g2.e;
				switch(_g4._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g4.v;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g5 = _g4.regs;
					var _g5 = _g4.e;
					var _g4 = _g5.t;
					var _g4 = _g5.p;
					var _g4 = _g5.e;
					if(_g4._hx_index == 1) {
						var e1 = _g1;
						var v = _g4.v;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g4 = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g4(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var _g5 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g5(e,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g6 = _g3.op;
				var _g3 = _g2.t;
				var _g3 = _g2.p;
				var _g3 = _g2.e;
				switch(_g3._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g3.v;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g2 = _g3.regs;
					var _g2 = _g3.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var e1 = _g1;
						var v = _g3.v;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g1 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g1(e,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var _g2 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g2(e,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var _g3 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g3(e,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			if(init != null) {
				writeTo.push(this.get(v));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g6 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g6(e,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g7 = _g.args;
			var _g8 = _g.e;
			var _g9 = _g8.t;
			var _g9 = _g8.p;
			var _g9 = _g8.e;
			if(_g9._hx_index == 2) {
				switch(_g9.g._hx_index) {
				case 63:
					if(_g7.length == 3) {
						var _g8 = _g7[2];
						var _g9 = _g7[0];
						var _g10 = _g9.t;
						var _g10 = _g9.p;
						var _g10 = _g9.e;
						if(_g10._hx_index == 1) {
							var _g9 = _g8.t;
							var _g9 = _g8.p;
							var _g9 = _g8.e;
							if(_g9._hx_index == 0) {
								var _g8 = _g9.c;
								if(_g8._hx_index == 2) {
									var c = _g10.v;
									var uv = _g7[1];
									var cid = _g8.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g8 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g8(e,writeTo7,isAffected7);
									});
								}
							} else {
								var _g9 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g9(e,writeTo8,isAffected8);
								});
							}
						} else {
							var _g10 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g10(e,writeTo9,isAffected9);
							});
						}
					} else {
						var _g11 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g11(e,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g7.length == 4) {
						var _g12 = _g7[3];
						var _g13 = _g7[0];
						var _g14 = _g13.t;
						var _g14 = _g13.p;
						var _g14 = _g13.e;
						if(_g14._hx_index == 1) {
							var _g13 = _g12.t;
							var _g13 = _g12.p;
							var _g13 = _g12.e;
							if(_g13._hx_index == 0) {
								var _g12 = _g13.c;
								if(_g12._hx_index == 2) {
									var c = _g14.v;
									var uv = _g7[1];
									var lod = _g7[2];
									var cid = _g12.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g7 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g7(e,writeTo11,isAffected11);
									});
								}
							} else {
								var _g12 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g12(e,writeTo12,isAffected12);
								});
							}
						} else {
							var _g13 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g13(e,writeTo13,isAffected13);
							});
						}
					} else {
						var _g14 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g14(e,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var _g15 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g15(e,writeTo15,isAffected15);
					});
				}
			} else {
				var _g16 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g16(e,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e1 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g17 = 0;
			while(_g17 < writeTo.length) {
				var v = writeTo[_g17];
				++_g17;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(e1,affect,isAffected);
			var _g17 = 0;
			var _g18 = len;
			while(_g17 < _g18) {
				var i = _g17++;
				var v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var affect = [];
			this.check(loop,writeTo,affect);
			this.check(it,affect,isAffected);
			var _g = 0;
			while(_g < affect.length) {
				var v = affect[_g];
				++_g;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			var _g = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g(e,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g1 = _g.eelse;
			var _g1 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g1 = _g.e2;
			var _g1 = _g.e1;
			var _g2 = _g.op;
			switch(_g2._hx_index) {
			case 4:
				var _g3 = _g1.t;
				var _g3 = _g1.p;
				var _g3 = _g1.e;
				switch(_g3._hx_index) {
				case 1:
					var v = _g3.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g4 = _g3.regs;
					var _g4 = _g3.e;
					var _g3 = _g4.t;
					var _g3 = _g4.p;
					var _g3 = _g4.e;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _g3 = _g2.op;
				var _g2 = _g1.t;
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				switch(_g2._hx_index) {
				case 1:
					var v = _g2.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g1 = _g2.regs;
					var _g1 = _g2.e;
					var _g2 = _g1.t;
					var _g2 = _g1.p;
					var _g2 = _g1.e;
					if(_g2._hx_index == 1) {
						var v = _g2.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(!this.get(v).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 63:
					if(_g1.length == 3) {
						var _g2 = _g1[2];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var uv = _g1[1];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_g1.length == 4) {
						var _g2 = _g1[3];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var uv = _g1[1];
								var lod = _g1[2];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					if(_g1.length == 3) {
						var _g2 = _g1[2];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var pos = _g1[1];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					if(_g1.length == 4) {
						var _g2 = _g1[3];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var pos = _g1[1];
								var lod = _g1[2];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e1 = _g.econd;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var t = _g.t;
				var vs = _g1.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g1 = c.c;
						if(_g1._hx_index == 2) {
							var v = _g1.v;
							var _g1 = v2.type;
							var tmp;
							if(_g1._hx_index == 15) {
								var _g2 = _g1.size;
								var _g2 = _g1.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g1 = v2.type;
					var tmp;
					if(_g1._hx_index == 15) {
						var _g2 = _g1.size;
						var _g2 = _g1.t;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var t = _g.t;
				var vs = _g1.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g = c.c;
						if(_g._hx_index == 2) {
							var v = _g.v;
							var _g = v2.type;
							var tmp;
							if(_g._hx_index == 15) {
								var _g1 = _g.size;
								var _g1 = _g.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g = v2.type;
					var tmp;
					if(_g._hx_index == 15) {
						var _g1 = _g.size;
						var _g1 = _g.t;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g1 = _g.t;
				var _g1 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g = _g1.c;
					if(_g._hx_index == 2) {
						var i = _g.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _g1 = _g.c;
				if(_g1._hx_index == 2) {
					var i1 = _g1.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g1 = _g.eelse;
				var _g1 = _g.eif;
				var _g1 = _g.econd;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g1 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				var _g3 = e1.e;
				switch(_g3._hx_index) {
				case 0:
					var _g4 = _g3.c;
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					var _g5 = _g3.v;
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 1) {
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							if(_g3._hx_index == 1) {
								var a = _g2;
								var b = _g3.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _g2;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g2;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 1) {
							var a = _g2.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 1) {
						var a = _g2.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 1) {
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							if(_g3._hx_index == 1) {
								var a = _g2;
								var b = _g3.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _g2;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g2;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 1) {
							var a = _g2.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 1) {
						var a = _g2.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				var _g1 = op.op;
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 22:
				throw haxe_Exception.thrown("assert");
			case 23:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var e1 = _g.e1;
			var op = _g.op;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c = _g.e;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c1,args);
				} else {
					var v = _g1.v;
					if(this.funMap.h.__keys__[v.__id__] != null) {
						var f = this.funMap.h[v.__id__];
						var outExprs = [];
						var undo = [];
						var _g2 = 0;
						var _g3 = f.args.length;
						while(_g2 < _g3) {
							var i = _g2++;
							var v = [f.args[i]];
							var e1 = args[i];
							var _g4 = e1.e;
							switch(_g4._hx_index) {
							case 0:
								var _g5 = _g4.c;
								var old = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							case 1:
								var _g6 = _g4.v;
								var _g7 = _g6.type;
								var _g8 = _g6.qualifiers;
								var _g9 = _g6.parent;
								var _g10 = _g6.name;
								var _g11 = _g6.id;
								switch(_g6.kind._hx_index) {
								case 0:case 1:case 2:
									var old1 = [this.constants.h[v[0].id]];
									undo.push((function(old,v) {
										return function() {
											if(old[0] == null) {
												_gthis.constants.remove(v[0].id);
											} else {
												_gthis.constants.h[v[0].id] = old[0];
											}
										};
									})(old1,v));
									this.constants.h[v[0].id] = e1.e;
									break;
								default:
									var old2 = [this.varMap.h[v[0].__id__]];
									if(old2[0] == null) {
										undo.push((function(v) {
											return function() {
												_gthis.varMap.remove(v[0]);
											};
										})(v));
									} else {
										this.varMap.remove(v[0]);
										undo.push((function(old,v) {
											return function() {
												_gthis.varMap.set(v[0],old[0]);
											};
										})(old2,v));
									}
									var v2 = this.mapVar(v[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
								}
								break;
							default:
								var old3 = [this.varMap.h[v[0].__id__]];
								if(old3[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old3,v));
								}
								var v21 = this.mapVar(v[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
						}
						var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
						var _g2 = 0;
						while(_g2 < undo.length) {
							var u = undo[_g2];
							++_g2;
							u();
						}
						var _g2 = e1.e;
						if(_g2._hx_index == 4) {
							var el = _g2.el;
							var _g2 = 0;
							while(_g2 < el.length) {
								var e2 = el[_g2];
								++_g2;
								outExprs.push(e2);
							}
						} else {
							outExprs.push(e1);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
					}
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e1 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				if(_g2._hx_index == 1) {
					var b = _g2.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v1 = _g.v;
			var v2 = this.mapVar(v1);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				var _g2 = _g1.e2;
				var _g3 = _g1.e1;
				if(_g1.op._hx_index == 21) {
					var _g1 = _g3.t;
					var _g1 = _g3.p;
					var _g1 = _g3.e;
					if(_g1._hx_index == 0) {
						var _g3 = _g1.c;
						if(_g3._hx_index == 2) {
							var _g1 = _g2.t;
							var _g1 = _g2.p;
							var _g1 = _g2.e;
							if(_g1._hx_index == 0) {
								var _g2 = _g1.c;
								if(_g2._hx_index == 2) {
									var start = _g3.v;
									var len = _g2.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e2 = _g.index;
			var e1 = _g.e;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e21.e;
			var _g2 = e11.e;
			if(_g2._hx_index == 17) {
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						var el = _g2.el;
						var i = _g3.v;
						d = i >= 0 && i < el.length ? el[i].e : hxsl_TExprDef.TArray(e11,e21);
					} else {
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e1 = _g.e;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var e1 = _g.e;
			var args = _g.args;
			var name = _g.m;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _g2 = v.type;
				if(_g2._hx_index == 9) {
					var _g3 = _g2.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g1.t;
			var _g2 = _g1.e;
			if(_g2._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v = _g2.v;
				var _g = eindex.e;
				var e1;
				if(_g._hx_index == 0) {
					var _g1 = _g.c;
					if(_g1._hx_index == 2) {
						var _g = _g1.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a = this.varMap.h[v.__id__];
					if(a != null) {
						var _g = v.type;
						if(_g._hx_index == 15) {
							var _g1 = _g.size;
							var _g1 = _g.t;
							var t = _g1;
							if(hxsl_Tools.isSampler(t)) {
								eindex = this.mapExpr(eindex);
								var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,toInt));
							} else {
								var t = _g1;
								var stride = this.varSize(t,a.t);
								if(stride == 0 || (stride & 3) != 0) {
									throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
								}
								stride >>= 2;
								eindex = this.mapExpr(eindex);
								var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v = c.v;
				return this.allocConst(v,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				if(_g1.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 42) {
					if(_g1.length == 2) {
						var _g2 = _g1[1];
						var _g3 = _g1[0];
						var _g1 = _g3.t;
						var _g4 = _g3.p;
						var _g4 = _g3.e;
						if(_g4._hx_index == 1) {
							var _g3 = _g4.v;
							var _g4 = _g3.type;
							var _g4 = _g3.qualifiers;
							var _g4 = _g3.parent;
							var _g4 = _g3.name;
							var _g4 = _g3.id;
							switch(_g3.kind._hx_index) {
							case 0:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g1 = _g2.t;
											var _g1 = _g2.p;
											var _g1 = _g2.e;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.index;
			var _g2 = _g.e;
			var _g = _g1.t;
			var _g = _g1.p;
			var _g = _g1.e;
			if(_g._hx_index == 0) {
				var _g3 = _g.c;
				if(_g3._hx_index == 2) {
					var _g = _g3.v;
					var ea = _g2;
					var eindex = _g1;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea = _g2;
					var eindex = _g1;
					var _g = ea.t;
					if(_g._hx_index == 15) {
						var _g3 = _g.size;
						var t = _g.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea = _g2;
				var eindex = _g1;
				var _g = ea.t;
				if(_g._hx_index == 15) {
					var _g1 = _g.size;
					var t = _g.t;
					var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g3 = va.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g = 0;
			while(_g < va.length) {
				var v = va[_g];
				++_g;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,mkInt: function(v,pos) {
		return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(v)), t : hxsl_Type.TInt, p : pos};
	}
	,readIndex: function(a,index,pos) {
		var offs = a.t == null ? a.pos : a.pos >> 2;
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,readOffset: function(a,stride,delta,index,pos) {
		var index1 = (a.t == null ? a.pos : a.pos >> 2) + index;
		var offset = index1 == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4,tmp5]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g = t.size;
			if(_g._hx_index == 0) {
				var t1 = t.t;
				var len = _g.v;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var delta = acc.delta;
						var stride = acc.stride;
						var a1 = acc.a;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var delta = acc.delta;
					var stride = acc.stride;
					var a1 = acc.a;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var delta = acc.delta;
					var stride = acc.stride;
					var a1 = acc.a;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			var size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			if(size == 4) {
				if((a.pos & 3) != 0) {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				var sw = [];
				var _g = 0;
				var _g1 = size;
				while(_g < _g1) {
					var i = _g++;
					sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl_Type.TFloat;
				e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size = t.size;
					e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 52) {
					if(_g1.length == 1) {
						var _g2 = _g1[0];
						var _g1 = _g2.t;
						var _g1 = _g2.p;
						var _g1 = _g2.e;
						if(_g1._hx_index == 8) {
							var _g2 = _g1.e;
							var _g3 = _g2.t;
							var _g3 = _g2.p;
							var _g3 = _g2.e;
							if(_g3._hx_index == 2) {
								if(_g3.g._hx_index == 51) {
									var args = _g1.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var _g2 = _g1.args;
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.index;
			var _g2 = _g.e;
			var _g = _g2.t;
			var _g = _g2.p;
			var _g = _g2.e;
			if(_g._hx_index == 17) {
				var _g2 = _g1.t;
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 2) {
						var el = _g.el;
						var i = _g1.v;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(v.type != t) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _g2 = _g1.size;
					if(_g2._hx_index == 0) {
						var t2 = _g1.t;
						var n = _g2.v;
						if(t2 == t) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					var _g3 = _g1.size;
					if(t != hxsl_Type.TSampler2D) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g3 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g3 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var _g4 = v.type;
			if(_g4._hx_index == 15) {
				var _g5 = _g4.size;
				var t1 = _g4.t;
				if(hxsl_Tools.isSampler(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g6 = 0;
			while(_g6 < alloc.length) {
				var a = alloc[_g6];
				++_g6;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g = v.size;
			if(_g._hx_index == 0) {
				var at = v.t;
				var n = _g.v;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_GlobalSlot = {};
hxsl_GlobalSlot._new = function(name) {
	var this1 = hxsl_Globals.allocID(name);
	return this1;
};
hxsl_GlobalSlot.toInt = function(this1) {
	return this1;
};
hxsl_GlobalSlot.set = function(this1,globals,v) {
	globals.map.h[this1] = v;
};
hxsl_GlobalSlot.get = function(this1,globals) {
	return globals.map.h[this1];
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.getIDName = function(id) {
	return hxsl_Globals.ALL[id];
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,get: function(path) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		return this1.h[key];
	}
	,fastSet: function(id,v) {
		this.map.h[id] = v;
	}
	,fastGet: function(id) {
		return this.map.h[id];
	}
	,resetChannels: function() {
		this.maxChannels = 0;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.compile = function(s) {
	var out = new hxsl_GlslOut();
	out.glES = 1;
	out.version = 100;
	return out.run(s);
};
hxsl_GlslOut.prototype = {
	get_isES: function() {
		return this.glES != null;
	}
	,get_isES2: function() {
		if(this.glES != null) {
			return this.glES <= 2;
		} else {
			return false;
		}
	}
	,add: function(v) {
		this.buf.b += Std.string(v);
	}
	,ident: function(v) {
		var v1 = this.varName(v);
		this.buf.b += Std.string(v1);
	}
	,decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				if(_g == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _g;
						this.buf.b += Std.string(v);
					}
				} else {
					var v = _g;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g = t.size;
			var _g = t.t;
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		case 18:
			this.buf.b += Std.string("mat2");
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n = _g1;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size = _g.size;
			var t = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g1 = _g.args;
			var _g1 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e2.t;
			var _g2 = e1.t;
			switch(op._hx_index) {
			case 1:
				if(_g2._hx_index == 5) {
					if(_g2.size == 3) {
						if(_g2.t._hx_index == 1) {
							if(_g1._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp;
					if(op._hx_index == 20) {
						var _g3 = op.op;
						tmp = true;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g2._hx_index == 5) {
						if(_g2.size == 3) {
							if(_g2.t._hx_index == 1) {
								if(_g1._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp;
									if(op._hx_index == 20) {
										var _g1 = op.op;
										tmp = true;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp;
						if(op._hx_index == 20) {
							var _g1 = op.op;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var e1 = _g.e1;
			var op = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp;
			switch(op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addValue(e1,tabs);
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				var _g4 = _g3.g;
				switch(_g4._hx_index) {
				case 35:
					var args = _g1;
					var g = _g4;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					var _g3 = 0;
					while(_g3 < args.length) {
						var e1 = args[_g3];
						++_g3;
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", ");
					}
					this.buf.b += Std.string("0)");
					break;
				case 53:
					if(_g1.length == 1) {
						var e1 = _g1[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _g2;
						var args = _g1;
						var _g3 = v.e;
						if(_g3._hx_index == 2) {
							var g = _g3.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g3 = 0;
						while(_g3 < args.length) {
							var e1 = args[_g3];
							++_g3;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args = _g1;
					var v = _g2;
					var _g3 = v.e;
					if(_g3._hx_index == 2) {
						var g = _g3.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g3 = 0;
					while(_g3 < args.length) {
						var e1 = args[_g3];
						++_g3;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args = _g1;
				var v = _g2;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e1 = _g.e;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e2 = _g1.e2;
					var e1 = _g1.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var _g2 = _g1.size;
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g1 = _g.def;
			var _g1 = _g.cases;
			var _g1 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g1 = _g.loop;
			var _g2 = _g.e;
			if(_g.normalWhile == false) {
				var e = _g2;
				var loop = _g1;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e = _g2;
				var loop = _g1;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var _g1 = _g.args;
			var _g1 = _g.m;
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g1 = _g.it;
			var _g1 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g1 = _g.e;
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g1 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	debug: function(msg,pos) {
	}
	,error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v2.type;
		var _g1 = v.type;
		if(_g1._hx_index == 13) {
			if(_g._hx_index == 13) {
				var fl1 = _g1.vl;
				var fl2 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var v2 = this.varMap.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v2 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = vid;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g2 = _g1.v;
					var v = _g2;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _g2;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g2 = _g1.regs;
					var _g2 = _g1.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g2 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g2 = _g1.regs;
					var _g2 = _g1.e;
					var _g1 = _g2.t;
					var _g1 = _g2.p;
					var _g1 = _g2.e;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g1 = _g.loop;
			var _g1 = _g.it;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = haxe_ds_StringMap.keysIterator(locals.h);
			while(k.hasNext()) {
				var k1 = k.next();
				_g1.h[k1] = true;
			}
			var locals1 = _g1;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(Object.prototype.hasOwnProperty.call(locals.h,v.name)) {
				var k = 2;
				while(Object.prototype.hasOwnProperty.call(locals.h,v.name + k)) ++k;
				v.name += k;
			}
			locals.h[v.name] = true;
			break;
		default:
			var _g = $bind(this,this.uniqueLocals);
			var locals1 = locals;
			hxsl_Tools.iter(expr,function(expr) {
				_g(expr,locals1);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var v1 = s.read.iterator();
			while(v1.hasNext()) {
				var v2 = v1.next();
				addVar(v2);
			}
			var v3 = s.write.iterator();
			while(v3.hasNext()) {
				var v4 = v3.next();
				addVar(v4);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var s = dupShaders.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			var sreal = dupShaders.h[s1.__id__];
			if(s1 == sreal) {
				continue;
			}
			var _g = 0;
			var _g1 = s1.vars.length;
			while(_g < _g1) {
				var i = _g++;
				this.allocVar(s1.vars[i],null).merged.unshift(sreal.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.check = function(s,from) {
	try {
		var vars = new haxe_ds_IntMap();
		var regVars = [];
		var regVar = null;
		regVar = function(v,reg) {
			if(reg) {
				if(vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Duplicate var " + v.id);
				}
				vars.h[v.id] = v;
				regVars.push(v);
			} else {
				vars.remove(v.id);
			}
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					regVar(v,reg);
				}
			}
		};
		var checkExpr = null;
		checkExpr = function(e) {
			var _g = e.e;
			switch(_g._hx_index) {
			case 1:
				var v = _g.v;
				if(!vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Unbound var " + v.name + "@" + v.id);
				}
				break;
			case 4:
				var el = _g.el;
				var old = regVars;
				regVars = [];
				var _g1 = 0;
				while(_g1 < el.length) {
					var e1 = el[_g1];
					++_g1;
					checkExpr(e1);
				}
				var _g1 = 0;
				while(_g1 < regVars.length) {
					var v = regVars[_g1];
					++_g1;
					regVar(v,false);
				}
				regVars = old;
				break;
			case 7:
				var init = _g.init;
				var v = _g.v;
				if(init != null) {
					checkExpr(init);
				}
				regVar(v,true);
				break;
			case 13:
				var loop = _g.loop;
				var it = _g.it;
				var v = _g.v;
				checkExpr(it);
				regVar(v,true);
				checkExpr(loop);
				regVar(v,false);
				break;
			default:
				hxsl_Tools.iter(e,checkExpr);
			}
		};
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			regVar(v,true);
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = f.args;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				regVar(v,true);
			}
			checkExpr(f.expr);
			var _g4 = 0;
			var _g5 = f.args;
			while(_g4 < _g5.length) {
				var v1 = _g5[_g4];
				++_g4;
				regVar(v1,false);
			}
		}
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(typeof(_g1) == "string") {
			var e = _g1;
			var msg = e + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
			if(from != null) {
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < from.length) {
					var s = from[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s,true));
				}
				msg += "\n    from\n\n" + _g1.join("\n\n");
			}
			throw haxe_Exception.thrown(msg);
		} else {
			throw _g;
		}
	}
};
hxsl_Printer.prototype = {
	add: function(v) {
		this.buffer.b += Std.string(v);
	}
	,shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,varString: function(v) {
		this.buffer = new StringBuf();
		this.addVar(v,null);
		return this.buffer.b;
	}
	,funString: function(f) {
		this.buffer = new StringBuf();
		this.addFun(f);
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var e = _g.e1;
			var op = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e,tabs);
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el = _g.args;
			var e = _g.e;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e = _g.e;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e2 = _g.index;
			var e1 = _g.e;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g1 = _g.loop;
			var _g2 = _g.e;
			if(_g.normalWhile == false) {
				var e = _g2;
				var loop = _g1;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e = _g2;
				var loop = _g1;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g = 0;
				while(_g < args.length) {
					var c = args[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var p = new hxsl_AllocParam(this.name,this.pos,this.instance,this.index,this.type);
		if(this.perObjectGlobal != null) {
			p.perObjectGlobal = this.perObjectGlobal.clone(resetGID);
		}
		if(this.next != null) {
			p.next = this.next.clone(resetGID);
		}
		return p;
	}
	,__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var g = new hxsl_AllocGlobal(this.pos,this.path,this.type);
		if(this.next != null) {
			g.next = this.next.clone(resetGID);
		}
		if(resetGID) {
			g.gid = 0;
		}
		return g;
	}
	,__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	hasGlobal: function(gid) {
		return this.globals.h.hasOwnProperty(gid);
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
	this.tid = 1;
	this.uid = 1;
};
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.run = function(s) {
	return new hxsl_Serializer().serialize(s);
};
hxsl_Serializer.prototype = {
	writeArr: function(arr,f) {
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
	}
	,readArr: function(f) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return _g;
	}
	,readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,writeVarInt: function(id) {
		if(id < 128) {
			this.out.addByte(id);
		} else {
			var n = id >> 8;
			if(n >= 127) {
				this.out.addByte(255);
				this.out.addInt32(n);
			} else {
				this.out.addByte(n | 128);
				this.out.addByte(id & 255);
			}
		}
	}
	,writeID: function(id) {
		var id2 = this.idMap.h[id];
		if(id2 == null) {
			id2 = this.uid++;
			this.idMap.h[id] = id2;
		}
		this.writeVarInt(id2);
	}
	,readID: function() {
		return this.readVarInt();
	}
	,writeTID: function(t) {
		var tid = this.typeIdMap.get(t);
		if(tid != null) {
			this.writeVarInt(tid);
			return false;
		}
		tid = this.tid++;
		this.typeIdMap.set(t,tid);
		this.writeVarInt(tid);
		return true;
	}
	,writeType: function(t) {
		this.out.addByte(t._hx_index);
		switch(t._hx_index) {
		case 5:
			var t1 = t.t;
			var size = t.size;
			this.out.addByte(size | t1._hx_index << 3);
			break;
		case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 8:case 10:case 11:case 12:case 18:
			break;
		case 9:
			var size = t.size;
			this.out.addInt32(size);
			break;
		case 13:
			var vl = t.vl;
			if(this.writeTID(t)) {
				var f = $bind(this,this.writeVar);
				this.writeVarInt(vl.length);
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					f(v);
				}
			}
			break;
		case 14:
			var variants = t.variants;
			break;
		case 15:
			var size = t.size;
			var t1 = t.t;
			this.writeType(t1);
			switch(size._hx_index) {
			case 0:
				var v = size.v;
				this.out.addByte(0);
				this.writeVarInt(v);
				break;
			case 1:
				var v = size.v;
				this.writeVar(v);
				break;
			}
			break;
		case 16:
			var size = t.size;
			var t1 = t.t;
			this.writeType(t1);
			switch(size._hx_index) {
			case 0:
				var v = size.v;
				this.out.addByte(0);
				this.writeVarInt(v);
				break;
			case 1:
				var v = size.v;
				this.writeVar(v);
				break;
			}
			break;
		case 17:
			var size = t.size;
			this.out.addByte(size);
			break;
		}
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			return hxsl_Type.TMat2;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,writeString: function(s) {
		var bytes = haxe_io_Bytes.ofString(s);
		this.writeVarInt(bytes.length);
		this.out.add(bytes);
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,writeVar: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		this.writeID(v.id);
		if(this.varMap.h.hasOwnProperty(v.id)) {
			return;
		}
		this.varMap.h[v.id] = v;
		this.writeString(v.name);
		this.writeType(v.type);
		this.out.addByte(v.kind._hx_index);
		this.writeVar(v.parent);
		if(v.qualifiers == null) {
			this.out.addByte(0);
		} else {
			this.out.addByte(v.qualifiers.length);
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				this.out.addByte(q._hx_index);
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					this.out.addInt32(max == null ? 0 : max);
					break;
				case 1:case 2:case 3:case 5:case 8:
					break;
				case 4:
					var n = q.n;
					this.writeString(n);
					break;
				case 6:
					var p = q.p;
					this.out.addByte(p._hx_index);
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					this.out.addDouble(min);
					this.out.addDouble(max1);
					break;
				case 9:
					var v = q.v;
					this.out.addInt32(v);
					break;
				}
			}
		}
	}
	,writeFun: function(f) {
		this.out.addByte(f.kind._hx_index);
		this.writeVar(f.ref);
		var arr = f.args;
		var f1 = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f1(v);
		}
		this.writeType(f.ret);
		this.writeExpr(f.expr);
	}
	,writeConst: function(c) {
		this.out.addByte(c._hx_index);
		switch(c._hx_index) {
		case 0:
			break;
		case 1:
			var b = c.b;
			this.out.addByte(b ? 1 : 0);
			break;
		case 2:
			var v = c.v;
			this.out.addInt32(v);
			break;
		case 3:
			var v = c.v;
			this.out.addDouble(v);
			break;
		case 4:
			var v = c.v;
			this.writeString(v);
			break;
		}
	}
	,writeExpr: function(e) {
		var _gthis = this;
		if(e == null) {
			this.out.addByte(0);
			return;
		}
		this.out.addByte(e.e._hx_index + 1);
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.writeConst(c);
			break;
		case 1:
			var v = _g.v;
			this.writeVar(v);
			break;
		case 2:
			var g = _g.g;
			this.out.addByte(g._hx_index);
			break;
		case 3:
			var e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 4:
			var el = _g.el;
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			var _g1 = 0;
			while(_g1 < el.length) {
				var v = el[_g1];
				++_g1;
				f(v);
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			if(op._hx_index == 20) {
				var op1 = op.op;
				this.out.addByte(op1._hx_index | 128);
			} else {
				this.out.addByte(op._hx_index);
			}
			this.writeExpr(e1);
			this.writeExpr(e2);
			break;
		case 6:
			var e1 = _g.e1;
			var op = _g.op;
			this.out.addByte(op._hx_index);
			this.writeExpr(e1);
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			this.writeVar(v);
			this.writeExpr(init);
			break;
		case 8:
			var args = _g.args;
			var e1 = _g.e;
			this.writeExpr(e1);
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(args.length);
			var _g1 = 0;
			while(_g1 < args.length) {
				var v = args[_g1];
				++_g1;
				f(v);
			}
			break;
		case 9:
			var regs = _g.regs;
			var e1 = _g.e;
			this.writeExpr(e1);
			if(regs.length == 0) {
				throw haxe_Exception.thrown("assert");
			}
			var bits = regs.length - 1;
			var k = 2;
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				bits |= r._hx_index << k;
				k += 2;
			}
			this.out.addByte(bits & 255);
			this.out.addByte(bits >> 8);
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.writeExpr(econd);
			this.writeExpr(eif);
			this.writeExpr(eelse);
			break;
		case 11:
			break;
		case 12:
			var e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.writeVar(v);
			this.writeExpr(it);
			this.writeExpr(loop);
			break;
		case 14:
			break;
		case 15:
			break;
		case 16:
			var index = _g.index;
			var e1 = _g.e;
			this.writeExpr(e1);
			this.writeExpr(index);
			break;
		case 17:
			var el = _g.el;
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			var _g1 = 0;
			while(_g1 < el.length) {
				var v = el[_g1];
				++_g1;
				f(v);
			}
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e1 = _g.e;
			this.writeExpr(e1);
			this.writeVarInt(cases.length);
			var _g1 = 0;
			while(_g1 < cases.length) {
				var v = cases[_g1];
				++_g1;
				var arr = v.values;
				var f = $bind(_gthis,_gthis.writeExpr);
				_gthis.writeVarInt(arr.length);
				var _g2 = 0;
				while(_g2 < arr.length) {
					var v1 = arr[_g2];
					++_g2;
					f(v1);
				}
				_gthis.writeExpr(v.expr);
			}
			this.writeExpr(def);
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop = _g.loop;
			var e1 = _g.e;
			this.writeExpr(e1);
			this.writeExpr(loop);
			this.out.addByte(normalWhile ? 1 : 0);
			break;
		case 20:
			var e1 = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.writeString(m);
			var f = $bind(this,this.writeConst);
			this.writeVarInt(args.length);
			var _g = 0;
			while(_g < args.length) {
				var v = args[_g];
				++_g;
				f(v);
			}
			this.writeExpr(e1);
			break;
		}
		this.writeType(e.t);
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,serialize: function(s) {
		this.varMap = new haxe_ds_IntMap();
		this.idMap = new haxe_ds_IntMap();
		this.typeIdMap = new haxe_ds_EnumValueMap();
		this.out = new haxe_io_BytesBuffer();
		this.out.addByte(hxsl_Serializer.SIGN & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 8 & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 16 & 255);
		this.writeString(s.name);
		var arr = s.vars;
		var f = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
		var arr = s.funs;
		var f = $bind(this,this.writeFun);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
		return haxe_crypto_Base64.encode(this.out.getBytes(),false);
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	clone: function() {
		return new hxsl_ShaderList(this.s.clone(),this.next == null ? null : this.next.clone());
	}
	,iterator: function() {
		return new hxsl__$ShaderList_ShaderIterator(this,null);
	}
	,iterateTo: function(s) {
		return new hxsl__$ShaderList_ShaderIterator(this,s);
	}
	,__class__: hxsl_ShaderList
};
var hxsl__$ShaderList_ShaderIterator = function(l,last) {
	this.l = l;
	this.last = last;
};
hxsl__$ShaderList_ShaderIterator.__name__ = "hxsl._ShaderList.ShaderIterator";
hxsl__$ShaderList_ShaderIterator.prototype = {
	hasNext: function() {
		return this.l != this.last;
	}
	,next: function() {
		var s = this.l.s;
		this.l = this.l.next;
		return s;
	}
	,__class__: hxsl__$ShaderList_ShaderIterator
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,getInstance: function(constBits) {
		var i = this.instanceCache.h[constBits];
		if(i == null) {
			return this.makeInstance(constBits);
		} else {
			return i;
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		hxsl_Printer.check(i.shader,[this.data]);
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addSelfParam: function(i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addSelfParam(i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[v.id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		var _g1 = Lambda.array(vvars);
		while(_g < _g1.length) {
			var inf = _g1[_g];
			++_g;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf = fvars.iterator();
		while(inf.hasNext()) {
			var inf1 = inf.next();
			var v = inf1.v;
			switch(v.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Var, type : v.type};
				this.uniqueName(nv);
				var i = vvars.h[v.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v);
					vvars.h[v.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv);
				vp.write = 1;
				vvars.h[nv.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : vfun.expr.p}), t : v.type, p : vfun.expr.p});
				this.varMap.set(v,nv);
				inf1.local = true;
				break;
			case 3:
				if(inf1.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Local, type : v.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v), t : v.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v,nv1);
				}
				break;
			default:
			}
		}
		var _g = 0;
		while(_g < todo.length) {
			var v = todo[_g];
			++_g;
			fvars.h[v.v.id] = v;
		}
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,true,vvars,vfun.expr.p);
		}
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,false,vvars,ffun.expr.p);
		}
		var v = this.varMap.keys();
		while(v.hasNext()) {
			var v1 = v.next();
			var v2 = this.varMap.h[this.varMap.h[v1.__id__].__id__];
			if(v2 != null) {
				this.varMap.set(v1,v2);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g = ffun.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < finits.length) {
				var e = finits[_g];
				++_g;
				el.unshift(e);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g = [];
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var vvars = _g;
		var _g = [];
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		fvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		return { vertex : { name : "vertex", vars : vvars, funs : [vfun]}, fragment : { name : "fragment", vars : fvars, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			var _g3 = _g.op;
			switch(_g3._hx_index) {
			case 4:
				var _g4 = _g2.t;
				var _g4 = _g2.p;
				var _g4 = _g2.e;
				switch(_g4._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g4.v;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g5 = _g4.regs;
					var _g5 = _g4.e;
					var _g4 = _g5.t;
					var _g4 = _g5.p;
					var _g4 = _g5.e;
					if(_g4._hx_index == 1) {
						var e1 = _g1;
						var v = _g4.v;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g4 = _g3.op;
				var _g3 = _g2.t;
				var _g3 = _g2.p;
				var _g3 = _g2.e;
				switch(_g3._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g3.v;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g2 = _g3.regs;
					var _g2 = _g3.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var e1 = _g1;
						var v = _g3.v;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var hxsl_ChannelTools = function() { };
hxsl_ChannelTools.__name__ = "hxsl.ChannelTools";
hxsl_ChannelTools.isPackedFormat = function(c) {
	return c.format == h3d_mat_Texture.nativeFormat;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
Math.__name__ = "Math";
var oimo_collision_broadphase_BroadPhase = function(type) {
	this._type = type;
	this._numProxies = 0;
	this._proxyList = null;
	this._proxyListLast = null;
	this._proxyPairList = null;
	this._incremental = false;
	this._testCount = 0;
	this._proxyPairPool = null;
	this._idCount = 0;
	this._convexSweep = new oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry();
	this._aabb = new oimo_collision_broadphase__$BroadPhase_AabbGeometry();
	this.identity = new oimo_common_Transform();
	this.zero = new oimo_common_Vec3();
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
};
oimo_collision_broadphase_BroadPhase.__name__ = "oimo.collision.broadphase.BroadPhase";
oimo_collision_broadphase_BroadPhase.prototype = {
	createProxy: function(userData,aabb) {
		return null;
	}
	,destroyProxy: function(proxy) {
	}
	,moveProxy: function(proxy,aabb,displacement) {
	}
	,isOverlapping: function(proxy1,proxy2) {
		if(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ) {
			return proxy1._aabbMaxZ > proxy2._aabbMinZ;
		} else {
			return false;
		}
	}
	,collectPairs: function() {
	}
	,getProxyPairList: function() {
		return this._proxyPairList;
	}
	,isIncremental: function() {
		return this._incremental;
	}
	,getTestCount: function() {
		return this._testCount;
	}
	,rayCast: function(begin,end,callback) {
	}
	,convexCast: function(convex,begin,translation,callback) {
	}
	,aabbTest: function(aabb,callback) {
	}
	,__class__: oimo_collision_broadphase_BroadPhase
};
var oimo_collision_geometry_Geometry = function(type) {
	this._type = type;
	this._volume = 0;
};
oimo_collision_geometry_Geometry.__name__ = "oimo.collision.geometry.Geometry";
oimo_collision_geometry_Geometry.prototype = {
	_updateMass: function() {
	}
	,_computeAabb: function(aabb,tf) {
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		return false;
	}
	,getType: function() {
		return this._type;
	}
	,getVolume: function() {
		return this._volume;
	}
	,rayCast: function(begin,end,transform,hit) {
		var beginLocal;
		var beginLocalX;
		var beginLocalY;
		var beginLocalZ;
		var endLocal;
		var endLocalX;
		var endLocalY;
		var endLocalZ;
		var v = begin;
		beginLocalX = v.x;
		beginLocalY = v.y;
		beginLocalZ = v.z;
		var v = end;
		endLocalX = v.x;
		endLocalY = v.y;
		endLocalZ = v.z;
		beginLocalX -= transform._positionX;
		beginLocalY -= transform._positionY;
		beginLocalZ -= transform._positionZ;
		endLocalX -= transform._positionX;
		endLocalY -= transform._positionY;
		endLocalZ -= transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * beginLocalX + transform._rotation10 * beginLocalY + transform._rotation20 * beginLocalZ;
		__tmp__Y = transform._rotation01 * beginLocalX + transform._rotation11 * beginLocalY + transform._rotation21 * beginLocalZ;
		__tmp__Z = transform._rotation02 * beginLocalX + transform._rotation12 * beginLocalY + transform._rotation22 * beginLocalZ;
		beginLocalX = __tmp__X;
		beginLocalY = __tmp__Y;
		beginLocalZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * endLocalX + transform._rotation10 * endLocalY + transform._rotation20 * endLocalZ;
		__tmp__Y = transform._rotation01 * endLocalX + transform._rotation11 * endLocalY + transform._rotation21 * endLocalZ;
		__tmp__Z = transform._rotation02 * endLocalX + transform._rotation12 * endLocalY + transform._rotation22 * endLocalZ;
		endLocalX = __tmp__X;
		endLocalY = __tmp__Y;
		endLocalZ = __tmp__Z;
		if(this._rayCastLocal(beginLocalX,beginLocalY,beginLocalZ,endLocalX,endLocalY,endLocalZ,hit)) {
			var localPos;
			var localPosX;
			var localPosY;
			var localPosZ;
			var localNormal;
			var localNormalX;
			var localNormalY;
			var localNormalZ;
			var v = hit.position;
			localPosX = v.x;
			localPosY = v.y;
			localPosZ = v.z;
			var v = hit.normal;
			localNormalX = v.x;
			localNormalY = v.y;
			localNormalZ = v.z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = transform._rotation00 * localPosX + transform._rotation01 * localPosY + transform._rotation02 * localPosZ;
			__tmp__Y = transform._rotation10 * localPosX + transform._rotation11 * localPosY + transform._rotation12 * localPosZ;
			__tmp__Z = transform._rotation20 * localPosX + transform._rotation21 * localPosY + transform._rotation22 * localPosZ;
			localPosX = __tmp__X;
			localPosY = __tmp__Y;
			localPosZ = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = transform._rotation00 * localNormalX + transform._rotation01 * localNormalY + transform._rotation02 * localNormalZ;
			__tmp__Y = transform._rotation10 * localNormalX + transform._rotation11 * localNormalY + transform._rotation12 * localNormalZ;
			__tmp__Z = transform._rotation20 * localNormalX + transform._rotation21 * localNormalY + transform._rotation22 * localNormalZ;
			localNormalX = __tmp__X;
			localNormalY = __tmp__Y;
			localNormalZ = __tmp__Z;
			localPosX += transform._positionX;
			localPosY += transform._positionY;
			localPosZ += transform._positionZ;
			var v = hit.position;
			v.x = localPosX;
			v.y = localPosY;
			v.z = localPosZ;
			var v = hit.normal;
			v.x = localNormalX;
			v.y = localNormalY;
			v.z = localNormalZ;
			return true;
		}
		return false;
	}
	,__class__: oimo_collision_geometry_Geometry
};
var oimo_collision_geometry_ConvexGeometry = function(type) {
	oimo_collision_geometry_Geometry.call(this,type);
	this._gjkMargin = oimo_common_Setting.defaultGJKMargin;
	this._useGjkRayCast = false;
};
oimo_collision_geometry_ConvexGeometry.__name__ = "oimo.collision.geometry.ConvexGeometry";
oimo_collision_geometry_ConvexGeometry.__super__ = oimo_collision_geometry_Geometry;
oimo_collision_geometry_ConvexGeometry.prototype = $extend(oimo_collision_geometry_Geometry.prototype,{
	getGjkMergin: function() {
		return this._gjkMargin;
	}
	,setGjkMergin: function(gjkMergin) {
		if(gjkMergin < 0) {
			gjkMergin = 0;
		}
		this._gjkMargin = gjkMergin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
	}
	,rayCast: function(begin,end,transform,hit) {
		if(this._useGjkRayCast) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.rayCast(this,transform,begin,end,hit);
		} else {
			return oimo_collision_geometry_Geometry.prototype.rayCast.call(this,begin,end,transform,hit);
		}
	}
	,__class__: oimo_collision_geometry_ConvexGeometry
});
var oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
};
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__name__ = "oimo.collision.broadphase._BroadPhase.ConvexSweepGeometry";
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	init: function(c,transform,translation) {
		this.c = c;
		var tr;
		var trX;
		var trY;
		var trZ;
		var v = translation;
		trX = v.x;
		trY = v.y;
		trZ = v.z;
		var localTr;
		var localTrX;
		var localTrY;
		var localTrZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = transform._rotation00 * trX + transform._rotation10 * trY + transform._rotation20 * trZ;
		__tmp__Y = transform._rotation01 * trX + transform._rotation11 * trY + transform._rotation21 * trZ;
		__tmp__Z = transform._rotation02 * trX + transform._rotation12 * trY + transform._rotation22 * trZ;
		localTrX = __tmp__X;
		localTrY = __tmp__Y;
		localTrZ = __tmp__Z;
		this.localTranslation = new oimo_common_Vec3();
		var v = this.localTranslation;
		v.x = localTrX;
		v.y = localTrY;
		v.z = localTrZ;
		this._gjkMargin = c._gjkMargin;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		this.c.computeLocalSupportingVertex(dir,out);
		var v = this.localTranslation;
		if(dir.x * v.x + dir.y * v.y + dir.z * v.z > 0) {
			var v = this.localTranslation;
			var tx = out.x + v.x;
			var ty = out.y + v.y;
			var tz = out.z + v.z;
			out.x = tx;
			out.y = ty;
			out.z = tz;
		}
	}
	,__class__: oimo_collision_broadphase__$BroadPhase_ConvexSweepGeometry
});
var oimo_collision_broadphase__$BroadPhase_AabbGeometry = function() {
	oimo_collision_geometry_ConvexGeometry.call(this,-1);
	this.min = new oimo_common_Vec3();
	this.max = new oimo_common_Vec3();
};
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__name__ = "oimo.collision.broadphase._BroadPhase.AabbGeometry";
oimo_collision_broadphase__$BroadPhase_AabbGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_broadphase__$BroadPhase_AabbGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	computeLocalSupportingVertex: function(dir,out) {
		out.x = dir.x > 0 ? this.max.x : this.min.x;
		out.y = dir.y > 0 ? this.max.y : this.min.y;
		out.z = dir.z > 0 ? this.max.z : this.min.z;
	}
	,__class__: oimo_collision_broadphase__$BroadPhase_AabbGeometry
});
var oimo_collision_broadphase_BroadPhaseProxyCallback = function() {
};
oimo_collision_broadphase_BroadPhaseProxyCallback.__name__ = "oimo.collision.broadphase.BroadPhaseProxyCallback";
oimo_collision_broadphase_BroadPhaseProxyCallback.prototype = {
	process: function(proxy) {
	}
	,__class__: oimo_collision_broadphase_BroadPhaseProxyCallback
};
var oimo_collision_broadphase_BroadPhaseType = function() { };
oimo_collision_broadphase_BroadPhaseType.__name__ = "oimo.collision.broadphase.BroadPhaseType";
var oimo_collision_broadphase_Proxy = function(userData,id) {
	this.userData = userData;
	this._id = id;
	this._prev = null;
	this._next = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_Proxy.__name__ = "oimo.collision.broadphase.Proxy";
oimo_collision_broadphase_Proxy.prototype = {
	getId: function() {
		return this._id;
	}
	,getFatAabb: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
		return aabb;
	}
	,getFatAabbTo: function(aabb) {
		aabb._minX = this._aabbMinX;
		aabb._minY = this._aabbMinY;
		aabb._minZ = this._aabbMinZ;
		aabb._maxX = this._aabbMaxX;
		aabb._maxY = this._aabbMaxY;
		aabb._maxZ = this._aabbMaxZ;
	}
	,__class__: oimo_collision_broadphase_Proxy
};
var oimo_collision_broadphase_ProxyPair = function() {
	this._p1 = null;
	this._p2 = null;
};
oimo_collision_broadphase_ProxyPair.__name__ = "oimo.collision.broadphase.ProxyPair";
oimo_collision_broadphase_ProxyPair.prototype = {
	getProxy1: function() {
		return this._p1;
	}
	,getProxy2: function() {
		return this._p2;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_collision_broadphase_ProxyPair
};
var oimo_collision_broadphase_bruteforce_BruteForceBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,1);
	this._incremental = false;
};
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__name__ = "oimo.collision.broadphase.bruteforce.BruteForceBroadPhase";
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bruteforce_BruteForceBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	createProxy: function(userData,aabb) {
		var proxy = new oimo_collision_broadphase_Proxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = proxy;
			this._proxyListLast = proxy;
		} else {
			this._proxyListLast._next = proxy;
			proxy._prev = this._proxyListLast;
			this._proxyListLast = proxy;
		}
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
		return proxy;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		proxy.userData = null;
	}
	,moveProxy: function(proxy,aabb,dislacement) {
		proxy._aabbMinX = aabb._minX;
		proxy._aabbMinY = aabb._minY;
		proxy._aabbMinZ = aabb._minZ;
		proxy._aabbMaxX = aabb._maxX;
		proxy._aabbMaxY = aabb._maxY;
		proxy._aabbMaxZ = aabb._maxZ;
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		var p1 = this._proxyList;
		while(p1 != null) {
			var n = p1._next;
			var p2 = p1._next;
			while(p2 != null) {
				var n1 = p2._next;
				this._testCount++;
				if(p1._aabbMinX < p2._aabbMaxX && p1._aabbMaxX > p2._aabbMinX && p1._aabbMinY < p2._aabbMaxY && p1._aabbMaxY > p2._aabbMinY && p1._aabbMinZ < p2._aabbMaxZ && p1._aabbMaxZ > p2._aabbMinZ) {
					var first = this._proxyPairPool;
					if(first != null) {
						this._proxyPairPool = first._next;
						first._next = null;
					} else {
						first = new oimo_collision_broadphase_ProxyPair();
					}
					var pp = first;
					if(this._proxyPairList == null) {
						this._proxyPairList = pp;
					} else {
						pp._next = this._proxyPairList;
						this._proxyPairList = pp;
					}
					pp._p1 = p1;
					pp._p2 = p2;
				}
				p2 = n1;
			}
			p1 = n;
		}
	}
	,rayCast: function(begin,end,callback) {
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var dir;
		var dirX;
		var dirY;
		var dirZ;
		var v = begin;
		p1X = v.x;
		p1Y = v.y;
		p1Z = v.z;
		var v = end;
		p2X = v.x;
		p2Y = v.y;
		p2Z = v.z;
		dirX = p2X - p1X;
		dirY = p2Y - p1Y;
		dirZ = p2Z - p1Z;
		var min;
		var minX;
		var minY;
		var minZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		minX = p1X < p2X ? p1X : p2X;
		minY = p1Y < p2Y ? p1Y : p2Y;
		minZ = p1Z < p2Z ? p1Z : p2Z;
		maxX = p1X > p2X ? p1X : p2X;
		maxY = p1Y > p2Y ? p1Y : p2Y;
		maxZ = p1Z > p2Z ? p1Z : p2Z;
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var x1 = p1X;
			var y1 = p1Y;
			var z1 = p1Z;
			var x2 = p2X;
			var y2 = p2Y;
			var z2 = p2Z;
			var sminx = x1 < x2 ? x1 : x2;
			var sminy = y1 < y2 ? y1 : y2;
			var sminz = z1 < z2 ? z1 : z2;
			var smaxx = x1 > x2 ? x1 : x2;
			var smaxy = y1 > y2 ? y1 : y2;
			var smaxz = z1 > z2 ? z1 : z2;
			var pminx = p._aabbMinX;
			var pminy = p._aabbMinY;
			var pminz = p._aabbMinZ;
			var pmaxx = p._aabbMaxX;
			var pmaxy = p._aabbMaxY;
			var pmaxz = p._aabbMaxZ;
			var tmp;
			if(pminx > smaxx || pmaxx < sminx || pminy > smaxy || pmaxy < sminy || pminz > smaxz || pmaxz < sminz) {
				tmp = false;
			} else {
				var dx = x2 - x1;
				var dy = y2 - y1;
				var dz = z2 - z1;
				var adx = dx < 0 ? -dx : dx;
				var ady = dy < 0 ? -dy : dy;
				var adz = dz < 0 ? -dz : dz;
				var pextx = (pmaxx - pminx) * 0.5;
				var pexty = (pmaxy - pminy) * 0.5;
				var pextz = (pmaxz - pminz) * 0.5;
				var pcntx = (pmaxx + pminx) * 0.5;
				var pcnty = (pmaxy + pminy) * 0.5;
				var pcntz = (pmaxz + pminz) * 0.5;
				var cpx = x1 - pcntx;
				var cpy = y1 - pcnty;
				var cpz = z1 - pcntz;
				var tmp1;
				var tmp2;
				var x = cpy * dz - cpz * dy;
				if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
					var x3 = cpz * dx - cpx * dz;
					tmp2 = (x3 < 0 ? -x3 : x3) - (pextz * adx + pextx * adz) > 0;
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var x4 = cpx * dy - cpy * dx;
					tmp1 = (x4 < 0 ? -x4 : x4) - (pextx * ady + pexty * adx) > 0;
				} else {
					tmp1 = true;
				}
				tmp = tmp1 ? false : true;
			}
			if(tmp) {
				callback.process(p);
			}
			p = n;
		}
	}
	,convexCast: function(convex,begin,translation,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			var v = this._aabb.min;
			v.x = p._aabbMinX;
			v.y = p._aabbMinY;
			v.z = p._aabbMinZ;
			var v1 = this._aabb.max;
			v1.x = p._aabbMaxX;
			v1.y = p._aabbMaxY;
			v1.z = p._aabbMaxZ;
			this._convexSweep.init(convex,begin,translation);
			var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
			if(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0) {
				callback.process(p);
			}
			p = n;
		}
	}
	,aabbTest: function(aabb,callback) {
		var p = this._proxyList;
		while(p != null) {
			var n = p._next;
			if(aabb._minX < p._aabbMaxX && aabb._maxX > p._aabbMinX && aabb._minY < p._aabbMaxY && aabb._maxY > p._aabbMinY && aabb._minZ < p._aabbMaxZ && aabb._maxZ > p._aabbMinZ) {
				callback.process(p);
			}
			p = n;
		}
	}
	,__class__: oimo_collision_broadphase_bruteforce_BruteForceBroadPhase
});
var oimo_collision_broadphase_bvh_BvhBroadPhase = function() {
	oimo_collision_broadphase_BroadPhase.call(this,2);
	this._incremental = true;
	this._tree = new oimo_collision_broadphase_bvh_BvhTree();
	var this1 = new Array(1024);
	this.movedProxies = this1;
	this.numMovedProxies = 0;
};
oimo_collision_broadphase_bvh_BvhBroadPhase.__name__ = "oimo.collision.broadphase.bvh.BvhBroadPhase";
oimo_collision_broadphase_bvh_BvhBroadPhase.__super__ = oimo_collision_broadphase_BroadPhase;
oimo_collision_broadphase_bvh_BvhBroadPhase.prototype = $extend(oimo_collision_broadphase_BroadPhase.prototype,{
	collide: function(n1,n2) {
		this._testCount++;
		var l1 = n1._height == 0;
		var l2 = n2._height == 0;
		if(n1 == n2) {
			if(l1) {
				return;
			}
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
			return;
		}
		if(!(n1._aabbMinX < n2._aabbMaxX && n1._aabbMaxX > n2._aabbMinX && n1._aabbMinY < n2._aabbMaxY && n1._aabbMaxY > n2._aabbMinY && n1._aabbMinZ < n2._aabbMaxZ && n1._aabbMaxZ > n2._aabbMinZ)) {
			return;
		}
		if(l1 && l2) {
			var p1 = n1._proxy;
			var p2 = n2._proxy;
			var first = this._proxyPairPool;
			if(first != null) {
				this._proxyPairPool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_broadphase_ProxyPair();
			}
			var pp = first;
			if(this._proxyPairList == null) {
				this._proxyPairList = pp;
			} else {
				pp._next = this._proxyPairList;
				this._proxyPairList = pp;
			}
			pp._p1 = p1;
			pp._p2 = p2;
			return;
		}
		if(l2 || n1._height > n2._height) {
			this.collide(n1._children[0],n2);
			this.collide(n1._children[1],n2);
		} else {
			this.collide(n2._children[0],n1);
			this.collide(n2._children[1],n1);
		}
	}
	,rayCastRecursive: function(node,_p1X,_p1Y,_p1Z,_p2X,_p2Y,_p2Z,callback) {
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		p1X = _p1X;
		p1Y = _p1Y;
		p1Z = _p1Z;
		p2X = _p2X;
		p2Y = _p2Y;
		p2Z = _p2Z;
		var x1 = p1X;
		var y1 = p1Y;
		var z1 = p1Z;
		var x2 = p2X;
		var y2 = p2Y;
		var z2 = p2Z;
		var sminx = x1 < x2 ? x1 : x2;
		var sminy = y1 < y2 ? y1 : y2;
		var sminz = z1 < z2 ? z1 : z2;
		var smaxx = x1 > x2 ? x1 : x2;
		var smaxy = y1 > y2 ? y1 : y2;
		var smaxz = z1 > z2 ? z1 : z2;
		var pminx = node._aabbMinX;
		var pminy = node._aabbMinY;
		var pminz = node._aabbMinZ;
		var pmaxx = node._aabbMaxX;
		var pmaxy = node._aabbMaxY;
		var pmaxz = node._aabbMaxZ;
		var tmp;
		if(pminx > smaxx || pmaxx < sminx || pminy > smaxy || pmaxy < sminy || pminz > smaxz || pmaxz < sminz) {
			tmp = false;
		} else {
			var dx = x2 - x1;
			var dy = y2 - y1;
			var dz = z2 - z1;
			var adx = dx < 0 ? -dx : dx;
			var ady = dy < 0 ? -dy : dy;
			var adz = dz < 0 ? -dz : dz;
			var pextx = (pmaxx - pminx) * 0.5;
			var pexty = (pmaxy - pminy) * 0.5;
			var pextz = (pmaxz - pminz) * 0.5;
			var pcntx = (pmaxx + pminx) * 0.5;
			var pcnty = (pmaxy + pminy) * 0.5;
			var pcntz = (pmaxz + pminz) * 0.5;
			var cpx = x1 - pcntx;
			var cpy = y1 - pcnty;
			var cpz = z1 - pcntz;
			var tmp1;
			var tmp2;
			var x = cpy * dz - cpz * dy;
			if(!((x < 0 ? -x : x) - (pexty * adz + pextz * ady) > 0)) {
				var x = cpz * dx - cpx * dz;
				tmp2 = (x < 0 ? -x : x) - (pextz * adx + pextx * adz) > 0;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var x = cpx * dy - cpy * dx;
				tmp1 = (x < 0 ? -x : x) - (pextx * ady + pexty * adx) > 0;
			} else {
				tmp1 = true;
			}
			tmp = tmp1 ? false : true;
		}
		if(!tmp) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.rayCastRecursive(node._children[0],p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
		this.rayCastRecursive(node._children[1],p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
	}
	,convexCastRecursive: function(node,convex,begin,translation,callback) {
		var v = this._aabb.min;
		v.x = node._aabbMinX;
		v.y = node._aabbMinY;
		v.z = node._aabbMinZ;
		var v = this._aabb.max;
		v.x = node._aabbMaxX;
		v.y = node._aabbMaxY;
		v.z = node._aabbMaxZ;
		this._convexSweep.init(convex,begin,translation);
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		if(!(gjkEpa.computeClosestPointsImpl(this._convexSweep,this._aabb,begin,this.identity,null,false) == 0 && gjkEpa.distance <= 0)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.convexCastRecursive(node._children[0],convex,begin,translation,callback);
		this.convexCastRecursive(node._children[1],convex,begin,translation,callback);
	}
	,aabbTestRecursive: function(node,aabb,callback) {
		if(!(node._aabbMinX < aabb._maxX && node._aabbMaxX > aabb._minX && node._aabbMinY < aabb._maxY && node._aabbMaxY > aabb._minY && node._aabbMinZ < aabb._maxZ && node._aabbMaxZ > aabb._minZ)) {
			return;
		}
		if(node._height == 0) {
			callback.process(node._proxy);
			return;
		}
		this.aabbTestRecursive(node._children[0],aabb,callback);
		this.aabbTestRecursive(node._children[1],aabb,callback);
	}
	,createProxy: function(userData,aabb) {
		var p = new oimo_collision_broadphase_bvh_BvhProxy(userData,this._idCount++);
		this._numProxies++;
		if(this._proxyList == null) {
			this._proxyList = p;
			this._proxyListLast = p;
		} else {
			this._proxyListLast._next = p;
			p._prev = this._proxyListLast;
			this._proxyListLast = p;
		}
		var displacement = null;
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		var paddingVec;
		var paddingVecX;
		var paddingVecY;
		var paddingVecZ;
		paddingVecX = padding;
		paddingVecY = padding;
		paddingVecZ = padding;
		p._aabbMinX -= paddingVecX;
		p._aabbMinY -= paddingVecY;
		p._aabbMinZ -= paddingVecZ;
		p._aabbMaxX += paddingVecX;
		p._aabbMaxY += paddingVecY;
		p._aabbMaxZ += paddingVecZ;
		if(displacement != null) {
			var d;
			var dX;
			var dY;
			var dZ;
			var zero;
			var zeroX;
			var zeroY;
			var zeroZ;
			var addToMin;
			var addToMinX;
			var addToMinY;
			var addToMinZ;
			var addToMax;
			var addToMaxX;
			var addToMaxY;
			var addToMaxZ;
			zeroX = 0;
			zeroY = 0;
			zeroZ = 0;
			var v = displacement;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			addToMinX = zeroX < dX ? zeroX : dX;
			addToMinY = zeroY < dY ? zeroY : dY;
			addToMinZ = zeroZ < dZ ? zeroZ : dZ;
			addToMaxX = zeroX > dX ? zeroX : dX;
			addToMaxY = zeroY > dY ? zeroY : dY;
			addToMaxZ = zeroZ > dZ ? zeroZ : dZ;
			p._aabbMinX += addToMinX;
			p._aabbMinY += addToMinY;
			p._aabbMinZ += addToMinZ;
			p._aabbMaxX += addToMaxX;
			p._aabbMaxY += addToMaxY;
			p._aabbMaxZ += addToMaxZ;
		}
		var _this = this._tree;
		var first = _this._nodePool;
		if(first != null) {
			_this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var leaf = first;
		leaf._proxy = p;
		p._leaf = leaf;
		leaf._aabbMinX = p._aabbMinX;
		leaf._aabbMinY = p._aabbMinY;
		leaf._aabbMinZ = p._aabbMinZ;
		leaf._aabbMaxX = p._aabbMaxX;
		leaf._aabbMaxY = p._aabbMaxY;
		leaf._aabbMaxZ = p._aabbMaxZ;
		_this._numLeaves++;
		if(_this.leafList == null) {
			_this.leafList = leaf;
			_this.leafListLast = leaf;
		} else {
			_this.leafListLast._nextLeaf = leaf;
			leaf._prevLeaf = _this.leafListLast;
			_this.leafListLast = leaf;
		}
		if(_this._root == null) {
			_this._root = leaf;
		} else {
			var sibling = _this._root;
			while(sibling._height > 0) {
				var nextStep = _this._strategy._decideInsertion(sibling,leaf);
				if(nextStep == -1) {
					break;
				} else {
					sibling = sibling._children[nextStep];
				}
			}
			var parent = sibling._parent;
			var first = _this._nodePool;
			if(first != null) {
				_this._nodePool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_broadphase_bvh_BvhNode();
			}
			var node = first;
			if(parent == null) {
				_this._root = node;
			} else {
				var index = sibling._childIndex;
				parent._children[index] = node;
				node._parent = parent;
				node._childIndex = index;
			}
			var index = sibling._childIndex;
			node._children[index] = sibling;
			sibling._parent = node;
			sibling._childIndex = index;
			var index = sibling._childIndex ^ 1;
			node._children[index] = leaf;
			leaf._parent = node;
			leaf._childIndex = index;
			while(node != null) {
				if(_this._strategy._balancingEnabled) {
					var nh = node._height;
					if(nh >= 2) {
						var p1 = node._parent;
						var l = node._children[0];
						var r = node._children[1];
						var lh = l._height;
						var rh = r._height;
						var balance = lh - rh;
						var nodeIndex = node._childIndex;
						if(balance > 1) {
							var ll = l._children[0];
							var lr = l._children[1];
							var llh = ll._height;
							var lrh = lr._height;
							if(llh > lrh) {
								l._children[1] = node;
								node._parent = l;
								node._childIndex = 1;
								node._children[0] = lr;
								lr._parent = node;
								lr._childIndex = 0;
								var c1 = l._children[0];
								var c2 = l._children[1];
								l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
								l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
								l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
								l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
								l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
								l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
								var h1 = l._children[0]._height;
								var h2 = l._children[1]._height;
								l._height = (h1 > h2 ? h1 : h2) + 1;
								var c11 = node._children[0];
								var c21 = node._children[1];
								node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
								node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
								node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
								node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
								node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
								node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
								var h11 = node._children[0]._height;
								var h21 = node._children[1]._height;
								node._height = (h11 > h21 ? h11 : h21) + 1;
							} else {
								l._children[0] = node;
								node._parent = l;
								node._childIndex = 0;
								node._children[0] = ll;
								ll._parent = node;
								ll._childIndex = 0;
								var c12 = l._children[0];
								var c22 = l._children[1];
								l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
								l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
								l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
								l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
								l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
								l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
								var h12 = l._children[0]._height;
								var h22 = l._children[1]._height;
								l._height = (h12 > h22 ? h12 : h22) + 1;
								var c13 = node._children[0];
								var c23 = node._children[1];
								node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
								node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
								node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
								node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
								node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
								node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
								var h13 = node._children[0]._height;
								var h23 = node._children[1]._height;
								node._height = (h13 > h23 ? h13 : h23) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = l;
								l._parent = p1;
								l._childIndex = nodeIndex;
							} else {
								_this._root = l;
								l._parent = null;
							}
							node = l;
						} else if(balance < -1) {
							var rl = r._children[0];
							var rr = r._children[1];
							var rlh = rl._height;
							var rrh = rr._height;
							if(rlh > rrh) {
								r._children[1] = node;
								node._parent = r;
								node._childIndex = 1;
								node._children[1] = rr;
								rr._parent = node;
								rr._childIndex = 1;
								var c14 = r._children[0];
								var c24 = r._children[1];
								r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
								r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
								r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
								r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
								r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
								r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
								var h14 = r._children[0]._height;
								var h24 = r._children[1]._height;
								r._height = (h14 > h24 ? h14 : h24) + 1;
								var c15 = node._children[0];
								var c25 = node._children[1];
								node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
								node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
								node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
								node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
								node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
								node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
								var h15 = node._children[0]._height;
								var h25 = node._children[1]._height;
								node._height = (h15 > h25 ? h15 : h25) + 1;
							} else {
								r._children[0] = node;
								node._parent = r;
								node._childIndex = 0;
								node._children[1] = rl;
								rl._parent = node;
								rl._childIndex = 1;
								var c16 = r._children[0];
								var c26 = r._children[1];
								r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
								r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
								r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
								r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
								r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
								r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
								var h16 = r._children[0]._height;
								var h26 = r._children[1]._height;
								r._height = (h16 > h26 ? h16 : h26) + 1;
								var c17 = node._children[0];
								var c27 = node._children[1];
								node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
								node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
								node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
								node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
								node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
								node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
								var h17 = node._children[0]._height;
								var h27 = node._children[1]._height;
								node._height = (h17 > h27 ? h17 : h27) + 1;
							}
							if(p1 != null) {
								p1._children[nodeIndex] = r;
								r._parent = p1;
								r._childIndex = nodeIndex;
							} else {
								_this._root = r;
								r._parent = null;
							}
							node = r;
						}
					}
				}
				var h18 = node._children[0]._height;
				var h28 = node._children[1]._height;
				node._height = (h18 > h28 ? h18 : h28) + 1;
				var c18 = node._children[0];
				var c28 = node._children[1];
				node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
				node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
				node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
				node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
				node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
				node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
				node = node._parent;
			}
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newLength = this.numMovedProxies << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.numMovedProxies;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
		return p;
	}
	,destroyProxy: function(proxy) {
		this._numProxies--;
		var prev = proxy._prev;
		var next = proxy._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(proxy == this._proxyList) {
			this._proxyList = this._proxyList._next;
		}
		if(proxy == this._proxyListLast) {
			this._proxyListLast = this._proxyListLast._prev;
		}
		proxy._next = null;
		proxy._prev = null;
		var bvhProxy = proxy;
		var _this = this._tree;
		var leaf = bvhProxy._leaf;
		_this._numLeaves--;
		var prev = leaf._prevLeaf;
		var next = leaf._nextLeaf;
		if(prev != null) {
			prev._nextLeaf = next;
		}
		if(next != null) {
			next._prevLeaf = prev;
		}
		if(leaf == _this.leafList) {
			_this.leafList = _this.leafList._nextLeaf;
		}
		if(leaf == _this.leafListLast) {
			_this.leafListLast = _this.leafListLast._prevLeaf;
		}
		leaf._nextLeaf = null;
		leaf._prevLeaf = null;
		if(_this._root == leaf) {
			_this._root = null;
		} else {
			var parent = leaf._parent;
			var sibling = parent._children[leaf._childIndex ^ 1];
			var grandParent = parent._parent;
			if(grandParent == null) {
				sibling._parent = null;
				sibling._childIndex = 0;
				_this._root = sibling;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
			} else {
				sibling._parent = grandParent;
				var index = parent._childIndex;
				grandParent._children[index] = sibling;
				sibling._parent = grandParent;
				sibling._childIndex = index;
				parent._next = null;
				parent._childIndex = 0;
				parent._children[0] = null;
				parent._children[1] = null;
				parent._childIndex = 0;
				parent._parent = null;
				parent._height = 0;
				parent._proxy = null;
				parent._next = _this._nodePool;
				_this._nodePool = parent;
				var node = grandParent;
				while(node != null) {
					if(_this._strategy._balancingEnabled) {
						var nh = node._height;
						if(nh >= 2) {
							var p = node._parent;
							var l = node._children[0];
							var r = node._children[1];
							var lh = l._height;
							var rh = r._height;
							var balance = lh - rh;
							var nodeIndex = node._childIndex;
							if(balance > 1) {
								var ll = l._children[0];
								var lr = l._children[1];
								var llh = ll._height;
								var lrh = lr._height;
								if(llh > lrh) {
									l._children[1] = node;
									node._parent = l;
									node._childIndex = 1;
									node._children[0] = lr;
									lr._parent = node;
									lr._childIndex = 0;
									var c1 = l._children[0];
									var c2 = l._children[1];
									l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
									l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
									l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
									l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
									l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
									l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
									var h1 = l._children[0]._height;
									var h2 = l._children[1]._height;
									l._height = (h1 > h2 ? h1 : h2) + 1;
									var c11 = node._children[0];
									var c21 = node._children[1];
									node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
									node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
									node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
									node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
									node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
									node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
									var h11 = node._children[0]._height;
									var h21 = node._children[1]._height;
									node._height = (h11 > h21 ? h11 : h21) + 1;
								} else {
									l._children[0] = node;
									node._parent = l;
									node._childIndex = 0;
									node._children[0] = ll;
									ll._parent = node;
									ll._childIndex = 0;
									var c12 = l._children[0];
									var c22 = l._children[1];
									l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
									l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
									l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
									l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
									l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
									l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
									var h12 = l._children[0]._height;
									var h22 = l._children[1]._height;
									l._height = (h12 > h22 ? h12 : h22) + 1;
									var c13 = node._children[0];
									var c23 = node._children[1];
									node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
									node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
									node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
									node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
									node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
									node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
									var h13 = node._children[0]._height;
									var h23 = node._children[1]._height;
									node._height = (h13 > h23 ? h13 : h23) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = l;
									l._parent = p;
									l._childIndex = nodeIndex;
								} else {
									_this._root = l;
									l._parent = null;
								}
								node = l;
							} else if(balance < -1) {
								var rl = r._children[0];
								var rr = r._children[1];
								var rlh = rl._height;
								var rrh = rr._height;
								if(rlh > rrh) {
									r._children[1] = node;
									node._parent = r;
									node._childIndex = 1;
									node._children[1] = rr;
									rr._parent = node;
									rr._childIndex = 1;
									var c14 = r._children[0];
									var c24 = r._children[1];
									r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
									r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
									r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
									r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
									r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
									r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
									var h14 = r._children[0]._height;
									var h24 = r._children[1]._height;
									r._height = (h14 > h24 ? h14 : h24) + 1;
									var c15 = node._children[0];
									var c25 = node._children[1];
									node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
									node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
									node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
									node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
									node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
									node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
									var h15 = node._children[0]._height;
									var h25 = node._children[1]._height;
									node._height = (h15 > h25 ? h15 : h25) + 1;
								} else {
									r._children[0] = node;
									node._parent = r;
									node._childIndex = 0;
									node._children[1] = rl;
									rl._parent = node;
									rl._childIndex = 1;
									var c16 = r._children[0];
									var c26 = r._children[1];
									r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
									r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
									r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
									r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
									r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
									r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
									var h16 = r._children[0]._height;
									var h26 = r._children[1]._height;
									r._height = (h16 > h26 ? h16 : h26) + 1;
									var c17 = node._children[0];
									var c27 = node._children[1];
									node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
									node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
									node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
									node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
									node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
									node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
									var h17 = node._children[0]._height;
									var h27 = node._children[1]._height;
									node._height = (h17 > h27 ? h17 : h27) + 1;
								}
								if(p != null) {
									p._children[nodeIndex] = r;
									r._parent = p;
									r._childIndex = nodeIndex;
								} else {
									_this._root = r;
									r._parent = null;
								}
								node = r;
							}
						}
					}
					var h18 = node._children[0]._height;
					var h28 = node._children[1]._height;
					node._height = (h18 > h28 ? h18 : h28) + 1;
					var c18 = node._children[0];
					var c28 = node._children[1];
					node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
					node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
					node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
					node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
					node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
					node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
					node = node._parent;
				}
			}
		}
		bvhProxy._leaf = null;
		leaf._next = null;
		leaf._childIndex = 0;
		leaf._children[0] = null;
		leaf._children[1] = null;
		leaf._childIndex = 0;
		leaf._parent = null;
		leaf._height = 0;
		leaf._proxy = null;
		leaf._next = _this._nodePool;
		_this._nodePool = leaf;
		bvhProxy.userData = null;
		bvhProxy._next = null;
		bvhProxy._prev = null;
		if(bvhProxy._moved) {
			bvhProxy._moved = false;
		}
	}
	,moveProxy: function(proxy,aabb,displacement) {
		var p = proxy;
		if(p._aabbMinX <= aabb._minX && p._aabbMaxX >= aabb._maxX && p._aabbMinY <= aabb._minY && p._aabbMaxY >= aabb._maxY && p._aabbMinZ <= aabb._minZ && p._aabbMaxZ >= aabb._maxZ) {
			return;
		}
		p._aabbMinX = aabb._minX;
		p._aabbMinY = aabb._minY;
		p._aabbMinZ = aabb._minZ;
		p._aabbMaxX = aabb._maxX;
		p._aabbMaxY = aabb._maxY;
		p._aabbMaxZ = aabb._maxZ;
		var padding = oimo_common_Setting.bvhProxyPadding;
		var paddingVec;
		var paddingVecX;
		var paddingVecY;
		var paddingVecZ;
		paddingVecX = padding;
		paddingVecY = padding;
		paddingVecZ = padding;
		p._aabbMinX -= paddingVecX;
		p._aabbMinY -= paddingVecY;
		p._aabbMinZ -= paddingVecZ;
		p._aabbMaxX += paddingVecX;
		p._aabbMaxY += paddingVecY;
		p._aabbMaxZ += paddingVecZ;
		if(displacement != null) {
			var d;
			var dX;
			var dY;
			var dZ;
			var zero;
			var zeroX;
			var zeroY;
			var zeroZ;
			var addToMin;
			var addToMinX;
			var addToMinY;
			var addToMinZ;
			var addToMax;
			var addToMaxX;
			var addToMaxY;
			var addToMaxZ;
			zeroX = 0;
			zeroY = 0;
			zeroZ = 0;
			var v = displacement;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			addToMinX = zeroX < dX ? zeroX : dX;
			addToMinY = zeroY < dY ? zeroY : dY;
			addToMinZ = zeroZ < dZ ? zeroZ : dZ;
			addToMaxX = zeroX > dX ? zeroX : dX;
			addToMaxY = zeroY > dY ? zeroY : dY;
			addToMaxZ = zeroZ > dZ ? zeroZ : dZ;
			p._aabbMinX += addToMinX;
			p._aabbMinY += addToMinY;
			p._aabbMinZ += addToMinZ;
			p._aabbMaxX += addToMaxX;
			p._aabbMaxY += addToMaxY;
			p._aabbMaxZ += addToMaxZ;
		}
		if(!p._moved) {
			p._moved = true;
			if(this.movedProxies.length == this.numMovedProxies) {
				var newLength = this.numMovedProxies << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.numMovedProxies;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.movedProxies[i];
					this.movedProxies[i] = null;
				}
				this.movedProxies = newArray;
			}
			this.movedProxies[this.numMovedProxies++] = p;
		}
	}
	,collectPairs: function() {
		var p = this._proxyPairList;
		if(p != null) {
			while(true) {
				p._p1 = null;
				p._p2 = null;
				p = p._next;
				if(!(p != null)) {
					break;
				}
			}
			this._proxyPairList._next = this._proxyPairPool;
			this._proxyPairPool = this._proxyPairList;
			this._proxyPairList = null;
		}
		this._testCount = 0;
		if(this._numProxies < 2) {
			return;
		}
		var topDown = false;
		if(topDown) {
			while(this.numMovedProxies > 0) this.movedProxies[--this.numMovedProxies] = null;
			var _this = this._tree;
			if(_this._root != null) {
				if(_this._root != null) {
					_this.decomposeRecursive(_this._root);
					_this._root = null;
				}
				while(_this.tmp.length < _this._numLeaves) {
					var newLength = _this.tmp.length << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.tmp.length;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.tmp[i];
						_this.tmp[i] = null;
					}
					_this.tmp = newArray;
				}
				var idx = 0;
				var leaf = _this.leafList;
				while(leaf != null) {
					var n = leaf._nextLeaf;
					_this.tmp[idx] = leaf;
					++idx;
					leaf = n;
				}
				_this._root = _this.buildTopDownRecursive(_this.tmp,0,_this._numLeaves);
			}
			this.collide(this._tree._root,this._tree._root);
			return;
		}
		var incrementalCollision = this.numMovedProxies / this._numProxies < oimo_common_Setting.bvhIncrementalCollisionThreshold;
		var _g = 0;
		var _g1 = this.numMovedProxies;
		while(_g < _g1) {
			var i = _g++;
			var p = this.movedProxies[i];
			if(p._moved) {
				var _this = this._tree;
				var leaf = p._leaf;
				_this._numLeaves--;
				var prev = leaf._prevLeaf;
				var next = leaf._nextLeaf;
				if(prev != null) {
					prev._nextLeaf = next;
				}
				if(next != null) {
					next._prevLeaf = prev;
				}
				if(leaf == _this.leafList) {
					_this.leafList = _this.leafList._nextLeaf;
				}
				if(leaf == _this.leafListLast) {
					_this.leafListLast = _this.leafListLast._prevLeaf;
				}
				leaf._nextLeaf = null;
				leaf._prevLeaf = null;
				if(_this._root == leaf) {
					_this._root = null;
				} else {
					var parent = leaf._parent;
					var sibling = parent._children[leaf._childIndex ^ 1];
					var grandParent = parent._parent;
					if(grandParent == null) {
						sibling._parent = null;
						sibling._childIndex = 0;
						_this._root = sibling;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this._nodePool;
						_this._nodePool = parent;
					} else {
						sibling._parent = grandParent;
						var index = parent._childIndex;
						grandParent._children[index] = sibling;
						sibling._parent = grandParent;
						sibling._childIndex = index;
						parent._next = null;
						parent._childIndex = 0;
						parent._children[0] = null;
						parent._children[1] = null;
						parent._childIndex = 0;
						parent._parent = null;
						parent._height = 0;
						parent._proxy = null;
						parent._next = _this._nodePool;
						_this._nodePool = parent;
						var node = grandParent;
						while(node != null) {
							if(_this._strategy._balancingEnabled) {
								var nh = node._height;
								if(nh >= 2) {
									var p1 = node._parent;
									var l = node._children[0];
									var r = node._children[1];
									var lh = l._height;
									var rh = r._height;
									var balance = lh - rh;
									var nodeIndex = node._childIndex;
									if(balance > 1) {
										var ll = l._children[0];
										var lr = l._children[1];
										var llh = ll._height;
										var lrh = lr._height;
										if(llh > lrh) {
											l._children[1] = node;
											node._parent = l;
											node._childIndex = 1;
											node._children[0] = lr;
											lr._parent = node;
											lr._childIndex = 0;
											var c1 = l._children[0];
											var c2 = l._children[1];
											l._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
											l._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
											l._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
											l._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
											l._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
											l._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
											var h1 = l._children[0]._height;
											var h2 = l._children[1]._height;
											l._height = (h1 > h2 ? h1 : h2) + 1;
											var c11 = node._children[0];
											var c21 = node._children[1];
											node._aabbMinX = c11._aabbMinX < c21._aabbMinX ? c11._aabbMinX : c21._aabbMinX;
											node._aabbMinY = c11._aabbMinY < c21._aabbMinY ? c11._aabbMinY : c21._aabbMinY;
											node._aabbMinZ = c11._aabbMinZ < c21._aabbMinZ ? c11._aabbMinZ : c21._aabbMinZ;
											node._aabbMaxX = c11._aabbMaxX > c21._aabbMaxX ? c11._aabbMaxX : c21._aabbMaxX;
											node._aabbMaxY = c11._aabbMaxY > c21._aabbMaxY ? c11._aabbMaxY : c21._aabbMaxY;
											node._aabbMaxZ = c11._aabbMaxZ > c21._aabbMaxZ ? c11._aabbMaxZ : c21._aabbMaxZ;
											var h11 = node._children[0]._height;
											var h21 = node._children[1]._height;
											node._height = (h11 > h21 ? h11 : h21) + 1;
										} else {
											l._children[0] = node;
											node._parent = l;
											node._childIndex = 0;
											node._children[0] = ll;
											ll._parent = node;
											ll._childIndex = 0;
											var c12 = l._children[0];
											var c22 = l._children[1];
											l._aabbMinX = c12._aabbMinX < c22._aabbMinX ? c12._aabbMinX : c22._aabbMinX;
											l._aabbMinY = c12._aabbMinY < c22._aabbMinY ? c12._aabbMinY : c22._aabbMinY;
											l._aabbMinZ = c12._aabbMinZ < c22._aabbMinZ ? c12._aabbMinZ : c22._aabbMinZ;
											l._aabbMaxX = c12._aabbMaxX > c22._aabbMaxX ? c12._aabbMaxX : c22._aabbMaxX;
											l._aabbMaxY = c12._aabbMaxY > c22._aabbMaxY ? c12._aabbMaxY : c22._aabbMaxY;
											l._aabbMaxZ = c12._aabbMaxZ > c22._aabbMaxZ ? c12._aabbMaxZ : c22._aabbMaxZ;
											var h12 = l._children[0]._height;
											var h22 = l._children[1]._height;
											l._height = (h12 > h22 ? h12 : h22) + 1;
											var c13 = node._children[0];
											var c23 = node._children[1];
											node._aabbMinX = c13._aabbMinX < c23._aabbMinX ? c13._aabbMinX : c23._aabbMinX;
											node._aabbMinY = c13._aabbMinY < c23._aabbMinY ? c13._aabbMinY : c23._aabbMinY;
											node._aabbMinZ = c13._aabbMinZ < c23._aabbMinZ ? c13._aabbMinZ : c23._aabbMinZ;
											node._aabbMaxX = c13._aabbMaxX > c23._aabbMaxX ? c13._aabbMaxX : c23._aabbMaxX;
											node._aabbMaxY = c13._aabbMaxY > c23._aabbMaxY ? c13._aabbMaxY : c23._aabbMaxY;
											node._aabbMaxZ = c13._aabbMaxZ > c23._aabbMaxZ ? c13._aabbMaxZ : c23._aabbMaxZ;
											var h13 = node._children[0]._height;
											var h23 = node._children[1]._height;
											node._height = (h13 > h23 ? h13 : h23) + 1;
										}
										if(p1 != null) {
											p1._children[nodeIndex] = l;
											l._parent = p1;
											l._childIndex = nodeIndex;
										} else {
											_this._root = l;
											l._parent = null;
										}
										node = l;
									} else if(balance < -1) {
										var rl = r._children[0];
										var rr = r._children[1];
										var rlh = rl._height;
										var rrh = rr._height;
										if(rlh > rrh) {
											r._children[1] = node;
											node._parent = r;
											node._childIndex = 1;
											node._children[1] = rr;
											rr._parent = node;
											rr._childIndex = 1;
											var c14 = r._children[0];
											var c24 = r._children[1];
											r._aabbMinX = c14._aabbMinX < c24._aabbMinX ? c14._aabbMinX : c24._aabbMinX;
											r._aabbMinY = c14._aabbMinY < c24._aabbMinY ? c14._aabbMinY : c24._aabbMinY;
											r._aabbMinZ = c14._aabbMinZ < c24._aabbMinZ ? c14._aabbMinZ : c24._aabbMinZ;
											r._aabbMaxX = c14._aabbMaxX > c24._aabbMaxX ? c14._aabbMaxX : c24._aabbMaxX;
											r._aabbMaxY = c14._aabbMaxY > c24._aabbMaxY ? c14._aabbMaxY : c24._aabbMaxY;
											r._aabbMaxZ = c14._aabbMaxZ > c24._aabbMaxZ ? c14._aabbMaxZ : c24._aabbMaxZ;
											var h14 = r._children[0]._height;
											var h24 = r._children[1]._height;
											r._height = (h14 > h24 ? h14 : h24) + 1;
											var c15 = node._children[0];
											var c25 = node._children[1];
											node._aabbMinX = c15._aabbMinX < c25._aabbMinX ? c15._aabbMinX : c25._aabbMinX;
											node._aabbMinY = c15._aabbMinY < c25._aabbMinY ? c15._aabbMinY : c25._aabbMinY;
											node._aabbMinZ = c15._aabbMinZ < c25._aabbMinZ ? c15._aabbMinZ : c25._aabbMinZ;
											node._aabbMaxX = c15._aabbMaxX > c25._aabbMaxX ? c15._aabbMaxX : c25._aabbMaxX;
											node._aabbMaxY = c15._aabbMaxY > c25._aabbMaxY ? c15._aabbMaxY : c25._aabbMaxY;
											node._aabbMaxZ = c15._aabbMaxZ > c25._aabbMaxZ ? c15._aabbMaxZ : c25._aabbMaxZ;
											var h15 = node._children[0]._height;
											var h25 = node._children[1]._height;
											node._height = (h15 > h25 ? h15 : h25) + 1;
										} else {
											r._children[0] = node;
											node._parent = r;
											node._childIndex = 0;
											node._children[1] = rl;
											rl._parent = node;
											rl._childIndex = 1;
											var c16 = r._children[0];
											var c26 = r._children[1];
											r._aabbMinX = c16._aabbMinX < c26._aabbMinX ? c16._aabbMinX : c26._aabbMinX;
											r._aabbMinY = c16._aabbMinY < c26._aabbMinY ? c16._aabbMinY : c26._aabbMinY;
											r._aabbMinZ = c16._aabbMinZ < c26._aabbMinZ ? c16._aabbMinZ : c26._aabbMinZ;
											r._aabbMaxX = c16._aabbMaxX > c26._aabbMaxX ? c16._aabbMaxX : c26._aabbMaxX;
											r._aabbMaxY = c16._aabbMaxY > c26._aabbMaxY ? c16._aabbMaxY : c26._aabbMaxY;
											r._aabbMaxZ = c16._aabbMaxZ > c26._aabbMaxZ ? c16._aabbMaxZ : c26._aabbMaxZ;
											var h16 = r._children[0]._height;
											var h26 = r._children[1]._height;
											r._height = (h16 > h26 ? h16 : h26) + 1;
											var c17 = node._children[0];
											var c27 = node._children[1];
											node._aabbMinX = c17._aabbMinX < c27._aabbMinX ? c17._aabbMinX : c27._aabbMinX;
											node._aabbMinY = c17._aabbMinY < c27._aabbMinY ? c17._aabbMinY : c27._aabbMinY;
											node._aabbMinZ = c17._aabbMinZ < c27._aabbMinZ ? c17._aabbMinZ : c27._aabbMinZ;
											node._aabbMaxX = c17._aabbMaxX > c27._aabbMaxX ? c17._aabbMaxX : c27._aabbMaxX;
											node._aabbMaxY = c17._aabbMaxY > c27._aabbMaxY ? c17._aabbMaxY : c27._aabbMaxY;
											node._aabbMaxZ = c17._aabbMaxZ > c27._aabbMaxZ ? c17._aabbMaxZ : c27._aabbMaxZ;
											var h17 = node._children[0]._height;
											var h27 = node._children[1]._height;
											node._height = (h17 > h27 ? h17 : h27) + 1;
										}
										if(p1 != null) {
											p1._children[nodeIndex] = r;
											r._parent = p1;
											r._childIndex = nodeIndex;
										} else {
											_this._root = r;
											r._parent = null;
										}
										node = r;
									}
								}
							}
							var h18 = node._children[0]._height;
							var h28 = node._children[1]._height;
							node._height = (h18 > h28 ? h18 : h28) + 1;
							var c18 = node._children[0];
							var c28 = node._children[1];
							node._aabbMinX = c18._aabbMinX < c28._aabbMinX ? c18._aabbMinX : c28._aabbMinX;
							node._aabbMinY = c18._aabbMinY < c28._aabbMinY ? c18._aabbMinY : c28._aabbMinY;
							node._aabbMinZ = c18._aabbMinZ < c28._aabbMinZ ? c18._aabbMinZ : c28._aabbMinZ;
							node._aabbMaxX = c18._aabbMaxX > c28._aabbMaxX ? c18._aabbMaxX : c28._aabbMaxX;
							node._aabbMaxY = c18._aabbMaxY > c28._aabbMaxY ? c18._aabbMaxY : c28._aabbMaxY;
							node._aabbMaxZ = c18._aabbMaxZ > c28._aabbMaxZ ? c18._aabbMaxZ : c28._aabbMaxZ;
							node = node._parent;
						}
					}
				}
				p._leaf = null;
				leaf._next = null;
				leaf._childIndex = 0;
				leaf._children[0] = null;
				leaf._children[1] = null;
				leaf._childIndex = 0;
				leaf._parent = null;
				leaf._height = 0;
				leaf._proxy = null;
				leaf._next = _this._nodePool;
				_this._nodePool = leaf;
				var _this1 = this._tree;
				var first = _this1._nodePool;
				if(first != null) {
					_this1._nodePool = first._next;
					first._next = null;
				} else {
					first = new oimo_collision_broadphase_bvh_BvhNode();
				}
				var leaf1 = first;
				leaf1._proxy = p;
				p._leaf = leaf1;
				leaf1._aabbMinX = p._aabbMinX;
				leaf1._aabbMinY = p._aabbMinY;
				leaf1._aabbMinZ = p._aabbMinZ;
				leaf1._aabbMaxX = p._aabbMaxX;
				leaf1._aabbMaxY = p._aabbMaxY;
				leaf1._aabbMaxZ = p._aabbMaxZ;
				_this1._numLeaves++;
				if(_this1.leafList == null) {
					_this1.leafList = leaf1;
					_this1.leafListLast = leaf1;
				} else {
					_this1.leafListLast._nextLeaf = leaf1;
					leaf1._prevLeaf = _this1.leafListLast;
					_this1.leafListLast = leaf1;
				}
				if(_this1._root == null) {
					_this1._root = leaf1;
				} else {
					var sibling1 = _this1._root;
					while(sibling1._height > 0) {
						var nextStep = _this1._strategy._decideInsertion(sibling1,leaf1);
						if(nextStep == -1) {
							break;
						} else {
							sibling1 = sibling1._children[nextStep];
						}
					}
					var parent1 = sibling1._parent;
					var first1 = _this1._nodePool;
					if(first1 != null) {
						_this1._nodePool = first1._next;
						first1._next = null;
					} else {
						first1 = new oimo_collision_broadphase_bvh_BvhNode();
					}
					var node1 = first1;
					if(parent1 == null) {
						_this1._root = node1;
					} else {
						var index1 = sibling1._childIndex;
						parent1._children[index1] = node1;
						node1._parent = parent1;
						node1._childIndex = index1;
					}
					var index2 = sibling1._childIndex;
					node1._children[index2] = sibling1;
					sibling1._parent = node1;
					sibling1._childIndex = index2;
					var index3 = sibling1._childIndex ^ 1;
					node1._children[index3] = leaf1;
					leaf1._parent = node1;
					leaf1._childIndex = index3;
					while(node1 != null) {
						if(_this1._strategy._balancingEnabled) {
							var nh1 = node1._height;
							if(nh1 >= 2) {
								var p2 = node1._parent;
								var l1 = node1._children[0];
								var r1 = node1._children[1];
								var lh1 = l1._height;
								var rh1 = r1._height;
								var balance1 = lh1 - rh1;
								var nodeIndex1 = node1._childIndex;
								if(balance1 > 1) {
									var ll1 = l1._children[0];
									var lr1 = l1._children[1];
									var llh1 = ll1._height;
									var lrh1 = lr1._height;
									if(llh1 > lrh1) {
										l1._children[1] = node1;
										node1._parent = l1;
										node1._childIndex = 1;
										node1._children[0] = lr1;
										lr1._parent = node1;
										lr1._childIndex = 0;
										var c19 = l1._children[0];
										var c29 = l1._children[1];
										l1._aabbMinX = c19._aabbMinX < c29._aabbMinX ? c19._aabbMinX : c29._aabbMinX;
										l1._aabbMinY = c19._aabbMinY < c29._aabbMinY ? c19._aabbMinY : c29._aabbMinY;
										l1._aabbMinZ = c19._aabbMinZ < c29._aabbMinZ ? c19._aabbMinZ : c29._aabbMinZ;
										l1._aabbMaxX = c19._aabbMaxX > c29._aabbMaxX ? c19._aabbMaxX : c29._aabbMaxX;
										l1._aabbMaxY = c19._aabbMaxY > c29._aabbMaxY ? c19._aabbMaxY : c29._aabbMaxY;
										l1._aabbMaxZ = c19._aabbMaxZ > c29._aabbMaxZ ? c19._aabbMaxZ : c29._aabbMaxZ;
										var h19 = l1._children[0]._height;
										var h29 = l1._children[1]._height;
										l1._height = (h19 > h29 ? h19 : h29) + 1;
										var c110 = node1._children[0];
										var c210 = node1._children[1];
										node1._aabbMinX = c110._aabbMinX < c210._aabbMinX ? c110._aabbMinX : c210._aabbMinX;
										node1._aabbMinY = c110._aabbMinY < c210._aabbMinY ? c110._aabbMinY : c210._aabbMinY;
										node1._aabbMinZ = c110._aabbMinZ < c210._aabbMinZ ? c110._aabbMinZ : c210._aabbMinZ;
										node1._aabbMaxX = c110._aabbMaxX > c210._aabbMaxX ? c110._aabbMaxX : c210._aabbMaxX;
										node1._aabbMaxY = c110._aabbMaxY > c210._aabbMaxY ? c110._aabbMaxY : c210._aabbMaxY;
										node1._aabbMaxZ = c110._aabbMaxZ > c210._aabbMaxZ ? c110._aabbMaxZ : c210._aabbMaxZ;
										var h110 = node1._children[0]._height;
										var h210 = node1._children[1]._height;
										node1._height = (h110 > h210 ? h110 : h210) + 1;
									} else {
										l1._children[0] = node1;
										node1._parent = l1;
										node1._childIndex = 0;
										node1._children[0] = ll1;
										ll1._parent = node1;
										ll1._childIndex = 0;
										var c111 = l1._children[0];
										var c211 = l1._children[1];
										l1._aabbMinX = c111._aabbMinX < c211._aabbMinX ? c111._aabbMinX : c211._aabbMinX;
										l1._aabbMinY = c111._aabbMinY < c211._aabbMinY ? c111._aabbMinY : c211._aabbMinY;
										l1._aabbMinZ = c111._aabbMinZ < c211._aabbMinZ ? c111._aabbMinZ : c211._aabbMinZ;
										l1._aabbMaxX = c111._aabbMaxX > c211._aabbMaxX ? c111._aabbMaxX : c211._aabbMaxX;
										l1._aabbMaxY = c111._aabbMaxY > c211._aabbMaxY ? c111._aabbMaxY : c211._aabbMaxY;
										l1._aabbMaxZ = c111._aabbMaxZ > c211._aabbMaxZ ? c111._aabbMaxZ : c211._aabbMaxZ;
										var h111 = l1._children[0]._height;
										var h211 = l1._children[1]._height;
										l1._height = (h111 > h211 ? h111 : h211) + 1;
										var c112 = node1._children[0];
										var c212 = node1._children[1];
										node1._aabbMinX = c112._aabbMinX < c212._aabbMinX ? c112._aabbMinX : c212._aabbMinX;
										node1._aabbMinY = c112._aabbMinY < c212._aabbMinY ? c112._aabbMinY : c212._aabbMinY;
										node1._aabbMinZ = c112._aabbMinZ < c212._aabbMinZ ? c112._aabbMinZ : c212._aabbMinZ;
										node1._aabbMaxX = c112._aabbMaxX > c212._aabbMaxX ? c112._aabbMaxX : c212._aabbMaxX;
										node1._aabbMaxY = c112._aabbMaxY > c212._aabbMaxY ? c112._aabbMaxY : c212._aabbMaxY;
										node1._aabbMaxZ = c112._aabbMaxZ > c212._aabbMaxZ ? c112._aabbMaxZ : c212._aabbMaxZ;
										var h112 = node1._children[0]._height;
										var h212 = node1._children[1]._height;
										node1._height = (h112 > h212 ? h112 : h212) + 1;
									}
									if(p2 != null) {
										p2._children[nodeIndex1] = l1;
										l1._parent = p2;
										l1._childIndex = nodeIndex1;
									} else {
										_this1._root = l1;
										l1._parent = null;
									}
									node1 = l1;
								} else if(balance1 < -1) {
									var rl1 = r1._children[0];
									var rr1 = r1._children[1];
									var rlh1 = rl1._height;
									var rrh1 = rr1._height;
									if(rlh1 > rrh1) {
										r1._children[1] = node1;
										node1._parent = r1;
										node1._childIndex = 1;
										node1._children[1] = rr1;
										rr1._parent = node1;
										rr1._childIndex = 1;
										var c113 = r1._children[0];
										var c213 = r1._children[1];
										r1._aabbMinX = c113._aabbMinX < c213._aabbMinX ? c113._aabbMinX : c213._aabbMinX;
										r1._aabbMinY = c113._aabbMinY < c213._aabbMinY ? c113._aabbMinY : c213._aabbMinY;
										r1._aabbMinZ = c113._aabbMinZ < c213._aabbMinZ ? c113._aabbMinZ : c213._aabbMinZ;
										r1._aabbMaxX = c113._aabbMaxX > c213._aabbMaxX ? c113._aabbMaxX : c213._aabbMaxX;
										r1._aabbMaxY = c113._aabbMaxY > c213._aabbMaxY ? c113._aabbMaxY : c213._aabbMaxY;
										r1._aabbMaxZ = c113._aabbMaxZ > c213._aabbMaxZ ? c113._aabbMaxZ : c213._aabbMaxZ;
										var h113 = r1._children[0]._height;
										var h213 = r1._children[1]._height;
										r1._height = (h113 > h213 ? h113 : h213) + 1;
										var c114 = node1._children[0];
										var c214 = node1._children[1];
										node1._aabbMinX = c114._aabbMinX < c214._aabbMinX ? c114._aabbMinX : c214._aabbMinX;
										node1._aabbMinY = c114._aabbMinY < c214._aabbMinY ? c114._aabbMinY : c214._aabbMinY;
										node1._aabbMinZ = c114._aabbMinZ < c214._aabbMinZ ? c114._aabbMinZ : c214._aabbMinZ;
										node1._aabbMaxX = c114._aabbMaxX > c214._aabbMaxX ? c114._aabbMaxX : c214._aabbMaxX;
										node1._aabbMaxY = c114._aabbMaxY > c214._aabbMaxY ? c114._aabbMaxY : c214._aabbMaxY;
										node1._aabbMaxZ = c114._aabbMaxZ > c214._aabbMaxZ ? c114._aabbMaxZ : c214._aabbMaxZ;
										var h114 = node1._children[0]._height;
										var h214 = node1._children[1]._height;
										node1._height = (h114 > h214 ? h114 : h214) + 1;
									} else {
										r1._children[0] = node1;
										node1._parent = r1;
										node1._childIndex = 0;
										node1._children[1] = rl1;
										rl1._parent = node1;
										rl1._childIndex = 1;
										var c115 = r1._children[0];
										var c215 = r1._children[1];
										r1._aabbMinX = c115._aabbMinX < c215._aabbMinX ? c115._aabbMinX : c215._aabbMinX;
										r1._aabbMinY = c115._aabbMinY < c215._aabbMinY ? c115._aabbMinY : c215._aabbMinY;
										r1._aabbMinZ = c115._aabbMinZ < c215._aabbMinZ ? c115._aabbMinZ : c215._aabbMinZ;
										r1._aabbMaxX = c115._aabbMaxX > c215._aabbMaxX ? c115._aabbMaxX : c215._aabbMaxX;
										r1._aabbMaxY = c115._aabbMaxY > c215._aabbMaxY ? c115._aabbMaxY : c215._aabbMaxY;
										r1._aabbMaxZ = c115._aabbMaxZ > c215._aabbMaxZ ? c115._aabbMaxZ : c215._aabbMaxZ;
										var h115 = r1._children[0]._height;
										var h215 = r1._children[1]._height;
										r1._height = (h115 > h215 ? h115 : h215) + 1;
										var c116 = node1._children[0];
										var c216 = node1._children[1];
										node1._aabbMinX = c116._aabbMinX < c216._aabbMinX ? c116._aabbMinX : c216._aabbMinX;
										node1._aabbMinY = c116._aabbMinY < c216._aabbMinY ? c116._aabbMinY : c216._aabbMinY;
										node1._aabbMinZ = c116._aabbMinZ < c216._aabbMinZ ? c116._aabbMinZ : c216._aabbMinZ;
										node1._aabbMaxX = c116._aabbMaxX > c216._aabbMaxX ? c116._aabbMaxX : c216._aabbMaxX;
										node1._aabbMaxY = c116._aabbMaxY > c216._aabbMaxY ? c116._aabbMaxY : c216._aabbMaxY;
										node1._aabbMaxZ = c116._aabbMaxZ > c216._aabbMaxZ ? c116._aabbMaxZ : c216._aabbMaxZ;
										var h116 = node1._children[0]._height;
										var h216 = node1._children[1]._height;
										node1._height = (h116 > h216 ? h116 : h216) + 1;
									}
									if(p2 != null) {
										p2._children[nodeIndex1] = r1;
										r1._parent = p2;
										r1._childIndex = nodeIndex1;
									} else {
										_this1._root = r1;
										r1._parent = null;
									}
									node1 = r1;
								}
							}
						}
						var h117 = node1._children[0]._height;
						var h217 = node1._children[1]._height;
						node1._height = (h117 > h217 ? h117 : h217) + 1;
						var c117 = node1._children[0];
						var c217 = node1._children[1];
						node1._aabbMinX = c117._aabbMinX < c217._aabbMinX ? c117._aabbMinX : c217._aabbMinX;
						node1._aabbMinY = c117._aabbMinY < c217._aabbMinY ? c117._aabbMinY : c217._aabbMinY;
						node1._aabbMinZ = c117._aabbMinZ < c217._aabbMinZ ? c117._aabbMinZ : c217._aabbMinZ;
						node1._aabbMaxX = c117._aabbMaxX > c217._aabbMaxX ? c117._aabbMaxX : c217._aabbMaxX;
						node1._aabbMaxY = c117._aabbMaxY > c217._aabbMaxY ? c117._aabbMaxY : c217._aabbMaxY;
						node1._aabbMaxZ = c117._aabbMaxZ > c217._aabbMaxZ ? c117._aabbMaxZ : c217._aabbMaxZ;
						node1 = node1._parent;
					}
				}
				if(incrementalCollision) {
					this.collide(this._tree._root,p._leaf);
				}
				p._moved = false;
			}
			this.movedProxies[i] = null;
		}
		if(!incrementalCollision) {
			this.collide(this._tree._root,this._tree._root);
		}
		this.numMovedProxies = 0;
	}
	,rayCast: function(begin,end,callback) {
		if(this._tree._root == null) {
			return;
		}
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var v = begin;
		p1X = v.x;
		p1Y = v.y;
		p1Z = v.z;
		var v = end;
		p2X = v.x;
		p2Y = v.y;
		p2Z = v.z;
		this.rayCastRecursive(this._tree._root,p1X,p1Y,p1Z,p2X,p2Y,p2Z,callback);
	}
	,convexCast: function(convex,begin,translation,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.convexCastRecursive(this._tree._root,convex,begin,translation,callback);
	}
	,aabbTest: function(aabb,callback) {
		if(this._tree._root == null) {
			return;
		}
		this.aabbTestRecursive(this._tree._root,aabb,callback);
	}
	,getTreeBalance: function() {
		return this._tree._getBalance();
	}
	,__class__: oimo_collision_broadphase_bvh_BvhBroadPhase
});
var oimo_collision_broadphase_bvh_BvhInsertionStrategy = function() { };
oimo_collision_broadphase_bvh_BvhInsertionStrategy.__name__ = "oimo.collision.broadphase.bvh.BvhInsertionStrategy";
var oimo_collision_broadphase_bvh_BvhNode = function() {
	this._next = null;
	this._prevLeaf = null;
	this._nextLeaf = null;
	var this1 = new Array(2);
	this._children = this1;
	this._childIndex = 0;
	this._parent = null;
	this._height = 0;
	this._proxy = null;
	this._aabbMinX = 0;
	this._aabbMinY = 0;
	this._aabbMinZ = 0;
	this._aabbMaxX = 0;
	this._aabbMaxY = 0;
	this._aabbMaxZ = 0;
};
oimo_collision_broadphase_bvh_BvhNode.__name__ = "oimo.collision.broadphase.bvh.BvhNode";
oimo_collision_broadphase_bvh_BvhNode.prototype = {
	__class__: oimo_collision_broadphase_bvh_BvhNode
};
var oimo_collision_broadphase_bvh_BvhProxy = function(userData,id) {
	oimo_collision_broadphase_Proxy.call(this,userData,id);
	this._leaf = null;
	this._moved = false;
};
oimo_collision_broadphase_bvh_BvhProxy.__name__ = "oimo.collision.broadphase.bvh.BvhProxy";
oimo_collision_broadphase_bvh_BvhProxy.__super__ = oimo_collision_broadphase_Proxy;
oimo_collision_broadphase_bvh_BvhProxy.prototype = $extend(oimo_collision_broadphase_Proxy.prototype,{
	__class__: oimo_collision_broadphase_bvh_BvhProxy
});
var oimo_collision_broadphase_bvh_BvhStrategy = function() {
	this._insertionStrategy = 0;
	this._balancingEnabled = false;
};
oimo_collision_broadphase_bvh_BvhStrategy.__name__ = "oimo.collision.broadphase.bvh.BvhStrategy";
oimo_collision_broadphase_bvh_BvhStrategy.prototype = {
	_decideInsertion: function(currentNode,leaf) {
		switch(this._insertionStrategy) {
		case 0:
			var center;
			var centerX;
			var centerY;
			var centerZ;
			centerX = leaf._aabbMinX + leaf._aabbMaxX;
			centerY = leaf._aabbMinY + leaf._aabbMaxY;
			centerZ = leaf._aabbMinZ + leaf._aabbMaxZ;
			var c1 = currentNode._children[0];
			var c2 = currentNode._children[1];
			var diff1;
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = c1._aabbMinX + c1._aabbMaxX;
			diff1Y = c1._aabbMinY + c1._aabbMaxY;
			diff1Z = c1._aabbMinZ + c1._aabbMaxZ;
			diff2X = c2._aabbMinX + c2._aabbMaxX;
			diff2Y = c2._aabbMinY + c2._aabbMaxY;
			diff2Z = c2._aabbMinZ + c2._aabbMaxZ;
			diff1X -= centerX;
			diff1Y -= centerY;
			diff1Z -= centerZ;
			diff2X -= centerX;
			diff2Y -= centerY;
			diff2Z -= centerZ;
			var dist1 = diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z;
			var dist2 = diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z;
			if(dist1 < dist2) {
				return 0;
			} else {
				return 1;
			}
			break;
		case 1:
			var c1 = currentNode._children[0];
			var c2 = currentNode._children[1];
			var ex = currentNode._aabbMaxX - currentNode._aabbMinX;
			var ey = currentNode._aabbMaxY - currentNode._aabbMinY;
			var ez = currentNode._aabbMaxZ - currentNode._aabbMinZ;
			var oldArea = (ex * (ey + ez) + ey * ez) * 2;
			var combinedMin;
			var combinedMinX;
			var combinedMinY;
			var combinedMinZ;
			var combinedMax;
			var combinedMaxX;
			var combinedMaxY;
			var combinedMaxZ;
			combinedMinX = currentNode._aabbMinX < leaf._aabbMinX ? currentNode._aabbMinX : leaf._aabbMinX;
			combinedMinY = currentNode._aabbMinY < leaf._aabbMinY ? currentNode._aabbMinY : leaf._aabbMinY;
			combinedMinZ = currentNode._aabbMinZ < leaf._aabbMinZ ? currentNode._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = currentNode._aabbMaxX > leaf._aabbMaxX ? currentNode._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = currentNode._aabbMaxY > leaf._aabbMaxY ? currentNode._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = currentNode._aabbMaxZ > leaf._aabbMaxZ ? currentNode._aabbMaxZ : leaf._aabbMaxZ;
			var ex = combinedMaxX - combinedMinX;
			var ey = combinedMaxY - combinedMinY;
			var ez = combinedMaxZ - combinedMinZ;
			var newArea = (ex * (ey + ez) + ey * ez) * 2;
			var creatingCost = newArea * 2;
			var incrementalCost = (newArea - oldArea) * 2;
			var descendingCost1 = incrementalCost;
			combinedMinX = c1._aabbMinX < leaf._aabbMinX ? c1._aabbMinX : leaf._aabbMinX;
			combinedMinY = c1._aabbMinY < leaf._aabbMinY ? c1._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c1._aabbMinZ < leaf._aabbMinZ ? c1._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c1._aabbMaxX > leaf._aabbMaxX ? c1._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c1._aabbMaxY > leaf._aabbMaxY ? c1._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c1._aabbMaxZ > leaf._aabbMaxZ ? c1._aabbMaxZ : leaf._aabbMaxZ;
			if(c1._height == 0) {
				var ex = combinedMaxX - combinedMinX;
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				descendingCost1 += (ex * (ey + ez) + ey * ez) * 2;
			} else {
				var ex = combinedMaxX - combinedMinX;
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				var ex1 = c1._aabbMaxX - c1._aabbMinX;
				var ey1 = c1._aabbMaxY - c1._aabbMinY;
				var ez1 = c1._aabbMaxZ - c1._aabbMinZ;
				descendingCost1 += (ex * (ey + ez) + ey * ez) * 2 - (ex1 * (ey1 + ez1) + ey1 * ez1) * 2;
			}
			var descendingCost2 = incrementalCost;
			combinedMinX = c2._aabbMinX < leaf._aabbMinX ? c2._aabbMinX : leaf._aabbMinX;
			combinedMinY = c2._aabbMinY < leaf._aabbMinY ? c2._aabbMinY : leaf._aabbMinY;
			combinedMinZ = c2._aabbMinZ < leaf._aabbMinZ ? c2._aabbMinZ : leaf._aabbMinZ;
			combinedMaxX = c2._aabbMaxX > leaf._aabbMaxX ? c2._aabbMaxX : leaf._aabbMaxX;
			combinedMaxY = c2._aabbMaxY > leaf._aabbMaxY ? c2._aabbMaxY : leaf._aabbMaxY;
			combinedMaxZ = c2._aabbMaxZ > leaf._aabbMaxZ ? c2._aabbMaxZ : leaf._aabbMaxZ;
			if(c2._height == 0) {
				var ex = combinedMaxX - combinedMinX;
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				descendingCost2 += (ex * (ey + ez) + ey * ez) * 2;
			} else {
				var ex = combinedMaxX - combinedMinX;
				var ey = combinedMaxY - combinedMinY;
				var ez = combinedMaxZ - combinedMinZ;
				var ex1 = c2._aabbMaxX - c2._aabbMinX;
				var ey1 = c2._aabbMaxY - c2._aabbMinY;
				var ez1 = c2._aabbMaxZ - c2._aabbMinZ;
				descendingCost2 += (ex * (ey + ez) + ey * ez) * 2 - (ex1 * (ey1 + ez1) + ey1 * ez1) * 2;
			}
			if(creatingCost < descendingCost1) {
				if(creatingCost < descendingCost2) {
					return -1;
				} else {
					return 1;
				}
			} else if(descendingCost1 < descendingCost2) {
				return 0;
			} else {
				return 1;
			}
			break;
		default:
			haxe_Log.trace("invalid BVH insertion strategy: " + this._insertionStrategy,{ fileName : "oimo/collision/broadphase/bvh/BvhStrategy.hx", lineNumber : 37, className : "oimo.collision.broadphase.bvh.BvhStrategy", methodName : "_decideInsertion"});
			return -1;
		}
	}
	,_splitLeaves: function(leaves,from,until) {
		var invN = 1.0 / (until - from);
		var centerMean;
		var centerMeanX;
		var centerMeanY;
		var centerMeanZ;
		centerMeanX = 0;
		centerMeanY = 0;
		centerMeanZ = 0;
		var _g = from;
		var _g1 = until;
		while(_g < _g1) {
			var i = _g++;
			var leaf = leaves[i];
			leaf._tmpX = leaf._aabbMaxX + leaf._aabbMinX;
			leaf._tmpY = leaf._aabbMaxY + leaf._aabbMinY;
			leaf._tmpZ = leaf._aabbMaxZ + leaf._aabbMinZ;
			centerMeanX += leaf._tmpX;
			centerMeanY += leaf._tmpY;
			centerMeanZ += leaf._tmpZ;
		}
		centerMeanX *= invN;
		centerMeanY *= invN;
		centerMeanZ *= invN;
		var variance;
		var varianceX;
		var varianceY;
		var varianceZ;
		varianceX = 0;
		varianceY = 0;
		varianceZ = 0;
		var _g = from;
		var _g1 = until;
		while(_g < _g1) {
			var i = _g++;
			var leaf = leaves[i];
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = leaf._tmpX - centerMeanX;
			diffY = leaf._tmpY - centerMeanY;
			diffZ = leaf._tmpZ - centerMeanZ;
			diffX *= diffX;
			diffY *= diffY;
			diffZ *= diffZ;
			varianceX += diffX;
			varianceY += diffY;
			varianceZ += diffZ;
		}
		var varX = varianceX;
		var varY = varianceY;
		var varZ = varianceZ;
		var l = from;
		var r = until - 1;
		if(varX > varY) {
			if(varX > varZ) {
				var mean = centerMeanX;
				while(true) {
					while(true) {
						var leaf = leaves[l];
						if(leaf._tmpX <= mean) {
							break;
						}
						++l;
					}
					while(true) {
						var leaf1 = leaves[r];
						if(leaf1._tmpX >= mean) {
							break;
						}
						--r;
					}
					if(l >= r) {
						break;
					}
					var tmp = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp;
					++l;
					--r;
				}
			} else {
				var mean = centerMeanZ;
				while(true) {
					while(true) {
						var leaf = leaves[l];
						if(leaf._tmpZ <= mean) {
							break;
						}
						++l;
					}
					while(true) {
						var leaf1 = leaves[r];
						if(leaf1._tmpZ >= mean) {
							break;
						}
						--r;
					}
					if(l >= r) {
						break;
					}
					var tmp = leaves[l];
					leaves[l] = leaves[r];
					leaves[r] = tmp;
					++l;
					--r;
				}
			}
		} else if(varY > varZ) {
			var mean = centerMeanY;
			while(true) {
				while(true) {
					var leaf = leaves[l];
					if(leaf._tmpY <= mean) {
						break;
					}
					++l;
				}
				while(true) {
					var leaf1 = leaves[r];
					if(leaf1._tmpY >= mean) {
						break;
					}
					--r;
				}
				if(l >= r) {
					break;
				}
				var tmp = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp;
				++l;
				--r;
			}
		} else {
			var mean = centerMeanZ;
			while(true) {
				while(true) {
					var leaf = leaves[l];
					if(leaf._tmpZ <= mean) {
						break;
					}
					++l;
				}
				while(true) {
					var leaf1 = leaves[r];
					if(leaf1._tmpZ >= mean) {
						break;
					}
					--r;
				}
				if(l >= r) {
					break;
				}
				var tmp = leaves[l];
				leaves[l] = leaves[r];
				leaves[r] = tmp;
				++l;
				--r;
			}
		}
		return l;
	}
	,__class__: oimo_collision_broadphase_bvh_BvhStrategy
};
var oimo_collision_broadphase_bvh_BvhTree = function() {
	this._root = null;
	this._numLeaves = 0;
	this._strategy = new oimo_collision_broadphase_bvh_BvhStrategy();
	this._nodePool = null;
	this.leafList = null;
	this.leafListLast = null;
	var this1 = new Array(1024);
	this.tmp = this1;
};
oimo_collision_broadphase_bvh_BvhTree.__name__ = "oimo.collision.broadphase.bvh.BvhTree";
oimo_collision_broadphase_bvh_BvhTree.prototype = {
	_print: function(root,indent) {
		if(indent == null) {
			indent = "";
		}
		if(root == null) {
			return;
		}
		if(root._height == 0) {
			haxe_Log.trace(indent + root._proxy._id,{ fileName : "oimo/collision/broadphase/bvh/BvhTree.hx", lineNumber : 39, className : "oimo.collision.broadphase.bvh.BvhTree", methodName : "_print"});
		} else {
			this._print(root._children[0],indent + "  ");
			var tmp;
			var size;
			var sizeX;
			var sizeY;
			var sizeZ;
			sizeX = root._aabbMaxX - root._aabbMinX;
			sizeY = root._aabbMaxY - root._aabbMinY;
			sizeZ = root._aabbMaxZ - root._aabbMinZ;
			var x = sizeX;
			var y = sizeY;
			var z = sizeZ;
			if(x * (y + z) + y * z > 0) {
				var size;
				var sizeX;
				var sizeY;
				var sizeZ;
				sizeX = root._aabbMaxX - root._aabbMinX;
				sizeY = root._aabbMaxY - root._aabbMinY;
				sizeZ = root._aabbMaxZ - root._aabbMinZ;
				var x = sizeX;
				var y = sizeY;
				var z = sizeZ;
				tmp = ((x * (y + z) + y * z) * 1000 + 0.5 | 0) / 1000;
			} else {
				var size;
				var sizeX;
				var sizeY;
				var sizeZ;
				sizeX = root._aabbMaxX - root._aabbMinX;
				sizeY = root._aabbMaxY - root._aabbMinY;
				sizeZ = root._aabbMaxZ - root._aabbMinZ;
				var x = sizeX;
				var y = sizeY;
				var z = sizeZ;
				tmp = ((x * (y + z) + y * z) * 1000 - 0.5 | 0) / 1000;
			}
			haxe_Log.trace(indent + "#" + root._height + ", " + tmp,{ fileName : "oimo/collision/broadphase/bvh/BvhTree.hx", lineNumber : 42, className : "oimo.collision.broadphase.bvh.BvhTree", methodName : "_print"});
			this._print(root._children[1],indent + "  ");
		}
	}
	,_getBalance: function() {
		return this.getBalanceRecursive(this._root);
	}
	,deleteRecursive: function(root) {
		if(root._height == 0) {
			var prev = root._prevLeaf;
			var next = root._nextLeaf;
			if(prev != null) {
				prev._nextLeaf = next;
			}
			if(next != null) {
				next._prevLeaf = prev;
			}
			if(root == this.leafList) {
				this.leafList = this.leafList._nextLeaf;
			}
			if(root == this.leafListLast) {
				this.leafListLast = this.leafListLast._prevLeaf;
			}
			root._nextLeaf = null;
			root._prevLeaf = null;
			root._proxy._leaf = null;
			root._next = null;
			root._childIndex = 0;
			root._children[0] = null;
			root._children[1] = null;
			root._childIndex = 0;
			root._parent = null;
			root._height = 0;
			root._proxy = null;
			root._next = this._nodePool;
			this._nodePool = root;
			return;
		}
		this.deleteRecursive(root._children[0]);
		this.deleteRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,decomposeRecursive: function(root) {
		if(root._height == 0) {
			root._childIndex = 0;
			root._parent = null;
			return;
		}
		this.decomposeRecursive(root._children[0]);
		this.decomposeRecursive(root._children[1]);
		root._next = null;
		root._childIndex = 0;
		root._children[0] = null;
		root._children[1] = null;
		root._childIndex = 0;
		root._parent = null;
		root._height = 0;
		root._proxy = null;
		root._next = this._nodePool;
		this._nodePool = root;
	}
	,buildTopDownRecursive: function(leaves,from,until) {
		var num = until - from;
		if(num == 1) {
			var leaf = leaves[from];
			var proxy = leaf._proxy;
			leaf._aabbMinX = proxy._aabbMinX;
			leaf._aabbMinY = proxy._aabbMinY;
			leaf._aabbMinZ = proxy._aabbMinZ;
			leaf._aabbMaxX = proxy._aabbMaxX;
			leaf._aabbMaxY = proxy._aabbMaxY;
			leaf._aabbMaxZ = proxy._aabbMaxZ;
			return leaf;
		}
		var splitAt = this._strategy._splitLeaves(leaves,from,until);
		var child1 = this.buildTopDownRecursive(leaves,from,splitAt);
		var child2 = this.buildTopDownRecursive(leaves,splitAt,until);
		var first = this._nodePool;
		if(first != null) {
			this._nodePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_broadphase_bvh_BvhNode();
		}
		var parent = first;
		parent._children[0] = child1;
		child1._parent = parent;
		child1._childIndex = 0;
		parent._children[1] = child2;
		child2._parent = parent;
		child2._childIndex = 1;
		var c1 = parent._children[0];
		var c2 = parent._children[1];
		parent._aabbMinX = c1._aabbMinX < c2._aabbMinX ? c1._aabbMinX : c2._aabbMinX;
		parent._aabbMinY = c1._aabbMinY < c2._aabbMinY ? c1._aabbMinY : c2._aabbMinY;
		parent._aabbMinZ = c1._aabbMinZ < c2._aabbMinZ ? c1._aabbMinZ : c2._aabbMinZ;
		parent._aabbMaxX = c1._aabbMaxX > c2._aabbMaxX ? c1._aabbMaxX : c2._aabbMaxX;
		parent._aabbMaxY = c1._aabbMaxY > c2._aabbMaxY ? c1._aabbMaxY : c2._aabbMaxY;
		parent._aabbMaxZ = c1._aabbMaxZ > c2._aabbMaxZ ? c1._aabbMaxZ : c2._aabbMaxZ;
		var h1 = parent._children[0]._height;
		var h2 = parent._children[1]._height;
		parent._height = (h1 > h2 ? h1 : h2) + 1;
		return parent;
	}
	,getBalanceRecursive: function(root) {
		if(root == null || root._height == 0) {
			return 0;
		}
		var balance = root._children[0]._height - root._children[1]._height;
		if(balance < 0) {
			balance = -balance;
		}
		return balance + this.getBalanceRecursive(root._children[0]) + this.getBalanceRecursive(root._children[1]);
	}
	,__class__: oimo_collision_broadphase_bvh_BvhTree
};
var oimo_collision_geometry_Aabb = function() {
	this._minX = 0;
	this._minY = 0;
	this._minZ = 0;
	this._maxX = 0;
	this._maxY = 0;
	this._maxZ = 0;
};
oimo_collision_geometry_Aabb.__name__ = "oimo.collision.geometry.Aabb";
oimo_collision_geometry_Aabb.prototype = {
	init: function(min,max) {
		var v = min;
		this._minX = v.x;
		this._minY = v.y;
		this._minZ = v.z;
		var v = max;
		this._maxX = v.x;
		this._maxY = v.y;
		this._maxZ = v.z;
		return this;
	}
	,getMin: function() {
		var min = new oimo_common_Vec3();
		var v = min;
		v.x = this._minX;
		v.y = this._minY;
		v.z = this._minZ;
		return min;
	}
	,getMinTo: function(min) {
		var v = min;
		v.x = this._minX;
		v.y = this._minY;
		v.z = this._minZ;
	}
	,setMin: function(min) {
		var v = min;
		this._minX = v.x;
		this._minY = v.y;
		this._minZ = v.z;
		return this;
	}
	,getMax: function() {
		var max = new oimo_common_Vec3();
		var v = max;
		v.x = this._maxX;
		v.y = this._maxY;
		v.z = this._maxZ;
		return max;
	}
	,getMaxTo: function(max) {
		var v = max;
		v.x = this._maxX;
		v.y = this._maxY;
		v.z = this._maxZ;
	}
	,setMax: function(max) {
		var v = max;
		this._maxX = v.x;
		this._maxY = v.y;
		this._maxZ = v.z;
		return this;
	}
	,getCenter: function() {
		var v = new oimo_common_Vec3();
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v1 = v;
		v1.x = cX;
		v1.y = cY;
		v1.z = cZ;
		return v;
	}
	,getCenterTo: function(center) {
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._minX + this._maxX;
		cY = this._minY + this._maxY;
		cZ = this._minZ + this._maxZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v = center;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
	}
	,getExtents: function() {
		var v = new oimo_common_Vec3();
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v1 = v;
		v1.x = cX;
		v1.y = cY;
		v1.z = cZ;
		return v;
	}
	,getExtentsTo: function(halfExtents) {
		var c;
		var cX;
		var cY;
		var cZ;
		cX = this._maxX - this._minX;
		cY = this._maxY - this._minY;
		cZ = this._maxZ - this._minZ;
		cX *= 0.5;
		cY *= 0.5;
		cZ *= 0.5;
		var v = halfExtents;
		v.x = cX;
		v.y = cY;
		v.z = cZ;
	}
	,combine: function(other) {
		this._minX = this._minX < other._minX ? this._minX : other._minX;
		this._minY = this._minY < other._minY ? this._minY : other._minY;
		this._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		this._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		this._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		this._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return this;
	}
	,combined: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX < other._minX ? this._minX : other._minX;
		aabb._minY = this._minY < other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ < other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX > other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY > other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ > other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,overlap: function(other) {
		if(this._minX < other._maxX && this._maxX > other._minX && this._minY < other._maxY && this._maxY > other._minY && this._minZ < other._maxZ) {
			return this._maxZ > other._minZ;
		} else {
			return false;
		}
	}
	,getIntersection: function(other) {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX > other._minX ? this._minX : other._minX;
		aabb._minY = this._minY > other._minY ? this._minY : other._minY;
		aabb._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		aabb._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		aabb._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		aabb._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
		return aabb;
	}
	,getIntersectionTo: function(other,intersection) {
		intersection._minX = this._minX > other._minX ? this._minX : other._minX;
		intersection._minY = this._minY > other._minY ? this._minY : other._minY;
		intersection._minZ = this._minZ > other._minZ ? this._minZ : other._minZ;
		intersection._maxX = this._maxX < other._maxX ? this._maxX : other._maxX;
		intersection._maxY = this._maxY < other._maxY ? this._maxY : other._maxY;
		intersection._maxZ = this._maxZ < other._maxZ ? this._maxZ : other._maxZ;
	}
	,copyFrom: function(aabb) {
		this._minX = aabb._minX;
		this._minY = aabb._minY;
		this._minZ = aabb._minZ;
		this._maxX = aabb._maxX;
		this._maxY = aabb._maxY;
		this._maxZ = aabb._maxZ;
		return this;
	}
	,clone: function() {
		var aabb = new oimo_collision_geometry_Aabb();
		aabb._minX = this._minX;
		aabb._minY = this._minY;
		aabb._minZ = this._minZ;
		aabb._maxX = this._maxX;
		aabb._maxY = this._maxY;
		aabb._maxZ = this._maxZ;
		return aabb;
	}
	,__class__: oimo_collision_geometry_Aabb
};
var oimo_collision_geometry_BoxGeometry = function(halfExtents) {
	oimo_collision_geometry_ConvexGeometry.call(this,1);
	var v = halfExtents;
	this._halfExtentsX = v.x;
	this._halfExtentsY = v.y;
	this._halfExtentsZ = v.z;
	this._halfAxisXX = halfExtents.x;
	this._halfAxisXY = 0;
	this._halfAxisXZ = 0;
	this._halfAxisYX = 0;
	this._halfAxisYY = halfExtents.y;
	this._halfAxisYZ = 0;
	this._halfAxisZX = 0;
	this._halfAxisZY = 0;
	this._halfAxisZZ = halfExtents.z;
	this._updateMass();
	var minHalfExtents = halfExtents.x < halfExtents.y ? halfExtents.z < halfExtents.x ? halfExtents.z : halfExtents.x : halfExtents.z < halfExtents.y ? halfExtents.z : halfExtents.y;
	if(this._gjkMargin > minHalfExtents * 0.2) {
		this._gjkMargin = minHalfExtents * 0.2;
	}
};
oimo_collision_geometry_BoxGeometry.__name__ = "oimo.collision.geometry.BoxGeometry";
oimo_collision_geometry_BoxGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_BoxGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getHalfExtents: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._halfExtentsX;
		v1.y = this._halfExtentsY;
		v1.z = this._halfExtentsZ;
		return v;
	}
	,getHalfExtentsTo: function(halfExtents) {
		var v = halfExtents;
		v.x = this._halfExtentsX;
		v.y = this._halfExtentsY;
		v.z = this._halfExtentsZ;
	}
	,_updateMass: function() {
		this._volume = 8 * (this._halfExtentsX * this._halfExtentsY * this._halfExtentsZ);
		var sq;
		var sqX;
		var sqY;
		var sqZ;
		sqX = this._halfExtentsX * this._halfExtentsX;
		sqY = this._halfExtentsY * this._halfExtentsY;
		sqZ = this._halfExtentsZ * this._halfExtentsZ;
		this._inertiaCoeff00 = 0.33333333333333331 * (sqY + sqZ);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sqZ + sqX);
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sqX + sqY);
	}
	,_computeAabb: function(aabb,tf) {
		var tfx;
		var tfxX;
		var tfxY;
		var tfxZ;
		var tfy;
		var tfyX;
		var tfyY;
		var tfyZ;
		var tfz;
		var tfzX;
		var tfzY;
		var tfzZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisXX + tf._rotation01 * this._halfAxisXY + tf._rotation02 * this._halfAxisXZ;
		__tmp__Y = tf._rotation10 * this._halfAxisXX + tf._rotation11 * this._halfAxisXY + tf._rotation12 * this._halfAxisXZ;
		__tmp__Z = tf._rotation20 * this._halfAxisXX + tf._rotation21 * this._halfAxisXY + tf._rotation22 * this._halfAxisXZ;
		tfxX = __tmp__X;
		tfxY = __tmp__Y;
		tfxZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisYX + tf._rotation01 * this._halfAxisYY + tf._rotation02 * this._halfAxisYZ;
		__tmp__Y = tf._rotation10 * this._halfAxisYX + tf._rotation11 * this._halfAxisYY + tf._rotation12 * this._halfAxisYZ;
		__tmp__Z = tf._rotation20 * this._halfAxisYX + tf._rotation21 * this._halfAxisYY + tf._rotation22 * this._halfAxisYZ;
		tfyX = __tmp__X;
		tfyY = __tmp__Y;
		tfyZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * this._halfAxisZX + tf._rotation01 * this._halfAxisZY + tf._rotation02 * this._halfAxisZZ;
		__tmp__Y = tf._rotation10 * this._halfAxisZX + tf._rotation11 * this._halfAxisZY + tf._rotation12 * this._halfAxisZZ;
		__tmp__Z = tf._rotation20 * this._halfAxisZX + tf._rotation21 * this._halfAxisZY + tf._rotation22 * this._halfAxisZZ;
		tfzX = __tmp__X;
		tfzY = __tmp__Y;
		tfzZ = __tmp__Z;
		if(tfxX < 0) {
			tfxX = -tfxX;
		}
		if(tfxY < 0) {
			tfxY = -tfxY;
		}
		if(tfxZ < 0) {
			tfxZ = -tfxZ;
		}
		if(tfyX < 0) {
			tfyX = -tfyX;
		}
		if(tfyY < 0) {
			tfyY = -tfyY;
		}
		if(tfyZ < 0) {
			tfyZ = -tfyZ;
		}
		if(tfzX < 0) {
			tfzX = -tfzX;
		}
		if(tfzY < 0) {
			tfzY = -tfzY;
		}
		if(tfzZ < 0) {
			tfzZ = -tfzZ;
		}
		var tfs;
		var tfsX;
		var tfsY;
		var tfsZ;
		tfsX = tfxX + tfyX;
		tfsY = tfxY + tfyY;
		tfsZ = tfxZ + tfyZ;
		tfsX += tfzX;
		tfsY += tfzY;
		tfsZ += tfzZ;
		aabb._minX = tf._positionX - tfsX;
		aabb._minY = tf._positionY - tfsY;
		aabb._minZ = tf._positionZ - tfsZ;
		aabb._maxX = tf._positionX + tfsX;
		aabb._maxY = tf._positionY + tfsY;
		aabb._maxZ = tf._positionZ + tfsZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var gjkMargins;
		var gjkMarginsX;
		var gjkMarginsY;
		var gjkMarginsZ;
		var coreExtents;
		var coreExtentsX;
		var coreExtentsY;
		var coreExtentsZ;
		gjkMarginsX = this._gjkMargin;
		gjkMarginsY = this._gjkMargin;
		gjkMarginsZ = this._gjkMargin;
		if(!(gjkMarginsX < this._halfExtentsX)) {
			gjkMarginsX = this._halfExtentsX;
		}
		if(!(gjkMarginsY < this._halfExtentsY)) {
			gjkMarginsY = this._halfExtentsY;
		}
		if(!(gjkMarginsZ < this._halfExtentsZ)) {
			gjkMarginsZ = this._halfExtentsZ;
		}
		coreExtentsX = this._halfExtentsX - gjkMarginsX;
		coreExtentsY = this._halfExtentsY - gjkMarginsY;
		coreExtentsZ = this._halfExtentsZ - gjkMarginsZ;
		out.x = dir.x > 0 ? coreExtentsX : -coreExtentsX;
		out.y = dir.y > 0 ? coreExtentsY : -coreExtentsY;
		out.z = dir.z > 0 ? coreExtentsZ : -coreExtentsZ;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfW = this._halfExtentsX;
		var halfH = this._halfExtentsY;
		var halfD = this._halfExtentsZ;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminx = 0;
		var tminy = 0;
		var tminz = 0;
		var tmaxx = 1;
		var tmaxy = 1;
		var tmaxz = 1;
		if(dx > -1e-6 && dx < 1e-6) {
			if(p1x <= -halfW || p1x >= halfW) {
				return false;
			}
		} else {
			var invDx = 1 / dx;
			var t1 = (-halfW - p1x) * invDx;
			var t2 = (halfW - p1x) * invDx;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminx = t1;
			}
			if(t2 < 1) {
				tmaxx = t2;
			}
		}
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - p1y) * invDy;
			var t2 = (halfH - p1y) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(dz > -1e-6 && dz < 1e-6) {
			if(p1z <= -halfD || p1z >= halfD) {
				return false;
			}
		} else {
			var invDz = 1 / dz;
			var t1 = (-halfD - p1z) * invDz;
			var t2 = (halfD - p1z) * invDz;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminz = t1;
			}
			if(t2 < 1) {
				tmaxz = t2;
			}
		}
		if(tminx >= 1 || tminy >= 1 || tminz >= 1 || tmaxx <= 0 || tmaxy <= 0 || tmaxz <= 0) {
			return false;
		}
		var min = tminx;
		var max = tmaxx;
		var hitDirection = 0;
		if(tminy > min) {
			min = tminy;
			hitDirection = 1;
		}
		if(tminz > min) {
			min = tminz;
			hitDirection = 2;
		}
		if(tmaxy < max) {
			max = tmaxy;
		}
		if(tmaxz < max) {
			max = tmaxz;
		}
		if(min > max) {
			return false;
		}
		if(min == 0) {
			return false;
		}
		switch(hitDirection) {
		case 0:
			hit.normal.init(dx > 0 ? -1 : 1,0,0);
			break;
		case 1:
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
			break;
		case 2:
			hit.normal.init(0,0,dz > 0 ? -1 : 1);
			break;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_BoxGeometry
});
var oimo_collision_geometry_CapsuleGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,4);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_CapsuleGeometry.__name__ = "oimo.collision.geometry.CapsuleGeometry";
oimo_collision_geometry_CapsuleGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CapsuleGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var hh2 = this._halfHeight * this._halfHeight;
		var cylinderVolume = 6.28318530717958 * r2 * this._halfHeight;
		var sphereVolume = 3.14159265358979 * r2 * this._radius * 4 / 3;
		this._volume = cylinderVolume + sphereVolume;
		var invVolume = this._volume == 0 ? 0 : 1 / this._volume;
		var inertiaY = invVolume * (cylinderVolume * r2 * 0.5 + sphereVolume * r2 * 0.4);
		var inertiaXZ = invVolume * (cylinderVolume * (r2 * 0.25 + hh2 / 3) + sphereVolume * (r2 * 0.4 + this._halfHeight * this._radius * 0.75 + hh2));
		this._inertiaCoeff00 = inertiaXZ;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = inertiaY;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = inertiaXZ;
	}
	,_computeAabb: function(aabb,tf) {
		var radVec;
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		if(axisX < 0) {
			axisX = -axisX;
		}
		if(axisY < 0) {
			axisY = -axisY;
		}
		if(axisZ < 0) {
			axisZ = -axisZ;
		}
		axisX *= this._halfHeight;
		axisY *= this._halfHeight;
		axisZ *= this._halfHeight;
		radVecX += axisX;
		radVecY += axisY;
		radVecZ += axisZ;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		if(dir.y > 0) {
			out.init(0,this._halfHeight,0);
		} else {
			out.init(0,-this._halfHeight,0);
		}
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = p1x * dx + p1z * dz;
		var c = p1x * p1x + p1z * p1z - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t;
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var crossY = p1y + dy * tminxz;
		var min;
		if(crossY > -halfH && crossY < halfH) {
			if(tminxz > 0) {
				min = tminxz;
				var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
				var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				var tx = _this.x * invLen;
				var ty = _this.y * invLen;
				var tz = _this.z * invLen;
				_this.x = tx;
				_this.y = ty;
				_this.z = tz;
				hit.position.init(p1x + min * dx,crossY,p1z + min * dz);
				hit.fraction = min;
				return true;
			}
			return false;
		}
		var sphereY = crossY < 0 ? -halfH : halfH;
		var spherePos;
		var spherePosX;
		var spherePosY;
		var spherePosZ;
		var sphereToBegin;
		var sphereToBeginX;
		var sphereToBeginY;
		var sphereToBeginZ;
		spherePosX = 0;
		spherePosY = sphereY;
		spherePosZ = 0;
		sphereToBeginX = beginX - spherePosX;
		sphereToBeginY = beginY - spherePosY;
		sphereToBeginZ = beginZ - spherePosZ;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		a = dX * dX + dY * dY + dZ * dZ;
		b = sphereToBeginX * dX + sphereToBeginY * dY + sphereToBeginZ * dZ;
		c = sphereToBeginX * sphereToBeginX + sphereToBeginY * sphereToBeginY + sphereToBeginZ * sphereToBeginZ - this._radius * this._radius;
		D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t = (-b - Math.sqrt(D)) / a;
		if(t < 0 || t > 1) {
			return false;
		}
		var hitPos;
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormal;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = sphereToBeginX + dX * t;
		hitPosY = sphereToBeginY + dY * t;
		hitPosZ = sphereToBeginZ + dZ * t;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		hitPosX += spherePosX;
		hitPosY += spherePosY;
		hitPosZ += spherePosZ;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v = hit.normal;
		v.x = hitNormalX;
		v.y = hitNormalY;
		v.z = hitNormalZ;
		hit.fraction = t;
		return true;
	}
	,__class__: oimo_collision_geometry_CapsuleGeometry
});
var oimo_collision_geometry_ConeGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,3);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this.sinTheta = radius / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this.cosTheta = 2 * halfHeight / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
	this._updateMass();
};
oimo_collision_geometry_ConeGeometry.__name__ = "oimo.collision.geometry.ConeGeometry";
oimo_collision_geometry_ConeGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConeGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2 / 3;
		this._inertiaCoeff00 = 0.05 * (3 * r2 + 2 * h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.3 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.05 * (3 * r2 + 2 * h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var eh;
		var ehX;
		var ehY;
		var ehZ;
		var er;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		var axis2x = axis2X;
		var axis2y = axis2Y;
		var axis2z = axis2Z;
		erX = Math.sqrt(1 - axis2x);
		erY = Math.sqrt(1 - axis2y);
		erZ = Math.sqrt(1 - axis2z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var rmin;
		var rminX;
		var rminY;
		var rminZ;
		var rmax;
		var rmaxX;
		var rmaxY;
		var rmaxZ;
		rminX = -ehX;
		rminY = -ehY;
		rminZ = -ehZ;
		rminX -= erX;
		rminY -= erY;
		rminZ -= erZ;
		rmaxX = -ehX;
		rmaxY = -ehY;
		rmaxZ = -ehZ;
		rmaxX += erX;
		rmaxY += erY;
		rmaxZ += erZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		var min;
		var minX;
		var minY;
		var minZ;
		maxX = rminX > rmaxX ? rminX : rmaxX;
		maxY = rminY > rmaxY ? rminY : rmaxY;
		maxZ = rminZ > rmaxZ ? rminZ : rmaxZ;
		if(!(maxX > ehX)) {
			maxX = ehX;
		}
		if(!(maxY > ehY)) {
			maxY = ehY;
		}
		if(!(maxZ > ehZ)) {
			maxZ = ehZ;
		}
		minX = rminX < rmaxX ? rminX : rmaxX;
		minY = rminY < rmaxY ? rminY : rmaxY;
		minZ = rminZ < rmaxZ ? rminZ : rmaxZ;
		if(!(minX < ehX)) {
			minX = ehX;
		}
		if(!(minY < ehY)) {
			minY = ehY;
		}
		if(!(minZ < ehZ)) {
			minZ = ehZ;
		}
		aabb._minX = tf._positionX + minX;
		aabb._minY = tf._positionY + minY;
		aabb._minZ = tf._positionZ + minZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var dx = dir.x;
		var dy = dir.y;
		var dz = dir.z;
		if(dy > 0 && dy * dy > this.sinTheta * this.sinTheta * (dx * dx + dy * dy + dz * dz)) {
			out.init(0,this._halfHeight - this._gjkMargin / this.sinTheta,0);
			if(out.y < 0) {
				out.y = 0;
			}
			return;
		}
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var height = 2 * this._halfHeight;
		var coreRadius = (height - this._gjkMargin) / height * this._radius - this._gjkMargin / this.cosTheta;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHalfHeight = this._halfHeight - this._gjkMargin;
		if(coreHalfHeight < 0) {
			coreHalfHeight = 0;
		}
		out.x = rx * invLen;
		out.y = -coreHalfHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - p1y) * invDy;
			var t2 = (halfH - p1y) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 0;
		p1y -= halfH;
		var cos2 = this.cosTheta * this.cosTheta;
		var a = cos2 * (dx * dx + dy * dy + dz * dz) - dy * dy;
		var b = cos2 * (p1x * dx + p1y * dy + p1z * dz) - p1y * dy;
		var c = cos2 * (p1x * p1x + p1y * p1y + p1z * p1z) - p1y * p1y;
		var D = b * b - a * c;
		if(a != 0) {
			if(D < 0) {
				return false;
			}
			var sqrtD = Math.sqrt(D);
			if(a < 0) {
				if(dy > 0) {
					tminxz = 0;
					tmaxxz = (-b + sqrtD) / a;
					if(tmaxxz <= 0) {
						return false;
					}
				} else {
					tminxz = (-b - sqrtD) / a;
					tmaxxz = 1;
					if(tminxz >= 1) {
						return false;
					}
				}
			} else {
				tminxz = (-b - sqrtD) / a;
				tmaxxz = (-b + sqrtD) / a;
				if(tminxz >= 1 || tmaxxz <= 0) {
					return false;
				}
			}
		} else {
			var t = -c / (2 * b);
			if(b > 0) {
				tminxz = 0;
				tmaxxz = t;
				if(t <= 0) {
					return false;
				}
			} else {
				tminxz = t;
				tmaxxz = 1;
				if(t >= 1) {
					return false;
				}
			}
		}
		p1y += halfH;
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = this.cosTheta;
			var tx = _this1.x * s;
			var ty = _this1.y * s;
			var tz = _this1.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			hit.normal.y += this.sinTheta;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_ConeGeometry
});
var oimo_collision_geometry_ConvexHullGeometry = function(vertices) {
	oimo_collision_geometry_ConvexGeometry.call(this,5);
	this._numVertices = vertices.length;
	var this1 = new Array(this._numVertices);
	this._vertices = this1;
	var this1 = new Array(this._numVertices);
	this._tmpVertices = this1;
	var _g = 0;
	var _g1 = this._numVertices;
	while(_g < _g1) {
		var i = _g++;
		this._vertices[i] = vertices[i];
		this._tmpVertices[i] = new oimo_common_Vec3();
	}
	this._useGjkRayCast = true;
	this._updateMass();
};
oimo_collision_geometry_ConvexHullGeometry.__name__ = "oimo.collision.geometry.ConvexHullGeometry";
oimo_collision_geometry_ConvexHullGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_ConvexHullGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getVertices: function() {
		return this._vertices;
	}
	,_updateMass: function() {
		this._volume = 1;
		this._inertiaCoeff00 = 1;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 1;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 1;
		var minx = this._vertices[0].x;
		var miny = this._vertices[0].y;
		var minz = this._vertices[0].z;
		var maxx = this._vertices[0].x;
		var maxy = this._vertices[0].y;
		var maxz = this._vertices[0].z;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var i = _g++;
			var vx = this._vertices[i].x;
			var vy = this._vertices[i].y;
			var vz = this._vertices[i].z;
			if(vx < minx) {
				minx = vx;
			} else if(vx > maxx) {
				maxx = vx;
			}
			if(vy < miny) {
				miny = vy;
			} else if(vy > maxy) {
				maxy = vy;
			}
			if(vz < minz) {
				minz = vz;
			} else if(vz > maxz) {
				maxz = vz;
			}
		}
		var sizex = maxx - minx;
		var sizey = maxy - miny;
		var sizez = maxz - minz;
		this._volume = sizex * sizey * sizez;
		var diffCog = ((minx + maxx) * (minx + maxx) + (miny + maxy) * (miny + maxy) + (minz + maxz) * (minz + maxz)) * 0.25;
		sizex = sizex * sizex * 0.25;
		sizey = sizey * sizey * 0.25;
		sizez = sizez * sizez * 0.25;
		this._inertiaCoeff00 = 0.33333333333333331 * (sizey + sizez) + diffCog;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.33333333333333331 * (sizez + sizex) + diffCog;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.33333333333333331 * (sizex + sizey) + diffCog;
	}
	,_computeAabb: function(aabb,tf) {
		var min;
		var minX;
		var minY;
		var minZ;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		var margin;
		var marginX;
		var marginY;
		var marginZ;
		marginX = this._gjkMargin;
		marginY = this._gjkMargin;
		marginZ = this._gjkMargin;
		var localV;
		var localVX;
		var localVY;
		var localVZ;
		var v = this._vertices[0];
		localVX = v.x;
		localVY = v.y;
		localVZ = v.z;
		var worldV;
		var worldVX;
		var worldVY;
		var worldVZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
		__tmp__Y = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
		__tmp__Z = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
		worldVX = __tmp__X;
		worldVY = __tmp__Y;
		worldVZ = __tmp__Z;
		worldVX += tf._positionX;
		worldVY += tf._positionY;
		worldVZ += tf._positionZ;
		minX = worldVX;
		minY = worldVY;
		minZ = worldVZ;
		maxX = worldVX;
		maxY = worldVY;
		maxZ = worldVZ;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v = this._vertices[i];
			localVX = v.x;
			localVY = v.y;
			localVZ = v.z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf._rotation00 * localVX + tf._rotation01 * localVY + tf._rotation02 * localVZ;
			__tmp__Y = tf._rotation10 * localVX + tf._rotation11 * localVY + tf._rotation12 * localVZ;
			__tmp__Z = tf._rotation20 * localVX + tf._rotation21 * localVY + tf._rotation22 * localVZ;
			worldVX = __tmp__X;
			worldVY = __tmp__Y;
			worldVZ = __tmp__Z;
			worldVX += tf._positionX;
			worldVY += tf._positionY;
			worldVZ += tf._positionZ;
			if(!(minX < worldVX)) {
				minX = worldVX;
			}
			if(!(minY < worldVY)) {
				minY = worldVY;
			}
			if(!(minZ < worldVZ)) {
				minZ = worldVZ;
			}
			if(!(maxX > worldVX)) {
				maxX = worldVX;
			}
			if(!(maxY > worldVY)) {
				maxY = worldVY;
			}
			if(!(maxZ > worldVZ)) {
				maxZ = worldVZ;
			}
		}
		aabb._minX = minX - marginX;
		aabb._minY = minY - marginY;
		aabb._minZ = minZ - marginZ;
		aabb._maxX = maxX + marginX;
		aabb._maxY = maxY + marginY;
		aabb._maxZ = maxZ + marginZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var _this = this._vertices[0];
		var maxDot = _this.x * dir.x + _this.y * dir.y + _this.z * dir.z;
		var maxIndex = 0;
		var _g = 1;
		var _g1 = this._numVertices;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._vertices[i];
			var dot = _this.x * dir.x + _this.y * dir.y + _this.z * dir.z;
			if(dot > maxDot) {
				maxDot = dot;
				maxIndex = i;
			}
		}
		var v = this._vertices[maxIndex];
		out.x = v.x;
		out.y = v.y;
		out.z = v.z;
	}
	,__class__: oimo_collision_geometry_ConvexHullGeometry
});
var oimo_collision_geometry_CylinderGeometry = function(radius,halfHeight) {
	oimo_collision_geometry_ConvexGeometry.call(this,2);
	this._radius = radius;
	this._halfHeight = halfHeight;
	this._updateMass();
};
oimo_collision_geometry_CylinderGeometry.__name__ = "oimo.collision.geometry.CylinderGeometry";
oimo_collision_geometry_CylinderGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_CylinderGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,getHalfHeight: function() {
		return this._halfHeight;
	}
	,_updateMass: function() {
		var r2 = this._radius * this._radius;
		var h2 = this._halfHeight * this._halfHeight * 4;
		this._volume = 3.14159265358979 * r2 * this._halfHeight * 2;
		this._inertiaCoeff00 = 0.083333333333333329 * (3 * r2 + h2);
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.5 * r2;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.083333333333333329 * (3 * r2 + h2);
	}
	,_computeAabb: function(aabb,tf) {
		var axis;
		var axisX;
		var axisY;
		var axisZ;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		var eh;
		var ehX;
		var ehY;
		var ehZ;
		var er;
		var erX;
		var erY;
		var erZ;
		axisX = tf._rotation01;
		axisY = tf._rotation11;
		axisZ = tf._rotation21;
		if(axisX < 0) {
			axisX = -axisX;
		}
		if(axisY < 0) {
			axisY = -axisY;
		}
		if(axisZ < 0) {
			axisZ = -axisZ;
		}
		axis2X = axisX * axisX;
		axis2Y = axisY * axisY;
		axis2Z = axisZ * axisZ;
		var axis2x = axis2X;
		var axis2y = axis2Y;
		var axis2z = axis2Z;
		erX = Math.sqrt(1 - axis2x);
		erY = Math.sqrt(1 - axis2y);
		erZ = Math.sqrt(1 - axis2z);
		erX *= this._radius;
		erY *= this._radius;
		erZ *= this._radius;
		ehX = axisX * this._halfHeight;
		ehY = axisY * this._halfHeight;
		ehZ = axisZ * this._halfHeight;
		var max;
		var maxX;
		var maxY;
		var maxZ;
		maxX = erX + ehX;
		maxY = erY + ehY;
		maxZ = erZ + ehZ;
		aabb._minX = tf._positionX - maxX;
		aabb._minY = tf._positionY - maxY;
		aabb._minZ = tf._positionZ - maxZ;
		aabb._maxX = tf._positionX + maxX;
		aabb._maxY = tf._positionY + maxY;
		aabb._maxZ = tf._positionZ + maxZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		var rx = dir.x;
		var rz = dir.z;
		var len = rx * rx + rz * rz;
		var coreRadius = this._radius - this._gjkMargin;
		if(coreRadius < 0) {
			coreRadius = 0;
		}
		var invLen = len > 0 ? coreRadius / Math.sqrt(len) : 0;
		var coreHeight = this._halfHeight - this._gjkMargin;
		if(coreHeight < 0) {
			coreHeight = 0;
		}
		out.x = rx * invLen;
		out.y = dir.y > 0 ? coreHeight : -coreHeight;
		out.z = rz * invLen;
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var p1x = beginX;
		var p1y = beginY;
		var p1z = beginZ;
		var p2x = endX;
		var p2y = endY;
		var p2z = endZ;
		var halfH = this._halfHeight;
		var dx = p2x - p1x;
		var dy = p2y - p1y;
		var dz = p2z - p1z;
		var tminy = 0;
		var tmaxy = 1;
		if(dy > -1e-6 && dy < 1e-6) {
			if(p1y <= -halfH || p1y >= halfH) {
				return false;
			}
		} else {
			var invDy = 1 / dy;
			var t1 = (-halfH - p1y) * invDy;
			var t2 = (halfH - p1y) * invDy;
			if(t1 > t2) {
				var tmp = t1;
				t1 = t2;
				t2 = tmp;
			}
			if(t1 > 0) {
				tminy = t1;
			}
			if(t2 < 1) {
				tmaxy = t2;
			}
		}
		if(tminy >= 1 || tmaxy <= 0) {
			return false;
		}
		var tminxz = 0;
		var tmaxxz = 1;
		var a = dx * dx + dz * dz;
		var b = p1x * dx + p1z * dz;
		var c = p1x * p1x + p1z * p1z - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t;
		if(a > 0) {
			var sqrtD = Math.sqrt(D);
			tminxz = (-b - sqrtD) / a;
			tmaxxz = (-b + sqrtD) / a;
			if(tminxz >= 1 || tmaxxz <= 0) {
				return false;
			}
		} else {
			if(c >= 0) {
				return false;
			}
			tminxz = 0;
			tmaxxz = 1;
		}
		var min;
		if(tmaxxz <= tminy || tmaxy <= tminxz) {
			return false;
		}
		if(tminxz < tminy) {
			min = tminy;
			if(min == 0) {
				return false;
			}
			hit.normal.init(0,dy > 0 ? -1 : 1,0);
		} else {
			min = tminxz;
			if(min == 0) {
				return false;
			}
			var _this = hit.normal.init(p1x + dx * min,0,p1z + dz * min);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
		hit.position.init(p1x + min * dx,p1y + min * dy,p1z + min * dz);
		hit.fraction = min;
		return true;
	}
	,__class__: oimo_collision_geometry_CylinderGeometry
});
var oimo_collision_geometry_GeometryType = function() { };
oimo_collision_geometry_GeometryType.__name__ = "oimo.collision.geometry.GeometryType";
var oimo_collision_geometry_RayCastHit = function() {
	this.position = new oimo_common_Vec3();
	this.normal = new oimo_common_Vec3();
	this.fraction = 0;
};
oimo_collision_geometry_RayCastHit.__name__ = "oimo.collision.geometry.RayCastHit";
oimo_collision_geometry_RayCastHit.prototype = {
	__class__: oimo_collision_geometry_RayCastHit
};
var oimo_collision_geometry_SphereGeometry = function(radius) {
	oimo_collision_geometry_ConvexGeometry.call(this,0);
	this._radius = radius;
	this._gjkMargin = this._radius;
	this._updateMass();
};
oimo_collision_geometry_SphereGeometry.__name__ = "oimo.collision.geometry.SphereGeometry";
oimo_collision_geometry_SphereGeometry.__super__ = oimo_collision_geometry_ConvexGeometry;
oimo_collision_geometry_SphereGeometry.prototype = $extend(oimo_collision_geometry_ConvexGeometry.prototype,{
	getRadius: function() {
		return this._radius;
	}
	,_updateMass: function() {
		this._volume = 4.1887902047863861 * this._radius * this._radius * this._radius;
		this._inertiaCoeff00 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff01 = 0;
		this._inertiaCoeff02 = 0;
		this._inertiaCoeff10 = 0;
		this._inertiaCoeff11 = 0.4 * this._radius * this._radius;
		this._inertiaCoeff12 = 0;
		this._inertiaCoeff20 = 0;
		this._inertiaCoeff21 = 0;
		this._inertiaCoeff22 = 0.4 * this._radius * this._radius;
	}
	,_computeAabb: function(aabb,tf) {
		var radVec;
		var radVecX;
		var radVecY;
		var radVecZ;
		radVecX = this._radius;
		radVecY = this._radius;
		radVecZ = this._radius;
		aabb._minX = tf._positionX - radVecX;
		aabb._minY = tf._positionY - radVecY;
		aabb._minZ = tf._positionZ - radVecZ;
		aabb._maxX = tf._positionX + radVecX;
		aabb._maxY = tf._positionY + radVecY;
		aabb._maxZ = tf._positionZ + radVecZ;
	}
	,computeLocalSupportingVertex: function(dir,out) {
		out.zero();
	}
	,_rayCastLocal: function(beginX,beginY,beginZ,endX,endY,endZ,hit) {
		var d;
		var dX;
		var dY;
		var dZ;
		dX = endX - beginX;
		dY = endY - beginY;
		dZ = endZ - beginZ;
		var a = dX * dX + dY * dY + dZ * dZ;
		var b = beginX * dX + beginY * dY + beginZ * dZ;
		var c = beginX * beginX + beginY * beginY + beginZ * beginZ - this._radius * this._radius;
		var D = b * b - a * c;
		if(D < 0) {
			return false;
		}
		var t = (-b - Math.sqrt(D)) / a;
		if(t < 0 || t > 1) {
			return false;
		}
		var hitPos;
		var hitPosX;
		var hitPosY;
		var hitPosZ;
		var hitNormal;
		var hitNormalX;
		var hitNormalY;
		var hitNormalZ;
		hitPosX = beginX + dX * t;
		hitPosY = beginY + dY * t;
		hitPosZ = beginZ + dZ * t;
		var l = hitPosX * hitPosX + hitPosY * hitPosY + hitPosZ * hitPosZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		hitNormalX = hitPosX * l;
		hitNormalY = hitPosY * l;
		hitNormalZ = hitPosZ * l;
		var v = hit.position;
		v.x = hitPosX;
		v.y = hitPosY;
		v.z = hitPosZ;
		var v = hit.normal;
		v.x = hitNormalX;
		v.y = hitNormalY;
		v.z = hitNormalZ;
		hit.fraction = t;
		return true;
	}
	,__class__: oimo_collision_geometry_SphereGeometry
});
var oimo_collision_narrowphase_CollisionMatrix = function() {
	var this1 = new Array(8);
	this.detectors = this1;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[0] = this2;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[1] = this2;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[2] = this2;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[3] = this2;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[4] = this2;
	var this1 = this.detectors;
	var this2 = new Array(8);
	this1[5] = this2;
	var gjkEpaDetector = new oimo_collision_narrowphase_detector_GjkEpaDetector();
	var sp = 0;
	var bo = 1;
	var cy = 2;
	var co = 3;
	var ca = 4;
	var ch = 5;
	this.detectors[sp][sp] = new oimo_collision_narrowphase_detector_SphereSphereDetector();
	this.detectors[sp][bo] = new oimo_collision_narrowphase_detector_SphereBoxDetector(false);
	this.detectors[sp][cy] = gjkEpaDetector;
	this.detectors[sp][co] = gjkEpaDetector;
	this.detectors[sp][ca] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(false);
	this.detectors[sp][ch] = gjkEpaDetector;
	this.detectors[bo][sp] = new oimo_collision_narrowphase_detector_SphereBoxDetector(true);
	this.detectors[bo][bo] = new oimo_collision_narrowphase_detector_BoxBoxDetector();
	this.detectors[bo][cy] = gjkEpaDetector;
	this.detectors[bo][co] = gjkEpaDetector;
	this.detectors[bo][ca] = gjkEpaDetector;
	this.detectors[bo][ch] = gjkEpaDetector;
	this.detectors[cy][sp] = gjkEpaDetector;
	this.detectors[cy][bo] = gjkEpaDetector;
	this.detectors[cy][cy] = gjkEpaDetector;
	this.detectors[cy][co] = gjkEpaDetector;
	this.detectors[cy][ca] = gjkEpaDetector;
	this.detectors[cy][ch] = gjkEpaDetector;
	this.detectors[co][sp] = gjkEpaDetector;
	this.detectors[co][bo] = gjkEpaDetector;
	this.detectors[co][cy] = gjkEpaDetector;
	this.detectors[co][co] = gjkEpaDetector;
	this.detectors[co][ca] = gjkEpaDetector;
	this.detectors[co][ch] = gjkEpaDetector;
	this.detectors[ca][sp] = new oimo_collision_narrowphase_detector_SphereCapsuleDetector(true);
	this.detectors[ca][bo] = gjkEpaDetector;
	this.detectors[ca][cy] = gjkEpaDetector;
	this.detectors[ca][co] = gjkEpaDetector;
	this.detectors[ca][ca] = new oimo_collision_narrowphase_detector_CapsuleCapsuleDetector();
	this.detectors[ca][ch] = gjkEpaDetector;
	this.detectors[ch][sp] = gjkEpaDetector;
	this.detectors[ch][bo] = gjkEpaDetector;
	this.detectors[ch][cy] = gjkEpaDetector;
	this.detectors[ch][co] = gjkEpaDetector;
	this.detectors[ch][ca] = gjkEpaDetector;
	this.detectors[ch][ch] = gjkEpaDetector;
};
oimo_collision_narrowphase_CollisionMatrix.__name__ = "oimo.collision.narrowphase.CollisionMatrix";
oimo_collision_narrowphase_CollisionMatrix.prototype = {
	getDetector: function(geomType1,geomType2) {
		return this.detectors[geomType1][geomType2];
	}
	,__class__: oimo_collision_narrowphase_CollisionMatrix
};
var oimo_collision_narrowphase_DetectorResult = function() {
	this.numPoints = 0;
	this.normal = new oimo_common_Vec3();
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.points = this1;
	this.incremental = false;
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.points[i] = new oimo_collision_narrowphase_DetectorResultPoint();
	}
};
oimo_collision_narrowphase_DetectorResult.__name__ = "oimo.collision.narrowphase.DetectorResult";
oimo_collision_narrowphase_DetectorResult.prototype = {
	getMaxDepth: function() {
		var max = 0;
		var _g = 0;
		var _g1 = this.numPoints;
		while(_g < _g1) {
			var i = _g++;
			if(this.points[i].depth > max) {
				max = this.points[i].depth;
			}
		}
		return max;
	}
	,clear: function() {
		this.numPoints = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		this.normal.zero();
	}
	,__class__: oimo_collision_narrowphase_DetectorResult
};
var oimo_collision_narrowphase_DetectorResultPoint = function() {
	this.position1 = new oimo_common_Vec3();
	this.position2 = new oimo_common_Vec3();
	this.depth = 0;
	this.id = 0;
};
oimo_collision_narrowphase_DetectorResultPoint.__name__ = "oimo.collision.narrowphase.DetectorResultPoint";
oimo_collision_narrowphase_DetectorResultPoint.prototype = {
	__class__: oimo_collision_narrowphase_DetectorResultPoint
};
var oimo_collision_narrowphase_detector_Detector = function(swapped) {
	this.swapped = swapped;
};
oimo_collision_narrowphase_detector_Detector.__name__ = "oimo.collision.narrowphase.detector.Detector";
oimo_collision_narrowphase_detector_Detector.prototype = {
	setNormal: function(result,nX,nY,nZ) {
		var v = result.normal;
		v.x = nX;
		v.y = nY;
		v.z = nZ;
		if(this.swapped) {
			var _this = result.normal;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
	}
	,addPoint: function(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,id) {
		var p = result.points[result.numPoints++];
		p.depth = depth;
		p.id = id;
		if(this.swapped) {
			var v = p.position1;
			v.x = pos2X;
			v.y = pos2Y;
			v.z = pos2Z;
			var v = p.position2;
			v.x = pos1X;
			v.y = pos1Y;
			v.z = pos1Z;
		} else {
			var v = p.position1;
			v.x = pos1X;
			v.y = pos1Y;
			v.z = pos1Z;
			var v = p.position2;
			v.x = pos2X;
			v.y = pos2Y;
			v.z = pos2Z;
		}
	}
	,detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
	}
	,detect: function(result,geom1,geom2,transform1,transform2,cachedData) {
		result.numPoints = 0;
		var _g = 0;
		var _g1 = result.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.position1.zero();
			p.position2.zero();
			p.depth = 0;
			p.id = 0;
		}
		result.normal.zero();
		if(this.swapped) {
			this.detectImpl(result,geom2,geom1,transform2,transform1,cachedData);
		} else {
			this.detectImpl(result,geom1,geom2,transform1,transform2,cachedData);
		}
	}
	,__class__: oimo_collision_narrowphase_detector_Detector
};
var oimo_collision_narrowphase_detector_BoxBoxDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
	this.clipper = new oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper();
};
oimo_collision_narrowphase_detector_BoxBoxDetector.__name__ = "oimo.collision.narrowphase.detector.BoxBoxDetector";
oimo_collision_narrowphase_detector_BoxBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_BoxBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var b1 = geom1;
		var b2 = geom2;
		result.incremental = false;
		var c1;
		var c1X;
		var c1Y;
		var c1Z;
		var c2;
		var c2X;
		var c2Y;
		var c2Z;
		var c12;
		var c12X;
		var c12Y;
		var c12Z;
		c1X = tf1._positionX;
		c1Y = tf1._positionY;
		c1Z = tf1._positionZ;
		c2X = tf2._positionX;
		c2Y = tf2._positionY;
		c2Z = tf2._positionZ;
		c12X = c2X - c1X;
		c12Y = c2Y - c1Y;
		c12Z = c2Z - c1Z;
		var x1;
		var x1X;
		var x1Y;
		var x1Z;
		var y1;
		var y1X;
		var y1Y;
		var y1Z;
		var z1;
		var z1X;
		var z1Y;
		var z1Z;
		var x2;
		var x2X;
		var x2Y;
		var x2Z;
		var y2;
		var y2X;
		var y2Y;
		var y2Z;
		var z2;
		var z2X;
		var z2Y;
		var z2Z;
		x1X = tf1._rotation00;
		x1Y = tf1._rotation10;
		x1Z = tf1._rotation20;
		y1X = tf1._rotation01;
		y1Y = tf1._rotation11;
		y1Z = tf1._rotation21;
		z1X = tf1._rotation02;
		z1Y = tf1._rotation12;
		z1Z = tf1._rotation22;
		x2X = tf2._rotation00;
		x2Y = tf2._rotation10;
		x2Z = tf2._rotation20;
		y2X = tf2._rotation01;
		y2Y = tf2._rotation11;
		y2Z = tf2._rotation21;
		z2X = tf2._rotation02;
		z2Y = tf2._rotation12;
		z2Z = tf2._rotation22;
		var w1 = b1._halfExtentsX;
		var h1 = b1._halfExtentsY;
		var d1 = b1._halfExtentsZ;
		var w2 = b2._halfExtentsX;
		var h2 = b2._halfExtentsY;
		var d2 = b2._halfExtentsZ;
		var sx1;
		var sx1X;
		var sx1Y;
		var sx1Z;
		var sy1;
		var sy1X;
		var sy1Y;
		var sy1Z;
		var sz1;
		var sz1X;
		var sz1Y;
		var sz1Z;
		var sx2;
		var sx2X;
		var sx2Y;
		var sx2Z;
		var sy2;
		var sy2X;
		var sy2Y;
		var sy2Z;
		var sz2;
		var sz2X;
		var sz2Y;
		var sz2Z;
		sx1X = x1X * w1;
		sx1Y = x1Y * w1;
		sx1Z = x1Z * w1;
		sy1X = y1X * h1;
		sy1Y = y1Y * h1;
		sy1Z = y1Z * h1;
		sz1X = z1X * d1;
		sz1Y = z1Y * d1;
		sz1Z = z1Z * d1;
		sx2X = x2X * w2;
		sx2Y = x2Y * w2;
		sx2Z = x2Z * w2;
		sy2X = y2X * h2;
		sy2Y = y2Y * h2;
		sy2Z = y2Z * h2;
		sz2X = z2X * d2;
		sz2Y = z2Y * d2;
		sz2Z = z2Z * d2;
		var projSum;
		var projC12Abs;
		var mDepth = 1e65536;
		var mId = -1;
		var mSign = 0;
		var mAxis;
		var mAxisX;
		var mAxisY;
		var mAxisZ;
		mAxisX = 0;
		mAxisY = 0;
		mAxisZ = 0;
		var proj1 = w1;
		var dx = x1X * sx2X + x1Y * sx2Y + x1Z * sx2Z;
		var dy = x1X * sy2X + x1Y * sy2Y + x1Z * sy2Z;
		var dz = x1X * sz2X + x1Y * sz2Y + x1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		var proj2 = dx + dy + dz;
		var projC12 = x1X * c12X + x1Y * c12Y + x1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 0;
				mAxisX = x1X;
				mAxisY = x1Y;
				mAxisZ = x1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = h1;
		var dx = y1X * sx2X + y1Y * sx2Y + y1Z * sx2Z;
		var dy = y1X * sy2X + y1Y * sy2Y + y1Z * sy2Z;
		var dz = y1X * sz2X + y1Y * sz2Y + y1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj2 = dx + dy + dz;
		projC12 = y1X * c12X + y1Y * c12Y + y1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 1;
				mAxisX = y1X;
				mAxisY = y1Y;
				mAxisZ = y1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		proj1 = d1;
		var dx = z1X * sx2X + z1Y * sx2Y + z1Z * sx2Z;
		var dy = z1X * sy2X + z1Y * sy2Y + z1Z * sy2Z;
		var dz = z1X * sz2X + z1Y * sz2Y + z1Z * sz2Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj2 = dx + dy + dz;
		projC12 = z1X * c12X + z1Y * c12Y + z1Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 2;
				mAxisX = z1X;
				mAxisY = z1Y;
				mAxisZ = z1Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var dx = x2X * sx1X + x2Y * sx1Y + x2Z * sx1Z;
		var dy = x2X * sy1X + x2Y * sy1Y + x2Z * sy1Z;
		var dz = x2X * sz1X + x2Y * sz1Y + x2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = w2;
		projC12 = x2X * c12X + x2Y * c12Y + x2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 3;
				mAxisX = x2X;
				mAxisY = x2Y;
				mAxisZ = x2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		var dx = y2X * sx1X + y2Y * sx1Y + y2Z * sx1Z;
		var dy = y2X * sy1X + y2Y * sy1Y + y2Z * sy1Z;
		var dz = y2X * sz1X + y2Y * sz1Y + y2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = h2;
		projC12 = y2X * c12X + y2Y * c12Y + y2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 4;
				mAxisX = y2X;
				mAxisY = y2Y;
				mAxisZ = y2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		var dx = z2X * sx1X + z2Y * sx1Y + z2Z * sx1Z;
		var dy = z2X * sy1X + z2Y * sy1Y + z2Z * sy1Z;
		var dz = z2X * sz1X + z2Y * sz1Y + z2Z * sz1Z;
		if(dx < 0) {
			dx = -dx;
		}
		if(dy < 0) {
			dy = -dy;
		}
		if(dz < 0) {
			dz = -dz;
		}
		proj1 = dx + dy + dz;
		proj2 = d2;
		projC12 = z2X * c12X + z2Y * c12Y + z2Z * c12Z;
		var sum = proj1 + proj2;
		var neg = projC12 < 0;
		var abs = neg ? -projC12 : projC12;
		if(abs < sum) {
			var depth = sum - abs;
			if(depth < mDepth) {
				mDepth = depth;
				mId = 5;
				mAxisX = z2X;
				mAxisY = z2Y;
				mAxisZ = z2Z;
				mSign = neg ? -1 : 1;
			}
		} else {
			return;
		}
		if(mDepth > oimo_common_Setting.linearSlop) {
			mDepth -= oimo_common_Setting.linearSlop;
		} else {
			mDepth = 0;
		}
		var edgeAxis;
		var edgeAxisX;
		var edgeAxisY;
		var edgeAxisZ;
		edgeAxisX = x1Y * x2Z - x1Z * x2Y;
		edgeAxisY = x1Z * x2X - x1X * x2Z;
		edgeAxisZ = x1X * x2Y - x1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 6;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * y2Z - x1Z * y2Y;
		edgeAxisY = x1Z * y2X - x1X * y2Z;
		edgeAxisZ = x1X * y2Y - x1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 7;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = x1Y * z2Z - x1Z * z2Y;
		edgeAxisY = x1Z * z2X - x1X * z2Z;
		edgeAxisZ = x1X * z2Y - x1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 8;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * x2Z - y1Z * x2Y;
		edgeAxisY = y1Z * x2X - y1X * x2Z;
		edgeAxisZ = y1X * x2Y - y1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 9;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * y2Z - y1Z * y2Y;
		edgeAxisY = y1Z * y2X - y1X * y2Z;
		edgeAxisZ = y1X * y2Y - y1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 10;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = y1Y * z2Z - y1Z * z2Y;
		edgeAxisY = y1Z * z2X - y1X * z2Z;
		edgeAxisZ = y1X * z2Y - y1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sz1X + edgeAxisY * sz1Y + edgeAxisZ * sz1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 11;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * x2Z - z1Z * x2Y;
		edgeAxisY = z1Z * x2X - z1X * x2Z;
		edgeAxisZ = z1X * x2Y - z1Y * x2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 12;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * y2Z - z1Z * y2Y;
		edgeAxisY = z1Z * y2X - z1X * y2Z;
		edgeAxisZ = z1X * y2Y - z1Y * y2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sz2X + edgeAxisY * sz2Y + edgeAxisZ * sz2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 13;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		edgeAxisX = z1Y * z2Z - z1Z * z2Y;
		edgeAxisY = z1Z * z2X - z1X * z2Z;
		edgeAxisZ = z1X * z2Y - z1Y * z2X;
		if(!(edgeAxisX == 0 && edgeAxisY == 0 && edgeAxisZ == 0)) {
			var l = edgeAxisX * edgeAxisX + edgeAxisY * edgeAxisY + edgeAxisZ * edgeAxisZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			edgeAxisX *= l;
			edgeAxisY *= l;
			edgeAxisZ *= l;
			var dx = edgeAxisX * sx1X + edgeAxisY * sx1Y + edgeAxisZ * sx1Z;
			var dy = edgeAxisX * sy1X + edgeAxisY * sy1Y + edgeAxisZ * sy1Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj1 = dx + dy;
			var dx = edgeAxisX * sx2X + edgeAxisY * sx2Y + edgeAxisZ * sx2Z;
			var dy = edgeAxisX * sy2X + edgeAxisY * sy2Y + edgeAxisZ * sy2Z;
			if(dx < 0) {
				dx = -dx;
			}
			if(dy < 0) {
				dy = -dy;
			}
			proj2 = dx + dy;
			projC12 = edgeAxisX * c12X + edgeAxisY * c12Y + edgeAxisZ * c12Z;
			var sum = proj1 + proj2;
			var neg = projC12 < 0;
			var abs = neg ? -projC12 : projC12;
			if(abs < sum) {
				var depth = sum - abs;
				if(depth < mDepth) {
					mDepth = depth;
					mId = 14;
					mAxisX = edgeAxisX;
					mAxisY = edgeAxisY;
					mAxisZ = edgeAxisZ;
					mSign = neg ? -1 : 1;
				}
			} else {
				return;
			}
		}
		if(mId >= 6) {
			mAxisX *= mSign;
			mAxisY *= mSign;
			mAxisZ *= mSign;
			var id1 = (mId - 6) / 3 | 0;
			var id2 = mId - 6 - id1 * 3;
			var p1;
			var p1X;
			var p1Y;
			var p1Z;
			var p2;
			var p2X;
			var p2Y;
			var p2Z;
			var d11;
			var d1X;
			var d1Y;
			var d1Z;
			var d21;
			var d2X;
			var d2Y;
			var d2Z;
			switch(id1) {
			case 0:
				d1X = x1X;
				d1Y = x1Y;
				d1Z = x1Z;
				var signX = sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0;
				var signY = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p1X = sy1X + sz1X;
						p1Y = sy1Y + sz1Y;
						p1Z = sy1Z + sz1Z;
					} else {
						p1X = sy1X - sz1X;
						p1Y = sy1Y - sz1Y;
						p1Z = sy1Z - sz1Z;
					}
				} else if(signY) {
					p1X = sz1X - sy1X;
					p1Y = sz1Y - sy1Y;
					p1Z = sz1Z - sy1Z;
				} else {
					p1X = sy1X + sz1X;
					p1Y = sy1Y + sz1Y;
					p1Z = sy1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			case 1:
				d1X = y1X;
				d1Y = y1Y;
				d1Z = y1Z;
				var signX = sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0;
				var signY = sz1X * mAxisX + sz1Y * mAxisY + sz1Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p1X = sx1X + sz1X;
						p1Y = sx1Y + sz1Y;
						p1Z = sx1Z + sz1Z;
					} else {
						p1X = sx1X - sz1X;
						p1Y = sx1Y - sz1Y;
						p1Z = sx1Z - sz1Z;
					}
				} else if(signY) {
					p1X = sz1X - sx1X;
					p1Y = sz1Y - sx1Y;
					p1Z = sz1Z - sx1Z;
				} else {
					p1X = sx1X + sz1X;
					p1Y = sx1Y + sz1Y;
					p1Z = sx1Z + sz1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
				break;
			default:
				d1X = z1X;
				d1Y = z1Y;
				d1Z = z1Z;
				var signX = sx1X * mAxisX + sx1Y * mAxisY + sx1Z * mAxisZ > 0;
				var signY = sy1X * mAxisX + sy1Y * mAxisY + sy1Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p1X = sx1X + sy1X;
						p1Y = sx1Y + sy1Y;
						p1Z = sx1Z + sy1Z;
					} else {
						p1X = sx1X - sy1X;
						p1Y = sx1Y - sy1Y;
						p1Z = sx1Z - sy1Z;
					}
				} else if(signY) {
					p1X = sy1X - sx1X;
					p1Y = sy1Y - sx1Y;
					p1Z = sy1Z - sx1Z;
				} else {
					p1X = sx1X + sy1X;
					p1Y = sx1Y + sy1Y;
					p1Z = sx1Z + sy1Z;
					p1X = -p1X;
					p1Y = -p1Y;
					p1Z = -p1Z;
				}
			}
			p1X = c1X + p1X;
			p1Y = c1Y + p1Y;
			p1Z = c1Z + p1Z;
			switch(id2) {
			case 0:
				d2X = x2X;
				d2Y = x2Y;
				d2Z = x2Z;
				var signX = sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0;
				var signY = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p2X = sy2X + sz2X;
						p2Y = sy2Y + sz2Y;
						p2Z = sy2Z + sz2Z;
					} else {
						p2X = sy2X - sz2X;
						p2Y = sy2Y - sz2Y;
						p2Z = sy2Z - sz2Z;
					}
				} else if(signY) {
					p2X = sz2X - sy2X;
					p2Y = sz2Y - sy2Y;
					p2Z = sz2Z - sy2Z;
				} else {
					p2X = sy2X + sz2X;
					p2Y = sy2Y + sz2Y;
					p2Z = sy2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			case 1:
				d2X = y2X;
				d2Y = y2Y;
				d2Z = y2Z;
				var signX = sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0;
				var signY = sz2X * mAxisX + sz2Y * mAxisY + sz2Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p2X = sx2X + sz2X;
						p2Y = sx2Y + sz2Y;
						p2Z = sx2Z + sz2Z;
					} else {
						p2X = sx2X - sz2X;
						p2Y = sx2Y - sz2Y;
						p2Z = sx2Z - sz2Z;
					}
				} else if(signY) {
					p2X = sz2X - sx2X;
					p2Y = sz2Y - sx2Y;
					p2Z = sz2Z - sx2Z;
				} else {
					p2X = sx2X + sz2X;
					p2Y = sx2Y + sz2Y;
					p2Z = sx2Z + sz2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
				break;
			default:
				d2X = z2X;
				d2Y = z2Y;
				d2Z = z2Z;
				var signX = sx2X * mAxisX + sx2Y * mAxisY + sx2Z * mAxisZ > 0;
				var signY = sy2X * mAxisX + sy2Y * mAxisY + sy2Z * mAxisZ > 0;
				if(signX) {
					if(signY) {
						p2X = sx2X + sy2X;
						p2Y = sx2Y + sy2Y;
						p2Z = sx2Z + sy2Z;
					} else {
						p2X = sx2X - sy2X;
						p2Y = sx2Y - sy2Y;
						p2Z = sx2Z - sy2Z;
					}
				} else if(signY) {
					p2X = sy2X - sx2X;
					p2Y = sy2Y - sx2Y;
					p2Z = sy2Z - sx2Z;
				} else {
					p2X = sx2X + sy2X;
					p2Y = sx2Y + sy2Y;
					p2Z = sx2Z + sy2Z;
					p2X = -p2X;
					p2Y = -p2Y;
					p2Z = -p2Z;
				}
			}
			p2X = c2X - p2X;
			p2Y = c2Y - p2Y;
			p2Z = c2Z - p2Z;
			var r;
			var rX;
			var rY;
			var rZ;
			rX = p1X - p2X;
			rY = p1Y - p2Y;
			rZ = p1Z - p2Z;
			var dot12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
			var dot1r = d1X * rX + d1Y * rY + d1Z * rZ;
			var dot2r = d2X * rX + d2Y * rY + d2Z * rZ;
			var invDet = 1 / (1 - dot12 * dot12);
			var t1 = (dot12 * dot2r - dot1r) * invDet;
			var t2 = (dot2r - dot12 * dot1r) * invDet;
			var cp1;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2;
			var cp2X;
			var cp2Y;
			var cp2Z;
			cp1X = p1X + d1X * t1;
			cp1Y = p1Y + d1Y * t1;
			cp1Z = p1Z + d1Z * t1;
			cp2X = p2X + d2X * t2;
			cp2Y = p2Y + d2Y * t2;
			cp2Z = p2Z + d2Z * t2;
			var normal;
			var normalX;
			var normalY;
			var normalZ;
			normalX = -mAxisX;
			normalY = -mAxisY;
			normalZ = -mAxisZ;
			this.setNormal(result,normalX,normalY,normalZ);
			this.addPoint(result,cp1X,cp1Y,cp1Z,cp2X,cp2Y,cp2Z,mDepth,4);
			return;
		}
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var swapped;
		if(mId >= 3) {
			mSign = -mSign;
			c12X = -c12X;
			c12Y = -c12Y;
			c12Z = -c12Z;
			var tmp = b1;
			b1 = b2;
			b2 = tmp;
			var tmp = w1;
			w1 = w2;
			w2 = tmp;
			var tmp = h1;
			h1 = h2;
			h2 = tmp;
			var tmp = d1;
			d1 = d2;
			d2 = tmp;
			tmpX = c1X;
			tmpY = c1Y;
			tmpZ = c1Z;
			c1X = c2X;
			c1Y = c2Y;
			c1Z = c2Z;
			c2X = tmpX;
			c2Y = tmpY;
			c2Z = tmpZ;
			tmpX = x1X;
			tmpY = x1Y;
			tmpZ = x1Z;
			x1X = x2X;
			x1Y = x2Y;
			x1Z = x2Z;
			x2X = tmpX;
			x2Y = tmpY;
			x2Z = tmpZ;
			tmpX = y1X;
			tmpY = y1Y;
			tmpZ = y1Z;
			y1X = y2X;
			y1Y = y2Y;
			y1Z = y2Z;
			y2X = tmpX;
			y2Y = tmpY;
			y2Z = tmpZ;
			tmpX = z1X;
			tmpY = z1Y;
			tmpZ = z1Z;
			z1X = z2X;
			z1Y = z2Y;
			z1Z = z2Z;
			z2X = tmpX;
			z2Y = tmpY;
			z2Z = tmpZ;
			tmpX = sx1X;
			tmpY = sx1Y;
			tmpZ = sx1Z;
			sx1X = sx2X;
			sx1Y = sx2Y;
			sx1Z = sx2Z;
			sx2X = tmpX;
			sx2Y = tmpY;
			sx2Z = tmpZ;
			tmpX = sy1X;
			tmpY = sy1Y;
			tmpZ = sy1Z;
			sy1X = sy2X;
			sy1Y = sy2Y;
			sy1Z = sy2Z;
			sy2X = tmpX;
			sy2Y = tmpY;
			sy2Z = tmpZ;
			tmpX = sz1X;
			tmpY = sz1Y;
			tmpZ = sz1Z;
			sz1X = sz2X;
			sz1Y = sz2Y;
			sz1Z = sz2Z;
			sz2X = tmpX;
			sz2Y = tmpY;
			sz2Z = tmpZ;
			mId -= 3;
			swapped = true;
		} else {
			swapped = false;
		}
		var refCenter;
		var refCenterX;
		var refCenterY;
		var refCenterZ;
		var refNormal;
		var refNormalX;
		var refNormalY;
		var refNormalZ;
		var refX;
		var refXX;
		var refXY;
		var refXZ;
		var refY;
		var refYX;
		var refYY;
		var refYZ;
		var refW;
		var refH;
		switch(mId) {
		case 0:
			refCenterX = sx1X;
			refCenterY = sx1Y;
			refCenterZ = sx1Z;
			refNormalX = x1X;
			refNormalY = x1Y;
			refNormalZ = x1Z;
			refXX = y1X;
			refXY = y1Y;
			refXZ = y1Z;
			refYX = z1X;
			refYY = z1Y;
			refYZ = z1Z;
			refW = h1;
			refH = d1;
			break;
		case 1:
			refCenterX = sy1X;
			refCenterY = sy1Y;
			refCenterZ = sy1Z;
			refNormalX = y1X;
			refNormalY = y1Y;
			refNormalZ = y1Z;
			refXX = z1X;
			refXY = z1Y;
			refXZ = z1Z;
			refYX = x1X;
			refYY = x1Y;
			refYZ = x1Z;
			refW = d1;
			refH = w1;
			break;
		default:
			refCenterX = sz1X;
			refCenterY = sz1Y;
			refCenterZ = sz1Z;
			refNormalX = z1X;
			refNormalY = z1Y;
			refNormalZ = z1Z;
			refXX = x1X;
			refXY = x1Y;
			refXZ = x1Z;
			refYX = y1X;
			refYY = y1Y;
			refYZ = y1Z;
			refW = w1;
			refH = h1;
		}
		if(mSign < 0) {
			refCenterX = -refCenterX;
			refCenterY = -refCenterY;
			refCenterZ = -refCenterZ;
			refNormalX = -refNormalX;
			refNormalY = -refNormalY;
			refNormalZ = -refNormalZ;
			tmpX = refXX;
			tmpY = refXY;
			tmpZ = refXZ;
			refXX = refYX;
			refXY = refYY;
			refXZ = refYZ;
			refYX = tmpX;
			refYY = tmpY;
			refYZ = tmpZ;
			var tmp = refW;
			refW = refH;
			refH = tmp;
		}
		refCenterX += c1X;
		refCenterY += c1Y;
		refCenterZ += c1Z;
		var minIncDot = 1;
		var incId = 0;
		var incDot = refNormalX * x2X + refNormalY * x2Y + refNormalZ * x2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 0;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 1;
		}
		incDot = refNormalX * y2X + refNormalY * y2Y + refNormalZ * y2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 2;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 3;
		}
		incDot = refNormalX * z2X + refNormalY * z2Y + refNormalZ * z2Z;
		if(incDot < minIncDot) {
			minIncDot = incDot;
			incId = 4;
		}
		if(-incDot < minIncDot) {
			minIncDot = -incDot;
			incId = 5;
		}
		var incV1;
		var incV1X;
		var incV1Y;
		var incV1Z;
		var incV2;
		var incV2X;
		var incV2Y;
		var incV2Z;
		var incV3;
		var incV3X;
		var incV3Y;
		var incV3Z;
		var incV4;
		var incV4X;
		var incV4Y;
		var incV4Z;
		switch(incId) {
		case 0:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X - sy2X;
			incV3Y = sx2Y - sy2Y;
			incV3Z = sx2Z - sy2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 1:
			incV1X = sy2X - sx2X;
			incV1Y = sy2Y - sx2Y;
			incV1Z = sy2Z - sx2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X + sy2X;
			incV4Y = sx2Y + sy2Y;
			incV4Z = sx2Z + sy2Z;
			incV4X = -incV4X;
			incV4Y = -incV4Y;
			incV4Z = -incV4Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 2:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sy2X - sx2X;
			incV3Y = sy2Y - sx2Y;
			incV3Z = sy2Z - sx2Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		case 3:
			incV1X = sx2X - sy2X;
			incV1Y = sx2Y - sy2Y;
			incV1Z = sx2Z - sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sx2X + sy2X;
			incV2Y = sx2Y + sy2Y;
			incV2Z = sx2Z + sy2Z;
			incV2X = -incV2X;
			incV2Y = -incV2Y;
			incV2Z = -incV2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
			break;
		case 4:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X += sz2X;
			incV1Y += sz2Y;
			incV1Z += sz2Z;
			incV2X = sy2X - sx2X;
			incV2Y = sy2Y - sx2Y;
			incV2Z = sy2Z - sx2Z;
			incV2X += sz2X;
			incV2Y += sz2Y;
			incV2Z += sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X += sz2X;
			incV3Y += sz2Y;
			incV3Z += sz2Z;
			incV4X = sx2X - sy2X;
			incV4Y = sx2Y - sy2Y;
			incV4Z = sx2Z - sy2Z;
			incV4X += sz2X;
			incV4Y += sz2Y;
			incV4Z += sz2Z;
			break;
		default:
			incV1X = sx2X + sy2X;
			incV1Y = sx2Y + sy2Y;
			incV1Z = sx2Z + sy2Z;
			incV1X -= sz2X;
			incV1Y -= sz2Y;
			incV1Z -= sz2Z;
			incV2X = sx2X - sy2X;
			incV2Y = sx2Y - sy2Y;
			incV2Z = sx2Z - sy2Z;
			incV2X -= sz2X;
			incV2Y -= sz2Y;
			incV2Z -= sz2Z;
			incV3X = sx2X + sy2X;
			incV3Y = sx2Y + sy2Y;
			incV3Z = sx2Z + sy2Z;
			incV3X = -incV3X;
			incV3Y = -incV3Y;
			incV3Z = -incV3Z;
			incV3X -= sz2X;
			incV3Y -= sz2Y;
			incV3Z -= sz2Z;
			incV4X = sy2X - sx2X;
			incV4Y = sy2Y - sx2Y;
			incV4Z = sy2Z - sx2Z;
			incV4X -= sz2X;
			incV4Y -= sz2Y;
			incV4Z -= sz2Z;
		}
		incV1X += c12X;
		incV1Y += c12Y;
		incV1Z += c12Z;
		incV2X += c12X;
		incV2Y += c12Y;
		incV2Z += c12Z;
		incV3X += c12X;
		incV3Y += c12Y;
		incV3Z += c12Z;
		incV4X += c12X;
		incV4Y += c12Y;
		incV4Z += c12Z;
		var _this = this.clipper;
		_this.w = refW;
		_this.h = refH;
		_this.numVertices = 0;
		_this.numTmpVertices = 0;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV1X * refXX + incV1Y * refXY + incV1Z * refXZ;
		_this1.y = incV1X * refYX + incV1Y * refYY + incV1Z * refYZ;
		_this1.wx = incV1X;
		_this1.wy = incV1Y;
		_this1.wz = incV1Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV2X * refXX + incV2Y * refXY + incV2Z * refXZ;
		_this1.y = incV2X * refYX + incV2Y * refYY + incV2Z * refYZ;
		_this1.wx = incV2X;
		_this1.wy = incV2Y;
		_this1.wz = incV2Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV3X * refXX + incV3Y * refXY + incV3Z * refXZ;
		_this1.y = incV3X * refYX + incV3Y * refYY + incV3Z * refYZ;
		_this1.wx = incV3X;
		_this1.wy = incV3Y;
		_this1.wz = incV3Z;
		var _this = this.clipper;
		var _this1 = _this.vertices[_this.numVertices++];
		_this1.x = incV4X * refXX + incV4Y * refXY + incV4Z * refXZ;
		_this1.y = incV4X * refYX + incV4Y * refYY + incV4Z * refYZ;
		_this1.wx = incV4X;
		_this1.wy = incV4Y;
		_this1.wz = incV4Z;
		this.clipper.clip();
		this.clipper.reduce();
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		if(swapped) {
			normalX = refNormalX;
			normalY = refNormalY;
			normalZ = refNormalZ;
		} else {
			normalX = -refNormalX;
			normalY = -refNormalY;
			normalZ = -refNormalZ;
		}
		this.setNormal(result,normalX,normalY,normalZ);
		var _g = 0;
		var _g1 = this.clipper.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v = this.clipper.vertices[i];
			var clippedVertex;
			var clippedVertexX;
			var clippedVertexY;
			var clippedVertexZ;
			clippedVertexX = v.wx;
			clippedVertexY = v.wy;
			clippedVertexZ = v.wz;
			clippedVertexX += c1X;
			clippedVertexY += c1Y;
			clippedVertexZ += c1Z;
			var clippedVertexToRefCenter;
			var clippedVertexToRefCenterX;
			var clippedVertexToRefCenterY;
			var clippedVertexToRefCenterZ;
			clippedVertexToRefCenterX = refCenterX - clippedVertexX;
			clippedVertexToRefCenterY = refCenterY - clippedVertexY;
			clippedVertexToRefCenterZ = refCenterZ - clippedVertexZ;
			var depth = clippedVertexToRefCenterX * refNormalX + clippedVertexToRefCenterY * refNormalY + clippedVertexToRefCenterZ * refNormalZ;
			var clippedVertexOnRefFace;
			var clippedVertexOnRefFaceX;
			var clippedVertexOnRefFaceY;
			var clippedVertexOnRefFaceZ;
			clippedVertexOnRefFaceX = clippedVertexX + refNormalX * depth;
			clippedVertexOnRefFaceY = clippedVertexY + refNormalY * depth;
			clippedVertexOnRefFaceZ = clippedVertexZ + refNormalZ * depth;
			if(depth > -oimo_common_Setting.contactPersistenceThreshold) {
				if(swapped) {
					this.addPoint(result,clippedVertexX,clippedVertexY,clippedVertexZ,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,depth,i);
				} else {
					this.addPoint(result,clippedVertexOnRefFaceX,clippedVertexOnRefFaceY,clippedVertexOnRefFaceZ,clippedVertexX,clippedVertexY,clippedVertexZ,depth,i);
				}
			}
		}
	}
	,__class__: oimo_collision_narrowphase_detector_BoxBoxDetector
});
var oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex = function() {
	this.x = 0;
	this.y = 0;
	this.wx = 0;
	this.wy = 0;
	this.wz = 0;
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex.__name__ = "oimo.collision.narrowphase.detector._BoxBoxDetector.IncidentVertex";
oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex.prototype = {
	__class__: oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex
};
var oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper = function() {
	this.w = 0;
	this.h = 0;
	this.numVertices = 0;
	this.numTmpVertices = 0;
	var this1 = new Array(8);
	this.vertices = this1;
	var this1 = new Array(8);
	this.tmpVertices = this1;
	this.vertices[0] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[0] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[1] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[1] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[2] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[2] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[3] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[3] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[4] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[4] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[5] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[5] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[6] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[6] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.vertices[7] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
	this.tmpVertices[7] = new oimo_collision_narrowphase_detector__$BoxBoxDetector_IncidentVertex();
};
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.__name__ = "oimo.collision.narrowphase.detector._BoxBoxDetector.FaceClipper";
oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper.prototype = {
	clip: function() {
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.w + v1.x;
			var s2 = this.w + v2.x;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.w - v1.x;
			var s2 = this.w - v2.x;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.h + v1.y;
			var s2 = this.h + v2.y;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v1 = this.vertices[i];
			var v2 = this.vertices[(i + 1) % this.numVertices];
			var s1 = this.h - v1.y;
			var s2 = this.h - v2.y;
			if(s1 > 0 && s2 > 0) {
				var _this = this.tmpVertices[this.numTmpVertices++];
				_this.x = v1.x;
				_this.y = v1.y;
				_this.wx = v1.wx;
				_this.wy = v1.wy;
				_this.wz = v1.wz;
			} else if(s1 > 0 && s2 <= 0) {
				var _this1 = this.tmpVertices[this.numTmpVertices++];
				_this1.x = v1.x;
				_this1.y = v1.y;
				_this1.wx = v1.wx;
				_this1.wy = v1.wy;
				_this1.wz = v1.wz;
				var t = s1 / (s1 - s2);
				var _this2 = this.tmpVertices[this.numTmpVertices++];
				_this2.x = v1.x + (v2.x - v1.x) * t;
				_this2.y = v1.y + (v2.y - v1.y) * t;
				_this2.wx = v1.wx + (v2.wx - v1.wx) * t;
				_this2.wy = v1.wy + (v2.wy - v1.wy) * t;
				_this2.wz = v1.wz + (v2.wz - v1.wz) * t;
			} else if(s1 <= 0 && s2 > 0) {
				var t1 = s1 / (s1 - s2);
				var _this3 = this.tmpVertices[this.numTmpVertices++];
				_this3.x = v1.x + (v2.x - v1.x) * t1;
				_this3.y = v1.y + (v2.y - v1.y) * t1;
				_this3.wx = v1.wx + (v2.wx - v1.wx) * t1;
				_this3.wy = v1.wy + (v2.wy - v1.wy) * t1;
				_this3.wz = v1.wz + (v2.wz - v1.wz) * t1;
			}
		}
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
	,reduce: function() {
		if(this.numVertices < 4) {
			return;
		}
		var max1 = -1e65536;
		var min1 = 1e65536;
		var max2 = -1e65536;
		var min2 = 1e65536;
		var max1V = null;
		var min1V = null;
		var max2V = null;
		var min2V = null;
		var e1x = 1;
		var e1y = 1;
		var e2x = -1;
		var e2y = 1;
		var _g = 0;
		var _g1 = this.numVertices;
		while(_g < _g1) {
			var i = _g++;
			var v = this.vertices[i];
			var dot1 = v.x * e1x + v.y * e1y;
			var dot2 = v.x * e2x + v.y * e2y;
			if(dot1 > max1) {
				max1 = dot1;
				max1V = v;
			}
			if(dot1 < min1) {
				min1 = dot1;
				min1V = v;
			}
			if(dot2 > max2) {
				max2 = dot2;
				max2V = v;
			}
			if(dot2 < min2) {
				min2 = dot2;
				min2V = v;
			}
		}
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = max1V.x;
		_this.y = max1V.y;
		_this.wx = max1V.wx;
		_this.wy = max1V.wy;
		_this.wz = max1V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = max2V.x;
		_this.y = max2V.y;
		_this.wx = max2V.wx;
		_this.wy = max2V.wy;
		_this.wz = max2V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = min1V.x;
		_this.y = min1V.y;
		_this.wx = min1V.wx;
		_this.wy = min1V.wy;
		_this.wz = min1V.wz;
		var _this = this.tmpVertices[this.numTmpVertices++];
		_this.x = min2V.x;
		_this.y = min2V.y;
		_this.wx = min2V.wx;
		_this.wy = min2V.wy;
		_this.wz = min2V.wz;
		var tmp = this.vertices;
		this.vertices = this.tmpVertices;
		this.tmpVertices = tmp;
		this.numVertices = this.numTmpVertices;
		this.numTmpVertices = 0;
	}
	,__class__: oimo_collision_narrowphase_detector__$BoxBoxDetector_FaceClipper
};
var oimo_collision_narrowphase_detector_BoxBoxDetectorMacro = function() { };
oimo_collision_narrowphase_detector_BoxBoxDetectorMacro.__name__ = "oimo.collision.narrowphase.detector.BoxBoxDetectorMacro";
var oimo_collision_narrowphase_detector_CachedDetectorData = function() {
};
oimo_collision_narrowphase_detector_CachedDetectorData.__name__ = "oimo.collision.narrowphase.detector.CachedDetectorData";
oimo_collision_narrowphase_detector_CachedDetectorData.prototype = {
	_clear: function() {
		if(this._gjkCache != null) {
			this._gjkCache.clear();
		}
	}
	,__class__: oimo_collision_narrowphase_detector_CachedDetectorData
};
var oimo_collision_narrowphase_detector_CapsuleCapsuleDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__name__ = "oimo.collision.narrowphase.detector.CapsuleCapsuleDetector";
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_CapsuleCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var c1 = geom1;
		var c2 = geom2;
		result.incremental = false;
		var axis1;
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = tf1._rotation01;
		axis1Y = tf1._rotation11;
		axis1Z = tf1._rotation21;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var hh1 = c1._halfHeight;
		var hh2 = c2._halfHeight;
		var r1 = c1._radius;
		var r2 = c2._radius;
		var p1;
		var p1X;
		var p1Y;
		var p1Z;
		var q1;
		var q1X;
		var q1Y;
		var q1Z;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var q2;
		var q2X;
		var q2Y;
		var q2Z;
		p1X = tf1._positionX + axis1X * -hh1;
		p1Y = tf1._positionY + axis1Y * -hh1;
		p1Z = tf1._positionZ + axis1Z * -hh1;
		q1X = tf1._positionX + axis1X * hh1;
		q1Y = tf1._positionY + axis1Y * hh1;
		q1Z = tf1._positionZ + axis1Z * hh1;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = p1X - p2X;
		p12Y = p1Y - p2Y;
		p12Z = p1Z - p2Z;
		var d1;
		var d1X;
		var d1Y;
		var d1Z;
		var d2;
		var d2X;
		var d2Y;
		var d2Z;
		d1X = q1X - p1X;
		d1Y = q1Y - p1Y;
		d1Z = q1Z - p1Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var p21d1 = -(p12X * d1X + p12Y * d1Y + p12Z * d1Z);
		var p12d2 = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		var d11 = hh1 * hh1 * 4;
		var d12 = d1X * d2X + d1Y * d2Y + d1Z * d2Z;
		var d22 = hh2 * hh2 * 4;
		var t1;
		var t2;
		if(d11 == 0 && d22 == 0) {
			t1 = 0;
			t2 = 0;
		} else if(d11 == 0) {
			t1 = 0;
			t2 = p12d2;
			if(t2 < 0) {
				t2 = 0;
			} else if(t2 > d22) {
				t2 = 1;
			} else {
				t2 /= d22;
			}
		} else if(d22 == 0) {
			t2 = 0;
			t1 = p21d1;
			if(t1 < 0) {
				t1 = 0;
			} else if(t1 > d11) {
				t1 = 1;
			} else {
				t1 /= d11;
			}
		} else {
			var det = d11 * d22 - d12 * d12;
			if(det == 0) {
				t1 = 0;
			} else {
				t1 = d12 * p12d2 + d22 * p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > det) {
					t1 = 1;
				} else {
					t1 /= det;
				}
			}
			t2 = t1 * d12 + p12d2;
			if(t2 < 0) {
				t2 = 0;
				t1 = p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > d11) {
					t1 = 1;
				} else {
					t1 /= d11;
				}
			} else if(t2 > d22) {
				t2 = 1;
				t1 = d12 + p21d1;
				if(t1 < 0) {
					t1 = 0;
				} else if(t1 > d11) {
					t1 = 1;
				} else {
					t1 /= d11;
				}
			} else {
				t2 /= d22;
			}
		}
		var cp1;
		var cp1X;
		var cp1Y;
		var cp1Z;
		var cp2;
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp1X = p1X + d1X * t1;
		cp1Y = p1Y + d1Y * t1;
		cp1Z = p1Z + d1Z * t1;
		cp2X = p2X + d2X * t2;
		cp2Y = p2Y + d2Y * t2;
		cp2Z = p2Z + d2Z * t2;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_CapsuleCapsuleDetector
});
var oimo_collision_narrowphase_detector_GjkEpaDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_GjkEpaDetector.__name__ = "oimo.collision.narrowphase.detector.GjkEpaDetector";
oimo_collision_narrowphase_detector_GjkEpaDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_GjkEpaDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var gjkEpa = oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
		var g1 = geom1;
		var g2 = geom2;
		var status = gjkEpa.computeClosestPointsImpl(g1,g2,tf1,tf2,oimo_common_Setting.enableGJKCaching ? cachedData : null,true);
		result.incremental = true;
		if(status != oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED) {
			haxe_Log.trace("GJK/EPA failed: status=" + status,{ fileName : "oimo/collision/narrowphase/detector/GjkEpaDetector.hx", lineNumber : 28, className : "oimo.collision.narrowphase.detector.GjkEpaDetector", methodName : "detectImpl"});
			return;
		}
		var margin1 = g1._gjkMargin;
		var margin2 = g2._gjkMargin;
		if(gjkEpa.distance > margin1 + margin2) {
			return;
		}
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		var v = gjkEpa.closestPoint1;
		pos1X = v.x;
		pos1Y = v.y;
		pos1Z = v.z;
		var v = gjkEpa.closestPoint2;
		pos2X = v.x;
		pos2Y = v.y;
		pos2Z = v.z;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		normalX = pos1X - pos2X;
		normalY = pos1Y - pos2Y;
		normalZ = pos1Z - pos2Z;
		if(normalX * normalX + normalY * normalY + normalZ * normalZ == 0) {
			return;
		}
		if(gjkEpa.distance < 0) {
			normalX = -normalX;
			normalY = -normalY;
			normalZ = -normalZ;
		}
		var l = normalX * normalX + normalY * normalY + normalZ * normalZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX *= l;
		normalY *= l;
		normalZ *= l;
		this.setNormal(result,normalX,normalY,normalZ);
		pos1X += normalX * -g1._gjkMargin;
		pos1Y += normalY * -g1._gjkMargin;
		pos1Z += normalZ * -g1._gjkMargin;
		pos2X += normalX * g2._gjkMargin;
		pos2Y += normalY * g2._gjkMargin;
		pos2Z += normalZ * g2._gjkMargin;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,g1._gjkMargin + g2._gjkMargin - gjkEpa.distance,0);
	}
	,__class__: oimo_collision_narrowphase_detector_GjkEpaDetector
});
var oimo_collision_narrowphase_detector_SphereBoxDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereBoxDetector.__name__ = "oimo.collision.narrowphase.detector.SphereBoxDetector";
oimo_collision_narrowphase_detector_SphereBoxDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereBoxDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s = geom1;
		var b = geom2;
		result.incremental = false;
		var halfExt;
		var halfExtX;
		var halfExtY;
		var halfExtZ;
		var negHalfExt;
		var negHalfExtX;
		var negHalfExtY;
		var negHalfExtZ;
		halfExtX = b._halfExtentsX;
		halfExtY = b._halfExtentsY;
		halfExtZ = b._halfExtentsZ;
		negHalfExtX = -halfExtX;
		negHalfExtY = -halfExtY;
		negHalfExtZ = -halfExtZ;
		var r = s._radius;
		var boxToSphere;
		var boxToSphereX;
		var boxToSphereY;
		var boxToSphereZ;
		boxToSphereX = tf1._positionX - tf2._positionX;
		boxToSphereY = tf1._positionY - tf2._positionY;
		boxToSphereZ = tf1._positionZ - tf2._positionZ;
		var boxToSphereInBox;
		var boxToSphereInBoxX;
		var boxToSphereInBoxY;
		var boxToSphereInBoxZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * boxToSphereX + tf2._rotation10 * boxToSphereY + tf2._rotation20 * boxToSphereZ;
		__tmp__Y = tf2._rotation01 * boxToSphereX + tf2._rotation11 * boxToSphereY + tf2._rotation21 * boxToSphereZ;
		__tmp__Z = tf2._rotation02 * boxToSphereX + tf2._rotation12 * boxToSphereY + tf2._rotation22 * boxToSphereZ;
		boxToSphereInBoxX = __tmp__X;
		boxToSphereInBoxY = __tmp__Y;
		boxToSphereInBoxZ = __tmp__Z;
		var insideBox = negHalfExtX < boxToSphereInBoxX && halfExtX > boxToSphereInBoxX && negHalfExtY < boxToSphereInBoxY && halfExtY > boxToSphereInBoxY && negHalfExtZ < boxToSphereInBoxZ && halfExtZ > boxToSphereInBoxZ;
		if(insideBox) {
			var sphereToBoxSurface;
			var sphereToBoxSurfaceX;
			var sphereToBoxSurfaceY;
			var sphereToBoxSurfaceZ;
			sphereToBoxSurfaceX = boxToSphereInBoxX < 0 ? -boxToSphereInBoxX : boxToSphereInBoxX;
			sphereToBoxSurfaceY = boxToSphereInBoxY < 0 ? -boxToSphereInBoxY : boxToSphereInBoxY;
			sphereToBoxSurfaceZ = boxToSphereInBoxZ < 0 ? -boxToSphereInBoxZ : boxToSphereInBoxZ;
			sphereToBoxSurfaceX = halfExtX - sphereToBoxSurfaceX;
			sphereToBoxSurfaceY = halfExtY - sphereToBoxSurfaceY;
			sphereToBoxSurfaceZ = halfExtZ - sphereToBoxSurfaceZ;
			var normalInBox;
			var normalInBoxX;
			var normalInBoxY;
			var normalInBoxZ;
			var distX = sphereToBoxSurfaceX;
			var distY = sphereToBoxSurfaceY;
			var distZ = sphereToBoxSurfaceZ;
			var depth;
			var projectionMask;
			var projectionMaskX;
			var projectionMaskY;
			var projectionMaskZ;
			if(distX < distY) {
				if(distX < distZ) {
					if(boxToSphereInBoxX > 0) {
						normalInBoxX = 1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					} else {
						normalInBoxX = -1;
						normalInBoxY = 0;
						normalInBoxZ = 0;
					}
					projectionMaskX = 0;
					projectionMaskY = 1;
					projectionMaskZ = 1;
					depth = distX;
				} else {
					if(boxToSphereInBoxZ > 0) {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = 1;
					} else {
						normalInBoxX = 0;
						normalInBoxY = 0;
						normalInBoxZ = -1;
					}
					projectionMaskX = 1;
					projectionMaskY = 1;
					projectionMaskZ = 0;
					depth = distZ;
				}
			} else if(distY < distZ) {
				if(boxToSphereInBoxY > 0) {
					normalInBoxX = 0;
					normalInBoxY = 1;
					normalInBoxZ = 0;
				} else {
					normalInBoxX = 0;
					normalInBoxY = -1;
					normalInBoxZ = 0;
				}
				projectionMaskX = 1;
				projectionMaskY = 0;
				projectionMaskZ = 1;
				depth = distY;
			} else {
				if(boxToSphereInBoxZ > 0) {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = 1;
				} else {
					normalInBoxX = 0;
					normalInBoxY = 0;
					normalInBoxZ = -1;
				}
				projectionMaskX = 1;
				projectionMaskY = 1;
				projectionMaskZ = 0;
				depth = distZ;
			}
			var base;
			var baseX;
			var baseY;
			var baseZ;
			baseX = projectionMaskX * boxToSphereInBoxX;
			baseY = projectionMaskY * boxToSphereInBoxY;
			baseZ = projectionMaskZ * boxToSphereInBoxZ;
			var boxToClosestPointInBox;
			var boxToClosestPointInBoxX;
			var boxToClosestPointInBoxY;
			var boxToClosestPointInBoxZ;
			boxToClosestPointInBoxX = normalInBoxX * halfExtX;
			boxToClosestPointInBoxY = normalInBoxY * halfExtY;
			boxToClosestPointInBoxZ = normalInBoxZ * halfExtZ;
			boxToClosestPointInBoxX += baseX;
			boxToClosestPointInBoxY += baseY;
			boxToClosestPointInBoxZ += baseZ;
			var boxToClosestPoint;
			var boxToClosestPointX;
			var boxToClosestPointY;
			var boxToClosestPointZ;
			var normal;
			var normalX;
			var normalY;
			var normalZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * boxToClosestPointInBoxX + tf2._rotation01 * boxToClosestPointInBoxY + tf2._rotation02 * boxToClosestPointInBoxZ;
			__tmp__Y = tf2._rotation10 * boxToClosestPointInBoxX + tf2._rotation11 * boxToClosestPointInBoxY + tf2._rotation12 * boxToClosestPointInBoxZ;
			__tmp__Z = tf2._rotation20 * boxToClosestPointInBoxX + tf2._rotation21 * boxToClosestPointInBoxY + tf2._rotation22 * boxToClosestPointInBoxZ;
			boxToClosestPointX = __tmp__X;
			boxToClosestPointY = __tmp__Y;
			boxToClosestPointZ = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * normalInBoxX + tf2._rotation01 * normalInBoxY + tf2._rotation02 * normalInBoxZ;
			__tmp__Y = tf2._rotation10 * normalInBoxX + tf2._rotation11 * normalInBoxY + tf2._rotation12 * normalInBoxZ;
			__tmp__Z = tf2._rotation20 * normalInBoxX + tf2._rotation21 * normalInBoxY + tf2._rotation22 * normalInBoxZ;
			normalX = __tmp__X;
			normalY = __tmp__Y;
			normalZ = __tmp__Z;
			this.setNormal(result,normalX,normalY,normalZ);
			var pos1;
			var pos1X;
			var pos1Y;
			var pos1Z;
			var pos2;
			var pos2X;
			var pos2Y;
			var pos2Z;
			pos1X = tf1._positionX + normalX * -r;
			pos1Y = tf1._positionY + normalY * -r;
			pos1Z = tf1._positionZ + normalZ * -r;
			pos2X = tf2._positionX + boxToClosestPointX;
			pos2Y = tf2._positionY + boxToClosestPointY;
			pos2Z = tf2._positionZ + boxToClosestPointZ;
			this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,depth,0);
			return;
		}
		var boxToClosestPointInBox;
		var boxToClosestPointInBoxX;
		var boxToClosestPointInBoxY;
		var boxToClosestPointInBoxZ;
		var eps = 1e-9;
		var epsVec;
		var epsVecX;
		var epsVecY;
		var epsVecZ;
		epsVecX = eps;
		epsVecY = eps;
		epsVecZ = eps;
		halfExtX -= epsVecX;
		halfExtY -= epsVecY;
		halfExtZ -= epsVecZ;
		negHalfExtX += epsVecX;
		negHalfExtY += epsVecY;
		negHalfExtZ += epsVecZ;
		boxToClosestPointInBoxX = boxToSphereInBoxX < halfExtX ? boxToSphereInBoxX : halfExtX;
		boxToClosestPointInBoxY = boxToSphereInBoxY < halfExtY ? boxToSphereInBoxY : halfExtY;
		boxToClosestPointInBoxZ = boxToSphereInBoxZ < halfExtZ ? boxToSphereInBoxZ : halfExtZ;
		if(!(boxToClosestPointInBoxX > negHalfExtX)) {
			boxToClosestPointInBoxX = negHalfExtX;
		}
		if(!(boxToClosestPointInBoxY > negHalfExtY)) {
			boxToClosestPointInBoxY = negHalfExtY;
		}
		if(!(boxToClosestPointInBoxZ > negHalfExtZ)) {
			boxToClosestPointInBoxZ = negHalfExtZ;
		}
		var closestPointToSphereInBox;
		var closestPointToSphereInBoxX;
		var closestPointToSphereInBoxY;
		var closestPointToSphereInBoxZ;
		closestPointToSphereInBoxX = boxToSphereInBoxX - boxToClosestPointInBoxX;
		closestPointToSphereInBoxY = boxToSphereInBoxY - boxToClosestPointInBoxY;
		closestPointToSphereInBoxZ = boxToSphereInBoxZ - boxToClosestPointInBoxZ;
		var dist = closestPointToSphereInBoxX * closestPointToSphereInBoxX + closestPointToSphereInBoxY * closestPointToSphereInBoxY + closestPointToSphereInBoxZ * closestPointToSphereInBoxZ;
		if(dist >= r * r) {
			return;
		}
		dist = Math.sqrt(dist);
		var boxToClosestPoint;
		var boxToClosestPointX;
		var boxToClosestPointY;
		var boxToClosestPointZ;
		var closestPointToSphere;
		var closestPointToSphereX;
		var closestPointToSphereY;
		var closestPointToSphereZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * boxToClosestPointInBoxX + tf2._rotation01 * boxToClosestPointInBoxY + tf2._rotation02 * boxToClosestPointInBoxZ;
		__tmp__Y = tf2._rotation10 * boxToClosestPointInBoxX + tf2._rotation11 * boxToClosestPointInBoxY + tf2._rotation12 * boxToClosestPointInBoxZ;
		__tmp__Z = tf2._rotation20 * boxToClosestPointInBoxX + tf2._rotation21 * boxToClosestPointInBoxY + tf2._rotation22 * boxToClosestPointInBoxZ;
		boxToClosestPointX = __tmp__X;
		boxToClosestPointY = __tmp__Y;
		boxToClosestPointZ = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * closestPointToSphereInBoxX + tf2._rotation01 * closestPointToSphereInBoxY + tf2._rotation02 * closestPointToSphereInBoxZ;
		__tmp__Y = tf2._rotation10 * closestPointToSphereInBoxX + tf2._rotation11 * closestPointToSphereInBoxY + tf2._rotation12 * closestPointToSphereInBoxZ;
		__tmp__Z = tf2._rotation20 * closestPointToSphereInBoxX + tf2._rotation21 * closestPointToSphereInBoxY + tf2._rotation22 * closestPointToSphereInBoxZ;
		closestPointToSphereX = __tmp__X;
		closestPointToSphereY = __tmp__Y;
		closestPointToSphereZ = __tmp__Z;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		var l = closestPointToSphereX * closestPointToSphereX + closestPointToSphereY * closestPointToSphereY + closestPointToSphereZ * closestPointToSphereZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		normalX = closestPointToSphereX * l;
		normalY = closestPointToSphereY * l;
		normalZ = closestPointToSphereZ * l;
		this.setNormal(result,normalX,normalY,normalZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = tf1._positionX + normalX * -r;
		pos1Y = tf1._positionY + normalY * -r;
		pos1Z = tf1._positionZ + normalZ * -r;
		pos2X = tf2._positionX + boxToClosestPointX;
		pos2Y = tf2._positionY + boxToClosestPointY;
		pos2Z = tf2._positionZ + boxToClosestPointZ;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r - dist,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereBoxDetector
});
var oimo_collision_narrowphase_detector_SphereCapsuleDetector = function(swapped) {
	oimo_collision_narrowphase_detector_Detector.call(this,swapped);
};
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__name__ = "oimo.collision.narrowphase.detector.SphereCapsuleDetector";
oimo_collision_narrowphase_detector_SphereCapsuleDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereCapsuleDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s1 = geom1;
		var c2 = geom2;
		result.incremental = false;
		var hh2 = c2._halfHeight;
		var r1 = s1._radius;
		var r2 = c2._radius;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis2X = tf2._rotation01;
		axis2Y = tf2._rotation11;
		axis2Z = tf2._rotation21;
		var cp1;
		var cp1X;
		var cp1Y;
		var cp1Z;
		cp1X = tf1._positionX;
		cp1Y = tf1._positionY;
		cp1Z = tf1._positionZ;
		var p2;
		var p2X;
		var p2Y;
		var p2Z;
		var q2;
		var q2X;
		var q2Y;
		var q2Z;
		p2X = tf2._positionX + axis2X * -hh2;
		p2Y = tf2._positionY + axis2Y * -hh2;
		p2Z = tf2._positionZ + axis2Z * -hh2;
		q2X = tf2._positionX + axis2X * hh2;
		q2Y = tf2._positionY + axis2Y * hh2;
		q2Z = tf2._positionZ + axis2Z * hh2;
		var p12;
		var p12X;
		var p12Y;
		var p12Z;
		p12X = cp1X - p2X;
		p12Y = cp1Y - p2Y;
		p12Z = cp1Z - p2Z;
		var d2;
		var d2X;
		var d2Y;
		var d2Z;
		d2X = q2X - p2X;
		d2Y = q2Y - p2Y;
		d2Z = q2Z - p2Z;
		var d22 = hh2 * hh2 * 4;
		var t = p12X * d2X + p12Y * d2Y + p12Z * d2Z;
		if(t < 0) {
			t = 0;
		} else if(t > d22) {
			t = 1;
		} else {
			t /= d22;
		}
		var cp2;
		var cp2X;
		var cp2Y;
		var cp2Z;
		cp2X = p2X + d2X * t;
		cp2Y = p2Y + d2Y * t;
		cp2Z = p2Z + d2Z * t;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = cp1X - cp2X;
		dY = cp1Y - cp2Y;
		dZ = cp1Z - cp2Z;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = cp1X + nX * -r1;
		pos1Y = cp1Y + nY * -r1;
		pos1Z = cp1Z + nZ * -r1;
		pos2X = cp2X + nX * r2;
		pos2Y = cp2Y + nY * r2;
		pos2Z = cp2Z + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereCapsuleDetector
});
var oimo_collision_narrowphase_detector_SphereSphereDetector = function() {
	oimo_collision_narrowphase_detector_Detector.call(this,false);
};
oimo_collision_narrowphase_detector_SphereSphereDetector.__name__ = "oimo.collision.narrowphase.detector.SphereSphereDetector";
oimo_collision_narrowphase_detector_SphereSphereDetector.__super__ = oimo_collision_narrowphase_detector_Detector;
oimo_collision_narrowphase_detector_SphereSphereDetector.prototype = $extend(oimo_collision_narrowphase_detector_Detector.prototype,{
	detectImpl: function(result,geom1,geom2,tf1,tf2,cachedData) {
		var s1 = geom1;
		var s2 = geom2;
		result.incremental = false;
		var d;
		var dX;
		var dY;
		var dZ;
		dX = tf1._positionX - tf2._positionX;
		dY = tf1._positionY - tf2._positionY;
		dZ = tf1._positionZ - tf2._positionZ;
		var r1 = s1._radius;
		var r2 = s2._radius;
		var len2 = dX * dX + dY * dY + dZ * dZ;
		if(len2 >= (r1 + r2) * (r1 + r2)) {
			return;
		}
		var len = Math.sqrt(len2);
		var n;
		var nX;
		var nY;
		var nZ;
		if(len > 0) {
			nX = dX * (1 / len);
			nY = dY * (1 / len);
			nZ = dZ * (1 / len);
		} else {
			nX = 1;
			nY = 0;
			nZ = 0;
		}
		this.setNormal(result,nX,nY,nZ);
		var pos1;
		var pos1X;
		var pos1Y;
		var pos1Z;
		var pos2;
		var pos2X;
		var pos2Y;
		var pos2Z;
		pos1X = tf1._positionX + nX * -r1;
		pos1Y = tf1._positionY + nY * -r1;
		pos1Z = tf1._positionZ + nZ * -r1;
		pos2X = tf2._positionX + nX * r2;
		pos2Y = tf2._positionY + nY * r2;
		pos2Z = tf2._positionZ + nZ * r2;
		this.addPoint(result,pos1X,pos1Y,pos1Z,pos2X,pos2Y,pos2Z,r1 + r2 - len,0);
	}
	,__class__: oimo_collision_narrowphase_detector_SphereSphereDetector
});
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron = function() {
	var this1 = new Array(oimo_common_Setting.maxEPAVertices);
	this._vertices = this1;
	this._center = new oimo_common_Vec3();
	this._numVertices = 0;
	this._triangleList = null;
	this._triangleListLast = null;
	this._numTriangles = 0;
	this._trianglePool = null;
	this._vertexPool = null;
};
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.__name__ = "oimo.collision.narrowphase.detector.gjkepa.EpaPolyhedron";
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron.prototype = {
	dumpHoleEdge: function(first) {
	}
	,validate: function() {
		var t = this._triangleList;
		while(t != null) {
			var n = t._next;
			t._vertices[0]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[0]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[0] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[0] == null) {
				this._status = 3;
				return false;
			}
			t._vertices[1]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[1]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[1] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[1] == null) {
				this._status = 3;
				return false;
			}
			t._vertices[2]._tmpEdgeLoopOuterTriangle = null;
			t._vertices[2]._tmpEdgeLoopNext = null;
			if(t._adjacentPairIndex[2] == -1) {
				this._status = 2;
				return false;
			}
			if(t._adjacentTriangles[2] == null) {
				this._status = 3;
				return false;
			}
			t = n;
		}
		return true;
	}
	,findEdgeLoop: function(id,base,from) {
		if(base._tmpDfsId == id) {
			return;
		}
		base._tmpDfsId = id;
		var _this = base.tmp;
		_this.x = from.x;
		_this.y = from.y;
		_this.z = from.z;
		var _this1 = _this;
		var v = base._vertices[0].v;
		var tx = _this1.x - v.x;
		var ty = _this1.y - v.y;
		var tz = _this1.z - v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = base.tmp;
		var v = base._normal;
		base._tmpDfsVisible = _this.x * v.x + _this.y * v.y + _this.z * v.z > 0;
		if(!base._tmpDfsVisible) {
			this._status = 6;
			return;
		}
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var t = base._adjacentTriangles[i];
			if(t == null) {
				continue;
			}
			var _this = t.tmp;
			_this.x = from.x;
			_this.y = from.y;
			_this.z = from.z;
			var _this1 = _this;
			var v = t._vertices[0].v;
			var tx = _this1.x - v.x;
			var ty = _this1.y - v.y;
			var tz = _this1.z - v.z;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var _this2 = t.tmp;
			var v1 = t._normal;
			t._tmpDfsVisible = _this2.x * v1.x + _this2.y * v1.y + _this2.z * v1.z > 0;
			if(t._tmpDfsVisible) {
				this.findEdgeLoop(id,t,from);
			} else {
				var i2 = base._nextIndex[i];
				var v11 = base._vertices[i];
				var v2 = base._vertices[i2];
				v11._tmpEdgeLoopNext = v2;
				v11._tmpEdgeLoopOuterTriangle = t;
			}
		}
		var triangle = base._adjacentTriangles[0];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[0];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[0] = null;
			base._adjacentPairIndex[0] = -1;
		}
		var triangle = base._adjacentTriangles[1];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[1];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[1] = null;
			base._adjacentPairIndex[1] = -1;
		}
		var triangle = base._adjacentTriangles[2];
		if(triangle != null) {
			var pairIndex = base._adjacentPairIndex[2];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			base._adjacentTriangles[2] = null;
			base._adjacentPairIndex[2] = -1;
		}
		this._numTriangles--;
		var prev = base._prev;
		var next = base._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(base == this._triangleList) {
			this._triangleList = this._triangleList._next;
		}
		if(base == this._triangleListLast) {
			this._triangleListLast = this._triangleListLast._prev;
		}
		base._next = null;
		base._prev = null;
		base.removeReferences();
		base._next = this._trianglePool;
		this._trianglePool = base;
	}
	,_init: function(v1,v2,v3,v4) {
		this._status = 0;
		this._numVertices = 4;
		this._vertices[0] = v1;
		this._vertices[1] = v2;
		this._vertices[2] = v3;
		this._vertices[3] = v4;
		var _this = this._center;
		var v = v1.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var v = v2.v;
		var tx = _this1.x + v.x;
		var ty = _this1.y + v.y;
		var tz = _this1.z + v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var v = v3.v;
		var tx = _this.x + v.x;
		var ty = _this.y + v.y;
		var tz = _this.z + v.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var v = v4.v;
		var tx = _this1.x + v.x;
		var ty = _this1.y + v.y;
		var tz = _this1.z + v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x * 0.25;
		var ty = _this.y * 0.25;
		var tz = _this.z * 0.25;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t1 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t2 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t3 = first;
		var first = this._trianglePool;
		if(first != null) {
			this._trianglePool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
		}
		var t4 = first;
		var autoCheck = true;
		if(autoCheck == null) {
			autoCheck = false;
		}
		if(!t1.init(v1,v2,v3,this._center,autoCheck)) {
			this._status = 1;
		}
		var autoCheck = true;
		if(autoCheck == null) {
			autoCheck = false;
		}
		if(!t2.init(v1,v2,v4,this._center,autoCheck)) {
			this._status = 1;
		}
		var autoCheck = true;
		if(autoCheck == null) {
			autoCheck = false;
		}
		if(!t3.init(v1,v3,v4,this._center,autoCheck)) {
			this._status = 1;
		}
		var autoCheck = true;
		if(autoCheck == null) {
			autoCheck = false;
		}
		if(!t4.init(v2,v3,v4,this._center,autoCheck)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t2)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t1.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t3)) {
			this._status = 1;
		}
		if(!t2.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		if(!t3.setAdjacentTriangle(t4)) {
			this._status = 1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t1;
			this._triangleListLast = t1;
		} else {
			this._triangleListLast._next = t1;
			t1._prev = this._triangleListLast;
			this._triangleListLast = t1;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t2;
			this._triangleListLast = t2;
		} else {
			this._triangleListLast._next = t2;
			t2._prev = this._triangleListLast;
			this._triangleListLast = t2;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t3;
			this._triangleListLast = t3;
		} else {
			this._triangleListLast._next = t3;
			t3._prev = this._triangleListLast;
			this._triangleListLast = t3;
		}
		this._numTriangles++;
		if(this._triangleList == null) {
			this._triangleList = t4;
			this._triangleListLast = t4;
		} else {
			this._triangleListLast._next = t4;
			t4._prev = this._triangleListLast;
			this._triangleListLast = t4;
		}
		return this._status == 0;
	}
	,_addVertex: function(vertex,base) {
		this._vertices[this._numVertices++] = vertex;
		var v1 = base._vertices[0];
		this.findEdgeLoop(this._numVertices,base,vertex.v);
		if(this._status != 0) {
			return false;
		}
		var v = v1;
		var firstV = v1;
		var prevT = null;
		var firstT = null;
		while(true) {
			if(v._tmpEdgeLoopNext == null) {
				this._dumpAsObjModel();
				this._status = 4;
				return false;
			}
			if(v._tmpEdgeLoopOuterTriangle == null) {
				this._status = 5;
				return false;
			}
			var first = this._trianglePool;
			if(first != null) {
				this._trianglePool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_narrowphase_detector_gjkepa_EpaTriangle();
			}
			var t = first;
			if(firstT == null) {
				firstT = t;
			}
			if(!t.init(v,v._tmpEdgeLoopNext,vertex,this._center,false)) {
				this._status = 1;
			}
			if(this._status != 0) {
				return false;
			}
			this._numTriangles++;
			if(this._triangleList == null) {
				this._triangleList = t;
				this._triangleListLast = t;
			} else {
				this._triangleListLast._next = t;
				t._prev = this._triangleListLast;
				this._triangleListLast = t;
			}
			if(!t.setAdjacentTriangle(v._tmpEdgeLoopOuterTriangle)) {
				this._status = 1;
			}
			if(prevT != null) {
				if(!t.setAdjacentTriangle(prevT)) {
					this._status = 1;
				}
			}
			prevT = t;
			v = v._tmpEdgeLoopNext;
			if(!(v != firstV)) {
				break;
			}
		}
		if(!prevT.setAdjacentTriangle(firstT)) {
			this._status = 1;
		}
		if(this._status == 0) {
			return this.validate();
		} else {
			return false;
		}
	}
	,_dumpAsObjModel: function() {
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron
};
var oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState = function() { };
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.__name__ = "oimo.collision.narrowphase.detector.gjkepa.EpaPolyhedronState";
var oimo_collision_narrowphase_detector_gjkepa_EpaTriangle = function() {
	this.id = ++oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count;
	this._next = null;
	this._prev = null;
	this._normal = new oimo_common_Vec3();
	this._distanceSq = 0;
	this._tmpDfsId = 0;
	this._tmpDfsVisible = false;
	var this1 = new Array(3);
	this._vertices = this1;
	var this1 = new Array(3);
	this._adjacentTriangles = this1;
	var this1 = new Array(3);
	this._adjacentPairIndex = this1;
	this.tmp = new oimo_common_Vec3();
	var this1 = new Array(3);
	this._nextIndex = this1;
	this._nextIndex[0] = 1;
	this._nextIndex[1] = 2;
	this._nextIndex[2] = 0;
};
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.__name__ = "oimo.collision.narrowphase.detector.gjkepa.EpaTriangle";
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.prototype = {
	init: function(vertex1,vertex2,vertex3,center,autoCheck) {
		if(autoCheck == null) {
			autoCheck = false;
		}
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var vc;
		var vcX;
		var vcY;
		var vcZ;
		var v = vertex1.v;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vertex2.v;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vertex3.v;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		var v = center;
		vcX = v.x;
		vcY = v.y;
		vcZ = v.z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var vc1;
		var vc1X;
		var vc1Y;
		var vc1Z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v13X = v3X - v1X;
		v13Y = v3Y - v1Y;
		v13Z = v3Z - v1Z;
		vc1X = v1X - vcX;
		vc1Y = v1Y - vcY;
		vc1Z = v1Z - vcZ;
		var inor;
		var inorX;
		var inorY;
		var inorZ;
		inorX = v12Y * v13Z - v12Z * v13Y;
		inorY = v12Z * v13X - v12X * v13Z;
		inorZ = v12X * v13Y - v12Y * v13X;
		var inverted = false;
		var d = vc1X * inorX + vc1Y * inorY + vc1Z * inorZ;
		if(d < 0) {
			if(autoCheck) {
				var tmp = vertex2;
				vertex2 = vertex3;
				vertex3 = tmp;
				inorX *= -1;
				inorY *= -1;
				inorZ *= -1;
			} else {
				inverted = true;
			}
		}
		this._vertices[0] = vertex1;
		this._vertices[1] = vertex2;
		this._vertices[2] = vertex3;
		var v = this._normal;
		v.x = inorX;
		v.y = inorY;
		v.z = inorZ;
		var vec1 = vertex1.v;
		var vec2 = vertex2.v;
		var vec3 = vertex3.v;
		var out = this.tmp;
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v31;
		var v31X;
		var v31Y;
		var v31Z;
		var v = vec1;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vec2;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vec3;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
		var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
		var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
		var mind = -1;
		var minv;
		var minvX;
		var minvY;
		var minvZ;
		var mini = 0;
		minvX = 0;
		minvY = 0;
		minvZ = 0;
		if(d12 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec2;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			mini = b;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
		if(d23 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec2;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d < mind) {
				mini = b << 1;
				mind = d;
				var v = out;
				minvX = v.x;
				minvY = v.y;
				minvZ = v.z;
			}
		}
		if(d31 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind < 0 || d < mind) {
				mini = b & 1 | (b & 2) << 1;
				mind = d;
				var v = out;
				minvX = v.x;
				minvY = v.y;
				minvZ = v.z;
			}
		}
		if(mind > 0) {
			var v = out;
			v.x = minvX;
			v.y = minvY;
			v.z = minvZ;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X * nX + v1Y * nY + v1Z * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX = nX * l2;
			minvY = nY * l2;
			minvZ = nZ * l2;
			var v = out;
			v.x = minvX;
			v.y = minvY;
			v.z = minvZ;
		}
		var _this = this.tmp;
		this._distanceSq = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = -1;
		this._adjacentPairIndex[1] = -1;
		this._adjacentPairIndex[2] = -1;
		return !inverted;
	}
	,setAdjacentTriangle: function(triangle) {
		var count = 0;
		var i2 = this._nextIndex[0];
		var j2 = this._nextIndex[0];
		if(this._vertices[0] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[0]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 0;
			++count;
		}
		var i2 = this._nextIndex[0];
		var j2 = this._nextIndex[1];
		if(this._vertices[0] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[1]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 0;
			++count;
		}
		var i2 = this._nextIndex[0];
		var j2 = this._nextIndex[2];
		if(this._vertices[0] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[2]) {
			this._adjacentTriangles[0] = triangle;
			this._adjacentPairIndex[0] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 0;
			++count;
		}
		var i2 = this._nextIndex[1];
		var j2 = this._nextIndex[0];
		if(this._vertices[1] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[0]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 1;
			++count;
		}
		var i2 = this._nextIndex[1];
		var j2 = this._nextIndex[1];
		if(this._vertices[1] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[1]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 1;
			++count;
		}
		var i2 = this._nextIndex[1];
		var j2 = this._nextIndex[2];
		if(this._vertices[1] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[2]) {
			this._adjacentTriangles[1] = triangle;
			this._adjacentPairIndex[1] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 1;
			++count;
		}
		var i2 = this._nextIndex[2];
		var j2 = this._nextIndex[0];
		if(this._vertices[2] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[0]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 0;
			triangle._adjacentTriangles[0] = this;
			triangle._adjacentPairIndex[0] = 2;
			++count;
		}
		var i2 = this._nextIndex[2];
		var j2 = this._nextIndex[1];
		if(this._vertices[2] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[1]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 1;
			triangle._adjacentTriangles[1] = this;
			triangle._adjacentPairIndex[1] = 2;
			++count;
		}
		var i2 = this._nextIndex[2];
		var j2 = this._nextIndex[2];
		if(this._vertices[2] == triangle._vertices[j2] && this._vertices[i2] == triangle._vertices[2]) {
			this._adjacentTriangles[2] = triangle;
			this._adjacentPairIndex[2] = 2;
			triangle._adjacentTriangles[2] = this;
			triangle._adjacentPairIndex[2] = 2;
			++count;
		}
		if(count != 1) {
			return false;
		}
		return true;
	}
	,removeAdjacentTriangles: function() {
		var triangle = this._adjacentTriangles[0];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[0];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[0] = null;
			this._adjacentPairIndex[0] = -1;
		}
		var triangle = this._adjacentTriangles[1];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[1];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[1] = null;
			this._adjacentPairIndex[1] = -1;
		}
		var triangle = this._adjacentTriangles[2];
		if(triangle != null) {
			var pairIndex = this._adjacentPairIndex[2];
			triangle._adjacentTriangles[pairIndex] = null;
			triangle._adjacentPairIndex[pairIndex] = -1;
			this._adjacentTriangles[2] = null;
			this._adjacentPairIndex[2] = -1;
		}
	}
	,removeReferences: function() {
		this._next = null;
		this._prev = null;
		this._tmpDfsId = 0;
		this._tmpDfsVisible = false;
		this._distanceSq = 0;
		this._vertices[0] = null;
		this._vertices[1] = null;
		this._vertices[2] = null;
		this._adjacentTriangles[0] = null;
		this._adjacentTriangles[1] = null;
		this._adjacentTriangles[2] = null;
		this._adjacentPairIndex[0] = 0;
		this._adjacentPairIndex[1] = 0;
		this._adjacentPairIndex[2] = 0;
	}
	,dump: function() {
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaTriangle
};
var oimo_collision_narrowphase_detector_gjkepa_EpaVertex = function() {
	this.randId = Math.random() * 100000 | 0;
	this.v = new oimo_common_Vec3();
	this.w1 = new oimo_common_Vec3();
	this.w2 = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.__name__ = "oimo.collision.narrowphase.detector.gjkepa.EpaVertex";
oimo_collision_narrowphase_detector_gjkepa_EpaVertex.prototype = {
	init: function(v,w1,w2) {
		var _this = this.v;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this = this.w1;
		_this.x = w1.x;
		_this.y = w1.y;
		_this.z = w1.z;
		var _this = this.w2;
		_this.x = w2.x;
		_this.y = w2.y;
		_this.z = w2.z;
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
		return this;
	}
	,removeReferences: function() {
		this._next = null;
		this._tmpEdgeLoopNext = null;
		this._tmpEdgeLoopOuterTriangle = null;
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_EpaVertex
};
var oimo_collision_narrowphase_detector_gjkepa_GjkCache = function() {
	this.prevClosestDir = new oimo_common_Vec3();
};
oimo_collision_narrowphase_detector_gjkepa_GjkCache.__name__ = "oimo.collision.narrowphase.detector.gjkepa.GjkCache";
oimo_collision_narrowphase_detector_gjkepa_GjkCache.prototype = {
	clear: function() {
		this.prevClosestDir.zero();
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_GjkCache
};
var oimo_common_Transform = function() {
	this._positionX = 0;
	this._positionY = 0;
	this._positionZ = 0;
	this._rotation00 = 1;
	this._rotation01 = 0;
	this._rotation02 = 0;
	this._rotation10 = 0;
	this._rotation11 = 1;
	this._rotation12 = 0;
	this._rotation20 = 0;
	this._rotation21 = 0;
	this._rotation22 = 1;
};
oimo_common_Transform.__name__ = "oimo.common.Transform";
oimo_common_Transform.prototype = {
	identity: function() {
		this._positionX = 0;
		this._positionY = 0;
		this._positionZ = 0;
		this._rotation00 = 1;
		this._rotation01 = 0;
		this._rotation02 = 0;
		this._rotation10 = 0;
		this._rotation11 = 1;
		this._rotation12 = 0;
		this._rotation20 = 0;
		this._rotation21 = 0;
		this._rotation22 = 1;
		return this;
	}
	,getPosition: function() {
		var position = new oimo_common_Vec3();
		var v = position;
		v.x = this._positionX;
		v.y = this._positionY;
		v.z = this._positionZ;
		return position;
	}
	,getPositionTo: function(position) {
		var v = position;
		v.x = this._positionX;
		v.y = this._positionY;
		v.z = this._positionZ;
	}
	,setPosition: function(position) {
		var v = position;
		this._positionX = v.x;
		this._positionY = v.y;
		this._positionZ = v.z;
		return this;
	}
	,translate: function(translation) {
		var diff;
		var diffX;
		var diffY;
		var diffZ;
		var v = translation;
		diffX = v.x;
		diffY = v.y;
		diffZ = v.z;
		this._positionX += diffX;
		this._positionY += diffY;
		this._positionZ += diffZ;
	}
	,getRotation: function() {
		var rotation = new oimo_common_Mat3();
		var m = rotation;
		m.e00 = this._rotation00;
		m.e01 = this._rotation01;
		m.e02 = this._rotation02;
		m.e10 = this._rotation10;
		m.e11 = this._rotation11;
		m.e12 = this._rotation12;
		m.e20 = this._rotation20;
		m.e21 = this._rotation21;
		m.e22 = this._rotation22;
		return rotation;
	}
	,getRotationTo: function(out) {
		var m = out;
		m.e00 = this._rotation00;
		m.e01 = this._rotation01;
		m.e02 = this._rotation02;
		m.e10 = this._rotation10;
		m.e11 = this._rotation11;
		m.e12 = this._rotation12;
		m.e20 = this._rotation20;
		m.e21 = this._rotation21;
		m.e22 = this._rotation22;
	}
	,setRotation: function(rotation) {
		var m = rotation;
		this._rotation00 = m.e00;
		this._rotation01 = m.e01;
		this._rotation02 = m.e02;
		this._rotation10 = m.e10;
		this._rotation11 = m.e11;
		this._rotation12 = m.e12;
		this._rotation20 = m.e20;
		this._rotation21 = m.e21;
		this._rotation22 = m.e22;
		return this;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._rotation00 = cy * cz;
		this._rotation01 = -cy * sz;
		this._rotation02 = sy;
		this._rotation10 = cx * sz + cz * sx * sy;
		this._rotation11 = cx * cz - sx * sy * sz;
		this._rotation12 = -cy * sx;
		this._rotation20 = sx * sz - cx * cz * sy;
		this._rotation21 = cz * sx + cx * sy * sz;
		this._rotation22 = cx * cy;
	}
	,rotate: function(rotation) {
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var m = rotation;
		rot00 = m.e00;
		rot01 = m.e01;
		rot02 = m.e02;
		rot10 = m.e10;
		rot11 = m.e11;
		rot12 = m.e12;
		rot20 = m.e20;
		rot21 = m.e21;
		rot22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,rotateXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._rotation00 + rot01 * this._rotation10 + rot02 * this._rotation20;
		__tmp__01 = rot00 * this._rotation01 + rot01 * this._rotation11 + rot02 * this._rotation21;
		__tmp__02 = rot00 * this._rotation02 + rot01 * this._rotation12 + rot02 * this._rotation22;
		__tmp__10 = rot10 * this._rotation00 + rot11 * this._rotation10 + rot12 * this._rotation20;
		__tmp__11 = rot10 * this._rotation01 + rot11 * this._rotation11 + rot12 * this._rotation21;
		__tmp__12 = rot10 * this._rotation02 + rot11 * this._rotation12 + rot12 * this._rotation22;
		__tmp__20 = rot20 * this._rotation00 + rot21 * this._rotation10 + rot22 * this._rotation20;
		__tmp__21 = rot20 * this._rotation01 + rot21 * this._rotation11 + rot22 * this._rotation21;
		__tmp__22 = rot20 * this._rotation02 + rot21 * this._rotation12 + rot22 * this._rotation22;
		this._rotation00 = __tmp__00;
		this._rotation01 = __tmp__01;
		this._rotation02 = __tmp__02;
		this._rotation10 = __tmp__10;
		this._rotation11 = __tmp__11;
		this._rotation12 = __tmp__12;
		this._rotation20 = __tmp__20;
		this._rotation21 = __tmp__21;
		this._rotation22 = __tmp__22;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		var q1 = q;
		q1.x = iqX;
		q1.y = iqY;
		q1.z = iqZ;
		q1.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._rotation00;
		var e11 = this._rotation11;
		var e22 = this._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation21 - this._rotation12) * s;
			iqY = (this._rotation02 - this._rotation20) * s;
			iqZ = (this._rotation10 - this._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._rotation01 + this._rotation10) * s;
				iqZ = (this._rotation02 + this._rotation20) * s;
				iqW = (this._rotation21 - this._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._rotation02 + this._rotation20) * s;
				iqY = (this._rotation12 + this._rotation21) * s;
				iqW = (this._rotation10 - this._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation01 + this._rotation10) * s;
			iqZ = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation02 - this._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._rotation02 + this._rotation20) * s;
			iqY = (this._rotation12 + this._rotation21) * s;
			iqW = (this._rotation10 - this._rotation01) * s;
		}
		var q = orientation;
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var q = quaternion;
		qX = q.x;
		qY = q.y;
		qZ = q.z;
		qW = q.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._rotation00 = 1 - yy - zz;
		this._rotation01 = xy - wz;
		this._rotation02 = xz + wy;
		this._rotation10 = xy + wz;
		this._rotation11 = 1 - xx - zz;
		this._rotation12 = yz - wx;
		this._rotation20 = xz - wy;
		this._rotation21 = yz + wx;
		this._rotation22 = 1 - xx - yy;
		return this;
	}
	,clone: function() {
		var tf = new oimo_common_Transform();
		tf._positionX = this._positionX;
		tf._positionY = this._positionY;
		tf._positionZ = this._positionZ;
		tf._rotation00 = this._rotation00;
		tf._rotation01 = this._rotation01;
		tf._rotation02 = this._rotation02;
		tf._rotation10 = this._rotation10;
		tf._rotation11 = this._rotation11;
		tf._rotation12 = this._rotation12;
		tf._rotation20 = this._rotation20;
		tf._rotation21 = this._rotation21;
		tf._rotation22 = this._rotation22;
		return tf;
	}
	,copyFrom: function(transform) {
		this._positionX = transform._positionX;
		this._positionY = transform._positionY;
		this._positionZ = transform._positionZ;
		this._rotation00 = transform._rotation00;
		this._rotation01 = transform._rotation01;
		this._rotation02 = transform._rotation02;
		this._rotation10 = transform._rotation10;
		this._rotation11 = transform._rotation11;
		this._rotation12 = transform._rotation12;
		this._rotation20 = transform._rotation20;
		this._rotation21 = transform._rotation21;
		this._rotation22 = transform._rotation22;
		return this;
	}
	,__class__: oimo_common_Transform
};
var oimo_common_Setting = function() { };
oimo_common_Setting.__name__ = "oimo.common.Setting";
var oimo_collision_narrowphase_detector_gjkepa_GjkEpa = function() {
	var this1 = new Array(4);
	this.s = this1;
	var this1 = new Array(4);
	this.w1 = this1;
	var this1 = new Array(4);
	this.w2 = this1;
	var this1 = new Array(3);
	this.baseDirs = this1;
	this.baseDirs[0] = new oimo_common_Vec3(1,0,0);
	this.baseDirs[1] = new oimo_common_Vec3(0,1,0);
	this.baseDirs[2] = new oimo_common_Vec3(0,0,1);
	this.tl1 = new oimo_common_Vec3();
	this.tl2 = new oimo_common_Vec3();
	this.rayX = new oimo_common_Vec3();
	this.rayR = new oimo_common_Vec3();
	this.tempTransform = new oimo_common_Transform();
	this.s[0] = new oimo_common_Vec3();
	this.w1[0] = new oimo_common_Vec3();
	this.w2[0] = new oimo_common_Vec3();
	this.s[1] = new oimo_common_Vec3();
	this.w1[1] = new oimo_common_Vec3();
	this.w2[1] = new oimo_common_Vec3();
	this.s[2] = new oimo_common_Vec3();
	this.w1[2] = new oimo_common_Vec3();
	this.w2[2] = new oimo_common_Vec3();
	this.s[3] = new oimo_common_Vec3();
	this.w1[3] = new oimo_common_Vec3();
	this.w2[3] = new oimo_common_Vec3();
	this.dir = new oimo_common_Vec3();
	this.closest = new oimo_common_Vec3();
	this.closestPoint1 = new oimo_common_Vec3();
	this.closestPoint2 = new oimo_common_Vec3();
	this.polyhedron = new oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedron();
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.__name__ = "oimo.collision.narrowphase.detector.gjkepa.GjkEpa";
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.getInstance = function() {
	return oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance;
};
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.prototype = {
	computeClosestPointsImpl: function(c1,c2,tf1,tf2,cache,useEpa) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var w1 = this.w1;
		var w2 = this.w2;
		var closest = this.closest;
		var dir = this.dir;
		if(cache != null) {
			if(cache._gjkCache == null) {
				cache._gjkCache = new oimo_collision_narrowphase_detector_gjkepa_GjkCache();
			}
			this.loadCache(cache._gjkCache);
		} else {
			dir.zero();
		}
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z == 0) {
			var firstDir;
			var firstDirX;
			var firstDirY;
			var firstDirZ;
			firstDirX = tf2._positionX - tf1._positionX;
			firstDirY = tf2._positionY - tf1._positionY;
			firstDirZ = tf2._positionZ - tf1._positionZ;
			var v = dir;
			v.x = firstDirX;
			v.y = firstDirY;
			v.z = firstDirZ;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
				dir.init(1,0,0);
			}
		}
		this.simplexSize = 0;
		this.computeWitnessPoint1(false);
		this.computeWitnessPoint2(false);
		var _this = this.s[this.simplexSize];
		var v = this.w1[this.simplexSize];
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var v = this.w2[this.simplexSize];
		var tx = _this1.x - v.x;
		var ty = _this1.y - v.y;
		var tz = _this1.z - v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		this.simplexSize = 1;
		var count = 0;
		var max = 40;
		var eps = 1e-4;
		var eps2 = eps * eps;
		while(count < max) {
			var v = 0;
			switch(this.simplexSize) {
			case 1:
				var v1 = s[0];
				closest.x = v1.x;
				closest.y = v1.y;
				closest.z = v1.z;
				v = 1;
				break;
			case 2:
				var v11;
				var v1X;
				var v1Y;
				var v1Z;
				var v2;
				var v2X;
				var v2Y;
				var v2Z;
				var v3 = s[0];
				v1X = v3.x;
				v1Y = v3.y;
				v1Z = v3.z;
				var v4 = s[1];
				v2X = v4.x;
				v2Y = v4.y;
				v2Z = v4.z;
				var v12;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / d;
				if(t < 0) {
					var v5 = closest;
					v5.x = v1X;
					v5.y = v1Y;
					v5.z = v1Z;
					v = 1;
				} else if(t > 1) {
					var v6 = closest;
					v6.x = v2X;
					v6.y = v2Y;
					v6.z = v2Z;
					v = 2;
				} else {
					var p;
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					var v7 = closest;
					v7.x = pX;
					v7.y = pY;
					v7.z = pZ;
					v = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v13;
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v21;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v31;
				var v3X;
				var v3Y;
				var v3Z;
				var v121;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23;
				var v23X;
				var v23Y;
				var v23Z;
				var v311;
				var v31X;
				var v31Y;
				var v31Z;
				var v8 = vec1;
				v1X1 = v8.x;
				v1Y1 = v8.y;
				v1Z1 = v8.z;
				var v9 = vec2;
				v2X1 = v9.x;
				v2Y1 = v9.y;
				v2Z1 = v9.z;
				var v10 = vec3;
				v3X = v10.x;
				v3Y = v10.y;
				v3Z = v10.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var n;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12;
				var n12X;
				var n12Y;
				var n12Z;
				var n23;
				var n23X;
				var n23Y;
				var n23Z;
				var n31;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
				var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
				var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
				var mind = -1;
				var minv;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(d12 < 0) {
					var v14;
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v22;
					var v2X2;
					var v2Y2;
					var v2Z2;
					var v15 = vec1;
					v1X2 = v15.x;
					v1Y2 = v15.y;
					v1Z2 = v15.z;
					var v16 = vec2;
					v2X2 = v16.x;
					v2Y2 = v16.y;
					v2Z2 = v16.z;
					var v122;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var d1 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / d1;
					var b;
					if(t1 < 0) {
						var v17 = closest;
						v17.x = v1X2;
						v17.y = v1Y2;
						v17.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						var v18 = closest;
						v18.x = v2X2;
						v18.y = v2Y2;
						v18.z = v2Z2;
						b = 2;
					} else {
						var p1;
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						var v19 = closest;
						v19.x = pX1;
						v19.y = pY1;
						v19.z = pZ1;
						b = 3;
					}
					var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini = b;
					mind = d2;
					var v20 = closest;
					minvX = v20.x;
					minvY = v20.y;
					minvZ = v20.z;
				}
				if(d23 < 0) {
					var v110;
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v24;
					var v2X3;
					var v2Y3;
					var v2Z3;
					var v25 = vec2;
					v1X3 = v25.x;
					v1Y3 = v25.y;
					v1Z3 = v25.z;
					var v26 = vec3;
					v2X3 = v26.x;
					v2Y3 = v26.y;
					v2Z3 = v26.z;
					var v123;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var d3 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / d3;
					var b1;
					if(t2 < 0) {
						var v27 = closest;
						v27.x = v1X3;
						v27.y = v1Y3;
						v27.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						var v28 = closest;
						v28.x = v2X3;
						v28.y = v2Y3;
						v28.z = v2Z3;
						b1 = 2;
					} else {
						var p2;
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						var v29 = closest;
						v29.x = pX2;
						v29.y = pY2;
						v29.z = pZ2;
						b1 = 3;
					}
					var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d4 < mind) {
						mini = b1 << 1;
						mind = d4;
						var v30 = closest;
						minvX = v30.x;
						minvY = v30.y;
						minvZ = v30.z;
					}
				}
				if(d31 < 0) {
					var v111;
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v210;
					var v2X4;
					var v2Y4;
					var v2Z4;
					var v32 = vec1;
					v1X4 = v32.x;
					v1Y4 = v32.y;
					v1Z4 = v32.z;
					var v33 = vec3;
					v2X4 = v33.x;
					v2Y4 = v33.y;
					v2Z4 = v33.z;
					var v124;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var d5 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / d5;
					var b2;
					if(t3 < 0) {
						var v34 = closest;
						v34.x = v1X4;
						v34.y = v1Y4;
						v34.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						var v35 = closest;
						v35.x = v2X4;
						v35.y = v2Y4;
						v35.z = v2Z4;
						b2 = 2;
					} else {
						var p3;
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						var v36 = closest;
						v36.x = pX3;
						v36.y = pY3;
						v36.z = pZ3;
						b2 = 3;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d6 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d6;
						var v37 = closest;
						minvX = v37.x;
						minvY = v37.y;
						minvZ = v37.z;
					}
				}
				if(mind > 0) {
					var v38 = closest;
					v38.x = minvX;
					v38.y = minvY;
					v38.z = minvZ;
					v = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var dn = v1X1 * nX + v1Y1 * nY + v1Z1 * nZ;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = dn / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					var v39 = closest;
					v39.x = minvX;
					v39.y = minvY;
					v39.z = minvZ;
					v = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v112;
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v211;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v310;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v41;
				var v4X;
				var v4Y;
				var v4Z;
				var v125;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v131;
				var v13X;
				var v13Y;
				var v13Z;
				var v141;
				var v14X;
				var v14Y;
				var v14Z;
				var v231;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v241;
				var v24X;
				var v24Y;
				var v24Z;
				var v341;
				var v34X;
				var v34Y;
				var v34Z;
				var v40 = vec11;
				v1X5 = v40.x;
				v1Y5 = v40.y;
				v1Z5 = v40.z;
				var v42 = vec21;
				v2X5 = v42.x;
				v2Y5 = v42.y;
				v2Z5 = v42.z;
				var v43 = vec31;
				v3X1 = v43.x;
				v3Y1 = v43.y;
				v3Z1 = v43.z;
				var v44 = vec4;
				v4X = v44.x;
				v4Y = v44.y;
				v4Z = v44.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				v34X = v4X - v3X1;
				v34Y = v4Y - v3Y1;
				v34Z = v4Z - v3Z1;
				var rev;
				var n123;
				var n123X;
				var n123Y;
				var n123Z;
				var n134;
				var n134X;
				var n134Y;
				var n134Z;
				var n142;
				var n142X;
				var n142Y;
				var n142Z;
				var n243;
				var n243X;
				var n243Y;
				var n243Z;
				var n1;
				var nX1;
				var nY1;
				var nZ1;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var d123 = v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z;
				var d134 = v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z;
				var d142 = v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z;
				var d243 = v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z;
				var mind1 = -1;
				var minv1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if(d123 * sign < 0) {
					var v113;
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v212;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v312;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v126;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v232;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v313;
					var v31X1;
					var v31Y1;
					var v31Z1;
					var v45 = vec11;
					v1X6 = v45.x;
					v1Y6 = v45.y;
					v1Z6 = v45.z;
					var v46 = vec21;
					v2X6 = v46.x;
					v2Y6 = v46.y;
					v2Z6 = v46.z;
					var v47 = vec31;
					v3X2 = v47.x;
					v3Y2 = v47.y;
					v3Z2 = v47.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var n2;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY2 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ2 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n121;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n231;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n311;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ2 - v12Z6 * nY2;
					n12Y1 = v12Z6 * nX2 - v12X6 * nZ2;
					n12Z1 = v12X6 * nY2 - v12Y6 * nX2;
					n23X1 = v23Y2 * nZ2 - v23Z2 * nY2;
					n23Y1 = v23Z2 * nX2 - v23X2 * nZ2;
					n23Z1 = v23X2 * nY2 - v23Y2 * nX2;
					n31X1 = v31Y1 * nZ2 - v31Z1 * nY2;
					n31Y1 = v31Z1 * nX2 - v31X1 * nZ2;
					n31Z1 = v31X1 * nY2 - v31Y1 * nX2;
					var d121 = v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1;
					var d231 = v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1;
					var d311 = v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1;
					var mind2 = -1;
					var minv2;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(d121 < 0) {
						var v114;
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v213;
						var v2X7;
						var v2Y7;
						var v2Z7;
						var v48 = vec11;
						v1X7 = v48.x;
						v1Y7 = v48.y;
						v1Z7 = v48.z;
						var v49 = vec21;
						v2X7 = v49.x;
						v2Y7 = v49.y;
						v2Z7 = v49.z;
						var v127;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var d7 = v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / d7;
						var b3;
						if(t4 < 0) {
							var v50 = closest;
							v50.x = v1X7;
							v50.y = v1Y7;
							v50.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							var v51 = closest;
							v51.x = v2X7;
							v51.y = v2Y7;
							v51.z = v2Z7;
							b3 = 2;
						} else {
							var p4;
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							var v52 = closest;
							v52.x = pX4;
							v52.y = pY4;
							v52.z = pZ4;
							b3 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini2 = b3;
						mind2 = d8;
						var v53 = closest;
						minvX2 = v53.x;
						minvY2 = v53.y;
						minvZ2 = v53.z;
					}
					if(d231 < 0) {
						var v115;
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v214;
						var v2X8;
						var v2Y8;
						var v2Z8;
						var v54 = vec21;
						v1X8 = v54.x;
						v1Y8 = v54.y;
						v1Z8 = v54.z;
						var v55 = vec31;
						v2X8 = v55.x;
						v2Y8 = v55.y;
						v2Z8 = v55.z;
						var v128;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var d9 = v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / d9;
						var b4;
						if(t5 < 0) {
							var v56 = closest;
							v56.x = v1X8;
							v56.y = v1Y8;
							v56.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							var v57 = closest;
							v57.x = v2X8;
							v57.y = v2Y8;
							v57.z = v2Z8;
							b4 = 2;
						} else {
							var p5;
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							var v58 = closest;
							v58.x = pX5;
							v58.y = pY5;
							v58.z = pZ5;
							b4 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d10 < mind2) {
							mini2 = b4 << 1;
							mind2 = d10;
							var v59 = closest;
							minvX2 = v59.x;
							minvY2 = v59.y;
							minvZ2 = v59.z;
						}
					}
					if(d311 < 0) {
						var v116;
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v215;
						var v2X9;
						var v2Y9;
						var v2Z9;
						var v60 = vec11;
						v1X9 = v60.x;
						v1Y9 = v60.y;
						v1Z9 = v60.z;
						var v61 = vec31;
						v2X9 = v61.x;
						v2Y9 = v61.y;
						v2Z9 = v61.z;
						var v129;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var d11 = v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / d11;
						var b5;
						if(t6 < 0) {
							var v62 = closest;
							v62.x = v1X9;
							v62.y = v1Y9;
							v62.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							var v63 = closest;
							v63.x = v2X9;
							v63.y = v2Y9;
							v63.z = v2Z9;
							b5 = 2;
						} else {
							var p6;
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							var v64 = closest;
							v64.x = pX6;
							v64.y = pY6;
							v64.z = pZ6;
							b5 = 3;
						}
						var d13 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d13 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d13;
							var v65 = closest;
							minvX2 = v65.x;
							minvY2 = v65.y;
							minvZ2 = v65.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						var v66 = closest;
						v66.x = minvX2;
						v66.y = minvY2;
						v66.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX2 *= l1;
						nY2 *= l1;
						nZ2 *= l1;
						var dn1 = v1X6 * nX2 + v1Y6 * nY2 + v1Z6 * nZ2;
						var l21 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l21 = dn1 / l21;
						minvX2 = nX2 * l21;
						minvY2 = nY2 * l21;
						minvZ2 = nZ2 * l21;
						var v67 = closest;
						v67.x = minvX2;
						v67.y = minvY2;
						v67.z = minvZ2;
						b6 = 7;
					}
					var d14 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini1 = b6;
					mind1 = d14;
					var v68 = closest;
					minvX1 = v68.x;
					minvY1 = v68.y;
					minvZ1 = v68.z;
				}
				if(d134 * sign < 0) {
					var v117;
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v216;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v314;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v1210;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v233;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v315;
					var v31X2;
					var v31Y2;
					var v31Z2;
					var v69 = vec11;
					v1X10 = v69.x;
					v1Y10 = v69.y;
					v1Z10 = v69.z;
					var v70 = vec31;
					v2X10 = v70.x;
					v2Y10 = v70.y;
					v2Z10 = v70.z;
					var v71 = vec4;
					v3X3 = v71.x;
					v3Y3 = v71.y;
					v3Z3 = v71.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var n3;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY3 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ3 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n122;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n232;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n312;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ3 - v12Z10 * nY3;
					n12Y2 = v12Z10 * nX3 - v12X10 * nZ3;
					n12Z2 = v12X10 * nY3 - v12Y10 * nX3;
					n23X2 = v23Y3 * nZ3 - v23Z3 * nY3;
					n23Y2 = v23Z3 * nX3 - v23X3 * nZ3;
					n23Z2 = v23X3 * nY3 - v23Y3 * nX3;
					n31X2 = v31Y2 * nZ3 - v31Z2 * nY3;
					n31Y2 = v31Z2 * nX3 - v31X2 * nZ3;
					n31Z2 = v31X2 * nY3 - v31Y2 * nX3;
					var d122 = v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2;
					var d232 = v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2;
					var d312 = v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2;
					var mind3 = -1;
					var minv3;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(d122 < 0) {
						var v118;
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v217;
						var v2X11;
						var v2Y11;
						var v2Z11;
						var v72 = vec11;
						v1X11 = v72.x;
						v1Y11 = v72.y;
						v1Z11 = v72.z;
						var v73 = vec31;
						v2X11 = v73.x;
						v2Y11 = v73.y;
						v2Z11 = v73.z;
						var v1211;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var d15 = v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / d15;
						var b7;
						if(t7 < 0) {
							var v74 = closest;
							v74.x = v1X11;
							v74.y = v1Y11;
							v74.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							var v75 = closest;
							v75.x = v2X11;
							v75.y = v2Y11;
							v75.z = v2Z11;
							b7 = 2;
						} else {
							var p7;
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							var v76 = closest;
							v76.x = pX7;
							v76.y = pY7;
							v76.z = pZ7;
							b7 = 3;
						}
						var d16 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini3 = b7;
						mind3 = d16;
						var v77 = closest;
						minvX3 = v77.x;
						minvY3 = v77.y;
						minvZ3 = v77.z;
					}
					if(d232 < 0) {
						var v119;
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v218;
						var v2X12;
						var v2Y12;
						var v2Z12;
						var v78 = vec31;
						v1X12 = v78.x;
						v1Y12 = v78.y;
						v1Z12 = v78.z;
						var v79 = vec4;
						v2X12 = v79.x;
						v2Y12 = v79.y;
						v2Z12 = v79.z;
						var v1212;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var d17 = v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / d17;
						var b8;
						if(t8 < 0) {
							var v80 = closest;
							v80.x = v1X12;
							v80.y = v1Y12;
							v80.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							var v81 = closest;
							v81.x = v2X12;
							v81.y = v2Y12;
							v81.z = v2Z12;
							b8 = 2;
						} else {
							var p8;
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							var v82 = closest;
							v82.x = pX8;
							v82.y = pY8;
							v82.z = pZ8;
							b8 = 3;
						}
						var d18 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d18 < mind3) {
							mini3 = b8 << 1;
							mind3 = d18;
							var v83 = closest;
							minvX3 = v83.x;
							minvY3 = v83.y;
							minvZ3 = v83.z;
						}
					}
					if(d312 < 0) {
						var v120;
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v219;
						var v2X13;
						var v2Y13;
						var v2Z13;
						var v84 = vec11;
						v1X13 = v84.x;
						v1Y13 = v84.y;
						v1Z13 = v84.z;
						var v85 = vec4;
						v2X13 = v85.x;
						v2Y13 = v85.y;
						v2Z13 = v85.z;
						var v1213;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var d19 = v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / d19;
						var b9;
						if(t9 < 0) {
							var v86 = closest;
							v86.x = v1X13;
							v86.y = v1Y13;
							v86.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							var v87 = closest;
							v87.x = v2X13;
							v87.y = v2Y13;
							v87.z = v2Z13;
							b9 = 2;
						} else {
							var p9;
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							var v88 = closest;
							v88.x = pX9;
							v88.y = pY9;
							v88.z = pZ9;
							b9 = 3;
						}
						var d20 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d20 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d20;
							var v89 = closest;
							minvX3 = v89.x;
							minvY3 = v89.y;
							minvZ3 = v89.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						var v90 = closest;
						v90.x = minvX3;
						v90.y = minvY3;
						v90.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX3 *= l3;
						nY3 *= l3;
						nZ3 *= l3;
						var dn2 = v1X10 * nX3 + v1Y10 * nY3 + v1Z10 * nZ3;
						var l22 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l22 = dn2 / l22;
						minvX3 = nX3 * l22;
						minvY3 = nY3 * l22;
						minvZ3 = nZ3 * l22;
						var v91 = closest;
						v91.x = minvX3;
						v91.y = minvY3;
						v91.z = minvZ3;
						b10 = 7;
					}
					var d21 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d21 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d21;
						var v92 = closest;
						minvX1 = v92.x;
						minvY1 = v92.y;
						minvZ1 = v92.z;
					}
				}
				if(d142 * sign < 0) {
					var v130;
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v220;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v316;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v1214;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v234;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v317;
					var v31X3;
					var v31Y3;
					var v31Z3;
					var v93 = vec11;
					v1X14 = v93.x;
					v1Y14 = v93.y;
					v1Z14 = v93.z;
					var v94 = vec21;
					v2X14 = v94.x;
					v2Y14 = v94.y;
					v2Z14 = v94.z;
					var v95 = vec4;
					v3X4 = v95.x;
					v3Y4 = v95.y;
					v3Z4 = v95.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var n4;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY4 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ4 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n124;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n233;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n313;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ4 - v12Z14 * nY4;
					n12Y3 = v12Z14 * nX4 - v12X14 * nZ4;
					n12Z3 = v12X14 * nY4 - v12Y14 * nX4;
					n23X3 = v23Y4 * nZ4 - v23Z4 * nY4;
					n23Y3 = v23Z4 * nX4 - v23X4 * nZ4;
					n23Z3 = v23X4 * nY4 - v23Y4 * nX4;
					n31X3 = v31Y3 * nZ4 - v31Z3 * nY4;
					n31Y3 = v31Z3 * nX4 - v31X3 * nZ4;
					n31Z3 = v31X3 * nY4 - v31Y3 * nX4;
					var d124 = v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3;
					var d233 = v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3;
					var d313 = v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3;
					var mind4 = -1;
					var minv4;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(d124 < 0) {
						var v132;
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v221;
						var v2X15;
						var v2Y15;
						var v2Z15;
						var v96 = vec11;
						v1X15 = v96.x;
						v1Y15 = v96.y;
						v1Z15 = v96.z;
						var v97 = vec21;
						v2X15 = v97.x;
						v2Y15 = v97.y;
						v2Z15 = v97.z;
						var v1215;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var d22 = v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / d22;
						var b11;
						if(t10 < 0) {
							var v98 = closest;
							v98.x = v1X15;
							v98.y = v1Y15;
							v98.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							var v99 = closest;
							v99.x = v2X15;
							v99.y = v2Y15;
							v99.z = v2Z15;
							b11 = 2;
						} else {
							var p10;
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							var v100 = closest;
							v100.x = pX10;
							v100.y = pY10;
							v100.z = pZ10;
							b11 = 3;
						}
						var d24 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini4 = b11;
						mind4 = d24;
						var v101 = closest;
						minvX4 = v101.x;
						minvY4 = v101.y;
						minvZ4 = v101.z;
					}
					if(d233 < 0) {
						var v133;
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v222;
						var v2X16;
						var v2Y16;
						var v2Z16;
						var v102 = vec21;
						v1X16 = v102.x;
						v1Y16 = v102.y;
						v1Z16 = v102.z;
						var v103 = vec4;
						v2X16 = v103.x;
						v2Y16 = v103.y;
						v2Z16 = v103.z;
						var v1216;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var d25 = v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / d25;
						var b12;
						if(t11 < 0) {
							var v104 = closest;
							v104.x = v1X16;
							v104.y = v1Y16;
							v104.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							var v105 = closest;
							v105.x = v2X16;
							v105.y = v2Y16;
							v105.z = v2Z16;
							b12 = 2;
						} else {
							var p11;
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							var v106 = closest;
							v106.x = pX11;
							v106.y = pY11;
							v106.z = pZ11;
							b12 = 3;
						}
						var d26 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d26 < mind4) {
							mini4 = b12 << 1;
							mind4 = d26;
							var v107 = closest;
							minvX4 = v107.x;
							minvY4 = v107.y;
							minvZ4 = v107.z;
						}
					}
					if(d313 < 0) {
						var v134;
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v223;
						var v2X17;
						var v2Y17;
						var v2Z17;
						var v108 = vec11;
						v1X17 = v108.x;
						v1Y17 = v108.y;
						v1Z17 = v108.z;
						var v109 = vec4;
						v2X17 = v109.x;
						v2Y17 = v109.y;
						v2Z17 = v109.z;
						var v1217;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var d27 = v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / d27;
						var b13;
						if(t12 < 0) {
							var v135 = closest;
							v135.x = v1X17;
							v135.y = v1Y17;
							v135.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							var v136 = closest;
							v136.x = v2X17;
							v136.y = v2Y17;
							v136.z = v2Z17;
							b13 = 2;
						} else {
							var p12;
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							var v137 = closest;
							v137.x = pX12;
							v137.y = pY12;
							v137.z = pZ12;
							b13 = 3;
						}
						var d28 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d28 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d28;
							var v138 = closest;
							minvX4 = v138.x;
							minvY4 = v138.y;
							minvZ4 = v138.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						var v139 = closest;
						v139.x = minvX4;
						v139.y = minvY4;
						v139.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX4 *= l4;
						nY4 *= l4;
						nZ4 *= l4;
						var dn3 = v1X14 * nX4 + v1Y14 * nY4 + v1Z14 * nZ4;
						var l23 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l23 = dn3 / l23;
						minvX4 = nX4 * l23;
						minvY4 = nY4 * l23;
						minvZ4 = nZ4 * l23;
						var v140 = closest;
						v140.x = minvX4;
						v140.y = minvY4;
						v140.z = minvZ4;
						b14 = 7;
					}
					var d29 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d29 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d29;
						var v142 = closest;
						minvX1 = v142.x;
						minvY1 = v142.y;
						minvZ1 = v142.z;
					}
				}
				if(d243 * sign < 0) {
					var v143;
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v224;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v318;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v1218;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v235;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v319;
					var v31X4;
					var v31Y4;
					var v31Z4;
					var v144 = vec21;
					v1X18 = v144.x;
					v1Y18 = v144.y;
					v1Z18 = v144.z;
					var v145 = vec31;
					v2X18 = v145.x;
					v2Y18 = v145.y;
					v2Z18 = v145.z;
					var v146 = vec4;
					v3X5 = v146.x;
					v3Y5 = v146.y;
					v3Z5 = v146.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var n5;
					var nX5;
					var nY5;
					var nZ5;
					nX5 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY5 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ5 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n125;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n234;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n314;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ5 - v12Z18 * nY5;
					n12Y4 = v12Z18 * nX5 - v12X18 * nZ5;
					n12Z4 = v12X18 * nY5 - v12Y18 * nX5;
					n23X4 = v23Y5 * nZ5 - v23Z5 * nY5;
					n23Y4 = v23Z5 * nX5 - v23X5 * nZ5;
					n23Z4 = v23X5 * nY5 - v23Y5 * nX5;
					n31X4 = v31Y4 * nZ5 - v31Z4 * nY5;
					n31Y4 = v31Z4 * nX5 - v31X4 * nZ5;
					n31Z4 = v31X4 * nY5 - v31Y4 * nX5;
					var d125 = v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4;
					var d234 = v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4;
					var d314 = v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4;
					var mind5 = -1;
					var minv5;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(d125 < 0) {
						var v147;
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v225;
						var v2X19;
						var v2Y19;
						var v2Z19;
						var v148 = vec21;
						v1X19 = v148.x;
						v1Y19 = v148.y;
						v1Z19 = v148.z;
						var v149 = vec31;
						v2X19 = v149.x;
						v2Y19 = v149.y;
						v2Z19 = v149.z;
						var v1219;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var d30 = v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / d30;
						var b15;
						if(t13 < 0) {
							var v150 = closest;
							v150.x = v1X19;
							v150.y = v1Y19;
							v150.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							var v151 = closest;
							v151.x = v2X19;
							v151.y = v2Y19;
							v151.z = v2Z19;
							b15 = 2;
						} else {
							var p13;
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							var v152 = closest;
							v152.x = pX13;
							v152.y = pY13;
							v152.z = pZ13;
							b15 = 3;
						}
						var d32 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini5 = b15;
						mind5 = d32;
						var v153 = closest;
						minvX5 = v153.x;
						minvY5 = v153.y;
						minvZ5 = v153.z;
					}
					if(d234 < 0) {
						var v154;
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v226;
						var v2X20;
						var v2Y20;
						var v2Z20;
						var v155 = vec31;
						v1X20 = v155.x;
						v1Y20 = v155.y;
						v1Z20 = v155.z;
						var v156 = vec4;
						v2X20 = v156.x;
						v2Y20 = v156.y;
						v2Z20 = v156.z;
						var v1220;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var d33 = v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / d33;
						var b16;
						if(t14 < 0) {
							var v157 = closest;
							v157.x = v1X20;
							v157.y = v1Y20;
							v157.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							var v158 = closest;
							v158.x = v2X20;
							v158.y = v2Y20;
							v158.z = v2Z20;
							b16 = 2;
						} else {
							var p14;
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							var v159 = closest;
							v159.x = pX14;
							v159.y = pY14;
							v159.z = pZ14;
							b16 = 3;
						}
						var d34 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d34 < mind5) {
							mini5 = b16 << 1;
							mind5 = d34;
							var v160 = closest;
							minvX5 = v160.x;
							minvY5 = v160.y;
							minvZ5 = v160.z;
						}
					}
					if(d314 < 0) {
						var v161;
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v227;
						var v2X21;
						var v2Y21;
						var v2Z21;
						var v162 = vec21;
						v1X21 = v162.x;
						v1Y21 = v162.y;
						v1Z21 = v162.z;
						var v163 = vec4;
						v2X21 = v163.x;
						v2Y21 = v163.y;
						v2Z21 = v163.z;
						var v1221;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var d35 = v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / d35;
						var b17;
						if(t15 < 0) {
							var v164 = closest;
							v164.x = v1X21;
							v164.y = v1Y21;
							v164.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							var v165 = closest;
							v165.x = v2X21;
							v165.y = v2Y21;
							v165.z = v2Z21;
							b17 = 2;
						} else {
							var p15;
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							var v166 = closest;
							v166.x = pX15;
							v166.y = pY15;
							v166.z = pZ15;
							b17 = 3;
						}
						var d36 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d36 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d36;
							var v167 = closest;
							minvX5 = v167.x;
							minvY5 = v167.y;
							minvZ5 = v167.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						var v168 = closest;
						v168.x = minvX5;
						v168.y = minvY5;
						v168.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX5 *= l5;
						nY5 *= l5;
						nZ5 *= l5;
						var dn4 = v1X18 * nX5 + v1Y18 * nY5 + v1Z18 * nZ5;
						var l24 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						l24 = dn4 / l24;
						minvX5 = nX5 * l24;
						minvY5 = nY5 * l24;
						minvZ5 = nZ5 * l24;
						var v169 = closest;
						v169.x = minvX5;
						v169.y = minvY5;
						v169.z = minvZ5;
						b18 = 7;
					}
					var d37 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d37 < mind1) {
						mini1 = b18 << 1;
						mind1 = d37;
						var v170 = closest;
						minvX1 = v170.x;
						minvY1 = v170.y;
						minvZ1 = v170.z;
					}
				}
				if(mind1 > 0) {
					var v171 = closest;
					v171.x = minvX1;
					v171.y = minvY1;
					v171.z = minvZ1;
					v = mini1;
				} else {
					closest.zero();
					v = 15;
				}
				break;
			}
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < eps2) {
				if(!useEpa) {
					this.distance = 0;
					return 0;
				}
				switch(this.simplexSize) {
				case 1:
					this.pointToTetrahedron();
					break;
				case 2:
					this.lineToTetrahedron();
					break;
				case 3:
					this.triangleToTetrahedron();
					break;
				}
				if(this.simplexSize == 4) {
					var epaState = this.computeDepth(c1,c2,tf1,tf2,s,w1,w2);
					if(epaState != 0) {
						this.distance = 0;
						return epaState;
					}
					this.distance = -this.depth;
					return 0;
				}
				this.distance = 0;
				return 1;
			}
			this.shrinkSimplex(v);
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			var _this = dir;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this1 = this.s[this.simplexSize];
			var v172 = this.w1[this.simplexSize];
			_this1.x = v172.x;
			_this1.y = v172.y;
			_this1.z = v172.z;
			var _this2 = _this1;
			var v173 = this.w2[this.simplexSize];
			var tx1 = _this2.x - v173.x;
			var ty1 = _this2.y - v173.y;
			var tz1 = _this2.z - v173.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < eps2) {
				throw new Error("!?");
			}
			var d110 = closest.x * dir.x + closest.y * dir.y + closest.z * dir.z;
			var _this3 = s[this.simplexSize];
			var d210 = _this3.x * dir.x + _this3.y * dir.y + _this3.z * dir.z;
			if(d210 - d110 < eps2) {
				this.interpolateClosestPoints();
				this.distance = Math.sqrt(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z);
				if(cache != null && cache._gjkCache != null) {
					this.saveCache(cache._gjkCache);
				}
				return 0;
			}
			this.simplexSize++;
			++count;
		}
		return 2;
	}
	,convexCastImpl: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		this.c1 = c1;
		this.c2 = c2;
		this.tf1 = tf1;
		this.tf2 = tf2;
		var s = this.s;
		var w1 = this.w1;
		var w2 = this.w2;
		var closest = this.closest;
		var dir = this.dir;
		var firstDir;
		var firstDirX;
		var firstDirY;
		var firstDirZ;
		firstDirX = tf2._positionX - tf1._positionX;
		firstDirY = tf2._positionY - tf1._positionY;
		firstDirZ = tf2._positionZ - tf1._positionZ;
		var v = dir;
		v.x = firstDirX;
		v.y = firstDirY;
		v.z = firstDirZ;
		if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < 1e-6) {
			dir.init(1,0,0);
		}
		this.simplexSize = 0;
		if(this.c1 != null) {
			this.computeWitnessPoint1(true);
		} else {
			var v = this.w1[this.simplexSize];
			v.x = this.tf1._positionX;
			v.y = this.tf1._positionY;
			v.z = this.tf1._positionZ;
		}
		this.computeWitnessPoint2(true);
		var _this = this.s[this.simplexSize];
		var v = this.w1[this.simplexSize];
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var v = this.w2[this.simplexSize];
		var tx = _this1.x - v.x;
		var ty = _this1.y - v.y;
		var tz = _this1.z - v.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		this.simplexSize = 1;
		var count = 0;
		var max = 40;
		var lambda = 0.0;
		var rayX = this.rayX;
		var rayR = this.rayR;
		rayX.zero();
		rayR.x = tl2.x;
		rayR.y = tl2.y;
		rayR.z = tl2.z;
		var _this = rayR;
		var tx = _this.x - tl1.x;
		var ty = _this.y - tl1.y;
		var tz = _this.z - tl1.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var eps = 1e-4;
		var eps2 = eps * eps;
		while(count < max) {
			var v = 0;
			switch(this.simplexSize) {
			case 1:
				var v1 = s[0];
				closest.x = v1.x;
				closest.y = v1.y;
				closest.z = v1.z;
				v = 1;
				break;
			case 2:
				var v11;
				var v1X;
				var v1Y;
				var v1Z;
				var v2;
				var v2X;
				var v2Y;
				var v2Z;
				var v3 = s[0];
				v1X = v3.x;
				v1Y = v3.y;
				v1Z = v3.z;
				var v4 = s[1];
				v2X = v4.x;
				v2Y = v4.y;
				v2Z = v4.z;
				var v12;
				var v12X;
				var v12Y;
				var v12Z;
				v12X = v2X - v1X;
				v12Y = v2Y - v1Y;
				v12Z = v2Z - v1Z;
				var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
				var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
				t = -t / d;
				if(t < 0) {
					var v5 = closest;
					v5.x = v1X;
					v5.y = v1Y;
					v5.z = v1Z;
					v = 1;
				} else if(t > 1) {
					var v6 = closest;
					v6.x = v2X;
					v6.y = v2Y;
					v6.z = v2Z;
					v = 2;
				} else {
					var p;
					var pX;
					var pY;
					var pZ;
					pX = v1X + v12X * t;
					pY = v1Y + v12Y * t;
					pZ = v1Z + v12Z * t;
					var v7 = closest;
					v7.x = pX;
					v7.y = pY;
					v7.z = pZ;
					v = 3;
				}
				break;
			case 3:
				var vec1 = s[0];
				var vec2 = s[1];
				var vec3 = s[2];
				var v13;
				var v1X1;
				var v1Y1;
				var v1Z1;
				var v21;
				var v2X1;
				var v2Y1;
				var v2Z1;
				var v31;
				var v3X;
				var v3Y;
				var v3Z;
				var v121;
				var v12X1;
				var v12Y1;
				var v12Z1;
				var v23;
				var v23X;
				var v23Y;
				var v23Z;
				var v311;
				var v31X;
				var v31Y;
				var v31Z;
				var v8 = vec1;
				v1X1 = v8.x;
				v1Y1 = v8.y;
				v1Z1 = v8.z;
				var v9 = vec2;
				v2X1 = v9.x;
				v2Y1 = v9.y;
				v2Z1 = v9.z;
				var v10 = vec3;
				v3X = v10.x;
				v3Y = v10.y;
				v3Z = v10.z;
				v12X1 = v2X1 - v1X1;
				v12Y1 = v2Y1 - v1Y1;
				v12Z1 = v2Z1 - v1Z1;
				v23X = v3X - v2X1;
				v23Y = v3Y - v2Y1;
				v23Z = v3Z - v2Z1;
				v31X = v1X1 - v3X;
				v31Y = v1Y1 - v3Y;
				v31Z = v1Z1 - v3Z;
				var n;
				var nX;
				var nY;
				var nZ;
				nX = v12Y1 * v23Z - v12Z1 * v23Y;
				nY = v12Z1 * v23X - v12X1 * v23Z;
				nZ = v12X1 * v23Y - v12Y1 * v23X;
				var n12;
				var n12X;
				var n12Y;
				var n12Z;
				var n23;
				var n23X;
				var n23Y;
				var n23Z;
				var n31;
				var n31X;
				var n31Y;
				var n31Z;
				n12X = v12Y1 * nZ - v12Z1 * nY;
				n12Y = v12Z1 * nX - v12X1 * nZ;
				n12Z = v12X1 * nY - v12Y1 * nX;
				n23X = v23Y * nZ - v23Z * nY;
				n23Y = v23Z * nX - v23X * nZ;
				n23Z = v23X * nY - v23Y * nX;
				n31X = v31Y * nZ - v31Z * nY;
				n31Y = v31Z * nX - v31X * nZ;
				n31Z = v31X * nY - v31Y * nX;
				var d12 = v1X1 * n12X + v1Y1 * n12Y + v1Z1 * n12Z;
				var d23 = v2X1 * n23X + v2Y1 * n23Y + v2Z1 * n23Z;
				var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
				var mind = -1;
				var minv;
				var minvX;
				var minvY;
				var minvZ;
				var mini = 0;
				minvX = 0;
				minvY = 0;
				minvZ = 0;
				if(d12 < 0) {
					var v14;
					var v1X2;
					var v1Y2;
					var v1Z2;
					var v22;
					var v2X2;
					var v2Y2;
					var v2Z2;
					var v15 = vec1;
					v1X2 = v15.x;
					v1Y2 = v15.y;
					v1Z2 = v15.z;
					var v16 = vec2;
					v2X2 = v16.x;
					v2Y2 = v16.y;
					v2Z2 = v16.z;
					var v122;
					var v12X2;
					var v12Y2;
					var v12Z2;
					v12X2 = v2X2 - v1X2;
					v12Y2 = v2Y2 - v1Y2;
					v12Z2 = v2Z2 - v1Z2;
					var d1 = v12X2 * v12X2 + v12Y2 * v12Y2 + v12Z2 * v12Z2;
					var t1 = v12X2 * v1X2 + v12Y2 * v1Y2 + v12Z2 * v1Z2;
					t1 = -t1 / d1;
					var b;
					if(t1 < 0) {
						var v17 = closest;
						v17.x = v1X2;
						v17.y = v1Y2;
						v17.z = v1Z2;
						b = 1;
					} else if(t1 > 1) {
						var v18 = closest;
						v18.x = v2X2;
						v18.y = v2Y2;
						v18.z = v2Z2;
						b = 2;
					} else {
						var p1;
						var pX1;
						var pY1;
						var pZ1;
						pX1 = v1X2 + v12X2 * t1;
						pY1 = v1Y2 + v12Y2 * t1;
						pZ1 = v1Z2 + v12Z2 * t1;
						var v19 = closest;
						v19.x = pX1;
						v19.y = pY1;
						v19.z = pZ1;
						b = 3;
					}
					var d2 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini = b;
					mind = d2;
					var v20 = closest;
					minvX = v20.x;
					minvY = v20.y;
					minvZ = v20.z;
				}
				if(d23 < 0) {
					var v110;
					var v1X3;
					var v1Y3;
					var v1Z3;
					var v24;
					var v2X3;
					var v2Y3;
					var v2Z3;
					var v25 = vec2;
					v1X3 = v25.x;
					v1Y3 = v25.y;
					v1Z3 = v25.z;
					var v26 = vec3;
					v2X3 = v26.x;
					v2Y3 = v26.y;
					v2Z3 = v26.z;
					var v123;
					var v12X3;
					var v12Y3;
					var v12Z3;
					v12X3 = v2X3 - v1X3;
					v12Y3 = v2Y3 - v1Y3;
					v12Z3 = v2Z3 - v1Z3;
					var d3 = v12X3 * v12X3 + v12Y3 * v12Y3 + v12Z3 * v12Z3;
					var t2 = v12X3 * v1X3 + v12Y3 * v1Y3 + v12Z3 * v1Z3;
					t2 = -t2 / d3;
					var b1;
					if(t2 < 0) {
						var v27 = closest;
						v27.x = v1X3;
						v27.y = v1Y3;
						v27.z = v1Z3;
						b1 = 1;
					} else if(t2 > 1) {
						var v28 = closest;
						v28.x = v2X3;
						v28.y = v2Y3;
						v28.z = v2Z3;
						b1 = 2;
					} else {
						var p2;
						var pX2;
						var pY2;
						var pZ2;
						pX2 = v1X3 + v12X3 * t2;
						pY2 = v1Y3 + v12Y3 * t2;
						pZ2 = v1Z3 + v12Z3 * t2;
						var v29 = closest;
						v29.x = pX2;
						v29.y = pY2;
						v29.z = pZ2;
						b1 = 3;
					}
					var d4 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d4 < mind) {
						mini = b1 << 1;
						mind = d4;
						var v30 = closest;
						minvX = v30.x;
						minvY = v30.y;
						minvZ = v30.z;
					}
				}
				if(d31 < 0) {
					var v111;
					var v1X4;
					var v1Y4;
					var v1Z4;
					var v210;
					var v2X4;
					var v2Y4;
					var v2Z4;
					var v32 = vec1;
					v1X4 = v32.x;
					v1Y4 = v32.y;
					v1Z4 = v32.z;
					var v33 = vec3;
					v2X4 = v33.x;
					v2Y4 = v33.y;
					v2Z4 = v33.z;
					var v124;
					var v12X4;
					var v12Y4;
					var v12Z4;
					v12X4 = v2X4 - v1X4;
					v12Y4 = v2Y4 - v1Y4;
					v12Z4 = v2Z4 - v1Z4;
					var d5 = v12X4 * v12X4 + v12Y4 * v12Y4 + v12Z4 * v12Z4;
					var t3 = v12X4 * v1X4 + v12Y4 * v1Y4 + v12Z4 * v1Z4;
					t3 = -t3 / d5;
					var b2;
					if(t3 < 0) {
						var v34 = closest;
						v34.x = v1X4;
						v34.y = v1Y4;
						v34.z = v1Z4;
						b2 = 1;
					} else if(t3 > 1) {
						var v35 = closest;
						v35.x = v2X4;
						v35.y = v2Y4;
						v35.z = v2Z4;
						b2 = 2;
					} else {
						var p3;
						var pX3;
						var pY3;
						var pZ3;
						pX3 = v1X4 + v12X4 * t3;
						pY3 = v1Y4 + v12Y4 * t3;
						pZ3 = v1Z4 + v12Z4 * t3;
						var v36 = closest;
						v36.x = pX3;
						v36.y = pY3;
						v36.z = pZ3;
						b2 = 3;
					}
					var d6 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind < 0 || d6 < mind) {
						mini = b2 & 1 | (b2 & 2) << 1;
						mind = d6;
						var v37 = closest;
						minvX = v37.x;
						minvY = v37.y;
						minvZ = v37.z;
					}
				}
				if(mind > 0) {
					var v38 = closest;
					v38.x = minvX;
					v38.y = minvY;
					v38.z = minvZ;
					v = mini;
				} else {
					var l = nX * nX + nY * nY + nZ * nZ;
					if(l > 0) {
						l = 1 / Math.sqrt(l);
					}
					nX *= l;
					nY *= l;
					nZ *= l;
					var dn = v1X1 * nX + v1Y1 * nY + v1Z1 * nZ;
					var l2 = nX * nX + nY * nY + nZ * nZ;
					l2 = dn / l2;
					minvX = nX * l2;
					minvY = nY * l2;
					minvZ = nZ * l2;
					var v39 = closest;
					v39.x = minvX;
					v39.y = minvY;
					v39.z = minvZ;
					v = 7;
				}
				break;
			case 4:
				var vec11 = s[0];
				var vec21 = s[1];
				var vec31 = s[2];
				var vec4 = s[3];
				var v112;
				var v1X5;
				var v1Y5;
				var v1Z5;
				var v211;
				var v2X5;
				var v2Y5;
				var v2Z5;
				var v310;
				var v3X1;
				var v3Y1;
				var v3Z1;
				var v41;
				var v4X;
				var v4Y;
				var v4Z;
				var v125;
				var v12X5;
				var v12Y5;
				var v12Z5;
				var v131;
				var v13X;
				var v13Y;
				var v13Z;
				var v141;
				var v14X;
				var v14Y;
				var v14Z;
				var v231;
				var v23X1;
				var v23Y1;
				var v23Z1;
				var v241;
				var v24X;
				var v24Y;
				var v24Z;
				var v341;
				var v34X;
				var v34Y;
				var v34Z;
				var v40 = vec11;
				v1X5 = v40.x;
				v1Y5 = v40.y;
				v1Z5 = v40.z;
				var v42 = vec21;
				v2X5 = v42.x;
				v2Y5 = v42.y;
				v2Z5 = v42.z;
				var v43 = vec31;
				v3X1 = v43.x;
				v3Y1 = v43.y;
				v3Z1 = v43.z;
				var v44 = vec4;
				v4X = v44.x;
				v4Y = v44.y;
				v4Z = v44.z;
				v12X5 = v2X5 - v1X5;
				v12Y5 = v2Y5 - v1Y5;
				v12Z5 = v2Z5 - v1Z5;
				v13X = v3X1 - v1X5;
				v13Y = v3Y1 - v1Y5;
				v13Z = v3Z1 - v1Z5;
				v14X = v4X - v1X5;
				v14Y = v4Y - v1Y5;
				v14Z = v4Z - v1Z5;
				v23X1 = v3X1 - v2X5;
				v23Y1 = v3Y1 - v2Y5;
				v23Z1 = v3Z1 - v2Z5;
				v24X = v4X - v2X5;
				v24Y = v4Y - v2Y5;
				v24Z = v4Z - v2Z5;
				v34X = v4X - v3X1;
				v34Y = v4Y - v3Y1;
				v34Z = v4Z - v3Z1;
				var rev;
				var n123;
				var n123X;
				var n123Y;
				var n123Z;
				var n134;
				var n134X;
				var n134Y;
				var n134Z;
				var n142;
				var n142X;
				var n142Y;
				var n142Z;
				var n243;
				var n243X;
				var n243Y;
				var n243Z;
				var n1;
				var nX1;
				var nY1;
				var nZ1;
				n123X = v12Y5 * v13Z - v12Z5 * v13Y;
				n123Y = v12Z5 * v13X - v12X5 * v13Z;
				n123Z = v12X5 * v13Y - v12Y5 * v13X;
				n134X = v13Y * v14Z - v13Z * v14Y;
				n134Y = v13Z * v14X - v13X * v14Z;
				n134Z = v13X * v14Y - v13Y * v14X;
				n142X = v14Y * v12Z5 - v14Z * v12Y5;
				n142Y = v14Z * v12X5 - v14X * v12Z5;
				n142Z = v14X * v12Y5 - v14Y * v12X5;
				n243X = v24Y * v23Z1 - v24Z * v23Y1;
				n243Y = v24Z * v23X1 - v24X * v23Z1;
				n243Z = v24X * v23Y1 - v24Y * v23X1;
				var sign = v12X5 * n243X + v12Y5 * n243Y + v12Z5 * n243Z > 0 ? 1 : -1;
				var d123 = v1X5 * n123X + v1Y5 * n123Y + v1Z5 * n123Z;
				var d134 = v1X5 * n134X + v1Y5 * n134Y + v1Z5 * n134Z;
				var d142 = v1X5 * n142X + v1Y5 * n142Y + v1Z5 * n142Z;
				var d243 = v2X5 * n243X + v2Y5 * n243Y + v2Z5 * n243Z;
				var mind1 = -1;
				var minv1;
				var minvX1;
				var minvY1;
				var minvZ1;
				var mini1 = 0;
				minvX1 = 0;
				minvY1 = 0;
				minvZ1 = 0;
				if(d123 * sign < 0) {
					var v113;
					var v1X6;
					var v1Y6;
					var v1Z6;
					var v212;
					var v2X6;
					var v2Y6;
					var v2Z6;
					var v312;
					var v3X2;
					var v3Y2;
					var v3Z2;
					var v126;
					var v12X6;
					var v12Y6;
					var v12Z6;
					var v232;
					var v23X2;
					var v23Y2;
					var v23Z2;
					var v313;
					var v31X1;
					var v31Y1;
					var v31Z1;
					var v45 = vec11;
					v1X6 = v45.x;
					v1Y6 = v45.y;
					v1Z6 = v45.z;
					var v46 = vec21;
					v2X6 = v46.x;
					v2Y6 = v46.y;
					v2Z6 = v46.z;
					var v47 = vec31;
					v3X2 = v47.x;
					v3Y2 = v47.y;
					v3Z2 = v47.z;
					v12X6 = v2X6 - v1X6;
					v12Y6 = v2Y6 - v1Y6;
					v12Z6 = v2Z6 - v1Z6;
					v23X2 = v3X2 - v2X6;
					v23Y2 = v3Y2 - v2Y6;
					v23Z2 = v3Z2 - v2Z6;
					v31X1 = v1X6 - v3X2;
					v31Y1 = v1Y6 - v3Y2;
					v31Z1 = v1Z6 - v3Z2;
					var n2;
					var nX2;
					var nY2;
					var nZ2;
					nX2 = v12Y6 * v23Z2 - v12Z6 * v23Y2;
					nY2 = v12Z6 * v23X2 - v12X6 * v23Z2;
					nZ2 = v12X6 * v23Y2 - v12Y6 * v23X2;
					var n121;
					var n12X1;
					var n12Y1;
					var n12Z1;
					var n231;
					var n23X1;
					var n23Y1;
					var n23Z1;
					var n311;
					var n31X1;
					var n31Y1;
					var n31Z1;
					n12X1 = v12Y6 * nZ2 - v12Z6 * nY2;
					n12Y1 = v12Z6 * nX2 - v12X6 * nZ2;
					n12Z1 = v12X6 * nY2 - v12Y6 * nX2;
					n23X1 = v23Y2 * nZ2 - v23Z2 * nY2;
					n23Y1 = v23Z2 * nX2 - v23X2 * nZ2;
					n23Z1 = v23X2 * nY2 - v23Y2 * nX2;
					n31X1 = v31Y1 * nZ2 - v31Z1 * nY2;
					n31Y1 = v31Z1 * nX2 - v31X1 * nZ2;
					n31Z1 = v31X1 * nY2 - v31Y1 * nX2;
					var d121 = v1X6 * n12X1 + v1Y6 * n12Y1 + v1Z6 * n12Z1;
					var d231 = v2X6 * n23X1 + v2Y6 * n23Y1 + v2Z6 * n23Z1;
					var d311 = v3X2 * n31X1 + v3Y2 * n31Y1 + v3Z2 * n31Z1;
					var mind2 = -1;
					var minv2;
					var minvX2;
					var minvY2;
					var minvZ2;
					var mini2 = 0;
					minvX2 = 0;
					minvY2 = 0;
					minvZ2 = 0;
					if(d121 < 0) {
						var v114;
						var v1X7;
						var v1Y7;
						var v1Z7;
						var v213;
						var v2X7;
						var v2Y7;
						var v2Z7;
						var v48 = vec11;
						v1X7 = v48.x;
						v1Y7 = v48.y;
						v1Z7 = v48.z;
						var v49 = vec21;
						v2X7 = v49.x;
						v2Y7 = v49.y;
						v2Z7 = v49.z;
						var v127;
						var v12X7;
						var v12Y7;
						var v12Z7;
						v12X7 = v2X7 - v1X7;
						v12Y7 = v2Y7 - v1Y7;
						v12Z7 = v2Z7 - v1Z7;
						var d7 = v12X7 * v12X7 + v12Y7 * v12Y7 + v12Z7 * v12Z7;
						var t4 = v12X7 * v1X7 + v12Y7 * v1Y7 + v12Z7 * v1Z7;
						t4 = -t4 / d7;
						var b3;
						if(t4 < 0) {
							var v50 = closest;
							v50.x = v1X7;
							v50.y = v1Y7;
							v50.z = v1Z7;
							b3 = 1;
						} else if(t4 > 1) {
							var v51 = closest;
							v51.x = v2X7;
							v51.y = v2Y7;
							v51.z = v2Z7;
							b3 = 2;
						} else {
							var p4;
							var pX4;
							var pY4;
							var pZ4;
							pX4 = v1X7 + v12X7 * t4;
							pY4 = v1Y7 + v12Y7 * t4;
							pZ4 = v1Z7 + v12Z7 * t4;
							var v52 = closest;
							v52.x = pX4;
							v52.y = pY4;
							v52.z = pZ4;
							b3 = 3;
						}
						var d8 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini2 = b3;
						mind2 = d8;
						var v53 = closest;
						minvX2 = v53.x;
						minvY2 = v53.y;
						minvZ2 = v53.z;
					}
					if(d231 < 0) {
						var v115;
						var v1X8;
						var v1Y8;
						var v1Z8;
						var v214;
						var v2X8;
						var v2Y8;
						var v2Z8;
						var v54 = vec21;
						v1X8 = v54.x;
						v1Y8 = v54.y;
						v1Z8 = v54.z;
						var v55 = vec31;
						v2X8 = v55.x;
						v2Y8 = v55.y;
						v2Z8 = v55.z;
						var v128;
						var v12X8;
						var v12Y8;
						var v12Z8;
						v12X8 = v2X8 - v1X8;
						v12Y8 = v2Y8 - v1Y8;
						v12Z8 = v2Z8 - v1Z8;
						var d9 = v12X8 * v12X8 + v12Y8 * v12Y8 + v12Z8 * v12Z8;
						var t5 = v12X8 * v1X8 + v12Y8 * v1Y8 + v12Z8 * v1Z8;
						t5 = -t5 / d9;
						var b4;
						if(t5 < 0) {
							var v56 = closest;
							v56.x = v1X8;
							v56.y = v1Y8;
							v56.z = v1Z8;
							b4 = 1;
						} else if(t5 > 1) {
							var v57 = closest;
							v57.x = v2X8;
							v57.y = v2Y8;
							v57.z = v2Z8;
							b4 = 2;
						} else {
							var p5;
							var pX5;
							var pY5;
							var pZ5;
							pX5 = v1X8 + v12X8 * t5;
							pY5 = v1Y8 + v12Y8 * t5;
							pZ5 = v1Z8 + v12Z8 * t5;
							var v58 = closest;
							v58.x = pX5;
							v58.y = pY5;
							v58.z = pZ5;
							b4 = 3;
						}
						var d10 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d10 < mind2) {
							mini2 = b4 << 1;
							mind2 = d10;
							var v59 = closest;
							minvX2 = v59.x;
							minvY2 = v59.y;
							minvZ2 = v59.z;
						}
					}
					if(d311 < 0) {
						var v116;
						var v1X9;
						var v1Y9;
						var v1Z9;
						var v215;
						var v2X9;
						var v2Y9;
						var v2Z9;
						var v60 = vec11;
						v1X9 = v60.x;
						v1Y9 = v60.y;
						v1Z9 = v60.z;
						var v61 = vec31;
						v2X9 = v61.x;
						v2Y9 = v61.y;
						v2Z9 = v61.z;
						var v129;
						var v12X9;
						var v12Y9;
						var v12Z9;
						v12X9 = v2X9 - v1X9;
						v12Y9 = v2Y9 - v1Y9;
						v12Z9 = v2Z9 - v1Z9;
						var d11 = v12X9 * v12X9 + v12Y9 * v12Y9 + v12Z9 * v12Z9;
						var t6 = v12X9 * v1X9 + v12Y9 * v1Y9 + v12Z9 * v1Z9;
						t6 = -t6 / d11;
						var b5;
						if(t6 < 0) {
							var v62 = closest;
							v62.x = v1X9;
							v62.y = v1Y9;
							v62.z = v1Z9;
							b5 = 1;
						} else if(t6 > 1) {
							var v63 = closest;
							v63.x = v2X9;
							v63.y = v2Y9;
							v63.z = v2Z9;
							b5 = 2;
						} else {
							var p6;
							var pX6;
							var pY6;
							var pZ6;
							pX6 = v1X9 + v12X9 * t6;
							pY6 = v1Y9 + v12Y9 * t6;
							pZ6 = v1Z9 + v12Z9 * t6;
							var v64 = closest;
							v64.x = pX6;
							v64.y = pY6;
							v64.z = pZ6;
							b5 = 3;
						}
						var d13 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind2 < 0 || d13 < mind2) {
							mini2 = b5 & 1 | (b5 & 2) << 1;
							mind2 = d13;
							var v65 = closest;
							minvX2 = v65.x;
							minvY2 = v65.y;
							minvZ2 = v65.z;
						}
					}
					var b6;
					if(mind2 > 0) {
						var v66 = closest;
						v66.x = minvX2;
						v66.y = minvY2;
						v66.z = minvZ2;
						b6 = mini2;
					} else {
						var l1 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						if(l1 > 0) {
							l1 = 1 / Math.sqrt(l1);
						}
						nX2 *= l1;
						nY2 *= l1;
						nZ2 *= l1;
						var dn1 = v1X6 * nX2 + v1Y6 * nY2 + v1Z6 * nZ2;
						var l21 = nX2 * nX2 + nY2 * nY2 + nZ2 * nZ2;
						l21 = dn1 / l21;
						minvX2 = nX2 * l21;
						minvY2 = nY2 * l21;
						minvZ2 = nZ2 * l21;
						var v67 = closest;
						v67.x = minvX2;
						v67.y = minvY2;
						v67.z = minvZ2;
						b6 = 7;
					}
					var d14 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					mini1 = b6;
					mind1 = d14;
					var v68 = closest;
					minvX1 = v68.x;
					minvY1 = v68.y;
					minvZ1 = v68.z;
				}
				if(d134 * sign < 0) {
					var v117;
					var v1X10;
					var v1Y10;
					var v1Z10;
					var v216;
					var v2X10;
					var v2Y10;
					var v2Z10;
					var v314;
					var v3X3;
					var v3Y3;
					var v3Z3;
					var v1210;
					var v12X10;
					var v12Y10;
					var v12Z10;
					var v233;
					var v23X3;
					var v23Y3;
					var v23Z3;
					var v315;
					var v31X2;
					var v31Y2;
					var v31Z2;
					var v69 = vec11;
					v1X10 = v69.x;
					v1Y10 = v69.y;
					v1Z10 = v69.z;
					var v70 = vec31;
					v2X10 = v70.x;
					v2Y10 = v70.y;
					v2Z10 = v70.z;
					var v71 = vec4;
					v3X3 = v71.x;
					v3Y3 = v71.y;
					v3Z3 = v71.z;
					v12X10 = v2X10 - v1X10;
					v12Y10 = v2Y10 - v1Y10;
					v12Z10 = v2Z10 - v1Z10;
					v23X3 = v3X3 - v2X10;
					v23Y3 = v3Y3 - v2Y10;
					v23Z3 = v3Z3 - v2Z10;
					v31X2 = v1X10 - v3X3;
					v31Y2 = v1Y10 - v3Y3;
					v31Z2 = v1Z10 - v3Z3;
					var n3;
					var nX3;
					var nY3;
					var nZ3;
					nX3 = v12Y10 * v23Z3 - v12Z10 * v23Y3;
					nY3 = v12Z10 * v23X3 - v12X10 * v23Z3;
					nZ3 = v12X10 * v23Y3 - v12Y10 * v23X3;
					var n122;
					var n12X2;
					var n12Y2;
					var n12Z2;
					var n232;
					var n23X2;
					var n23Y2;
					var n23Z2;
					var n312;
					var n31X2;
					var n31Y2;
					var n31Z2;
					n12X2 = v12Y10 * nZ3 - v12Z10 * nY3;
					n12Y2 = v12Z10 * nX3 - v12X10 * nZ3;
					n12Z2 = v12X10 * nY3 - v12Y10 * nX3;
					n23X2 = v23Y3 * nZ3 - v23Z3 * nY3;
					n23Y2 = v23Z3 * nX3 - v23X3 * nZ3;
					n23Z2 = v23X3 * nY3 - v23Y3 * nX3;
					n31X2 = v31Y2 * nZ3 - v31Z2 * nY3;
					n31Y2 = v31Z2 * nX3 - v31X2 * nZ3;
					n31Z2 = v31X2 * nY3 - v31Y2 * nX3;
					var d122 = v1X10 * n12X2 + v1Y10 * n12Y2 + v1Z10 * n12Z2;
					var d232 = v2X10 * n23X2 + v2Y10 * n23Y2 + v2Z10 * n23Z2;
					var d312 = v3X3 * n31X2 + v3Y3 * n31Y2 + v3Z3 * n31Z2;
					var mind3 = -1;
					var minv3;
					var minvX3;
					var minvY3;
					var minvZ3;
					var mini3 = 0;
					minvX3 = 0;
					minvY3 = 0;
					minvZ3 = 0;
					if(d122 < 0) {
						var v118;
						var v1X11;
						var v1Y11;
						var v1Z11;
						var v217;
						var v2X11;
						var v2Y11;
						var v2Z11;
						var v72 = vec11;
						v1X11 = v72.x;
						v1Y11 = v72.y;
						v1Z11 = v72.z;
						var v73 = vec31;
						v2X11 = v73.x;
						v2Y11 = v73.y;
						v2Z11 = v73.z;
						var v1211;
						var v12X11;
						var v12Y11;
						var v12Z11;
						v12X11 = v2X11 - v1X11;
						v12Y11 = v2Y11 - v1Y11;
						v12Z11 = v2Z11 - v1Z11;
						var d15 = v12X11 * v12X11 + v12Y11 * v12Y11 + v12Z11 * v12Z11;
						var t7 = v12X11 * v1X11 + v12Y11 * v1Y11 + v12Z11 * v1Z11;
						t7 = -t7 / d15;
						var b7;
						if(t7 < 0) {
							var v74 = closest;
							v74.x = v1X11;
							v74.y = v1Y11;
							v74.z = v1Z11;
							b7 = 1;
						} else if(t7 > 1) {
							var v75 = closest;
							v75.x = v2X11;
							v75.y = v2Y11;
							v75.z = v2Z11;
							b7 = 2;
						} else {
							var p7;
							var pX7;
							var pY7;
							var pZ7;
							pX7 = v1X11 + v12X11 * t7;
							pY7 = v1Y11 + v12Y11 * t7;
							pZ7 = v1Z11 + v12Z11 * t7;
							var v76 = closest;
							v76.x = pX7;
							v76.y = pY7;
							v76.z = pZ7;
							b7 = 3;
						}
						var d16 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini3 = b7;
						mind3 = d16;
						var v77 = closest;
						minvX3 = v77.x;
						minvY3 = v77.y;
						minvZ3 = v77.z;
					}
					if(d232 < 0) {
						var v119;
						var v1X12;
						var v1Y12;
						var v1Z12;
						var v218;
						var v2X12;
						var v2Y12;
						var v2Z12;
						var v78 = vec31;
						v1X12 = v78.x;
						v1Y12 = v78.y;
						v1Z12 = v78.z;
						var v79 = vec4;
						v2X12 = v79.x;
						v2Y12 = v79.y;
						v2Z12 = v79.z;
						var v1212;
						var v12X12;
						var v12Y12;
						var v12Z12;
						v12X12 = v2X12 - v1X12;
						v12Y12 = v2Y12 - v1Y12;
						v12Z12 = v2Z12 - v1Z12;
						var d17 = v12X12 * v12X12 + v12Y12 * v12Y12 + v12Z12 * v12Z12;
						var t8 = v12X12 * v1X12 + v12Y12 * v1Y12 + v12Z12 * v1Z12;
						t8 = -t8 / d17;
						var b8;
						if(t8 < 0) {
							var v80 = closest;
							v80.x = v1X12;
							v80.y = v1Y12;
							v80.z = v1Z12;
							b8 = 1;
						} else if(t8 > 1) {
							var v81 = closest;
							v81.x = v2X12;
							v81.y = v2Y12;
							v81.z = v2Z12;
							b8 = 2;
						} else {
							var p8;
							var pX8;
							var pY8;
							var pZ8;
							pX8 = v1X12 + v12X12 * t8;
							pY8 = v1Y12 + v12Y12 * t8;
							pZ8 = v1Z12 + v12Z12 * t8;
							var v82 = closest;
							v82.x = pX8;
							v82.y = pY8;
							v82.z = pZ8;
							b8 = 3;
						}
						var d18 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d18 < mind3) {
							mini3 = b8 << 1;
							mind3 = d18;
							var v83 = closest;
							minvX3 = v83.x;
							minvY3 = v83.y;
							minvZ3 = v83.z;
						}
					}
					if(d312 < 0) {
						var v120;
						var v1X13;
						var v1Y13;
						var v1Z13;
						var v219;
						var v2X13;
						var v2Y13;
						var v2Z13;
						var v84 = vec11;
						v1X13 = v84.x;
						v1Y13 = v84.y;
						v1Z13 = v84.z;
						var v85 = vec4;
						v2X13 = v85.x;
						v2Y13 = v85.y;
						v2Z13 = v85.z;
						var v1213;
						var v12X13;
						var v12Y13;
						var v12Z13;
						v12X13 = v2X13 - v1X13;
						v12Y13 = v2Y13 - v1Y13;
						v12Z13 = v2Z13 - v1Z13;
						var d19 = v12X13 * v12X13 + v12Y13 * v12Y13 + v12Z13 * v12Z13;
						var t9 = v12X13 * v1X13 + v12Y13 * v1Y13 + v12Z13 * v1Z13;
						t9 = -t9 / d19;
						var b9;
						if(t9 < 0) {
							var v86 = closest;
							v86.x = v1X13;
							v86.y = v1Y13;
							v86.z = v1Z13;
							b9 = 1;
						} else if(t9 > 1) {
							var v87 = closest;
							v87.x = v2X13;
							v87.y = v2Y13;
							v87.z = v2Z13;
							b9 = 2;
						} else {
							var p9;
							var pX9;
							var pY9;
							var pZ9;
							pX9 = v1X13 + v12X13 * t9;
							pY9 = v1Y13 + v12Y13 * t9;
							pZ9 = v1Z13 + v12Z13 * t9;
							var v88 = closest;
							v88.x = pX9;
							v88.y = pY9;
							v88.z = pZ9;
							b9 = 3;
						}
						var d20 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind3 < 0 || d20 < mind3) {
							mini3 = b9 & 1 | (b9 & 2) << 1;
							mind3 = d20;
							var v89 = closest;
							minvX3 = v89.x;
							minvY3 = v89.y;
							minvZ3 = v89.z;
						}
					}
					var b10;
					if(mind3 > 0) {
						var v90 = closest;
						v90.x = minvX3;
						v90.y = minvY3;
						v90.z = minvZ3;
						b10 = mini3;
					} else {
						var l3 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						if(l3 > 0) {
							l3 = 1 / Math.sqrt(l3);
						}
						nX3 *= l3;
						nY3 *= l3;
						nZ3 *= l3;
						var dn2 = v1X10 * nX3 + v1Y10 * nY3 + v1Z10 * nZ3;
						var l22 = nX3 * nX3 + nY3 * nY3 + nZ3 * nZ3;
						l22 = dn2 / l22;
						minvX3 = nX3 * l22;
						minvY3 = nY3 * l22;
						minvZ3 = nZ3 * l22;
						var v91 = closest;
						v91.x = minvX3;
						v91.y = minvY3;
						v91.z = minvZ3;
						b10 = 7;
					}
					var d21 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d21 < mind1) {
						mini1 = b10 & 1 | (b10 & 6) << 1;
						mind1 = d21;
						var v92 = closest;
						minvX1 = v92.x;
						minvY1 = v92.y;
						minvZ1 = v92.z;
					}
				}
				if(d142 * sign < 0) {
					var v130;
					var v1X14;
					var v1Y14;
					var v1Z14;
					var v220;
					var v2X14;
					var v2Y14;
					var v2Z14;
					var v316;
					var v3X4;
					var v3Y4;
					var v3Z4;
					var v1214;
					var v12X14;
					var v12Y14;
					var v12Z14;
					var v234;
					var v23X4;
					var v23Y4;
					var v23Z4;
					var v317;
					var v31X3;
					var v31Y3;
					var v31Z3;
					var v93 = vec11;
					v1X14 = v93.x;
					v1Y14 = v93.y;
					v1Z14 = v93.z;
					var v94 = vec21;
					v2X14 = v94.x;
					v2Y14 = v94.y;
					v2Z14 = v94.z;
					var v95 = vec4;
					v3X4 = v95.x;
					v3Y4 = v95.y;
					v3Z4 = v95.z;
					v12X14 = v2X14 - v1X14;
					v12Y14 = v2Y14 - v1Y14;
					v12Z14 = v2Z14 - v1Z14;
					v23X4 = v3X4 - v2X14;
					v23Y4 = v3Y4 - v2Y14;
					v23Z4 = v3Z4 - v2Z14;
					v31X3 = v1X14 - v3X4;
					v31Y3 = v1Y14 - v3Y4;
					v31Z3 = v1Z14 - v3Z4;
					var n4;
					var nX4;
					var nY4;
					var nZ4;
					nX4 = v12Y14 * v23Z4 - v12Z14 * v23Y4;
					nY4 = v12Z14 * v23X4 - v12X14 * v23Z4;
					nZ4 = v12X14 * v23Y4 - v12Y14 * v23X4;
					var n124;
					var n12X3;
					var n12Y3;
					var n12Z3;
					var n233;
					var n23X3;
					var n23Y3;
					var n23Z3;
					var n313;
					var n31X3;
					var n31Y3;
					var n31Z3;
					n12X3 = v12Y14 * nZ4 - v12Z14 * nY4;
					n12Y3 = v12Z14 * nX4 - v12X14 * nZ4;
					n12Z3 = v12X14 * nY4 - v12Y14 * nX4;
					n23X3 = v23Y4 * nZ4 - v23Z4 * nY4;
					n23Y3 = v23Z4 * nX4 - v23X4 * nZ4;
					n23Z3 = v23X4 * nY4 - v23Y4 * nX4;
					n31X3 = v31Y3 * nZ4 - v31Z3 * nY4;
					n31Y3 = v31Z3 * nX4 - v31X3 * nZ4;
					n31Z3 = v31X3 * nY4 - v31Y3 * nX4;
					var d124 = v1X14 * n12X3 + v1Y14 * n12Y3 + v1Z14 * n12Z3;
					var d233 = v2X14 * n23X3 + v2Y14 * n23Y3 + v2Z14 * n23Z3;
					var d313 = v3X4 * n31X3 + v3Y4 * n31Y3 + v3Z4 * n31Z3;
					var mind4 = -1;
					var minv4;
					var minvX4;
					var minvY4;
					var minvZ4;
					var mini4 = 0;
					minvX4 = 0;
					minvY4 = 0;
					minvZ4 = 0;
					if(d124 < 0) {
						var v132;
						var v1X15;
						var v1Y15;
						var v1Z15;
						var v221;
						var v2X15;
						var v2Y15;
						var v2Z15;
						var v96 = vec11;
						v1X15 = v96.x;
						v1Y15 = v96.y;
						v1Z15 = v96.z;
						var v97 = vec21;
						v2X15 = v97.x;
						v2Y15 = v97.y;
						v2Z15 = v97.z;
						var v1215;
						var v12X15;
						var v12Y15;
						var v12Z15;
						v12X15 = v2X15 - v1X15;
						v12Y15 = v2Y15 - v1Y15;
						v12Z15 = v2Z15 - v1Z15;
						var d22 = v12X15 * v12X15 + v12Y15 * v12Y15 + v12Z15 * v12Z15;
						var t10 = v12X15 * v1X15 + v12Y15 * v1Y15 + v12Z15 * v1Z15;
						t10 = -t10 / d22;
						var b11;
						if(t10 < 0) {
							var v98 = closest;
							v98.x = v1X15;
							v98.y = v1Y15;
							v98.z = v1Z15;
							b11 = 1;
						} else if(t10 > 1) {
							var v99 = closest;
							v99.x = v2X15;
							v99.y = v2Y15;
							v99.z = v2Z15;
							b11 = 2;
						} else {
							var p10;
							var pX10;
							var pY10;
							var pZ10;
							pX10 = v1X15 + v12X15 * t10;
							pY10 = v1Y15 + v12Y15 * t10;
							pZ10 = v1Z15 + v12Z15 * t10;
							var v100 = closest;
							v100.x = pX10;
							v100.y = pY10;
							v100.z = pZ10;
							b11 = 3;
						}
						var d24 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini4 = b11;
						mind4 = d24;
						var v101 = closest;
						minvX4 = v101.x;
						minvY4 = v101.y;
						minvZ4 = v101.z;
					}
					if(d233 < 0) {
						var v133;
						var v1X16;
						var v1Y16;
						var v1Z16;
						var v222;
						var v2X16;
						var v2Y16;
						var v2Z16;
						var v102 = vec21;
						v1X16 = v102.x;
						v1Y16 = v102.y;
						v1Z16 = v102.z;
						var v103 = vec4;
						v2X16 = v103.x;
						v2Y16 = v103.y;
						v2Z16 = v103.z;
						var v1216;
						var v12X16;
						var v12Y16;
						var v12Z16;
						v12X16 = v2X16 - v1X16;
						v12Y16 = v2Y16 - v1Y16;
						v12Z16 = v2Z16 - v1Z16;
						var d25 = v12X16 * v12X16 + v12Y16 * v12Y16 + v12Z16 * v12Z16;
						var t11 = v12X16 * v1X16 + v12Y16 * v1Y16 + v12Z16 * v1Z16;
						t11 = -t11 / d25;
						var b12;
						if(t11 < 0) {
							var v104 = closest;
							v104.x = v1X16;
							v104.y = v1Y16;
							v104.z = v1Z16;
							b12 = 1;
						} else if(t11 > 1) {
							var v105 = closest;
							v105.x = v2X16;
							v105.y = v2Y16;
							v105.z = v2Z16;
							b12 = 2;
						} else {
							var p11;
							var pX11;
							var pY11;
							var pZ11;
							pX11 = v1X16 + v12X16 * t11;
							pY11 = v1Y16 + v12Y16 * t11;
							pZ11 = v1Z16 + v12Z16 * t11;
							var v106 = closest;
							v106.x = pX11;
							v106.y = pY11;
							v106.z = pZ11;
							b12 = 3;
						}
						var d26 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d26 < mind4) {
							mini4 = b12 << 1;
							mind4 = d26;
							var v107 = closest;
							minvX4 = v107.x;
							minvY4 = v107.y;
							minvZ4 = v107.z;
						}
					}
					if(d313 < 0) {
						var v134;
						var v1X17;
						var v1Y17;
						var v1Z17;
						var v223;
						var v2X17;
						var v2Y17;
						var v2Z17;
						var v108 = vec11;
						v1X17 = v108.x;
						v1Y17 = v108.y;
						v1Z17 = v108.z;
						var v109 = vec4;
						v2X17 = v109.x;
						v2Y17 = v109.y;
						v2Z17 = v109.z;
						var v1217;
						var v12X17;
						var v12Y17;
						var v12Z17;
						v12X17 = v2X17 - v1X17;
						v12Y17 = v2Y17 - v1Y17;
						v12Z17 = v2Z17 - v1Z17;
						var d27 = v12X17 * v12X17 + v12Y17 * v12Y17 + v12Z17 * v12Z17;
						var t12 = v12X17 * v1X17 + v12Y17 * v1Y17 + v12Z17 * v1Z17;
						t12 = -t12 / d27;
						var b13;
						if(t12 < 0) {
							var v135 = closest;
							v135.x = v1X17;
							v135.y = v1Y17;
							v135.z = v1Z17;
							b13 = 1;
						} else if(t12 > 1) {
							var v136 = closest;
							v136.x = v2X17;
							v136.y = v2Y17;
							v136.z = v2Z17;
							b13 = 2;
						} else {
							var p12;
							var pX12;
							var pY12;
							var pZ12;
							pX12 = v1X17 + v12X17 * t12;
							pY12 = v1Y17 + v12Y17 * t12;
							pZ12 = v1Z17 + v12Z17 * t12;
							var v137 = closest;
							v137.x = pX12;
							v137.y = pY12;
							v137.z = pZ12;
							b13 = 3;
						}
						var d28 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind4 < 0 || d28 < mind4) {
							mini4 = b13 & 1 | (b13 & 2) << 1;
							mind4 = d28;
							var v138 = closest;
							minvX4 = v138.x;
							minvY4 = v138.y;
							minvZ4 = v138.z;
						}
					}
					var b14;
					if(mind4 > 0) {
						var v139 = closest;
						v139.x = minvX4;
						v139.y = minvY4;
						v139.z = minvZ4;
						b14 = mini4;
					} else {
						var l4 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						if(l4 > 0) {
							l4 = 1 / Math.sqrt(l4);
						}
						nX4 *= l4;
						nY4 *= l4;
						nZ4 *= l4;
						var dn3 = v1X14 * nX4 + v1Y14 * nY4 + v1Z14 * nZ4;
						var l23 = nX4 * nX4 + nY4 * nY4 + nZ4 * nZ4;
						l23 = dn3 / l23;
						minvX4 = nX4 * l23;
						minvY4 = nY4 * l23;
						minvZ4 = nZ4 * l23;
						var v140 = closest;
						v140.x = minvX4;
						v140.y = minvY4;
						v140.z = minvZ4;
						b14 = 7;
					}
					var d29 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d29 < mind1) {
						mini1 = b14 & 3 | (b14 & 4) << 1;
						mind1 = d29;
						var v142 = closest;
						minvX1 = v142.x;
						minvY1 = v142.y;
						minvZ1 = v142.z;
					}
				}
				if(d243 * sign < 0) {
					var v143;
					var v1X18;
					var v1Y18;
					var v1Z18;
					var v224;
					var v2X18;
					var v2Y18;
					var v2Z18;
					var v318;
					var v3X5;
					var v3Y5;
					var v3Z5;
					var v1218;
					var v12X18;
					var v12Y18;
					var v12Z18;
					var v235;
					var v23X5;
					var v23Y5;
					var v23Z5;
					var v319;
					var v31X4;
					var v31Y4;
					var v31Z4;
					var v144 = vec21;
					v1X18 = v144.x;
					v1Y18 = v144.y;
					v1Z18 = v144.z;
					var v145 = vec31;
					v2X18 = v145.x;
					v2Y18 = v145.y;
					v2Z18 = v145.z;
					var v146 = vec4;
					v3X5 = v146.x;
					v3Y5 = v146.y;
					v3Z5 = v146.z;
					v12X18 = v2X18 - v1X18;
					v12Y18 = v2Y18 - v1Y18;
					v12Z18 = v2Z18 - v1Z18;
					v23X5 = v3X5 - v2X18;
					v23Y5 = v3Y5 - v2Y18;
					v23Z5 = v3Z5 - v2Z18;
					v31X4 = v1X18 - v3X5;
					v31Y4 = v1Y18 - v3Y5;
					v31Z4 = v1Z18 - v3Z5;
					var n5;
					var nX5;
					var nY5;
					var nZ5;
					nX5 = v12Y18 * v23Z5 - v12Z18 * v23Y5;
					nY5 = v12Z18 * v23X5 - v12X18 * v23Z5;
					nZ5 = v12X18 * v23Y5 - v12Y18 * v23X5;
					var n125;
					var n12X4;
					var n12Y4;
					var n12Z4;
					var n234;
					var n23X4;
					var n23Y4;
					var n23Z4;
					var n314;
					var n31X4;
					var n31Y4;
					var n31Z4;
					n12X4 = v12Y18 * nZ5 - v12Z18 * nY5;
					n12Y4 = v12Z18 * nX5 - v12X18 * nZ5;
					n12Z4 = v12X18 * nY5 - v12Y18 * nX5;
					n23X4 = v23Y5 * nZ5 - v23Z5 * nY5;
					n23Y4 = v23Z5 * nX5 - v23X5 * nZ5;
					n23Z4 = v23X5 * nY5 - v23Y5 * nX5;
					n31X4 = v31Y4 * nZ5 - v31Z4 * nY5;
					n31Y4 = v31Z4 * nX5 - v31X4 * nZ5;
					n31Z4 = v31X4 * nY5 - v31Y4 * nX5;
					var d125 = v1X18 * n12X4 + v1Y18 * n12Y4 + v1Z18 * n12Z4;
					var d234 = v2X18 * n23X4 + v2Y18 * n23Y4 + v2Z18 * n23Z4;
					var d314 = v3X5 * n31X4 + v3Y5 * n31Y4 + v3Z5 * n31Z4;
					var mind5 = -1;
					var minv5;
					var minvX5;
					var minvY5;
					var minvZ5;
					var mini5 = 0;
					minvX5 = 0;
					minvY5 = 0;
					minvZ5 = 0;
					if(d125 < 0) {
						var v147;
						var v1X19;
						var v1Y19;
						var v1Z19;
						var v225;
						var v2X19;
						var v2Y19;
						var v2Z19;
						var v148 = vec21;
						v1X19 = v148.x;
						v1Y19 = v148.y;
						v1Z19 = v148.z;
						var v149 = vec31;
						v2X19 = v149.x;
						v2Y19 = v149.y;
						v2Z19 = v149.z;
						var v1219;
						var v12X19;
						var v12Y19;
						var v12Z19;
						v12X19 = v2X19 - v1X19;
						v12Y19 = v2Y19 - v1Y19;
						v12Z19 = v2Z19 - v1Z19;
						var d30 = v12X19 * v12X19 + v12Y19 * v12Y19 + v12Z19 * v12Z19;
						var t13 = v12X19 * v1X19 + v12Y19 * v1Y19 + v12Z19 * v1Z19;
						t13 = -t13 / d30;
						var b15;
						if(t13 < 0) {
							var v150 = closest;
							v150.x = v1X19;
							v150.y = v1Y19;
							v150.z = v1Z19;
							b15 = 1;
						} else if(t13 > 1) {
							var v151 = closest;
							v151.x = v2X19;
							v151.y = v2Y19;
							v151.z = v2Z19;
							b15 = 2;
						} else {
							var p13;
							var pX13;
							var pY13;
							var pZ13;
							pX13 = v1X19 + v12X19 * t13;
							pY13 = v1Y19 + v12Y19 * t13;
							pZ13 = v1Z19 + v12Z19 * t13;
							var v152 = closest;
							v152.x = pX13;
							v152.y = pY13;
							v152.z = pZ13;
							b15 = 3;
						}
						var d32 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						mini5 = b15;
						mind5 = d32;
						var v153 = closest;
						minvX5 = v153.x;
						minvY5 = v153.y;
						minvZ5 = v153.z;
					}
					if(d234 < 0) {
						var v154;
						var v1X20;
						var v1Y20;
						var v1Z20;
						var v226;
						var v2X20;
						var v2Y20;
						var v2Z20;
						var v155 = vec31;
						v1X20 = v155.x;
						v1Y20 = v155.y;
						v1Z20 = v155.z;
						var v156 = vec4;
						v2X20 = v156.x;
						v2Y20 = v156.y;
						v2Z20 = v156.z;
						var v1220;
						var v12X20;
						var v12Y20;
						var v12Z20;
						v12X20 = v2X20 - v1X20;
						v12Y20 = v2Y20 - v1Y20;
						v12Z20 = v2Z20 - v1Z20;
						var d33 = v12X20 * v12X20 + v12Y20 * v12Y20 + v12Z20 * v12Z20;
						var t14 = v12X20 * v1X20 + v12Y20 * v1Y20 + v12Z20 * v1Z20;
						t14 = -t14 / d33;
						var b16;
						if(t14 < 0) {
							var v157 = closest;
							v157.x = v1X20;
							v157.y = v1Y20;
							v157.z = v1Z20;
							b16 = 1;
						} else if(t14 > 1) {
							var v158 = closest;
							v158.x = v2X20;
							v158.y = v2Y20;
							v158.z = v2Z20;
							b16 = 2;
						} else {
							var p14;
							var pX14;
							var pY14;
							var pZ14;
							pX14 = v1X20 + v12X20 * t14;
							pY14 = v1Y20 + v12Y20 * t14;
							pZ14 = v1Z20 + v12Z20 * t14;
							var v159 = closest;
							v159.x = pX14;
							v159.y = pY14;
							v159.z = pZ14;
							b16 = 3;
						}
						var d34 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d34 < mind5) {
							mini5 = b16 << 1;
							mind5 = d34;
							var v160 = closest;
							minvX5 = v160.x;
							minvY5 = v160.y;
							minvZ5 = v160.z;
						}
					}
					if(d314 < 0) {
						var v161;
						var v1X21;
						var v1Y21;
						var v1Z21;
						var v227;
						var v2X21;
						var v2Y21;
						var v2Z21;
						var v162 = vec21;
						v1X21 = v162.x;
						v1Y21 = v162.y;
						v1Z21 = v162.z;
						var v163 = vec4;
						v2X21 = v163.x;
						v2Y21 = v163.y;
						v2Z21 = v163.z;
						var v1221;
						var v12X21;
						var v12Y21;
						var v12Z21;
						v12X21 = v2X21 - v1X21;
						v12Y21 = v2Y21 - v1Y21;
						v12Z21 = v2Z21 - v1Z21;
						var d35 = v12X21 * v12X21 + v12Y21 * v12Y21 + v12Z21 * v12Z21;
						var t15 = v12X21 * v1X21 + v12Y21 * v1Y21 + v12Z21 * v1Z21;
						t15 = -t15 / d35;
						var b17;
						if(t15 < 0) {
							var v164 = closest;
							v164.x = v1X21;
							v164.y = v1Y21;
							v164.z = v1Z21;
							b17 = 1;
						} else if(t15 > 1) {
							var v165 = closest;
							v165.x = v2X21;
							v165.y = v2Y21;
							v165.z = v2Z21;
							b17 = 2;
						} else {
							var p15;
							var pX15;
							var pY15;
							var pZ15;
							pX15 = v1X21 + v12X21 * t15;
							pY15 = v1Y21 + v12Y21 * t15;
							pZ15 = v1Z21 + v12Z21 * t15;
							var v166 = closest;
							v166.x = pX15;
							v166.y = pY15;
							v166.z = pZ15;
							b17 = 3;
						}
						var d36 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
						if(mind5 < 0 || d36 < mind5) {
							mini5 = b17 & 1 | (b17 & 2) << 1;
							mind5 = d36;
							var v167 = closest;
							minvX5 = v167.x;
							minvY5 = v167.y;
							minvZ5 = v167.z;
						}
					}
					var b18;
					if(mind5 > 0) {
						var v168 = closest;
						v168.x = minvX5;
						v168.y = minvY5;
						v168.z = minvZ5;
						b18 = mini5;
					} else {
						var l5 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						if(l5 > 0) {
							l5 = 1 / Math.sqrt(l5);
						}
						nX5 *= l5;
						nY5 *= l5;
						nZ5 *= l5;
						var dn4 = v1X18 * nX5 + v1Y18 * nY5 + v1Z18 * nZ5;
						var l24 = nX5 * nX5 + nY5 * nY5 + nZ5 * nZ5;
						l24 = dn4 / l24;
						minvX5 = nX5 * l24;
						minvY5 = nY5 * l24;
						minvZ5 = nZ5 * l24;
						var v169 = closest;
						v169.x = minvX5;
						v169.y = minvY5;
						v169.z = minvZ5;
						b18 = 7;
					}
					var d37 = closest.x * closest.x + closest.y * closest.y + closest.z * closest.z;
					if(mind1 < 0 || d37 < mind1) {
						mini1 = b18 << 1;
						mind1 = d37;
						var v170 = closest;
						minvX1 = v170.x;
						minvY1 = v170.y;
						minvZ1 = v170.z;
					}
				}
				if(mind1 > 0) {
					var v171 = closest;
					v171.x = minvX1;
					v171.y = minvY1;
					v171.z = minvZ1;
					v = mini1;
				} else {
					closest.zero();
					v = 15;
				}
				break;
			}
			this.shrinkSimplex(v);
			if(closest.x * closest.x + closest.y * closest.y + closest.z * closest.z < eps2) {
				if(lambda == 0 || this.simplexSize == 4) {
					hit.fraction = lambda;
					return false;
				}
				this.interpolateClosestPoints();
				hit.fraction = lambda;
				var _this = hit.normal;
				_this.x = dir.x;
				_this.y = dir.y;
				_this.z = dir.z;
				var _this1 = _this;
				var invLen = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
				if(invLen > 0) {
					invLen = 1 / invLen;
				}
				var tx = _this1.x * invLen;
				var ty = _this1.y * invLen;
				var tz = _this1.z * invLen;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
				var _this2 = hit.position;
				var v172 = this.closestPoint1;
				_this2.x = v172.x;
				_this2.y = v172.y;
				_this2.z = v172.z;
				var _this3 = _this2;
				var tx1 = _this3.x + tl1.x * lambda;
				var ty1 = _this3.y + tl1.y * lambda;
				var tz1 = _this3.z + tl1.z * lambda;
				_this3.x = tx1;
				_this3.y = ty1;
				_this3.z = tz1;
				return true;
			}
			dir.x = closest.x;
			dir.y = closest.y;
			dir.z = closest.z;
			var _this4 = dir;
			var tx2 = -_this4.x;
			var ty2 = -_this4.y;
			var tz2 = -_this4.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			if(this.c1 != null) {
				this.computeWitnessPoint1(true);
			} else {
				var v173 = this.w1[this.simplexSize];
				v173.x = this.tf1._positionX;
				v173.y = this.tf1._positionY;
				v173.z = this.tf1._positionZ;
			}
			this.computeWitnessPoint2(true);
			var _this5 = this.s[this.simplexSize];
			var v174 = this.w1[this.simplexSize];
			_this5.x = v174.x;
			_this5.y = v174.y;
			_this5.z = v174.z;
			var _this6 = _this5;
			var v175 = this.w2[this.simplexSize];
			var tx3 = _this6.x - v175.x;
			var ty3 = _this6.y - v175.y;
			var tz3 = _this6.z - v175.z;
			_this6.x = tx3;
			_this6.y = ty3;
			_this6.z = tz3;
			var _this7 = s[this.simplexSize];
			var tx4 = _this7.x - rayX.x;
			var ty4 = _this7.y - rayX.y;
			var tz4 = _this7.z - rayX.z;
			_this7.x = tx4;
			_this7.y = ty4;
			_this7.z = tz4;
			if(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z < eps2) {
				throw new Error("!?");
			}
			var p16 = s[this.simplexSize];
			var n6 = dir;
			var pn = p16.x * n6.x + p16.y * n6.y + p16.z * n6.z;
			if(pn < 0) {
				if(rayR.x * n6.x + rayR.y * n6.y + rayR.z * n6.z >= 0) {
					return false;
				}
				var dLambda = pn / (rayR.x * n6.x + rayR.y * n6.y + rayR.z * n6.z);
				lambda += dLambda;
				if(lambda >= 1) {
					return false;
				}
				var tx5 = rayX.x + rayR.x * dLambda;
				var ty5 = rayX.y + rayR.y * dLambda;
				var tz5 = rayX.z + rayR.z * dLambda;
				rayX.x = tx5;
				rayX.y = ty5;
				rayX.z = tz5;
				var _g = 0;
				var _g1 = this.simplexSize + 1;
				while(_g < _g1) {
					var i = _g++;
					var _this8 = s[i];
					var s1 = -dLambda;
					var tx6 = _this8.x + rayR.x * s1;
					var ty6 = _this8.y + rayR.y * s1;
					var tz6 = _this8.z + rayR.z * s1;
					_this8.x = tx6;
					_this8.y = ty6;
					_this8.z = tz6;
				}
			}
			var duplicate = false;
			var _g2 = 0;
			var _g3 = this.simplexSize;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var dx = s[i1].x - s[this.simplexSize].x;
				var dy = s[i1].y - s[this.simplexSize].y;
				var dz = s[i1].z - s[this.simplexSize].z;
				if(dx * dx + dy * dy + dz * dz < eps2) {
					duplicate = true;
					break;
				}
			}
			if(!duplicate) {
				this.simplexSize++;
			}
			++count;
		}
		return false;
	}
	,interpolateClosestPoints: function() {
		switch(this.simplexSize) {
		case 1:
			var _this = this.closestPoint1;
			var v = this.w1[0];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.closestPoint2;
			var v = this.w2[0];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 2:
			var c;
			var cX;
			var cY;
			var cZ;
			var v = this.closest;
			cX = v.x;
			cY = v.y;
			cZ = v.z;
			var s0;
			var s0X;
			var s0Y;
			var s0Z;
			var w10;
			var w10X;
			var w10Y;
			var w10Z;
			var w20;
			var w20X;
			var w20Y;
			var w20Z;
			var s1;
			var s1X;
			var s1Y;
			var s1Z;
			var w11;
			var w11X;
			var w11Y;
			var w11Z;
			var w21;
			var w21X;
			var w21Y;
			var w21Z;
			var s2;
			var s2X;
			var s2Y;
			var s2Z;
			var w12;
			var w12X;
			var w12Y;
			var w12Z;
			var w22;
			var w22X;
			var w22Y;
			var w22Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v = this.w1[0];
			w10X = v.x;
			w10Y = v.y;
			w10Z = v.z;
			var v = this.w2[0];
			w20X = v.x;
			w20Y = v.y;
			w20Z = v.z;
			var v = this.s[1];
			s1X = v.x;
			s1Y = v.y;
			s1Z = v.z;
			var v = this.w1[1];
			w11X = v.x;
			w11Y = v.y;
			w11Z = v.z;
			var v = this.w2[1];
			w21X = v.x;
			w21Y = v.y;
			w21Z = v.z;
			var v = this.s[2];
			s2X = v.x;
			s2Y = v.y;
			s2Z = v.z;
			var v = this.w1[2];
			w12X = v.x;
			w12Y = v.y;
			w12Z = v.z;
			var v = this.w2[2];
			w22X = v.x;
			w22Y = v.y;
			w22Z = v.z;
			var s01;
			var s01X;
			var s01Y;
			var s01Z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			var invDet = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			var s0c;
			var s0cX;
			var s0cY;
			var s0cZ;
			s0cX = cX - s0X;
			s0cY = cY - s0Y;
			s0cZ = cZ - s0Z;
			var t = (s0cX * s01X + s0cY * s01Y + s0cZ * s01Z) * invDet;
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			var cp1;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2;
			var cp2X;
			var cp2Y;
			var cp2Z;
			diffX = w11X - w10X;
			diffY = w11Y - w10Y;
			diffZ = w11Z - w10Z;
			cp1X = w10X + diffX * t;
			cp1Y = w10Y + diffY * t;
			cp1Z = w10Z + diffZ * t;
			diffX = w21X - w20X;
			diffY = w21Y - w20Y;
			diffZ = w21Z - w20Z;
			cp2X = w20X + diffX * t;
			cp2Y = w20Y + diffY * t;
			cp2Z = w20Z + diffZ * t;
			var v = this.closestPoint1;
			v.x = cp1X;
			v.y = cp1Y;
			v.z = cp1Z;
			var v = this.closestPoint2;
			v.x = cp2X;
			v.y = cp2Y;
			v.z = cp2Z;
			break;
		case 3:
			var c;
			var cX;
			var cY;
			var cZ;
			var v = this.closest;
			cX = v.x;
			cY = v.y;
			cZ = v.z;
			var s0;
			var s0X;
			var s0Y;
			var s0Z;
			var w10;
			var w10X;
			var w10Y;
			var w10Z;
			var w20;
			var w20X;
			var w20Y;
			var w20Z;
			var s1;
			var s1X;
			var s1Y;
			var s1Z;
			var w11;
			var w11X;
			var w11Y;
			var w11Z;
			var w21;
			var w21X;
			var w21Y;
			var w21Z;
			var s2;
			var s2X;
			var s2Y;
			var s2Z;
			var w12;
			var w12X;
			var w12Y;
			var w12Z;
			var w22;
			var w22X;
			var w22Y;
			var w22Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v = this.w1[0];
			w10X = v.x;
			w10Y = v.y;
			w10Z = v.z;
			var v = this.w2[0];
			w20X = v.x;
			w20Y = v.y;
			w20Z = v.z;
			var v = this.s[1];
			s1X = v.x;
			s1Y = v.y;
			s1Z = v.z;
			var v = this.w1[1];
			w11X = v.x;
			w11Y = v.y;
			w11Z = v.z;
			var v = this.w2[1];
			w21X = v.x;
			w21Y = v.y;
			w21Z = v.z;
			var v = this.s[2];
			s2X = v.x;
			s2Y = v.y;
			s2Z = v.z;
			var v = this.w1[2];
			w12X = v.x;
			w12Y = v.y;
			w12Z = v.z;
			var v = this.w2[2];
			w22X = v.x;
			w22Y = v.y;
			w22Z = v.z;
			var s01;
			var s01X;
			var s01Y;
			var s01Z;
			var s02;
			var s02X;
			var s02Y;
			var s02Z;
			var s0c;
			var s0cX;
			var s0cY;
			var s0cZ;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			s02X = s2X - s0X;
			s02Y = s2Y - s0Y;
			s02Z = s2Z - s0Z;
			s0cX = cX - s0X;
			s0cY = cY - s0Y;
			s0cZ = cZ - s0Z;
			var d11 = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
			var d12 = s01X * s02X + s01Y * s02Y + s01Z * s02Z;
			var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
			var d1c = s01X * s0cX + s01Y * s0cY + s01Z * s0cZ;
			var d2c = s02X * s0cX + s02Y * s0cY + s02Z * s0cZ;
			var invDet = d11 * d22 - d12 * d12;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			var s = (d1c * d22 - d2c * d12) * invDet;
			var t = (-d1c * d12 + d2c * d11) * invDet;
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			var cp1;
			var cp1X;
			var cp1Y;
			var cp1Z;
			var cp2;
			var cp2X;
			var cp2Y;
			var cp2Z;
			diffX = w11X - w10X;
			diffY = w11Y - w10Y;
			diffZ = w11Z - w10Z;
			cp1X = w10X + diffX * s;
			cp1Y = w10Y + diffY * s;
			cp1Z = w10Z + diffZ * s;
			diffX = w12X - w10X;
			diffY = w12Y - w10Y;
			diffZ = w12Z - w10Z;
			cp1X += diffX * t;
			cp1Y += diffY * t;
			cp1Z += diffZ * t;
			diffX = w21X - w20X;
			diffY = w21Y - w20Y;
			diffZ = w21Z - w20Z;
			cp2X = w20X + diffX * s;
			cp2Y = w20Y + diffY * s;
			cp2Z = w20Z + diffZ * s;
			diffX = w22X - w20X;
			diffY = w22Y - w20Y;
			diffZ = w22Z - w20Z;
			cp2X += diffX * t;
			cp2Y += diffY * t;
			cp2Z += diffZ * t;
			var v = this.closestPoint1;
			v.x = cp1X;
			v.y = cp1Y;
			v.z = cp1Z;
			var v = this.closestPoint2;
			v.x = cp2X;
			v.y = cp2Y;
			v.z = cp2Z;
			break;
		default:
			throw new Error("!?");
		}
	}
	,loadCache: function(gjkCache) {
		var _this = this.dir;
		var v = gjkCache.prevClosestDir;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
	}
	,saveCache: function(gjkCache) {
		var _this = gjkCache.prevClosestDir;
		var v = this.closest;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = _this;
		var tx = -_this1.x;
		var ty = -_this1.y;
		var tz = -_this1.z;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
	}
	,shrinkSimplex: function(vertexBits) {
		this.simplexSize = vertexBits;
		this.simplexSize = (this.simplexSize & 5) + (this.simplexSize >> 1 & 5);
		this.simplexSize = (this.simplexSize & 3) + (this.simplexSize >> 2 & 3);
		switch(vertexBits) {
		case 2:
			var _this = this.s[0];
			var v = this.s[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[1];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 4:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 5:
			var _this = this.s[1];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 6:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 8:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 9:
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 10:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 11:
			var _this = this.s[2];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[2];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[2];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 12:
			var _this = this.s[0];
			var v = this.s[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[2];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 13:
			var _this = this.s[1];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[1];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[1];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		case 14:
			var _this = this.s[0];
			var v = this.s[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w1[0];
			var v = this.w1[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this = this.w2[0];
			var v = this.w2[3];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			break;
		}
	}
	,computeWitnessPoint1: function(addMargin) {
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var idir;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir1;
		var ldir1X;
		var ldir1Y;
		var ldir1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf1._rotation00 * idirX + this.tf1._rotation10 * idirY + this.tf1._rotation20 * idirZ;
		__tmp__Y = this.tf1._rotation01 * idirX + this.tf1._rotation11 * idirY + this.tf1._rotation21 * idirZ;
		__tmp__Z = this.tf1._rotation02 * idirX + this.tf1._rotation12 * idirY + this.tf1._rotation22 * idirZ;
		ldir1X = __tmp__X;
		ldir1Y = __tmp__Y;
		ldir1Z = __tmp__Z;
		var iw1;
		var iw1X;
		var iw1Y;
		var iw1Z;
		var v = this.dir;
		v.x = ldir1X;
		v.y = ldir1Y;
		v.z = ldir1Z;
		this.c1.computeLocalSupportingVertex(this.dir,this.w1[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this = this.w1[this.simplexSize];
			var v = this.dir;
			var s = this.c1._gjkMargin;
			var tx = _this.x + v.x * s;
			var ty = _this.y + v.y * s;
			var tz = _this.z + v.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
		var v = this.w1[this.simplexSize];
		tmpX = v.x;
		tmpY = v.y;
		tmpZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf1._rotation00 * tmpX + this.tf1._rotation01 * tmpY + this.tf1._rotation02 * tmpZ;
		__tmp__Y = this.tf1._rotation10 * tmpX + this.tf1._rotation11 * tmpY + this.tf1._rotation12 * tmpZ;
		__tmp__Z = this.tf1._rotation20 * tmpX + this.tf1._rotation21 * tmpY + this.tf1._rotation22 * tmpZ;
		iw1X = __tmp__X;
		iw1Y = __tmp__Y;
		iw1Z = __tmp__Z;
		iw1X += this.tf1._positionX;
		iw1Y += this.tf1._positionY;
		iw1Z += this.tf1._positionZ;
		var v = this.w1[this.simplexSize];
		v.x = iw1X;
		v.y = iw1Y;
		v.z = iw1Z;
		var v = this.dir;
		v.x = idirX;
		v.y = idirY;
		v.z = idirZ;
	}
	,computeWitnessPoint2: function(addMargin) {
		var tmp;
		var tmpX;
		var tmpY;
		var tmpZ;
		var idir;
		var idirX;
		var idirY;
		var idirZ;
		var v = this.dir;
		idirX = v.x;
		idirY = v.y;
		idirZ = v.z;
		var ldir2;
		var ldir2X;
		var ldir2Y;
		var ldir2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf2._rotation00 * idirX + this.tf2._rotation10 * idirY + this.tf2._rotation20 * idirZ;
		__tmp__Y = this.tf2._rotation01 * idirX + this.tf2._rotation11 * idirY + this.tf2._rotation21 * idirZ;
		__tmp__Z = this.tf2._rotation02 * idirX + this.tf2._rotation12 * idirY + this.tf2._rotation22 * idirZ;
		ldir2X = __tmp__X;
		ldir2Y = __tmp__Y;
		ldir2Z = __tmp__Z;
		ldir2X = -ldir2X;
		ldir2Y = -ldir2Y;
		ldir2Z = -ldir2Z;
		var iw2;
		var iw2X;
		var iw2Y;
		var iw2Z;
		var v = this.dir;
		v.x = ldir2X;
		v.y = ldir2Y;
		v.z = ldir2Z;
		this.c2.computeLocalSupportingVertex(this.dir,this.w2[this.simplexSize]);
		if(addMargin) {
			var _this = this.dir;
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this = this.w2[this.simplexSize];
			var v = this.dir;
			var s = this.c2._gjkMargin;
			var tx = _this.x + v.x * s;
			var ty = _this.y + v.y * s;
			var tz = _this.z + v.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
		}
		var v = this.w2[this.simplexSize];
		tmpX = v.x;
		tmpY = v.y;
		tmpZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this.tf2._rotation00 * tmpX + this.tf2._rotation01 * tmpY + this.tf2._rotation02 * tmpZ;
		__tmp__Y = this.tf2._rotation10 * tmpX + this.tf2._rotation11 * tmpY + this.tf2._rotation12 * tmpZ;
		__tmp__Z = this.tf2._rotation20 * tmpX + this.tf2._rotation21 * tmpY + this.tf2._rotation22 * tmpZ;
		iw2X = __tmp__X;
		iw2Y = __tmp__Y;
		iw2Z = __tmp__Z;
		iw2X += this.tf2._positionX;
		iw2Y += this.tf2._positionY;
		iw2Z += this.tf2._positionZ;
		var v = this.w2[this.simplexSize];
		v.x = iw2X;
		v.y = iw2Y;
		v.z = iw2Z;
		var v = this.dir;
		v.x = idirX;
		v.y = idirY;
		v.z = idirZ;
	}
	,pointToTetrahedron: function() {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _this = this.dir;
			var v = this.baseDirs[i];
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this1 = this.s[this.simplexSize];
			var v1 = this.w1[this.simplexSize];
			_this1.x = v1.x;
			_this1.y = v1.y;
			_this1.z = v1.z;
			var _this2 = _this1;
			var v2 = this.w2[this.simplexSize];
			var tx = _this2.x - v2.x;
			var ty = _this2.y - v2.y;
			var tz = _this2.z - v2.z;
			_this2.x = tx;
			_this2.y = ty;
			_this2.z = tz;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this3 = this.dir;
			var tx1 = -_this3.x;
			var ty1 = -_this3.y;
			var tz1 = -_this3.z;
			_this3.x = tx1;
			_this3.y = ty1;
			_this3.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this4 = this.s[this.simplexSize];
			var v3 = this.w1[this.simplexSize];
			_this4.x = v3.x;
			_this4.y = v3.y;
			_this4.z = v3.z;
			var _this5 = _this4;
			var v4 = this.w2[this.simplexSize];
			var tx2 = _this5.x - v4.x;
			var ty2 = _this5.y - v4.y;
			var tz2 = _this5.z - v4.z;
			_this5.x = tx2;
			_this5.y = ty2;
			_this5.z = tz2;
			this.simplexSize++;
			this.lineToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
	}
	,lineToTetrahedron: function() {
		var oldDir;
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		var s0;
		var s0X;
		var s0Y;
		var s0Z;
		var s1;
		var s1X;
		var s1Y;
		var s1Z;
		var lineDir;
		var lineDirX;
		var lineDirY;
		var lineDirZ;
		var v = this.s[0];
		s0X = v.x;
		s0Y = v.y;
		s0Z = v.z;
		var v = this.s[1];
		s1X = v.x;
		s1Y = v.y;
		s1Z = v.z;
		lineDirX = s0X - s1X;
		lineDirY = s0Y - s1Y;
		lineDirZ = s0Z - s1Z;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var baseDir;
			var baseDirX;
			var baseDirY;
			var baseDirZ;
			var v = this.baseDirs[i];
			baseDirX = v.x;
			baseDirY = v.y;
			baseDirZ = v.z;
			var newDir;
			var newDirX;
			var newDirY;
			var newDirZ;
			newDirX = lineDirY * baseDirZ - lineDirZ * baseDirY;
			newDirY = lineDirZ * baseDirX - lineDirX * baseDirZ;
			newDirZ = lineDirX * baseDirY - lineDirY * baseDirX;
			var v1 = this.dir;
			v1.x = newDirX;
			v1.y = newDirY;
			v1.z = newDirZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v2 = this.w1[this.simplexSize];
			_this.x = v2.x;
			_this.y = v2.y;
			_this.z = v2.z;
			var _this1 = _this;
			var v3 = this.w2[this.simplexSize];
			var tx = _this1.x - v3.x;
			var ty = _this1.y - v3.y;
			var tz = _this1.z - v3.z;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
			var _this2 = this.dir;
			var tx1 = -_this2.x;
			var ty1 = -_this2.y;
			var tz1 = -_this2.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v4 = this.w1[this.simplexSize];
			_this3.x = v4.x;
			_this3.y = v4.y;
			_this3.z = v4.z;
			var _this4 = _this3;
			var v5 = this.w2[this.simplexSize];
			var tx2 = _this4.x - v5.x;
			var ty2 = _this4.y - v5.y;
			var tz2 = _this4.z - v5.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			this.simplexSize++;
			this.triangleToTetrahedron();
			if(this.simplexSize == 4) {
				break;
			}
			this.simplexSize--;
		}
		var v = this.dir;
		v.x = oldDirX;
		v.y = oldDirY;
		v.z = oldDirZ;
	}
	,triangleToTetrahedron: function() {
		var oldDir;
		var oldDirX;
		var oldDirY;
		var oldDirZ;
		var v = this.dir;
		oldDirX = v.x;
		oldDirY = v.y;
		oldDirZ = v.z;
		while(true) {
			var s0;
			var s0X;
			var s0Y;
			var s0Z;
			var s1;
			var s1X;
			var s1Y;
			var s1Z;
			var s2;
			var s2X;
			var s2Y;
			var s2Z;
			var s01;
			var s01X;
			var s01Y;
			var s01Z;
			var s02;
			var s02X;
			var s02Y;
			var s02Z;
			var v = this.s[0];
			s0X = v.x;
			s0Y = v.y;
			s0Z = v.z;
			var v1 = this.s[1];
			s1X = v1.x;
			s1Y = v1.y;
			s1Z = v1.z;
			var v2 = this.s[2];
			s2X = v2.x;
			s2Y = v2.y;
			s2Z = v2.z;
			s01X = s1X - s0X;
			s01Y = s1Y - s0Y;
			s01Z = s1Z - s0Z;
			s02X = s2X - s0X;
			s02Y = s2Y - s0Y;
			s02Z = s2Z - s0Z;
			var n;
			var nX;
			var nY;
			var nZ;
			nX = s01Y * s02Z - s01Z * s02Y;
			nY = s01Z * s02X - s01X * s02Z;
			nZ = s01X * s02Y - s01Y * s02X;
			var v3 = this.dir;
			v3.x = nX;
			v3.y = nY;
			v3.z = nZ;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this = this.s[this.simplexSize];
			var v4 = this.w1[this.simplexSize];
			_this.x = v4.x;
			_this.y = v4.y;
			_this.z = v4.z;
			var _this1 = _this;
			var v5 = this.w2[this.simplexSize];
			var tx = _this1.x - v5.x;
			var ty = _this1.y - v5.y;
			var tz = _this1.z - v5.z;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			var _this2 = this.dir;
			var tx1 = -_this2.x;
			var ty1 = -_this2.y;
			var tz1 = -_this2.z;
			_this2.x = tx1;
			_this2.y = ty1;
			_this2.z = tz1;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this3 = this.s[this.simplexSize];
			var v6 = this.w1[this.simplexSize];
			_this3.x = v6.x;
			_this3.y = v6.y;
			_this3.z = v6.z;
			var _this4 = _this3;
			var v7 = this.w2[this.simplexSize];
			var tx2 = _this4.x - v7.x;
			var ty2 = _this4.y - v7.y;
			var tz2 = _this4.z - v7.z;
			_this4.x = tx2;
			_this4.y = ty2;
			_this4.z = tz2;
			this.simplexSize++;
			if(this.isValidTetrahedron()) {
				break;
			}
			this.simplexSize--;
			if(!false) {
				break;
			}
		}
		var v = this.dir;
		v.x = oldDirX;
		v.y = oldDirY;
		v.z = oldDirZ;
	}
	,isValidTetrahedron: function() {
		var e00 = this.s[1].x - this.s[0].x;
		var e01 = this.s[1].y - this.s[0].y;
		var e02 = this.s[1].z - this.s[0].z;
		var e10 = this.s[2].x - this.s[0].x;
		var e11 = this.s[2].y - this.s[0].y;
		var e12 = this.s[2].z - this.s[0].z;
		var e20 = this.s[3].x - this.s[0].x;
		var e21 = this.s[3].y - this.s[0].y;
		var e22 = this.s[3].z - this.s[0].z;
		var det = e00 * (e11 * e22 - e12 * e21) - e01 * (e10 * e22 - e12 * e20) + e02 * (e10 * e21 - e11 * e20);
		if(!(det > 1e-12)) {
			return det < -1e-12;
		} else {
			return true;
		}
	}
	,computeDepth: function(convex1,convex2,tf1,tf2,initialPolyhedron,initialPolyhedron1,initialPolyhedron2) {
		var _this = this.polyhedron;
		while(_this._numTriangles > 0) {
			var t = _this._triangleList;
			_this._numTriangles--;
			var prev = t._prev;
			var next = t._next;
			if(prev != null) {
				prev._next = next;
			}
			if(next != null) {
				next._prev = prev;
			}
			if(t == _this._triangleList) {
				_this._triangleList = _this._triangleList._next;
			}
			if(t == _this._triangleListLast) {
				_this._triangleListLast = _this._triangleListLast._prev;
			}
			t._next = null;
			t._prev = null;
			t.removeReferences();
			t._next = _this._trianglePool;
			_this._trianglePool = t;
		}
		while(_this._numVertices > 0) {
			var v = _this._vertices[--_this._numVertices];
			v.removeReferences();
			v._next = _this._vertexPool;
			_this._vertexPool = v;
		}
		var tmp = this.polyhedron;
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp1 = first.init(initialPolyhedron[0],initialPolyhedron1[0],initialPolyhedron2[0]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp2 = first.init(initialPolyhedron[1],initialPolyhedron1[1],initialPolyhedron2[1]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		var tmp3 = first.init(initialPolyhedron[2],initialPolyhedron1[2],initialPolyhedron2[2]);
		var _this = this.polyhedron;
		var first = _this._vertexPool;
		if(first != null) {
			_this._vertexPool = first._next;
			first._next = null;
		} else {
			first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
		}
		if(!tmp._init(tmp1,tmp2,tmp3,first.init(initialPolyhedron[3],initialPolyhedron1[3],initialPolyhedron2[3]))) {
			return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT;
		}
		this.simplexSize = 0;
		var supportingVertex = this.s[0];
		var witness1 = this.w1[0];
		var witness2 = this.w2[0];
		var count = 0;
		var maxIterations = 40;
		while(count < maxIterations) {
			var f = this.polyhedron._triangleList;
			var mind = 1e65536;
			var minf = null;
			while(f != null) {
				var n = f._next;
				if(f._distanceSq < mind) {
					mind = f._distanceSq;
					minf = f;
				}
				f = n;
			}
			var face = minf;
			var _this = this.dir;
			var v = face._normal;
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			var _this1 = _this;
			var invLen = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this1.x * invLen;
			var ty = _this1.y * invLen;
			var tz = _this1.z * invLen;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			this.computeWitnessPoint1(false);
			this.computeWitnessPoint2(false);
			var _this2 = this.s[this.simplexSize];
			var v1 = this.w1[this.simplexSize];
			_this2.x = v1.x;
			_this2.y = v1.y;
			_this2.z = v1.z;
			var _this3 = _this2;
			var v2 = this.w2[this.simplexSize];
			var tx1 = _this3.x - v2.x;
			var ty1 = _this3.y - v2.y;
			var tz1 = _this3.z - v2.z;
			_this3.x = tx1;
			_this3.y = ty1;
			_this3.z = tz1;
			var v0 = face._vertices[0];
			var v11 = face._vertices[1];
			var v21 = face._vertices[2];
			var _this4 = v0.v;
			var v3 = this.dir;
			var dot1 = _this4.x * v3.x + _this4.y * v3.y + _this4.z * v3.z;
			var v4 = this.dir;
			var dot2 = supportingVertex.x * v4.x + supportingVertex.y * v4.y + supportingVertex.z * v4.z;
			if(dot2 - dot1 < 1e-6 || count == maxIterations - 1) {
				var _this5 = this.closest;
				var v5 = this.dir;
				_this5.x = v5.x;
				_this5.y = v5.y;
				_this5.z = v5.z;
				var _this6 = _this5;
				var _this7 = this.dir;
				var v6 = v0.v;
				var _this8 = this.dir;
				var s = (_this7.x * v6.x + _this7.y * v6.y + _this7.z * v6.z) / (_this8.x * _this8.x + _this8.y * _this8.y + _this8.z * _this8.z);
				var tx2 = _this6.x * s;
				var ty2 = _this6.y * s;
				var tz2 = _this6.z * s;
				_this6.x = tx2;
				_this6.y = ty2;
				_this6.z = tz2;
				var c;
				var cX;
				var cY;
				var cZ;
				var v7 = this.closest;
				cX = v7.x;
				cY = v7.y;
				cZ = v7.z;
				var s0;
				var s0X;
				var s0Y;
				var s0Z;
				var w10;
				var w10X;
				var w10Y;
				var w10Z;
				var w20;
				var w20X;
				var w20Y;
				var w20Z;
				var s1;
				var s1X;
				var s1Y;
				var s1Z;
				var w11;
				var w11X;
				var w11Y;
				var w11Z;
				var w21;
				var w21X;
				var w21Y;
				var w21Z;
				var s2;
				var s2X;
				var s2Y;
				var s2Z;
				var w12;
				var w12X;
				var w12Y;
				var w12Z;
				var w22;
				var w22X;
				var w22Y;
				var w22Z;
				var v8 = v0.v;
				s0X = v8.x;
				s0Y = v8.y;
				s0Z = v8.z;
				var v9 = v0.w1;
				w10X = v9.x;
				w10Y = v9.y;
				w10Z = v9.z;
				var v10 = v0.w2;
				w20X = v10.x;
				w20Y = v10.y;
				w20Z = v10.z;
				var v12 = v11.v;
				s1X = v12.x;
				s1Y = v12.y;
				s1Z = v12.z;
				var v13 = v11.w1;
				w11X = v13.x;
				w11Y = v13.y;
				w11Z = v13.z;
				var v14 = v11.w2;
				w21X = v14.x;
				w21Y = v14.y;
				w21Z = v14.z;
				var v15 = v21.v;
				s2X = v15.x;
				s2Y = v15.y;
				s2Z = v15.z;
				var v16 = v21.w1;
				w12X = v16.x;
				w12Y = v16.y;
				w12Z = v16.z;
				var v17 = v21.w2;
				w22X = v17.x;
				w22Y = v17.y;
				w22Z = v17.z;
				var s01;
				var s01X;
				var s01Y;
				var s01Z;
				var s02;
				var s02X;
				var s02Y;
				var s02Z;
				var s0c;
				var s0cX;
				var s0cY;
				var s0cZ;
				s01X = s1X - s0X;
				s01Y = s1Y - s0Y;
				s01Z = s1Z - s0Z;
				s02X = s2X - s0X;
				s02Y = s2Y - s0Y;
				s02Z = s2Z - s0Z;
				s0cX = cX - s0X;
				s0cY = cY - s0Y;
				s0cZ = cZ - s0Z;
				var d11 = s01X * s01X + s01Y * s01Y + s01Z * s01Z;
				var d12 = s01X * s02X + s01Y * s02Y + s01Z * s02Z;
				var d22 = s02X * s02X + s02Y * s02Y + s02Z * s02Z;
				var d1c = s01X * s0cX + s01Y * s0cY + s01Z * s0cZ;
				var d2c = s02X * s0cX + s02Y * s0cY + s02Z * s0cZ;
				var invDet = d11 * d22 - d12 * d12;
				if(invDet != 0) {
					invDet = 1 / invDet;
				}
				var s3 = (d1c * d22 - d2c * d12) * invDet;
				var t = (-d1c * d12 + d2c * d11) * invDet;
				var diff;
				var diffX;
				var diffY;
				var diffZ;
				var cp1;
				var cp1X;
				var cp1Y;
				var cp1Z;
				var cp2;
				var cp2X;
				var cp2Y;
				var cp2Z;
				diffX = w11X - w10X;
				diffY = w11Y - w10Y;
				diffZ = w11Z - w10Z;
				cp1X = w10X + diffX * s3;
				cp1Y = w10Y + diffY * s3;
				cp1Z = w10Z + diffZ * s3;
				diffX = w12X - w10X;
				diffY = w12Y - w10Y;
				diffZ = w12Z - w10Z;
				cp1X += diffX * t;
				cp1Y += diffY * t;
				cp1Z += diffZ * t;
				diffX = w21X - w20X;
				diffY = w21Y - w20Y;
				diffZ = w21Z - w20Z;
				cp2X = w20X + diffX * s3;
				cp2Y = w20Y + diffY * s3;
				cp2Z = w20Z + diffZ * s3;
				diffX = w22X - w20X;
				diffY = w22Y - w20Y;
				diffZ = w22Z - w20Z;
				cp2X += diffX * t;
				cp2Y += diffY * t;
				cp2Z += diffZ * t;
				var v18 = this.closestPoint1;
				v18.x = cp1X;
				v18.y = cp1Y;
				v18.z = cp1Z;
				var v19 = this.closestPoint2;
				v19.x = cp2X;
				v19.y = cp2Y;
				v19.z = cp2Z;
				var _this9 = this.closest;
				this.depth = Math.sqrt(_this9.x * _this9.x + _this9.y * _this9.y + _this9.z * _this9.z);
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED;
			}
			var _this10 = this.polyhedron;
			var first = _this10._vertexPool;
			if(first != null) {
				_this10._vertexPool = first._next;
				first._next = null;
			} else {
				first = new oimo_collision_narrowphase_detector_gjkepa_EpaVertex();
			}
			var epaVertex = first.init(supportingVertex,witness1,witness2);
			if(!this.polyhedron._addVertex(epaVertex,face)) {
				return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX;
			}
			++count;
		}
		return oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE;
	}
	,computeClosestPoints: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,true);
	}
	,computeDistance: function(c1,c2,tf1,tf2,cache) {
		return this.computeClosestPointsImpl(c1,c2,tf1,tf2,cache,false);
	}
	,convexCast: function(c1,c2,tf1,tf2,tl1,tl2,hit) {
		return this.convexCastImpl(c1,c2,tf1,tf2,tl1,tl2,hit);
	}
	,rayCast: function(c,tf,begin,end,hit) {
		var tf1 = this.tempTransform;
		var tf2 = tf;
		var v = begin;
		tf1._positionX = v.x;
		tf1._positionY = v.y;
		tf1._positionZ = v.z;
		var tl1 = this.tl1;
		var tl2 = this.tl2;
		tl1.x = end.x;
		tl1.y = end.y;
		tl1.z = end.z;
		var _this = tl1;
		var tx = _this.x - begin.x;
		var ty = _this.y - begin.y;
		var tz = _this.z - begin.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		tl2.zero();
		return this.convexCastImpl(null,c,tf1,tf2,tl1,tl2,hit);
	}
	,__class__: oimo_collision_narrowphase_detector_gjkepa_GjkEpa
};
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaLog.__name__ = "oimo.collision.narrowphase.detector.gjkepa.GjkEpaLog";
var oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState = function() { };
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.__name__ = "oimo.collision.narrowphase.detector.gjkepa.GjkEpaResultState";
var oimo_collision_narrowphase_detector_gjkepa_SimplexUtil = function() { };
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.__name__ = "oimo.collision.narrowphase.detector.gjkepa.SimplexUtil";
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin2 = function(vec1,vec2,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v = vec2;
	v2X = v.x;
	v2Y = v.y;
	v2Z = v.z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
	var t = v12X * v1X + v12Y * v1Y + v12Z * v1Z;
	t = -t / d;
	if(t < 0) {
		var v = out;
		v.x = v1X;
		v.y = v1Y;
		v.z = v1Z;
		return 1;
	}
	if(t > 1) {
		var v = out;
		v.x = v2X;
		v.y = v2Y;
		v.z = v2Z;
		return 2;
	}
	var p;
	var pX;
	var pY;
	var pZ;
	pX = v1X + v12X * t;
	pY = v1Y + v12Y * t;
	pZ = v1Z + v12Z * t;
	var v = out;
	v.x = pX;
	v.y = pY;
	v.z = pZ;
	return 3;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin3 = function(vec1,vec2,vec3,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v3;
	var v3X;
	var v3Y;
	var v3Z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	var v23;
	var v23X;
	var v23Y;
	var v23Z;
	var v31;
	var v31X;
	var v31Y;
	var v31Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v = vec2;
	v2X = v.x;
	v2Y = v.y;
	v2Z = v.z;
	var v = vec3;
	v3X = v.x;
	v3Y = v.y;
	v3Z = v.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v31X = v1X - v3X;
	v31Y = v1Y - v3Y;
	v31Z = v1Z - v3Z;
	var n;
	var nX;
	var nY;
	var nZ;
	nX = v12Y * v23Z - v12Z * v23Y;
	nY = v12Z * v23X - v12X * v23Z;
	nZ = v12X * v23Y - v12Y * v23X;
	var n12;
	var n12X;
	var n12Y;
	var n12Z;
	var n23;
	var n23X;
	var n23Y;
	var n23Z;
	var n31;
	var n31X;
	var n31Y;
	var n31Z;
	n12X = v12Y * nZ - v12Z * nY;
	n12Y = v12Z * nX - v12X * nZ;
	n12Z = v12X * nY - v12Y * nX;
	n23X = v23Y * nZ - v23Z * nY;
	n23Y = v23Z * nX - v23X * nZ;
	n23Z = v23X * nY - v23Y * nX;
	n31X = v31Y * nZ - v31Z * nY;
	n31Y = v31Z * nX - v31X * nZ;
	n31Z = v31X * nY - v31Y * nX;
	var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
	var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
	var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
	var mind = -1;
	var minv;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if(d12 < 0) {
		var v1;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v = vec1;
		v1X1 = v.x;
		v1Y1 = v.y;
		v1Z1 = v.z;
		var v = vec2;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X - v1X1;
		v12Y = v2Y - v1Y1;
		v12Z = v2Z - v1Z1;
		var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / d;
		var b;
		if(t < 0) {
			var v = out;
			v.x = v1X1;
			v.y = v1Y1;
			v.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			var v = out;
			v.x = v2X;
			v.y = v2Y;
			v.z = v2Z;
			b = 2;
		} else {
			var p;
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			var v = out;
			v.x = pX;
			v.y = pY;
			v.z = pZ;
			b = 3;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		mini = b;
		mind = d;
		var v = out;
		minvX = v.x;
		minvY = v.y;
		minvZ = v.z;
	}
	if(d23 < 0) {
		var v1;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v = vec2;
		v1X1 = v.x;
		v1Y1 = v.y;
		v1Z1 = v.z;
		var v = vec3;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X - v1X1;
		v12Y = v2Y - v1Y1;
		v12Z = v2Z - v1Z1;
		var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / d;
		var b;
		if(t < 0) {
			var v = out;
			v.x = v1X1;
			v.y = v1Y1;
			v.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			var v = out;
			v.x = v2X;
			v.y = v2Y;
			v.z = v2Z;
			b = 2;
		} else {
			var p;
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			var v = out;
			v.x = pX;
			v.y = pY;
			v.z = pZ;
			b = 3;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b << 1;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
	}
	if(d31 < 0) {
		var v1;
		var v1X1;
		var v1Y1;
		var v1Z1;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v = vec1;
		v1X1 = v.x;
		v1Y1 = v.y;
		v1Z1 = v.z;
		var v = vec3;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		v12X = v2X - v1X1;
		v12Y = v2Y - v1Y1;
		v12Z = v2Z - v1Z1;
		var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
		var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
		t = -t / d;
		var b;
		if(t < 0) {
			var v = out;
			v.x = v1X1;
			v.y = v1Y1;
			v.z = v1Z1;
			b = 1;
		} else if(t > 1) {
			var v = out;
			v.x = v2X;
			v.y = v2Y;
			v.z = v2Z;
			b = 2;
		} else {
			var p;
			var pX;
			var pY;
			var pZ;
			pX = v1X1 + v12X * t;
			pY = v1Y1 + v12Y * t;
			pZ = v1Z1 + v12Z * t;
			var v = out;
			v.x = pX;
			v.y = pY;
			v.z = pZ;
			b = 3;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 1 | (b & 2) << 1;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
	}
	if(mind > 0) {
		var v = out;
		v.x = minvX;
		v.y = minvY;
		v.z = minvZ;
		return mini;
	}
	var l = nX * nX + nY * nY + nZ * nZ;
	if(l > 0) {
		l = 1 / Math.sqrt(l);
	}
	nX *= l;
	nY *= l;
	nZ *= l;
	var dn = v1X * nX + v1Y * nY + v1Z * nZ;
	var l2 = nX * nX + nY * nY + nZ * nZ;
	l2 = dn / l2;
	minvX = nX * l2;
	minvY = nY * l2;
	minvZ = nZ * l2;
	var v = out;
	v.x = minvX;
	v.y = minvY;
	v.z = minvZ;
	return 7;
};
oimo_collision_narrowphase_detector_gjkepa_SimplexUtil.projectOrigin4 = function(vec1,vec2,vec3,vec4,out) {
	var v1;
	var v1X;
	var v1Y;
	var v1Z;
	var v2;
	var v2X;
	var v2Y;
	var v2Z;
	var v3;
	var v3X;
	var v3Y;
	var v3Z;
	var v4;
	var v4X;
	var v4Y;
	var v4Z;
	var v12;
	var v12X;
	var v12Y;
	var v12Z;
	var v13;
	var v13X;
	var v13Y;
	var v13Z;
	var v14;
	var v14X;
	var v14Y;
	var v14Z;
	var v23;
	var v23X;
	var v23Y;
	var v23Z;
	var v24;
	var v24X;
	var v24Y;
	var v24Z;
	var v34;
	var v34X;
	var v34Y;
	var v34Z;
	var v = vec1;
	v1X = v.x;
	v1Y = v.y;
	v1Z = v.z;
	var v = vec2;
	v2X = v.x;
	v2Y = v.y;
	v2Z = v.z;
	var v = vec3;
	v3X = v.x;
	v3Y = v.y;
	v3Z = v.z;
	var v = vec4;
	v4X = v.x;
	v4Y = v.y;
	v4Z = v.z;
	v12X = v2X - v1X;
	v12Y = v2Y - v1Y;
	v12Z = v2Z - v1Z;
	v13X = v3X - v1X;
	v13Y = v3Y - v1Y;
	v13Z = v3Z - v1Z;
	v14X = v4X - v1X;
	v14Y = v4Y - v1Y;
	v14Z = v4Z - v1Z;
	v23X = v3X - v2X;
	v23Y = v3Y - v2Y;
	v23Z = v3Z - v2Z;
	v24X = v4X - v2X;
	v24Y = v4Y - v2Y;
	v24Z = v4Z - v2Z;
	v34X = v4X - v3X;
	v34Y = v4Y - v3Y;
	v34Z = v4Z - v3Z;
	var rev;
	var n123;
	var n123X;
	var n123Y;
	var n123Z;
	var n134;
	var n134X;
	var n134Y;
	var n134Z;
	var n142;
	var n142X;
	var n142Y;
	var n142Z;
	var n243;
	var n243X;
	var n243Y;
	var n243Z;
	var n;
	var nX;
	var nY;
	var nZ;
	n123X = v12Y * v13Z - v12Z * v13Y;
	n123Y = v12Z * v13X - v12X * v13Z;
	n123Z = v12X * v13Y - v12Y * v13X;
	n134X = v13Y * v14Z - v13Z * v14Y;
	n134Y = v13Z * v14X - v13X * v14Z;
	n134Z = v13X * v14Y - v13Y * v14X;
	n142X = v14Y * v12Z - v14Z * v12Y;
	n142Y = v14Z * v12X - v14X * v12Z;
	n142Z = v14X * v12Y - v14Y * v12X;
	n243X = v24Y * v23Z - v24Z * v23Y;
	n243Y = v24Z * v23X - v24X * v23Z;
	n243Z = v24X * v23Y - v24Y * v23X;
	var sign = v12X * n243X + v12Y * n243Y + v12Z * n243Z > 0 ? 1 : -1;
	var d123 = v1X * n123X + v1Y * n123Y + v1Z * n123Z;
	var d134 = v1X * n134X + v1Y * n134Y + v1Z * n134Z;
	var d142 = v1X * n142X + v1Y * n142Y + v1Z * n142Z;
	var d243 = v2X * n243X + v2Y * n243Y + v2Z * n243Z;
	var mind = -1;
	var minv;
	var minvX;
	var minvY;
	var minvZ;
	var mini = 0;
	minvX = 0;
	minvY = 0;
	minvZ = 0;
	if(d123 * sign < 0) {
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v31;
		var v31X;
		var v31Y;
		var v31Z;
		var v = vec1;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vec2;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vec3;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
		var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
		var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
		var mind1 = -1;
		var minv;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(d12 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec2;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			mini1 = b;
			mind1 = d;
			var v = out;
			minvX1 = v.x;
			minvY1 = v.y;
			minvZ1 = v.z;
		}
		if(d23 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec2;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		if(d31 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		var b;
		if(mind1 > 0) {
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X * nX + v1Y * nY + v1Z * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		mini = b;
		mind = d;
		var v = out;
		minvX = v.x;
		minvY = v.y;
		minvZ = v.z;
	}
	if(d134 * sign < 0) {
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v31;
		var v31X;
		var v31Y;
		var v31Z;
		var v = vec1;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vec3;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vec4;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
		var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
		var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
		var mind1 = -1;
		var minv;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(d12 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			mini1 = b;
			mind1 = d;
			var v = out;
			minvX1 = v.x;
			minvY1 = v.y;
			minvZ1 = v.z;
		}
		if(d23 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec3;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		if(d31 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		var b;
		if(mind1 > 0) {
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X * nX + v1Y * nY + v1Z * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 1 | (b & 6) << 1;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
	}
	if(d142 * sign < 0) {
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v31;
		var v31X;
		var v31Y;
		var v31Z;
		var v = vec1;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vec2;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vec4;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
		var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
		var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
		var mind1 = -1;
		var minv;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(d12 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec2;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			mini1 = b;
			mind1 = d;
			var v = out;
			minvX1 = v.x;
			minvY1 = v.y;
			minvZ1 = v.z;
		}
		if(d23 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec2;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		if(d31 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec1;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		var b;
		if(mind1 > 0) {
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X * nX + v1Y * nY + v1Z * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b & 3 | (b & 4) << 1;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
	}
	if(d243 * sign < 0) {
		var v1;
		var v1X;
		var v1Y;
		var v1Z;
		var v2;
		var v2X;
		var v2Y;
		var v2Z;
		var v3;
		var v3X;
		var v3Y;
		var v3Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		var v31;
		var v31X;
		var v31Y;
		var v31Z;
		var v = vec2;
		v1X = v.x;
		v1Y = v.y;
		v1Z = v.z;
		var v = vec3;
		v2X = v.x;
		v2Y = v.y;
		v2Z = v.z;
		var v = vec4;
		v3X = v.x;
		v3Y = v.y;
		v3Z = v.z;
		v12X = v2X - v1X;
		v12Y = v2Y - v1Y;
		v12Z = v2Z - v1Z;
		v23X = v3X - v2X;
		v23Y = v3Y - v2Y;
		v23Z = v3Z - v2Z;
		v31X = v1X - v3X;
		v31Y = v1Y - v3Y;
		v31Z = v1Z - v3Z;
		var n;
		var nX;
		var nY;
		var nZ;
		nX = v12Y * v23Z - v12Z * v23Y;
		nY = v12Z * v23X - v12X * v23Z;
		nZ = v12X * v23Y - v12Y * v23X;
		var n12;
		var n12X;
		var n12Y;
		var n12Z;
		var n23;
		var n23X;
		var n23Y;
		var n23Z;
		var n31;
		var n31X;
		var n31Y;
		var n31Z;
		n12X = v12Y * nZ - v12Z * nY;
		n12Y = v12Z * nX - v12X * nZ;
		n12Z = v12X * nY - v12Y * nX;
		n23X = v23Y * nZ - v23Z * nY;
		n23Y = v23Z * nX - v23X * nZ;
		n23Z = v23X * nY - v23Y * nX;
		n31X = v31Y * nZ - v31Z * nY;
		n31Y = v31Z * nX - v31X * nZ;
		n31Z = v31X * nY - v31Y * nX;
		var d12 = v1X * n12X + v1Y * n12Y + v1Z * n12Z;
		var d23 = v2X * n23X + v2Y * n23Y + v2Z * n23Z;
		var d31 = v3X * n31X + v3Y * n31Y + v3Z * n31Z;
		var mind1 = -1;
		var minv;
		var minvX1;
		var minvY1;
		var minvZ1;
		var mini1 = 0;
		minvX1 = 0;
		minvY1 = 0;
		minvZ1 = 0;
		if(d12 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec2;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec3;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			mini1 = b;
			mind1 = d;
			var v = out;
			minvX1 = v.x;
			minvY1 = v.y;
			minvZ1 = v.z;
		}
		if(d23 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec3;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		if(d31 < 0) {
			var v1;
			var v1X1;
			var v1Y1;
			var v1Z1;
			var v2;
			var v2X;
			var v2Y;
			var v2Z;
			var v = vec2;
			v1X1 = v.x;
			v1Y1 = v.y;
			v1Z1 = v.z;
			var v = vec4;
			v2X = v.x;
			v2Y = v.y;
			v2Z = v.z;
			var v12;
			var v12X;
			var v12Y;
			var v12Z;
			v12X = v2X - v1X1;
			v12Y = v2Y - v1Y1;
			v12Z = v2Z - v1Z1;
			var d = v12X * v12X + v12Y * v12Y + v12Z * v12Z;
			var t = v12X * v1X1 + v12Y * v1Y1 + v12Z * v1Z1;
			t = -t / d;
			var b;
			if(t < 0) {
				var v = out;
				v.x = v1X1;
				v.y = v1Y1;
				v.z = v1Z1;
				b = 1;
			} else if(t > 1) {
				var v = out;
				v.x = v2X;
				v.y = v2Y;
				v.z = v2Z;
				b = 2;
			} else {
				var p;
				var pX;
				var pY;
				var pZ;
				pX = v1X1 + v12X * t;
				pY = v1Y1 + v12Y * t;
				pZ = v1Z1 + v12Z * t;
				var v = out;
				v.x = pX;
				v.y = pY;
				v.z = pZ;
				b = 3;
			}
			var d = out.x * out.x + out.y * out.y + out.z * out.z;
			if(mind1 < 0 || d < mind1) {
				mini1 = b & 1 | (b & 2) << 1;
				mind1 = d;
				var v = out;
				minvX1 = v.x;
				minvY1 = v.y;
				minvZ1 = v.z;
			}
		}
		var b;
		if(mind1 > 0) {
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = mini1;
		} else {
			var l = nX * nX + nY * nY + nZ * nZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			nX *= l;
			nY *= l;
			nZ *= l;
			var dn = v1X * nX + v1Y * nY + v1Z * nZ;
			var l2 = nX * nX + nY * nY + nZ * nZ;
			l2 = dn / l2;
			minvX1 = nX * l2;
			minvY1 = nY * l2;
			minvZ1 = nZ * l2;
			var v = out;
			v.x = minvX1;
			v.y = minvY1;
			v.z = minvZ1;
			b = 7;
		}
		var d = out.x * out.x + out.y * out.y + out.z * out.z;
		if(mind < 0 || d < mind) {
			mini = b << 1;
			mind = d;
			var v = out;
			minvX = v.x;
			minvY = v.y;
			minvZ = v.z;
		}
	}
	if(mind > 0) {
		var v = out;
		v.x = minvX;
		v.y = minvY;
		v.z = minvZ;
		return mini;
	}
	out.zero();
	return 15;
};
var oimo_common_Mat3 = function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	oimo_common_Mat3.numCreations++;
};
oimo_common_Mat3.__name__ = "oimo.common.Mat3";
oimo_common_Mat3.prototype = {
	init: function(e00,e01,e02,e10,e11,e12,e20,e21,e22) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		return this;
	}
	,identity: function() {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat3(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22);
	}
	,sub: function(m) {
		return new oimo_common_Mat3(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22);
	}
	,scale: function(s) {
		return new oimo_common_Mat3(this.e00 * s,this.e01 * s,this.e02 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e20 * s,this.e21 * s,this.e22 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat3(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22);
	}
	,addEq: function(m) {
		var t00 = this.e00 + m.e00;
		var t01 = this.e01 + m.e01;
		var t02 = this.e02 + m.e02;
		var t10 = this.e10 + m.e10;
		var t11 = this.e11 + m.e11;
		var t12 = this.e12 + m.e12;
		var t20 = this.e20 + m.e20;
		var t21 = this.e21 + m.e21;
		var t22 = this.e22 + m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,subEq: function(m) {
		var t00 = this.e00 - m.e00;
		var t01 = this.e01 - m.e01;
		var t02 = this.e02 - m.e02;
		var t10 = this.e10 - m.e10;
		var t11 = this.e11 - m.e11;
		var t12 = this.e12 - m.e12;
		var t20 = this.e20 - m.e20;
		var t21 = this.e21 - m.e21;
		var t22 = this.e22 - m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,scaleEq: function(s) {
		var t00 = this.e00 * s;
		var t01 = this.e01 * s;
		var t02 = this.e02 * s;
		var t10 = this.e10 * s;
		var t11 = this.e11 * s;
		var t12 = this.e12 * s;
		var t20 = this.e20 * s;
		var t21 = this.e21 * s;
		var t22 = this.e22 * s;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,mulEq: function(m) {
		var t00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20;
		var t01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21;
		var t02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22;
		var t10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20;
		var t11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21;
		var t12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22;
		var t20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20;
		var t21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21;
		var t22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat3(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e20 * sx,this.e21 * sy,this.e22 * sz);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat3(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22);
	}
	,prependScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sx;
		var t02 = this.e02 * sx;
		var t10 = this.e10 * sy;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sy;
		var t20 = this.e20 * sz;
		var t21 = this.e21 * sz;
		var t22 = this.e22 * sz;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sy;
		var t02 = this.e02 * sz;
		var t10 = this.e10 * sx;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sz;
		var t20 = this.e20 * sx;
		var t21 = this.e21 * sy;
		var t22 = this.e22 * sz;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		var t01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		var t02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		var t10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var t11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var t12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var t20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var t21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var t22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		var t01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var t02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var t10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		var t11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var t12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var t20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		var t21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var t22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat3(this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22);
	}
	,transposeEq: function() {
		var t00 = this.e00;
		var t01 = this.e10;
		var t02 = this.e20;
		var t10 = this.e01;
		var t11 = this.e11;
		var t12 = this.e21;
		var t20 = this.e02;
		var t21 = this.e12;
		var t22 = this.e22;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,determinant: function() {
		return this.e00 * (this.e11 * this.e22 - this.e12 * this.e21) - this.e01 * (this.e10 * this.e22 - this.e12 * this.e20) + this.e02 * (this.e10 * this.e21 - this.e11 * this.e20);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22;
	}
	,inverse: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var d10 = this.e01 * this.e22 - this.e02 * this.e21;
		var d11 = this.e00 * this.e22 - this.e02 * this.e20;
		var d12 = this.e00 * this.e21 - this.e01 * this.e20;
		var d20 = this.e01 * this.e12 - this.e02 * this.e11;
		var d21 = this.e00 * this.e12 - this.e02 * this.e10;
		var d22 = this.e00 * this.e11 - this.e01 * this.e10;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat3(d00 * invDet,-d10 * invDet,d20 * invDet,-d01 * invDet,d11 * invDet,-d21 * invDet,d02 * invDet,-d12 * invDet,d22 * invDet);
	}
	,inverseEq: function() {
		var d00 = this.e11 * this.e22 - this.e12 * this.e21;
		var d01 = this.e10 * this.e22 - this.e12 * this.e20;
		var d02 = this.e10 * this.e21 - this.e11 * this.e20;
		var d10 = this.e01 * this.e22 - this.e02 * this.e21;
		var d11 = this.e00 * this.e22 - this.e02 * this.e20;
		var d12 = this.e00 * this.e21 - this.e01 * this.e20;
		var d20 = this.e01 * this.e12 - this.e02 * this.e11;
		var d21 = this.e00 * this.e12 - this.e02 * this.e10;
		var d22 = this.e00 * this.e11 - this.e01 * this.e10;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t00 = d00 * invDet;
		var t01 = -d10 * invDet;
		var t02 = d20 * invDet;
		var t10 = -d01 * invDet;
		var t11 = d11 * invDet;
		var t12 = -d21 * invDet;
		var t20 = d02 * invDet;
		var t21 = -d12 * invDet;
		var t22 = d22 * invDet;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e01,this.e11,this.e21,this.e02,this.e12,this.e22];
		} else {
			return [this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat3(this.e00,this.e01,this.e02,this.e10,this.e11,this.e12,this.e20,this.e21,this.e22);
	}
	,fromQuat: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.e00 = 1 - yy - zz;
		this.e01 = xy - wz;
		this.e02 = xz + wy;
		this.e10 = xy + wz;
		this.e11 = 1 - xx - zz;
		this.e12 = yz - wx;
		this.e20 = xz - wy;
		this.e21 = yz + wx;
		this.e22 = 1 - xx - yy;
		return this;
	}
	,toQuat: function() {
		var _this = new oimo_common_Quat();
		var e00 = this.e00;
		var e11 = this.e11;
		var e22 = this.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			_this.w = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e21 - this.e12) * s;
			_this.y = (this.e02 - this.e20) * s;
			_this.z = (this.e10 - this.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				_this.x = 0.5 * s;
				s = 0.5 / s;
				_this.y = (this.e01 + this.e10) * s;
				_this.z = (this.e02 + this.e20) * s;
				_this.w = (this.e21 - this.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				_this.z = 0.5 * s;
				s = 0.5 / s;
				_this.x = (this.e02 + this.e20) * s;
				_this.y = (this.e12 + this.e21) * s;
				_this.w = (this.e10 - this.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			_this.y = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e01 + this.e10) * s;
			_this.z = (this.e12 + this.e21) * s;
			_this.w = (this.e02 - this.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			_this.z = 0.5 * s;
			s = 0.5 / s;
			_this.x = (this.e02 + this.e20) * s;
			_this.y = (this.e12 + this.e21) * s;
			_this.w = (this.e10 - this.e01) * s;
		}
		return _this;
	}
	,fromEulerXyz: function(eulerAngles) {
		var sx = Math.sin(eulerAngles.x);
		var sy = Math.sin(eulerAngles.y);
		var sz = Math.sin(eulerAngles.z);
		var cx = Math.cos(eulerAngles.x);
		var cy = Math.cos(eulerAngles.y);
		var cz = Math.cos(eulerAngles.z);
		var t00 = cy * cz;
		var t01 = -cy * sz;
		var t02 = sy;
		var t10 = cx * sz + cz * sx * sy;
		var t11 = cx * cz - sx * sy * sz;
		var t12 = -cy * sx;
		var t20 = sx * sz - cx * cz * sy;
		var t21 = cz * sx + cx * sy * sz;
		var t22 = cx * cy;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toEulerXyz: function() {
		var sy = this.e02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xSubZ * 0.5,-1.570796326794895,-xSubZ * 0.5);
		}
		if(sy >= 1) {
			var xAddZ = Math.atan2(this.e21,this.e11);
			return new oimo_common_Vec3(xAddZ * 0.5,1.570796326794895,xAddZ * 0.5);
		}
		var y = Math.asin(sy);
		var x = Math.atan2(-this.e12,this.e22);
		var z = Math.atan2(-this.e01,this.e00);
		return new oimo_common_Vec3(x,y,z);
	}
	,getRow: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e20,this.e21,this.e22);
		} else {
			return null;
		}
	}
	,getCol: function(index) {
		if(index == 0) {
			return new oimo_common_Vec3(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			return new oimo_common_Vec3(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			return new oimo_common_Vec3(this.e02,this.e12,this.e22);
		} else {
			return null;
		}
	}
	,getRowTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e01,this.e02);
		} else if(index == 1) {
			dst.init(this.e10,this.e11,this.e12);
		} else if(index == 2) {
			dst.init(this.e20,this.e21,this.e22);
		} else {
			dst.zero();
		}
	}
	,getColTo: function(index,dst) {
		if(index == 0) {
			dst.init(this.e00,this.e10,this.e20);
		} else if(index == 1) {
			dst.init(this.e01,this.e11,this.e21);
		} else if(index == 2) {
			dst.init(this.e02,this.e12,this.e22);
		} else {
			dst.zero();
		}
	}
	,fromRows: function(row0,row1,row2) {
		var t00 = row0.x;
		var t01 = row0.y;
		var t02 = row0.z;
		var t10 = row1.x;
		var t11 = row1.y;
		var t12 = row1.z;
		var t20 = row2.x;
		var t21 = row2.y;
		var t22 = row2.z;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,fromCols: function(col0,col1,col2) {
		var t00 = col0.x;
		var t01 = col1.x;
		var t02 = col2.x;
		var t10 = col0.y;
		var t11 = col1.y;
		var t12 = col2.y;
		var t20 = col0.z;
		var t21 = col1.z;
		var t22 = col2.z;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		return this;
	}
	,toString: function() {
		return "Mat3[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "     " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Mat3
};
var oimo_common_Mat4 = function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
	if(e33 == null) {
		e33 = 1;
	}
	if(e32 == null) {
		e32 = 0;
	}
	if(e31 == null) {
		e31 = 0;
	}
	if(e30 == null) {
		e30 = 0;
	}
	if(e23 == null) {
		e23 = 0;
	}
	if(e22 == null) {
		e22 = 1;
	}
	if(e21 == null) {
		e21 = 0;
	}
	if(e20 == null) {
		e20 = 0;
	}
	if(e13 == null) {
		e13 = 0;
	}
	if(e12 == null) {
		e12 = 0;
	}
	if(e11 == null) {
		e11 = 1;
	}
	if(e10 == null) {
		e10 = 0;
	}
	if(e03 == null) {
		e03 = 0;
	}
	if(e02 == null) {
		e02 = 0;
	}
	if(e01 == null) {
		e01 = 0;
	}
	if(e00 == null) {
		e00 = 1;
	}
	this.e00 = e00;
	this.e01 = e01;
	this.e02 = e02;
	this.e03 = e03;
	this.e10 = e10;
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e20 = e20;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e30 = e30;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;
	oimo_common_Mat4.numCreations++;
};
oimo_common_Mat4.__name__ = "oimo.common.Mat4";
oimo_common_Mat4.prototype = {
	init: function(e00,e01,e02,e03,e10,e11,e12,e13,e20,e21,e22,e23,e30,e31,e32,e33) {
		this.e00 = e00;
		this.e01 = e01;
		this.e02 = e02;
		this.e03 = e03;
		this.e10 = e10;
		this.e11 = e11;
		this.e12 = e12;
		this.e13 = e13;
		this.e20 = e20;
		this.e21 = e21;
		this.e22 = e22;
		this.e23 = e23;
		this.e30 = e30;
		this.e31 = e31;
		this.e32 = e32;
		this.e33 = e33;
		return this;
	}
	,identity: function() {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t03 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t13 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,add: function(m) {
		return new oimo_common_Mat4(this.e00 + m.e00,this.e01 + m.e01,this.e02 + m.e02,this.e03 + m.e03,this.e10 + m.e10,this.e11 + m.e11,this.e12 + m.e12,this.e13 + m.e13,this.e20 + m.e20,this.e21 + m.e21,this.e22 + m.e22,this.e23 + m.e23,this.e30 + m.e30,this.e31 + m.e31,this.e32 + m.e32,this.e33 + m.e33);
	}
	,sub: function(m) {
		return new oimo_common_Mat4(this.e00 - m.e00,this.e01 - m.e01,this.e02 - m.e02,this.e03 - m.e03,this.e10 - m.e10,this.e11 - m.e11,this.e12 - m.e12,this.e13 - m.e13,this.e20 - m.e20,this.e21 - m.e21,this.e22 - m.e22,this.e23 - m.e23,this.e30 - m.e30,this.e31 - m.e31,this.e32 - m.e32,this.e33 - m.e33);
	}
	,scale: function(s) {
		return new oimo_common_Mat4(this.e00 * s,this.e01 * s,this.e02 * s,this.e03 * s,this.e10 * s,this.e11 * s,this.e12 * s,this.e13 * s,this.e20 * s,this.e21 * s,this.e22 * s,this.e23 * s,this.e30 * s,this.e31 * s,this.e32 * s,this.e33 * s);
	}
	,mul: function(m) {
		return new oimo_common_Mat4(this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30,this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31,this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32,this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33,this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30,this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31,this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32,this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33,this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30,this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31,this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32,this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33,this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30,this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31,this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32,this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33);
	}
	,addEq: function(m) {
		var t00 = this.e00 + m.e00;
		var t01 = this.e01 + m.e01;
		var t02 = this.e02 + m.e02;
		var t03 = this.e03 + m.e03;
		var t10 = this.e10 + m.e10;
		var t11 = this.e11 + m.e11;
		var t12 = this.e12 + m.e12;
		var t13 = this.e13 + m.e13;
		var t20 = this.e20 + m.e20;
		var t21 = this.e21 + m.e21;
		var t22 = this.e22 + m.e22;
		var t23 = this.e23 + m.e23;
		var t30 = this.e30 + m.e30;
		var t31 = this.e31 + m.e31;
		var t32 = this.e32 + m.e32;
		var t33 = this.e33 + m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,subEq: function(m) {
		var t00 = this.e00 - m.e00;
		var t01 = this.e01 - m.e01;
		var t02 = this.e02 - m.e02;
		var t03 = this.e03 - m.e03;
		var t10 = this.e10 - m.e10;
		var t11 = this.e11 - m.e11;
		var t12 = this.e12 - m.e12;
		var t13 = this.e13 - m.e13;
		var t20 = this.e20 - m.e20;
		var t21 = this.e21 - m.e21;
		var t22 = this.e22 - m.e22;
		var t23 = this.e23 - m.e23;
		var t30 = this.e30 - m.e30;
		var t31 = this.e31 - m.e31;
		var t32 = this.e32 - m.e32;
		var t33 = this.e33 - m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,scaleEq: function(s) {
		var t00 = this.e00 * s;
		var t01 = this.e01 * s;
		var t02 = this.e02 * s;
		var t03 = this.e03 * s;
		var t10 = this.e10 * s;
		var t11 = this.e11 * s;
		var t12 = this.e12 * s;
		var t13 = this.e13 * s;
		var t20 = this.e20 * s;
		var t21 = this.e21 * s;
		var t22 = this.e22 * s;
		var t23 = this.e23 * s;
		var t30 = this.e30 * s;
		var t31 = this.e31 * s;
		var t32 = this.e32 * s;
		var t33 = this.e33 * s;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,mulEq: function(m) {
		var t00 = this.e00 * m.e00 + this.e01 * m.e10 + this.e02 * m.e20 + this.e03 * m.e30;
		var t01 = this.e00 * m.e01 + this.e01 * m.e11 + this.e02 * m.e21 + this.e03 * m.e31;
		var t02 = this.e00 * m.e02 + this.e01 * m.e12 + this.e02 * m.e22 + this.e03 * m.e32;
		var t03 = this.e00 * m.e03 + this.e01 * m.e13 + this.e02 * m.e23 + this.e03 * m.e33;
		var t10 = this.e10 * m.e00 + this.e11 * m.e10 + this.e12 * m.e20 + this.e13 * m.e30;
		var t11 = this.e10 * m.e01 + this.e11 * m.e11 + this.e12 * m.e21 + this.e13 * m.e31;
		var t12 = this.e10 * m.e02 + this.e11 * m.e12 + this.e12 * m.e22 + this.e13 * m.e32;
		var t13 = this.e10 * m.e03 + this.e11 * m.e13 + this.e12 * m.e23 + this.e13 * m.e33;
		var t20 = this.e20 * m.e00 + this.e21 * m.e10 + this.e22 * m.e20 + this.e23 * m.e30;
		var t21 = this.e20 * m.e01 + this.e21 * m.e11 + this.e22 * m.e21 + this.e23 * m.e31;
		var t22 = this.e20 * m.e02 + this.e21 * m.e12 + this.e22 * m.e22 + this.e23 * m.e32;
		var t23 = this.e20 * m.e03 + this.e21 * m.e13 + this.e22 * m.e23 + this.e23 * m.e33;
		var t30 = this.e30 * m.e00 + this.e31 * m.e10 + this.e32 * m.e20 + this.e33 * m.e30;
		var t31 = this.e30 * m.e01 + this.e31 * m.e11 + this.e32 * m.e21 + this.e33 * m.e31;
		var t32 = this.e30 * m.e02 + this.e31 * m.e12 + this.e32 * m.e22 + this.e33 * m.e32;
		var t33 = this.e30 * m.e03 + this.e31 * m.e13 + this.e32 * m.e23 + this.e33 * m.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sx,this.e02 * sx,this.e03 * sx,this.e10 * sy,this.e11 * sy,this.e12 * sy,this.e13 * sy,this.e20 * sz,this.e21 * sz,this.e22 * sz,this.e23 * sz,this.e30,this.e31,this.e32,this.e33);
	}
	,appendScale: function(sx,sy,sz) {
		return new oimo_common_Mat4(this.e00 * sx,this.e01 * sy,this.e02 * sz,this.e03,this.e10 * sx,this.e11 * sy,this.e12 * sz,this.e13,this.e20 * sx,this.e21 * sy,this.e22 * sz,this.e23,this.e30 * sx,this.e31 * sy,this.e32 * sz,this.e33);
	}
	,prependRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(r00 * this.e00 + r01 * this.e10 + r02 * this.e20,r00 * this.e01 + r01 * this.e11 + r02 * this.e21,r00 * this.e02 + r01 * this.e12 + r02 * this.e22,r00 * this.e03 + r01 * this.e13 + r02 * this.e23,r10 * this.e00 + r11 * this.e10 + r12 * this.e20,r10 * this.e01 + r11 * this.e11 + r12 * this.e21,r10 * this.e02 + r11 * this.e12 + r12 * this.e22,r10 * this.e03 + r11 * this.e13 + r12 * this.e23,r20 * this.e00 + r21 * this.e10 + r22 * this.e20,r20 * this.e01 + r21 * this.e11 + r22 * this.e21,r20 * this.e02 + r21 * this.e12 + r22 * this.e22,r20 * this.e03 + r21 * this.e13 + r22 * this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,appendRotation: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		return new oimo_common_Mat4(this.e00 * r00 + this.e01 * r10 + this.e02 * r20,this.e00 * r01 + this.e01 * r11 + this.e02 * r21,this.e00 * r02 + this.e01 * r12 + this.e02 * r22,this.e03,this.e10 * r00 + this.e11 * r10 + this.e12 * r20,this.e10 * r01 + this.e11 * r11 + this.e12 * r21,this.e10 * r02 + this.e11 * r12 + this.e12 * r22,this.e13,this.e20 * r00 + this.e21 * r10 + this.e22 * r20,this.e20 * r01 + this.e21 * r11 + this.e22 * r21,this.e20 * r02 + this.e21 * r12 + this.e22 * r22,this.e23,this.e30 * r00 + this.e31 * r10 + this.e32 * r20,this.e30 * r01 + this.e31 * r11 + this.e32 * r21,this.e30 * r02 + this.e31 * r12 + this.e32 * r22,this.e33);
	}
	,prependTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00 + tx * this.e30,this.e01 + tx * this.e31,this.e02 + tx * this.e32,this.e03 + tx * this.e33,this.e10 + ty * this.e30,this.e11 + ty * this.e31,this.e12 + ty * this.e32,this.e13 + ty * this.e33,this.e20 + tz * this.e30,this.e21 + tz * this.e31,this.e22 + tz * this.e32,this.e23 + tz * this.e33,this.e30,this.e31,this.e32,this.e33);
	}
	,appendTranslation: function(tx,ty,tz) {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03,this.e10,this.e11,this.e12,this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13,this.e20,this.e21,this.e22,this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23,this.e30,this.e31,this.e32,this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33);
	}
	,prependScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sx;
		var t02 = this.e02 * sx;
		var t03 = this.e03 * sx;
		var t10 = this.e10 * sy;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sy;
		var t13 = this.e13 * sy;
		var t20 = this.e20 * sz;
		var t21 = this.e21 * sz;
		var t22 = this.e22 * sz;
		var t23 = this.e23 * sz;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendScaleEq: function(sx,sy,sz) {
		var t00 = this.e00 * sx;
		var t01 = this.e01 * sy;
		var t02 = this.e02 * sz;
		var t03 = this.e03;
		var t10 = this.e10 * sx;
		var t11 = this.e11 * sy;
		var t12 = this.e12 * sz;
		var t13 = this.e13;
		var t20 = this.e20 * sx;
		var t21 = this.e21 * sy;
		var t22 = this.e22 * sz;
		var t23 = this.e23;
		var t30 = this.e30 * sx;
		var t31 = this.e31 * sy;
		var t32 = this.e32 * sz;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = r00 * this.e00 + r01 * this.e10 + r02 * this.e20;
		var t01 = r00 * this.e01 + r01 * this.e11 + r02 * this.e21;
		var t02 = r00 * this.e02 + r01 * this.e12 + r02 * this.e22;
		var t03 = r00 * this.e03 + r01 * this.e13 + r02 * this.e23;
		var t10 = r10 * this.e00 + r11 * this.e10 + r12 * this.e20;
		var t11 = r10 * this.e01 + r11 * this.e11 + r12 * this.e21;
		var t12 = r10 * this.e02 + r11 * this.e12 + r12 * this.e22;
		var t13 = r10 * this.e03 + r11 * this.e13 + r12 * this.e23;
		var t20 = r20 * this.e00 + r21 * this.e10 + r22 * this.e20;
		var t21 = r20 * this.e01 + r21 * this.e11 + r22 * this.e21;
		var t22 = r20 * this.e02 + r21 * this.e12 + r22 * this.e22;
		var t23 = r20 * this.e03 + r21 * this.e13 + r22 * this.e23;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendRotationEq: function(rad,axisX,axisY,axisZ) {
		var s = Math.sin(rad);
		var c = Math.cos(rad);
		var c1 = 1 - c;
		var r00 = axisX * axisX * c1 + c;
		var r01 = axisX * axisY * c1 - axisZ * s;
		var r02 = axisX * axisZ * c1 + axisY * s;
		var r10 = axisY * axisX * c1 + axisZ * s;
		var r11 = axisY * axisY * c1 + c;
		var r12 = axisY * axisZ * c1 - axisX * s;
		var r20 = axisZ * axisX * c1 - axisY * s;
		var r21 = axisZ * axisY * c1 + axisX * s;
		var r22 = axisZ * axisZ * c1 + c;
		var t00 = this.e00 * r00 + this.e01 * r10 + this.e02 * r20;
		var t01 = this.e00 * r01 + this.e01 * r11 + this.e02 * r21;
		var t02 = this.e00 * r02 + this.e01 * r12 + this.e02 * r22;
		var t03 = this.e03;
		var t10 = this.e10 * r00 + this.e11 * r10 + this.e12 * r20;
		var t11 = this.e10 * r01 + this.e11 * r11 + this.e12 * r21;
		var t12 = this.e10 * r02 + this.e11 * r12 + this.e12 * r22;
		var t13 = this.e13;
		var t20 = this.e20 * r00 + this.e21 * r10 + this.e22 * r20;
		var t21 = this.e20 * r01 + this.e21 * r11 + this.e22 * r21;
		var t22 = this.e20 * r02 + this.e21 * r12 + this.e22 * r22;
		var t23 = this.e23;
		var t30 = this.e30 * r00 + this.e31 * r10 + this.e32 * r20;
		var t31 = this.e30 * r01 + this.e31 * r11 + this.e32 * r21;
		var t32 = this.e30 * r02 + this.e31 * r12 + this.e32 * r22;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,prependTranslationEq: function(tx,ty,tz) {
		var t00 = this.e00 + tx * this.e30;
		var t01 = this.e01 + tx * this.e31;
		var t02 = this.e02 + tx * this.e32;
		var t03 = this.e03 + tx * this.e33;
		var t10 = this.e10 + ty * this.e30;
		var t11 = this.e11 + ty * this.e31;
		var t12 = this.e12 + ty * this.e32;
		var t13 = this.e13 + ty * this.e33;
		var t20 = this.e20 + tz * this.e30;
		var t21 = this.e21 + tz * this.e31;
		var t22 = this.e22 + tz * this.e32;
		var t23 = this.e23 + tz * this.e33;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,appendTranslationEq: function(tx,ty,tz) {
		var t00 = this.e00;
		var t01 = this.e01;
		var t02 = this.e02;
		var t03 = this.e00 * tx + this.e01 * ty + this.e02 * tz + this.e03;
		var t10 = this.e10;
		var t11 = this.e11;
		var t12 = this.e12;
		var t13 = this.e10 * tx + this.e11 * ty + this.e12 * tz + this.e13;
		var t20 = this.e20;
		var t21 = this.e21;
		var t22 = this.e22;
		var t23 = this.e20 * tx + this.e21 * ty + this.e22 * tz + this.e23;
		var t30 = this.e30;
		var t31 = this.e31;
		var t32 = this.e32;
		var t33 = this.e30 * tx + this.e31 * ty + this.e32 * tz + this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,transpose: function() {
		return new oimo_common_Mat4(this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33);
	}
	,transposeEq: function() {
		var t00 = this.e00;
		var t01 = this.e10;
		var t02 = this.e20;
		var t03 = this.e30;
		var t10 = this.e01;
		var t11 = this.e11;
		var t12 = this.e21;
		var t13 = this.e31;
		var t20 = this.e02;
		var t21 = this.e12;
		var t22 = this.e22;
		var t23 = this.e32;
		var t30 = this.e03;
		var t31 = this.e13;
		var t32 = this.e23;
		var t33 = this.e33;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,determinant: function() {
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		return this.e00 * (this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12) - this.e01 * (this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02) + this.e02 * (this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01) - this.e03 * (this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01);
	}
	,trace: function() {
		return this.e00 + this.e11 + this.e22 + this.e33;
	}
	,inverse: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var d10 = this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12;
		var d11 = this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02;
		var d12 = this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01;
		var d13 = this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01;
		var d20 = this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12;
		var d21 = this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02;
		var d22 = this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01;
		var d23 = this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01;
		var d30 = this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12;
		var d31 = this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02;
		var d32 = this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01;
		var d33 = this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		return new oimo_common_Mat4(d00 * invDet,-d10 * invDet,d20 * invDet,-d30 * invDet,-d01 * invDet,d11 * invDet,-d21 * invDet,d31 * invDet,d02 * invDet,-d12 * invDet,d22 * invDet,-d32 * invDet,-d03 * invDet,d13 * invDet,-d23 * invDet,d33 * invDet);
	}
	,inverseEq: function() {
		var d01_01 = this.e00 * this.e11 - this.e01 * this.e10;
		var d01_02 = this.e00 * this.e12 - this.e02 * this.e10;
		var d01_03 = this.e00 * this.e13 - this.e03 * this.e10;
		var d01_12 = this.e01 * this.e12 - this.e02 * this.e11;
		var d01_13 = this.e01 * this.e13 - this.e03 * this.e11;
		var d01_23 = this.e02 * this.e13 - this.e03 * this.e12;
		var d23_01 = this.e20 * this.e31 - this.e21 * this.e30;
		var d23_02 = this.e20 * this.e32 - this.e22 * this.e30;
		var d23_03 = this.e20 * this.e33 - this.e23 * this.e30;
		var d23_12 = this.e21 * this.e32 - this.e22 * this.e31;
		var d23_13 = this.e21 * this.e33 - this.e23 * this.e31;
		var d23_23 = this.e22 * this.e33 - this.e23 * this.e32;
		var d00 = this.e11 * d23_23 - this.e12 * d23_13 + this.e13 * d23_12;
		var d01 = this.e10 * d23_23 - this.e12 * d23_03 + this.e13 * d23_02;
		var d02 = this.e10 * d23_13 - this.e11 * d23_03 + this.e13 * d23_01;
		var d03 = this.e10 * d23_12 - this.e11 * d23_02 + this.e12 * d23_01;
		var d10 = this.e01 * d23_23 - this.e02 * d23_13 + this.e03 * d23_12;
		var d11 = this.e00 * d23_23 - this.e02 * d23_03 + this.e03 * d23_02;
		var d12 = this.e00 * d23_13 - this.e01 * d23_03 + this.e03 * d23_01;
		var d13 = this.e00 * d23_12 - this.e01 * d23_02 + this.e02 * d23_01;
		var d20 = this.e31 * d01_23 - this.e32 * d01_13 + this.e33 * d01_12;
		var d21 = this.e30 * d01_23 - this.e32 * d01_03 + this.e33 * d01_02;
		var d22 = this.e30 * d01_13 - this.e31 * d01_03 + this.e33 * d01_01;
		var d23 = this.e30 * d01_12 - this.e31 * d01_02 + this.e32 * d01_01;
		var d30 = this.e21 * d01_23 - this.e22 * d01_13 + this.e23 * d01_12;
		var d31 = this.e20 * d01_23 - this.e22 * d01_03 + this.e23 * d01_02;
		var d32 = this.e20 * d01_13 - this.e21 * d01_03 + this.e23 * d01_01;
		var d33 = this.e20 * d01_12 - this.e21 * d01_02 + this.e22 * d01_01;
		var invDet = this.e00 * d00 - this.e01 * d01 + this.e02 * d02 - this.e03 * d03;
		if(invDet != 0) {
			invDet = 1 / invDet;
		}
		var t00 = d00 * invDet;
		var t01 = -d10 * invDet;
		var t02 = d20 * invDet;
		var t03 = -d30 * invDet;
		var t10 = -d01 * invDet;
		var t11 = d11 * invDet;
		var t12 = -d21 * invDet;
		var t13 = d31 * invDet;
		var t20 = d02 * invDet;
		var t21 = -d12 * invDet;
		var t22 = d22 * invDet;
		var t23 = -d32 * invDet;
		var t30 = -d03 * invDet;
		var t31 = d13 * invDet;
		var t32 = -d23 * invDet;
		var t33 = d33 * invDet;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,lookAt: function(eyeX,eyeY,eyeZ,atX,atY,atZ,upX,upY,upZ) {
		var zx = eyeX - atX;
		var zy = eyeY - atY;
		var zz = eyeZ - atZ;
		var tmp = 1 / Math.sqrt(zx * zx + zy * zy + zz * zz);
		zx *= tmp;
		zy *= tmp;
		zz *= tmp;
		var xx = upY * zz - upZ * zy;
		var xy = upZ * zx - upX * zz;
		var xz = upX * zy - upY * zx;
		tmp = 1 / Math.sqrt(xx * xx + xy * xy + xz * xz);
		xx *= tmp;
		xy *= tmp;
		xz *= tmp;
		var yx = zy * xz - zz * xy;
		var yy = zz * xx - zx * xz;
		var yz = zx * xy - zy * xx;
		this.e00 = xx;
		this.e01 = xy;
		this.e02 = xz;
		this.e03 = -(xx * eyeX + xy * eyeY + xz * eyeZ);
		this.e10 = yx;
		this.e11 = yy;
		this.e12 = yz;
		this.e13 = -(yx * eyeX + yy * eyeY + yz * eyeZ);
		this.e20 = zx;
		this.e21 = zy;
		this.e22 = zz;
		this.e23 = -(zx * eyeX + zy * eyeY + zz * eyeZ);
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,perspective: function(fovY,aspect,near,far) {
		var h = 1 / Math.tan(fovY * 0.5);
		var fnf = far / (near - far);
		this.e00 = h / aspect;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = h;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = fnf;
		this.e23 = near * fnf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = -1;
		this.e33 = 0;
		return this;
	}
	,ortho: function(width,height,near,far) {
		var nf = 1 / (near - far);
		this.e00 = 2 / width;
		this.e01 = 0;
		this.e02 = 0;
		this.e03 = 0;
		this.e10 = 0;
		this.e11 = 2 / height;
		this.e12 = 0;
		this.e13 = 0;
		this.e20 = 0;
		this.e21 = 0;
		this.e22 = nf;
		this.e23 = near * nf;
		this.e30 = 0;
		this.e31 = 0;
		this.e32 = 0;
		this.e33 = 1;
		return this;
	}
	,toArray: function(columnMajor) {
		if(columnMajor == null) {
			columnMajor = false;
		}
		if(columnMajor) {
			return [this.e00,this.e10,this.e20,this.e30,this.e01,this.e11,this.e21,this.e31,this.e02,this.e12,this.e22,this.e32,this.e03,this.e13,this.e23,this.e33];
		} else {
			return [this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33];
		}
	}
	,copyFrom: function(m) {
		this.e00 = m.e00;
		this.e01 = m.e01;
		this.e02 = m.e02;
		this.e03 = m.e03;
		this.e10 = m.e10;
		this.e11 = m.e11;
		this.e12 = m.e12;
		this.e13 = m.e13;
		this.e20 = m.e20;
		this.e21 = m.e21;
		this.e22 = m.e22;
		this.e23 = m.e23;
		this.e30 = m.e30;
		this.e31 = m.e31;
		this.e32 = m.e32;
		this.e33 = m.e33;
		return this;
	}
	,fromMat3: function(m) {
		var t00 = m.e00;
		var t01 = m.e01;
		var t02 = m.e02;
		var t03 = 0;
		var t10 = m.e10;
		var t11 = m.e11;
		var t12 = m.e12;
		var t13 = 0;
		var t20 = m.e20;
		var t21 = m.e21;
		var t22 = m.e22;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		this.e00 = t00;
		this.e01 = t01;
		this.e02 = t02;
		this.e03 = t03;
		this.e10 = t10;
		this.e11 = t11;
		this.e12 = t12;
		this.e13 = t13;
		this.e20 = t20;
		this.e21 = t21;
		this.e22 = t22;
		this.e23 = t23;
		this.e30 = t30;
		this.e31 = t31;
		this.e32 = t32;
		this.e33 = t33;
		return this;
	}
	,fromTransform: function(transform) {
		var m = this;
		m.e00 = transform._rotation00;
		m.e01 = transform._rotation01;
		m.e02 = transform._rotation02;
		m.e10 = transform._rotation10;
		m.e11 = transform._rotation11;
		m.e12 = transform._rotation12;
		m.e20 = transform._rotation20;
		m.e21 = transform._rotation21;
		m.e22 = transform._rotation22;
		m.e03 = transform._positionX;
		m.e13 = transform._positionY;
		m.e23 = transform._positionZ;
		m.e30 = 0;
		m.e31 = 0;
		m.e32 = 0;
		m.e33 = 1;
		return this;
	}
	,clone: function() {
		return new oimo_common_Mat4(this.e00,this.e01,this.e02,this.e03,this.e10,this.e11,this.e12,this.e13,this.e20,this.e21,this.e22,this.e23,this.e30,this.e31,this.e32,this.e33);
	}
	,toString: function() {
		return "Mat4[" + (this.e00 > 0 ? (this.e00 * 10000000 + 0.5 | 0) / 10000000 : (this.e00 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e01 > 0 ? (this.e01 * 10000000 + 0.5 | 0) / 10000000 : (this.e01 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e02 > 0 ? (this.e02 * 10000000 + 0.5 | 0) / 10000000 : (this.e02 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e03 > 0 ? (this.e03 * 10000000 + 0.5 | 0) / 10000000 : (this.e03 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e10 > 0 ? (this.e10 * 10000000 + 0.5 | 0) / 10000000 : (this.e10 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e11 > 0 ? (this.e11 * 10000000 + 0.5 | 0) / 10000000 : (this.e11 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e12 > 0 ? (this.e12 * 10000000 + 0.5 | 0) / 10000000 : (this.e12 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e13 > 0 ? (this.e13 * 10000000 + 0.5 | 0) / 10000000 : (this.e13 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e20 > 0 ? (this.e20 * 10000000 + 0.5 | 0) / 10000000 : (this.e20 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e21 > 0 ? (this.e21 * 10000000 + 0.5 | 0) / 10000000 : (this.e21 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e22 > 0 ? (this.e22 * 10000000 + 0.5 | 0) / 10000000 : (this.e22 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e23 > 0 ? (this.e23 * 10000000 + 0.5 | 0) / 10000000 : (this.e23 * 10000000 - 0.5 | 0) / 10000000) + ",\n" + "    " + (this.e30 > 0 ? (this.e30 * 10000000 + 0.5 | 0) / 10000000 : (this.e30 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e31 > 0 ? (this.e31 * 10000000 + 0.5 | 0) / 10000000 : (this.e31 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e32 > 0 ? (this.e32 * 10000000 + 0.5 | 0) / 10000000 : (this.e32 * 10000000 - 0.5 | 0) / 10000000) + ", " + (this.e33 > 0 ? (this.e33 * 10000000 + 0.5 | 0) / 10000000 : (this.e33 * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Mat4
};
var oimo_common_MathUtil = function() { };
oimo_common_MathUtil.__name__ = "oimo.common.MathUtil";
oimo_common_MathUtil.abs = function(x) {
	if(x > 0) {
		return x;
	} else {
		return -x;
	}
};
oimo_common_MathUtil.sin = function(x) {
	return Math.sin(x);
};
oimo_common_MathUtil.cos = function(x) {
	return Math.cos(x);
};
oimo_common_MathUtil.tan = function(x) {
	return Math.tan(x);
};
oimo_common_MathUtil.asin = function(x) {
	return Math.asin(x);
};
oimo_common_MathUtil.acos = function(x) {
	return Math.acos(x);
};
oimo_common_MathUtil.atan = function(x) {
	return Math.atan(x);
};
oimo_common_MathUtil.safeAsin = function(x) {
	if(x <= -1) {
		return -1.570796326794895;
	}
	if(x >= 1) {
		return 1.570796326794895;
	}
	return Math.asin(x);
};
oimo_common_MathUtil.safeAcos = function(x) {
	if(x <= -1) {
		return 3.14159265358979;
	}
	if(x >= 1) {
		return 0;
	}
	return Math.acos(x);
};
oimo_common_MathUtil.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
oimo_common_MathUtil.sqrt = function(x) {
	return Math.sqrt(x);
};
oimo_common_MathUtil.clamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
oimo_common_MathUtil.rand = function() {
	return Math.random();
};
oimo_common_MathUtil.randIn = function(min,max) {
	return min + Math.random() * (max - min);
};
oimo_common_MathUtil.randVec3In = function(min,max) {
	return new oimo_common_Vec3(min + Math.random() * (max - min),min + Math.random() * (max - min),min + Math.random() * (max - min));
};
oimo_common_MathUtil.randVec3 = function() {
	return new oimo_common_Vec3(-1 + Math.random() * 2,-1 + Math.random() * 2,-1 + Math.random() * 2);
};
var oimo_common_Pool = function() {
	var this1 = new Array(256);
	this.stackVec3 = this1;
	this.sizeVec3 = 0;
	var this1 = new Array(256);
	this.stackMat3 = this1;
	this.sizeMat3 = 0;
	var this1 = new Array(256);
	this.stackMat4 = this1;
	this.sizeMat4 = 0;
	var this1 = new Array(256);
	this.stackQuat = this1;
	this.sizeQuat = 0;
};
oimo_common_Pool.__name__ = "oimo.common.Pool";
oimo_common_Pool.prototype = {
	vec3: function() {
		if(this.sizeVec3 == 0) {
			return new oimo_common_Vec3();
		} else {
			return this.stackVec3[--this.sizeVec3];
		}
	}
	,mat3: function() {
		if(this.sizeMat3 == 0) {
			return new oimo_common_Mat3();
		} else {
			return this.stackMat3[--this.sizeMat3];
		}
	}
	,mat4: function() {
		if(this.sizeMat4 == 0) {
			return new oimo_common_Mat4();
		} else {
			return this.stackMat4[--this.sizeMat4];
		}
	}
	,quat: function() {
		if(this.sizeQuat == 0) {
			return new oimo_common_Quat();
		} else {
			return this.stackQuat[--this.sizeQuat];
		}
	}
	,dispose: function(vec3,mat3,mat4,quat) {
		if(vec3 != null) {
			vec3.zero();
			if(this.sizeVec3 == this.stackVec3.length) {
				var newLength = this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackVec3[i];
					this.stackVec3[i] = null;
				}
				this.stackVec3 = newArray;
			}
			this.stackVec3[this.sizeVec3++] = vec3;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(this.sizeMat3 == this.stackMat3.length) {
				var newLength = this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackMat3[i];
					this.stackMat3[i] = null;
				}
				this.stackMat3 = newArray;
			}
			this.stackMat3[this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(this.sizeMat4 == this.stackMat4.length) {
				var newLength = this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackMat4[i];
					this.stackMat4[i] = null;
				}
				this.stackMat4 = newArray;
			}
			this.stackMat4[this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(this.sizeQuat == this.stackQuat.length) {
				var newLength = this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.stackQuat[i];
					this.stackQuat[i] = null;
				}
				this.stackQuat = newArray;
			}
			this.stackQuat[this.sizeQuat++] = quat;
		}
	}
	,disposeVec3: function(v) {
		v.zero();
		if(this.sizeVec3 == this.stackVec3.length) {
			var newLength = this.sizeVec3 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.sizeVec3;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackVec3[i];
				this.stackVec3[i] = null;
			}
			this.stackVec3 = newArray;
		}
		this.stackVec3[this.sizeVec3++] = v;
	}
	,disposeMat3: function(m) {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		m.e00 = t00;
		m.e01 = t01;
		m.e02 = t02;
		m.e10 = t10;
		m.e11 = t11;
		m.e12 = t12;
		m.e20 = t20;
		m.e21 = t21;
		m.e22 = t22;
		if(this.sizeMat3 == this.stackMat3.length) {
			var newLength = this.sizeMat3 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.sizeMat3;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackMat3[i];
				this.stackMat3[i] = null;
			}
			this.stackMat3 = newArray;
		}
		this.stackMat3[this.sizeMat3++] = m;
	}
	,disposeMat4: function(m) {
		var t00 = 1;
		var t01 = 0;
		var t02 = 0;
		var t03 = 0;
		var t10 = 0;
		var t11 = 1;
		var t12 = 0;
		var t13 = 0;
		var t20 = 0;
		var t21 = 0;
		var t22 = 1;
		var t23 = 0;
		var t30 = 0;
		var t31 = 0;
		var t32 = 0;
		var t33 = 1;
		m.e00 = t00;
		m.e01 = t01;
		m.e02 = t02;
		m.e03 = t03;
		m.e10 = t10;
		m.e11 = t11;
		m.e12 = t12;
		m.e13 = t13;
		m.e20 = t20;
		m.e21 = t21;
		m.e22 = t22;
		m.e23 = t23;
		m.e30 = t30;
		m.e31 = t31;
		m.e32 = t32;
		m.e33 = t33;
		if(this.sizeMat4 == this.stackMat4.length) {
			var newLength = this.sizeMat4 << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.sizeMat4;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackMat4[i];
				this.stackMat4[i] = null;
			}
			this.stackMat4 = newArray;
		}
		this.stackMat4[this.sizeMat4++] = m;
	}
	,disposeQuat: function(q) {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		var tw = 1;
		q.x = tx;
		q.y = ty;
		q.z = tz;
		q.w = tw;
		if(this.sizeQuat == this.stackQuat.length) {
			var newLength = this.sizeQuat << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.sizeQuat;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.stackQuat[i];
				this.stackQuat[i] = null;
			}
			this.stackQuat = newArray;
		}
		this.stackQuat[this.sizeQuat++] = q;
	}
	,__class__: oimo_common_Pool
};
var oimo_common_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
	oimo_common_Quat.numCreations++;
};
oimo_common_Quat.__name__ = "oimo.common.Quat";
oimo_common_Quat.prototype = {
	identity: function() {
		var tx = 0;
		var ty = 0;
		var tz = 0;
		var tw = 1;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,init: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(q) {
		return new oimo_common_Quat(this.x + q.x,this.y + q.y,this.z + q.z,this.w + q.w);
	}
	,sub: function(q) {
		return new oimo_common_Quat(this.x - q.x,this.y - q.y,this.z - q.z,this.w - q.w);
	}
	,scale: function(s) {
		return new oimo_common_Quat(this.x * s,this.y * s,this.z * s,this.w * s);
	}
	,addEq: function(q) {
		var tx = this.x + q.x;
		var ty = this.y + q.y;
		var tz = this.z + q.z;
		var tw = this.w + q.w;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,subEq: function(q) {
		var tx = this.x - q.x;
		var ty = this.y - q.y;
		var tz = this.z - q.z;
		var tw = this.w - q.w;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,scaleEq: function(s) {
		var tx = this.x * s;
		var ty = this.y * s;
		var tz = this.z * s;
		var tw = this.w * s;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,normalized: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		return new oimo_common_Quat(this.x * invLen,this.y * invLen,this.z * invLen,this.w * invLen);
	}
	,normalize: function() {
		var invLen = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		var tx = this.x * invLen;
		var ty = this.y * invLen;
		var tz = this.z * invLen;
		var tw = this.w * invLen;
		this.x = tx;
		this.y = ty;
		this.z = tz;
		this.w = tw;
		return this;
	}
	,setArc: function(v1,v2) {
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var d = x1 * x2 + y1 * y2 + z1 * z2;
		this.w = Math.sqrt((1 + d) * 0.5);
		if(this.w == 0) {
			x2 = x1 * x1;
			y2 = y1 * y1;
			z2 = z1 * z1;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this.x = 0;
					this.y = z1 * d;
					this.z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this.z = 0;
					this.x = y1 * d;
					this.y = -x1 * d;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this.y = 0;
				this.z = x1 * d;
				this.x = -z1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this.z = 0;
				this.x = y1 * d;
				this.y = -x1 * d;
			}
			return this;
		}
		d = 0.5 / this.w;
		var cx = y1 * z2 - z1 * y2;
		var cy = z1 * x2 - x1 * z2;
		var cz = x1 * y2 - y1 * x2;
		this.x = cx * d;
		this.y = cy * d;
		this.z = cz * d;
		return this;
	}
	,slerp: function(q,t) {
		var qx;
		var qy;
		var qz;
		var qw;
		var d = this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
		if(d < 0) {
			d = -d;
			qx = -q.x;
			qy = -q.y;
			qz = -q.z;
			qw = -q.w;
		} else {
			qx = q.x;
			qy = q.y;
			qz = q.z;
			qw = q.w;
		}
		if(d > 0.999999) {
			var _this = new oimo_common_Quat(this.x + (qx - this.x) * t,this.y + (qy - this.y) * t,this.z + (qz - this.z) * t,this.w + (qw - this.w) * t);
			var invLen = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z + _this.w * _this.w);
			if(invLen > 0) {
				invLen = 1 / invLen;
			}
			var tx = _this.x * invLen;
			var ty = _this.y * invLen;
			var tz = _this.z * invLen;
			var tw = _this.w * invLen;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			_this.w = tw;
			return _this;
		}
		var theta = t * Math.acos(d);
		qx -= this.x * d;
		qy -= this.y * d;
		qz -= this.z * d;
		qw -= this.w * d;
		var invLen = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
		qx *= invLen;
		qy *= invLen;
		qz *= invLen;
		qw *= invLen;
		var sin = Math.sin(theta);
		var cos = Math.cos(theta);
		return new oimo_common_Quat(this.x * cos + qx * sin,this.y * cos + qy * sin,this.z * cos + qz * sin,this.w * cos + qw * sin);
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	}
	,clone: function() {
		return new oimo_common_Quat(this.x,this.y,this.z,this.w);
	}
	,fromMat3: function(m) {
		var e00 = m.e00;
		var e11 = m.e11;
		var e22 = m.e22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			this.w = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e21 - m.e12) * s;
			this.y = (m.e02 - m.e20) * s;
			this.z = (m.e10 - m.e01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				this.x = 0.5 * s;
				s = 0.5 / s;
				this.y = (m.e01 + m.e10) * s;
				this.z = (m.e02 + m.e20) * s;
				this.w = (m.e21 - m.e12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				this.z = 0.5 * s;
				s = 0.5 / s;
				this.x = (m.e02 + m.e20) * s;
				this.y = (m.e12 + m.e21) * s;
				this.w = (m.e10 - m.e01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			this.y = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e01 + m.e10) * s;
			this.z = (m.e12 + m.e21) * s;
			this.w = (m.e02 - m.e20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			this.z = 0.5 * s;
			s = 0.5 / s;
			this.x = (m.e02 + m.e20) * s;
			this.y = (m.e12 + m.e21) * s;
			this.w = (m.e10 - m.e01) * s;
		}
		return this;
	}
	,toMat3: function() {
		var _this = new oimo_common_Mat3();
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this.e00 = 1 - yy - zz;
		_this.e01 = xy - wz;
		_this.e02 = xz + wy;
		_this.e10 = xy + wz;
		_this.e11 = 1 - xx - zz;
		_this.e12 = yz - wx;
		_this.e20 = xz - wy;
		_this.e21 = yz + wx;
		_this.e22 = 1 - xx - yy;
		return _this;
	}
	,toString: function() {
		return "Quat[" + (this.x > 0 ? (this.x * 10000000 + 0.5 | 0) / 10000000 : (this.x * 10000000 - 0.5 | 0) / 10000000) + " i,\n" + "    " + (this.y > 0 ? (this.y * 10000000 + 0.5 | 0) / 10000000 : (this.y * 10000000 - 0.5 | 0) / 10000000) + " j,\n" + "    " + (this.z > 0 ? (this.z * 10000000 + 0.5 | 0) / 10000000 : (this.z * 10000000 - 0.5 | 0) / 10000000) + " k,\n" + "    " + (this.w > 0 ? (this.w * 10000000 + 0.5 | 0) / 10000000 : (this.w * 10000000 - 0.5 | 0) / 10000000) + "]";
	}
	,__class__: oimo_common_Quat
};
var oimo_dynamics_Contact = function() {
	this._next = null;
	this._prev = null;
	this._link1 = new oimo_dynamics_ContactLink();
	this._link2 = new oimo_dynamics_ContactLink();
	this._s1 = null;
	this._s2 = null;
	this._b1 = null;
	this._b2 = null;
	this._detector = null;
	this._cachedDetectorData = new oimo_collision_narrowphase_detector_CachedDetectorData();
	this._detectorResult = new oimo_collision_narrowphase_DetectorResult();
	this._latest = false;
	this._shouldBeSkipped = false;
	this._manifold = new oimo_dynamics_constraint_contact_Manifold();
	this._updater = new oimo_dynamics_constraint_contact_ManifoldUpdater(this._manifold);
	this._contactConstraint = new oimo_dynamics_constraint_contact_ContactConstraint(this._manifold);
	this._touching = false;
};
oimo_dynamics_Contact.__name__ = "oimo.dynamics.Contact";
oimo_dynamics_Contact.prototype = {
	_updateManifold: function() {
		if(this._detector == null) {
			return;
		}
		var ptouching = this._touching;
		var result = this._detectorResult;
		this._detector.detect(result,this._s1._geom,this._s2._geom,this._s1._transform,this._s2._transform,this._cachedDetectorData);
		var num = result.numPoints;
		this._touching = num > 0;
		if(this._touching) {
			this._manifold._buildBasis(result.normal);
			if(result.getMaxDepth() > oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold) {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm;
			} else {
				this._contactConstraint._positionCorrectionAlgorithm = oimo_common_Setting.defaultContactPositionCorrectionAlgorithm;
			}
			if(result.incremental) {
				this._updater.incrementalUpdate(result,this._b1._transform,this._b2._transform);
			} else {
				this._updater.totalUpdate(result,this._b1._transform,this._b2._transform);
			}
		} else {
			this._manifold._clear();
		}
		if(this._touching && !ptouching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.beginContact(this);
			}
			if(cc2 != null) {
				cc2.beginContact(this);
			}
		}
		if(!this._touching && ptouching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.endContact(this);
			}
			if(cc2 != null) {
				cc2.endContact(this);
			}
		}
		if(this._touching) {
			var cc1 = this._s1._contactCallback;
			var cc2 = this._s2._contactCallback;
			if(cc1 == cc2) {
				cc2 = null;
			}
			if(cc1 != null) {
				cc1.preSolve(this);
			}
			if(cc2 != null) {
				cc2.preSolve(this);
			}
		}
	}
	,_postSolve: function() {
		var cc1 = this._s1._contactCallback;
		var cc2 = this._s2._contactCallback;
		if(cc1 == cc2) {
			cc2 = null;
		}
		if(cc1 != null) {
			cc1.postSolve(this);
		}
		if(cc2 != null) {
			cc2.postSolve(this);
		}
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,isTouching: function() {
		return this._touching;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,getContactConstraint: function() {
		return this._contactConstraint;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_Contact
};
var oimo_dynamics_ContactLink = function() {
	this._prev = null;
	this._next = null;
	this._contact = null;
	this._other = null;
};
oimo_dynamics_ContactLink.__name__ = "oimo.dynamics.ContactLink";
oimo_dynamics_ContactLink.prototype = {
	getContact: function() {
		return this._contact;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_ContactLink
};
var oimo_dynamics_ContactManager = function(broadPhase) {
	this._broadPhase = broadPhase;
	this._collisionMatrix = new oimo_collision_narrowphase_CollisionMatrix();
	this._numContacts = 0;
};
oimo_dynamics_ContactManager.__name__ = "oimo.dynamics.ContactManager";
oimo_dynamics_ContactManager.prototype = {
	createContacts: function() {
		var pp = this._broadPhase._proxyPairList;
		while(pp != null) {
			var n = pp._next;
			while(true) {
				var s1;
				var s2;
				if(pp._p1._id < pp._p2._id) {
					s1 = pp._p1.userData;
					s2 = pp._p2.userData;
				} else {
					s1 = pp._p2.userData;
					s2 = pp._p1.userData;
				}
				if(!this.shouldCollide(s1,s2)) {
					break;
				}
				var b1 = s1._rigidBody;
				var b2 = s2._rigidBody;
				var n1 = b1._numContactLinks;
				var n2 = b2._numContactLinks;
				var l;
				if(n1 < n2) {
					l = b1._contactLinkList;
				} else {
					l = b2._contactLinkList;
				}
				var id1 = s1._id;
				var id2 = s2._id;
				var found = false;
				while(l != null) {
					var n3 = l._next;
					var c = l._contact;
					if(c._s1._id == id1 && c._s2._id == id2) {
						c._latest = true;
						found = true;
						break;
					}
					l = n3;
				}
				if(!found) {
					var first = this._contactPool;
					if(first != null) {
						this._contactPool = first._next;
						first._next = null;
					} else {
						first = new oimo_dynamics_Contact();
					}
					var c1 = first;
					if(this._contactList == null) {
						this._contactList = c1;
						this._contactListLast = c1;
					} else {
						this._contactListLast._next = c1;
						c1._prev = this._contactListLast;
						this._contactListLast = c1;
					}
					c1._latest = true;
					var detector = this._collisionMatrix.detectors[s1._geom._type][s2._geom._type];
					c1._s1 = s1;
					c1._s2 = s2;
					c1._b1 = s1._rigidBody;
					c1._b2 = s2._rigidBody;
					c1._touching = false;
					if(c1._b1._contactLinkList == null) {
						c1._b1._contactLinkList = c1._link1;
						c1._b1._contactLinkListLast = c1._link1;
					} else {
						c1._b1._contactLinkListLast._next = c1._link1;
						c1._link1._prev = c1._b1._contactLinkListLast;
						c1._b1._contactLinkListLast = c1._link1;
					}
					if(c1._b2._contactLinkList == null) {
						c1._b2._contactLinkList = c1._link2;
						c1._b2._contactLinkListLast = c1._link2;
					} else {
						c1._b2._contactLinkListLast._next = c1._link2;
						c1._link2._prev = c1._b2._contactLinkListLast;
						c1._b2._contactLinkListLast = c1._link2;
					}
					c1._b1._numContactLinks++;
					c1._b2._numContactLinks++;
					c1._link1._other = c1._b2;
					c1._link2._other = c1._b1;
					c1._link1._contact = c1;
					c1._link2._contact = c1;
					c1._detector = detector;
					var _this = c1._contactConstraint;
					_this._s1 = s1;
					_this._s2 = s2;
					_this._b1 = _this._s1._rigidBody;
					_this._b2 = _this._s2._rigidBody;
					_this._tf1 = _this._b1._transform;
					_this._tf2 = _this._b2._transform;
					this._numContacts++;
				}
				if(!false) {
					break;
				}
			}
			pp = n;
		}
	}
	,destroyOutdatedContacts: function() {
		var incremental = this._broadPhase._incremental;
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			while(true) {
				if(c._latest) {
					c._latest = false;
					c._shouldBeSkipped = false;
					break;
				}
				if(!incremental) {
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this = c._contactConstraint;
					_this._s1 = null;
					_this._s2 = null;
					_this._b1 = null;
					_this._b2 = null;
					_this._tf1 = null;
					_this._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				var s1 = c._s1;
				var s2 = c._s2;
				var r1 = s1._rigidBody;
				var r2 = s2._rigidBody;
				var active1 = !r1._sleeping && r1._type != 1;
				var active2 = !r2._sleeping && r2._type != 1;
				if(!active1 && !active2) {
					c._shouldBeSkipped = true;
					break;
				}
				var aabb1 = s1._aabb;
				var aabb2 = s2._aabb;
				var proxy1 = s1._proxy;
				var proxy2 = s2._proxy;
				if(!(proxy1._aabbMinX < proxy2._aabbMaxX && proxy1._aabbMaxX > proxy2._aabbMinX && proxy1._aabbMinY < proxy2._aabbMaxY && proxy1._aabbMaxY > proxy2._aabbMinY && proxy1._aabbMinZ < proxy2._aabbMaxZ && proxy1._aabbMaxZ > proxy2._aabbMinZ) || !this.shouldCollide(s1,s2)) {
					var prev3 = c._prev;
					var next3 = c._next;
					if(prev3 != null) {
						prev3._next = next3;
					}
					if(next3 != null) {
						next3._prev = prev3;
					}
					if(c == this._contactList) {
						this._contactList = this._contactList._next;
					}
					if(c == this._contactListLast) {
						this._contactListLast = this._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc11 = c._s1._contactCallback;
						var cc21 = c._s2._contactCallback;
						if(cc11 == cc21) {
							cc21 = null;
						}
						if(cc11 != null) {
							cc11.endContact(c);
						}
						if(cc21 != null) {
							cc21.endContact(c);
						}
					}
					var prev4 = c._link1._prev;
					var next4 = c._link1._next;
					if(prev4 != null) {
						prev4._next = next4;
					}
					if(next4 != null) {
						next4._prev = prev4;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev5 = c._link2._prev;
					var next5 = c._link2._next;
					if(prev5 != null) {
						prev5._next = next5;
					}
					if(next5 != null) {
						next5._prev = prev5;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this1 = c._contactConstraint;
					_this1._s1 = null;
					_this1._s2 = null;
					_this1._b1 = null;
					_this1._b2 = null;
					_this1._tf1 = null;
					_this1._tf2 = null;
					c._next = this._contactPool;
					this._contactPool = c;
					this._numContacts--;
					break;
				}
				var aabbOverlapping = aabb1._minX < aabb2._maxX && aabb1._maxX > aabb2._minX && aabb1._minY < aabb2._maxY && aabb1._maxY > aabb2._minY && aabb1._minZ < aabb2._maxZ && aabb1._maxZ > aabb2._minZ;
				c._shouldBeSkipped = !aabbOverlapping;
				if(!false) {
					break;
				}
			}
			c = n;
		}
	}
	,shouldCollide: function(s1,s2) {
		var r1 = s1._rigidBody;
		var r2 = s2._rigidBody;
		if(r1 == r2) {
			return false;
		}
		if(r1._type != 0 && r2._type != 0) {
			return false;
		}
		if((s1._collisionGroup & s2._collisionMask) == 0 || (s2._collisionGroup & s1._collisionMask) == 0) {
			return false;
		}
		var jl;
		var other;
		if(r1._numJointLinks < r2._numJointLinks) {
			jl = r1._jointLinkList;
			other = r2;
		} else {
			jl = r2._jointLinkList;
			other = r1;
		}
		while(jl != null) {
			var n = jl._next;
			if(jl._other == other && !jl._joint._allowCollision) {
				return false;
			}
			jl = n;
		}
		return true;
	}
	,_updateContacts: function() {
		this._broadPhase.collectPairs();
		this.createContacts();
		this.destroyOutdatedContacts();
	}
	,_postSolve: function() {
		var c = this._contactList;
		while(c != null) {
			var n = c._next;
			if(c._touching) {
				c._postSolve();
			}
			c = n;
		}
	}
	,getNumContacts: function() {
		return this._numContacts;
	}
	,getContactList: function() {
		return this._contactList;
	}
	,__class__: oimo_dynamics_ContactManager
};
var oimo_dynamics_Island = function() {
	var this1 = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this.rigidBodies = this1;
	var this1 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solvers = this1;
	var this1 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversSi = this1;
	var this1 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this.solversNgs = this1;
	this.numRigidBodies = 0;
	this.numSolvers = 0;
	this.numSolversSi = 0;
	this.numSolversNgs = 0;
};
oimo_dynamics_Island.__name__ = "oimo.dynamics.Island";
oimo_dynamics_Island.prototype = {
	_clear: function() {
		while(this.numRigidBodies > 0) this.rigidBodies[--this.numRigidBodies] = null;
		while(this.numSolvers > 0) this.solvers[--this.numSolvers] = null;
		while(this.numSolversSi > 0) this.solversSi[--this.numSolversSi] = null;
		while(this.numSolversNgs > 0) this.solversNgs[--this.numSolversNgs] = null;
	}
	,_addRigidBody: function(rigidBody) {
		if(this.numRigidBodies == this.rigidBodies.length) {
			var newLength = this.numRigidBodies << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.numRigidBodies;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.rigidBodies[i];
				this.rigidBodies[i] = null;
			}
			this.rigidBodies = newArray;
		}
		rigidBody._addedToIsland = true;
		this.rigidBodies[this.numRigidBodies++] = rigidBody;
	}
	,_addConstraintSolver: function(solver,positionCorrection) {
		if(this.numSolvers == this.solvers.length) {
			var newLength = this.numSolvers << 1;
			var this1 = new Array(newLength);
			var newArray = this1;
			var _g = 0;
			var _g1 = this.numSolvers;
			while(_g < _g1) {
				var i = _g++;
				newArray[i] = this.solvers[i];
				this.solvers[i] = null;
			}
			this.solvers = newArray;
		}
		solver._addedToIsland = true;
		this.solvers[this.numSolvers++] = solver;
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE) {
			if(this.numSolversSi == this.solversSi.length) {
				var newLength = this.numSolversSi << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.numSolversSi;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.solversSi[i];
					this.solversSi[i] = null;
				}
				this.solversSi = newArray;
			}
			this.solversSi[this.numSolversSi++] = solver;
		}
		if(positionCorrection == oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS) {
			if(this.numSolversNgs == this.solversNgs.length) {
				var newLength = this.numSolversNgs << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = this.numSolversNgs;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = this.solversNgs[i];
					this.solversNgs[i] = null;
				}
				this.solversNgs = newArray;
			}
			this.solversNgs[this.numSolversNgs++] = solver;
		}
	}
	,_stepSingleRigidBody: function(timeStep,rb) {
		var dt = timeStep.dt;
		var dst = rb._ptransform;
		var src = rb._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		rb._linearContactImpulseX = 0;
		rb._linearContactImpulseY = 0;
		rb._linearContactImpulseZ = 0;
		rb._angularContactImpulseX = 0;
		rb._angularContactImpulseY = 0;
		rb._angularContactImpulseZ = 0;
		if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
			rb._sleepTime += dt;
			if(rb._sleepTime > oimo_common_Setting.sleepingTimeThreshold) {
				rb._sleeping = true;
				rb._sleepTime = 0;
			}
		} else {
			rb._sleepTime = 0;
		}
		if(!rb._sleeping) {
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x = dt * rb._angularDamping;
				var x2 = x * x;
				var angScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var linAcc;
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAcc;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
			rb._integrate(dt);
			var s = rb._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = rb._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = rb._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,_step: function(timeStep,numVelocityIterations,numPositionIterations) {
		var dt = timeStep.dt;
		var sleepIsland = true;
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var i = _g++;
			var rb = this.rigidBodies[i];
			var dst = rb._ptransform;
			var src = rb._transform;
			dst._positionX = src._positionX;
			dst._positionY = src._positionY;
			dst._positionZ = src._positionZ;
			dst._rotation00 = src._rotation00;
			dst._rotation01 = src._rotation01;
			dst._rotation02 = src._rotation02;
			dst._rotation10 = src._rotation10;
			dst._rotation11 = src._rotation11;
			dst._rotation12 = src._rotation12;
			dst._rotation20 = src._rotation20;
			dst._rotation21 = src._rotation21;
			dst._rotation22 = src._rotation22;
			rb._linearContactImpulseX = 0;
			rb._linearContactImpulseY = 0;
			rb._linearContactImpulseZ = 0;
			rb._angularContactImpulseX = 0;
			rb._angularContactImpulseY = 0;
			rb._angularContactImpulseZ = 0;
			rb._sleeping = false;
			if(rb._autoSleep && rb._velX * rb._velX + rb._velY * rb._velY + rb._velZ * rb._velZ < oimo_common_Setting.sleepingVelocityThreshold * oimo_common_Setting.sleepingVelocityThreshold && rb._angVelX * rb._angVelX + rb._angVelY * rb._angVelY + rb._angVelZ * rb._angVelZ < oimo_common_Setting.sleepingAngularVelocityThreshold * oimo_common_Setting.sleepingAngularVelocityThreshold) {
				rb._sleepTime += dt;
			} else {
				rb._sleepTime = 0;
			}
			if(rb._sleepTime < oimo_common_Setting.sleepingTimeThreshold) {
				sleepIsland = false;
			}
			if(rb._type == 0) {
				var x = dt * rb._linearDamping;
				var x2 = x * x;
				var linScale = 1 / (1 + x + x2 * (0.5 + x * 0.16666666666666666 + x2 * 0.041666666666666664));
				var x1 = dt * rb._angularDamping;
				var x21 = x1 * x1;
				var angScale = 1 / (1 + x1 + x21 * (0.5 + x1 * 0.16666666666666666 + x21 * 0.041666666666666664));
				var linAcc;
				var linAccX;
				var linAccY;
				var linAccZ;
				var angAcc;
				var angAccX;
				var angAccY;
				var angAccZ;
				linAccX = this.gravityX * rb._gravityScale;
				linAccY = this.gravityY * rb._gravityScale;
				linAccZ = this.gravityZ * rb._gravityScale;
				linAccX += rb._forceX * rb._invMass;
				linAccY += rb._forceY * rb._invMass;
				linAccZ += rb._forceZ * rb._invMass;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = rb._invInertia00 * rb._torqueX + rb._invInertia01 * rb._torqueY + rb._invInertia02 * rb._torqueZ;
				__tmp__Y = rb._invInertia10 * rb._torqueX + rb._invInertia11 * rb._torqueY + rb._invInertia12 * rb._torqueZ;
				__tmp__Z = rb._invInertia20 * rb._torqueX + rb._invInertia21 * rb._torqueY + rb._invInertia22 * rb._torqueZ;
				angAccX = __tmp__X;
				angAccY = __tmp__Y;
				angAccZ = __tmp__Z;
				rb._velX += linAccX * dt;
				rb._velY += linAccY * dt;
				rb._velZ += linAccZ * dt;
				rb._velX *= linScale;
				rb._velY *= linScale;
				rb._velZ *= linScale;
				rb._angVelX += angAccX * dt;
				rb._angVelY += angAccY * dt;
				rb._angVelZ += angAccZ * dt;
				rb._angVelX *= angScale;
				rb._angVelY *= angScale;
				rb._angVelZ *= angScale;
			}
		}
		if(sleepIsland) {
			var _g = 0;
			var _g1 = this.numRigidBodies;
			while(_g < _g1) {
				var i = _g++;
				var rb = this.rigidBodies[i];
				rb._sleeping = true;
				rb._sleepTime = 0;
			}
			return;
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solvers[i];
			s.preSolveVelocity(timeStep);
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solvers[i];
			s.warmStart(timeStep);
		}
		var _g = 0;
		var _g1 = numVelocityIterations;
		while(_g < _g1) {
			var t = _g++;
			var _g2 = 0;
			var _g3 = this.numSolvers;
			while(_g2 < _g3) {
				var i = _g2++;
				var s = this.solvers[i];
				s.solveVelocity();
			}
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solvers[i];
			s.postSolveVelocity(timeStep);
		}
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var i = _g++;
			var rb = this.rigidBodies[i];
			rb._integrate(dt);
		}
		var _g = 0;
		var _g1 = this.numSolversSi;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solversSi[i];
			s.preSolvePosition(timeStep);
		}
		var _g = 0;
		var _g1 = numPositionIterations;
		while(_g < _g1) {
			var t = _g++;
			var _g2 = 0;
			var _g3 = this.numSolversSi;
			while(_g2 < _g3) {
				var i = _g2++;
				var s = this.solversSi[i];
				s.solvePositionSplitImpulse();
			}
		}
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var i = _g++;
			var rb = this.rigidBodies[i];
			rb._integratePseudoVelocity();
		}
		var _g = 0;
		var _g1 = this.numSolversNgs;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solversNgs[i];
			s.preSolvePosition(timeStep);
		}
		var _g = 0;
		var _g1 = numPositionIterations;
		while(_g < _g1) {
			var t = _g++;
			var _g2 = 0;
			var _g3 = this.numSolversNgs;
			while(_g2 < _g3) {
				var i = _g2++;
				var s = this.solversNgs[i];
				s.solvePositionNgs(timeStep);
			}
		}
		var _g = 0;
		var _g1 = this.numSolvers;
		while(_g < _g1) {
			var i = _g++;
			var s = this.solvers[i];
			s.postSolve();
		}
		var _g = 0;
		var _g1 = this.numRigidBodies;
		while(_g < _g1) {
			var i = _g++;
			var rb = this.rigidBodies[i];
			var s = rb._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = rb._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = rb._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,__class__: oimo_dynamics_Island
};
var oimo_dynamics_TimeStep = function() {
	this.dt = 0;
	this.invDt = 0;
	this.dtRatio = 1;
};
oimo_dynamics_TimeStep.__name__ = "oimo.dynamics.TimeStep";
oimo_dynamics_TimeStep.prototype = {
	__class__: oimo_dynamics_TimeStep
};
var oimo_dynamics_World = function(broadPhaseType,gravity) {
	if(broadPhaseType == null) {
		broadPhaseType = 2;
	}
	switch(broadPhaseType) {
	case 1:
		this._broadPhase = new oimo_collision_broadphase_bruteforce_BruteForceBroadPhase();
		break;
	case 2:
		this._broadPhase = new oimo_collision_broadphase_bvh_BvhBroadPhase();
		break;
	}
	this._contactManager = new oimo_dynamics_ContactManager(this._broadPhase);
	if(gravity == null) {
		gravity = new oimo_common_Vec3(0,-9.80665,0);
	}
	this._gravity = new oimo_common_Vec3(gravity.x,gravity.y,gravity.z);
	this._rigidBodyList = null;
	this._rigidBodyListLast = null;
	this._jointList = null;
	this._jointListLast = null;
	this._numRigidBodies = 0;
	this._numShapes = 0;
	this._numJoints = 0;
	this._numIslands = 0;
	this._numVelocityIterations = 10;
	this._numPositionIterations = 5;
	this._rayCastWrapper = new oimo_dynamics__$World_RayCastWrapper();
	this._convexCastWrapper = new oimo_dynamics__$World_ConvexCastWrapper();
	this._aabbTestWrapper = new oimo_dynamics__$World_AabbTestWrapper();
	this._island = new oimo_dynamics_Island();
	var this1 = new Array(oimo_common_Setting.islandInitialConstraintArraySize);
	this._solversInIslands = this1;
	var this1 = new Array(oimo_common_Setting.islandInitialRigidBodyArraySize);
	this._rigidBodyStack = this1;
	this._timeStep = new oimo_dynamics_TimeStep();
	this._pool = new oimo_common_Pool();
	this._shapeIdCount = 0;
};
oimo_dynamics_World.__name__ = "oimo.dynamics.World";
oimo_dynamics_World.prototype = {
	_updateContacts: function() {
		var st = HxOverrides.now() / 1000;
		this._contactManager._updateContacts();
		var en = HxOverrides.now() / 1000;
		oimo_dynamics_common_Performance.broadPhaseCollisionTime = (en - st) * 1000;
		var st = HxOverrides.now() / 1000;
		var c = this._contactManager._contactList;
		while(c != null) {
			var n = c._next;
			if(!c._shouldBeSkipped) {
				c._updateManifold();
			}
			c = n;
		}
		var en = HxOverrides.now() / 1000;
		oimo_dynamics_common_Performance.narrowPhaseCollisionTime = (en - st) * 1000;
	}
	,_solveIslands: function() {
		var st = HxOverrides.now() / 1000;
		if(oimo_common_Setting.disableSleeping) {
			var b = this._rigidBodyList;
			while(b != null) {
				var n = b._next;
				b._sleeping = false;
				b._sleepTime = 0;
				b = n;
			}
		}
		if(this._rigidBodyStack.length < this._numRigidBodies) {
			var newStackSize = this._rigidBodyStack.length << 1;
			while(newStackSize < this._numRigidBodies) newStackSize <<= 1;
			var this1 = new Array(newStackSize);
			this._rigidBodyStack = this1;
		}
		this._numIslands = 0;
		var _this = this._island;
		var v = this._gravity;
		_this.gravityX = v.x;
		_this.gravityY = v.y;
		_this.gravityZ = v.z;
		var b = this._rigidBodyList;
		this._numSolversInIslands = 0;
		while(b != null) {
			var n = b._next;
			while(!(b._addedToIsland || b._sleeping || b._type == 1)) {
				if(b._numContactLinks == 0 && b._numJointLinks == 0) {
					this._island._stepSingleRigidBody(this._timeStep,b);
					this._numIslands++;
					break;
				}
				this.buildIsland(b);
				this._island._step(this._timeStep,this._numVelocityIterations,this._numPositionIterations);
				this._island._clear();
				this._numIslands++;
				if(!false) {
					break;
				}
			}
			b = n;
		}
		this._contactManager._postSolve();
		b = this._rigidBodyList;
		while(b != null) {
			var n = b._next;
			b._addedToIsland = false;
			b = n;
		}
		b = this._rigidBodyList;
		while(b != null) {
			var n = b._next;
			b._forceX = 0;
			b._forceY = 0;
			b._forceZ = 0;
			b._torqueX = 0;
			b._torqueY = 0;
			b._torqueZ = 0;
			b = n;
		}
		while(this._numSolversInIslands > 0) {
			this._solversInIslands[--this._numSolversInIslands]._addedToIsland = false;
			this._solversInIslands[this._numSolversInIslands] = null;
		}
		var en = HxOverrides.now() / 1000;
		oimo_dynamics_common_Performance.dynamicsTime = (en - st) * 1000;
	}
	,buildIsland: function(base) {
		var stackCount = 1;
		this._island._addRigidBody(base);
		this._rigidBodyStack[0] = base;
		while(stackCount > 0) {
			var rb = this._rigidBodyStack[--stackCount];
			this._rigidBodyStack[stackCount] = null;
			if(rb._type == 1) {
				continue;
			}
			var cl = rb._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var cc = cl._contact._contactConstraint;
				var ccs = cl._contact._contactConstraint._solver;
				if(cc.isTouching() && !ccs._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newLength = this._numSolversInIslands << 1;
						var this1 = new Array(newLength);
						var newArray = this1;
						var _g = 0;
						var _g1 = this._numSolversInIslands;
						while(_g < _g1) {
							var i = _g++;
							newArray[i] = this._solversInIslands[i];
							this._solversInIslands[i] = null;
						}
						this._solversInIslands = newArray;
					}
					this._solversInIslands[this._numSolversInIslands++] = ccs;
					this._island._addConstraintSolver(ccs,cc._positionCorrectionAlgorithm);
					var other = cl._other;
					if(!other._addedToIsland) {
						this._island._addRigidBody(other);
						this._rigidBodyStack[stackCount++] = other;
					}
				}
				cl = n;
			}
			var jl = rb._jointLinkList;
			while(jl != null) {
				var n1 = jl._next;
				var j = jl._joint;
				var js = j._solver;
				if(!js._addedToIsland) {
					if(this._solversInIslands.length == this._numSolversInIslands) {
						var newLength1 = this._numSolversInIslands << 1;
						var this2 = new Array(newLength1);
						var newArray1 = this2;
						var _g2 = 0;
						var _g3 = this._numSolversInIslands;
						while(_g2 < _g3) {
							var i1 = _g2++;
							newArray1[i1] = this._solversInIslands[i1];
							this._solversInIslands[i1] = null;
						}
						this._solversInIslands = newArray1;
					}
					this._solversInIslands[this._numSolversInIslands++] = js;
					this._island._addConstraintSolver(js,j._positionCorrectionAlgorithm);
					var other1 = jl._other;
					if(!other1._addedToIsland) {
						this._island._addRigidBody(other1);
						this._rigidBodyStack[stackCount++] = other1;
					}
				}
				jl = n1;
			}
		}
	}
	,_drawBvh: function(d,tree) {
		if(d.drawBvh) {
			this._drawBvhNode(d,tree._root,0,d.style.bvhNodeColor);
		}
	}
	,_drawBvhNode: function(d,node,level,color) {
		if(node == null) {
			return;
		}
		if(level >= d.drawBvhMinLevel && level <= d.drawBvhMaxLevel) {
			var _this = this._pool;
			var min = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			var _this = this._pool;
			var max = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			var v = min;
			v.x = node._aabbMinX;
			v.y = node._aabbMinY;
			v.z = node._aabbMinZ;
			var v = max;
			v.x = node._aabbMaxX;
			v.y = node._aabbMaxY;
			v.z = node._aabbMaxZ;
			d.aabb(min,max,color);
			var _this = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(min != null) {
				min.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = min;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(max != null) {
				max.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = max;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		}
		this._drawBvhNode(d,node._children[0],level + 1,color);
		this._drawBvhNode(d,node._children[1],level + 1,color);
	}
	,_drawRigidBodies: function(d) {
		var style = d.style;
		var r = this._rigidBodyList;
		while(r != null) {
			var n = r._next;
			if(d.drawBases) {
				var style1 = d.style;
				d.basis(r._transform,style1.basisLength,style1.basisColorX,style1.basisColorY,style1.basisColorZ);
			}
			var shapeColor = null;
			var isDynamic = r._type == 0;
			if(!isDynamic) {
				shapeColor = r._type == 2 ? style.kinematicShapeColor : style.staticShapeColor;
			}
			var s = r._shapeList;
			while(s != null) {
				var n1 = s._next;
				if(isDynamic) {
					if((s._id & 1) == 0) {
						shapeColor = r._sleeping ? style.sleepingShapeColor1 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor1 : style.shapeColor1;
					} else {
						shapeColor = r._sleeping ? style.sleepingShapeColor2 : r._sleepTime > oimo_common_Setting.sleepingTimeThreshold ? style.sleepyShapeColor2 : style.shapeColor2;
					}
				}
				if(d.drawShapes) {
					var geom = s._geom;
					var tf = s._transform;
					switch(geom._type) {
					case 0:
						d.sphere(tf,geom._radius,shapeColor);
						break;
					case 1:
						var g = geom;
						var _this = this._pool;
						var hx = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
						var v = hx;
						v.x = g._halfExtentsX;
						v.y = g._halfExtentsY;
						v.z = g._halfExtentsZ;
						d.box(tf,hx,shapeColor);
						var _this1 = this._pool;
						var mat3 = null;
						var mat4 = null;
						var quat = null;
						if(hx != null) {
							hx.zero();
							if(_this1.sizeVec3 == _this1.stackVec3.length) {
								var newLength = _this1.sizeVec3 << 1;
								var this1 = new Array(newLength);
								var newArray = this1;
								var _g = 0;
								var _g1 = _this1.sizeVec3;
								while(_g < _g1) {
									var i = _g++;
									newArray[i] = _this1.stackVec3[i];
									_this1.stackVec3[i] = null;
								}
								_this1.stackVec3 = newArray;
							}
							_this1.stackVec3[_this1.sizeVec3++] = hx;
						}
						if(mat3 != null) {
							var t00 = 1;
							var t01 = 0;
							var t02 = 0;
							var t10 = 0;
							var t11 = 1;
							var t12 = 0;
							var t20 = 0;
							var t21 = 0;
							var t22 = 1;
							mat3.e00 = t00;
							mat3.e01 = t01;
							mat3.e02 = t02;
							mat3.e10 = t10;
							mat3.e11 = t11;
							mat3.e12 = t12;
							mat3.e20 = t20;
							mat3.e21 = t21;
							mat3.e22 = t22;
							if(_this1.sizeMat3 == _this1.stackMat3.length) {
								var newLength1 = _this1.sizeMat3 << 1;
								var this2 = new Array(newLength1);
								var newArray1 = this2;
								var _g2 = 0;
								var _g3 = _this1.sizeMat3;
								while(_g2 < _g3) {
									var i1 = _g2++;
									newArray1[i1] = _this1.stackMat3[i1];
									_this1.stackMat3[i1] = null;
								}
								_this1.stackMat3 = newArray1;
							}
							_this1.stackMat3[_this1.sizeMat3++] = mat3;
						}
						if(mat4 != null) {
							var t001 = 1;
							var t011 = 0;
							var t021 = 0;
							var t03 = 0;
							var t101 = 0;
							var t111 = 1;
							var t121 = 0;
							var t13 = 0;
							var t201 = 0;
							var t211 = 0;
							var t221 = 1;
							var t23 = 0;
							var t30 = 0;
							var t31 = 0;
							var t32 = 0;
							var t33 = 1;
							mat4.e00 = t001;
							mat4.e01 = t011;
							mat4.e02 = t021;
							mat4.e03 = t03;
							mat4.e10 = t101;
							mat4.e11 = t111;
							mat4.e12 = t121;
							mat4.e13 = t13;
							mat4.e20 = t201;
							mat4.e21 = t211;
							mat4.e22 = t221;
							mat4.e23 = t23;
							mat4.e30 = t30;
							mat4.e31 = t31;
							mat4.e32 = t32;
							mat4.e33 = t33;
							if(_this1.sizeMat4 == _this1.stackMat4.length) {
								var newLength2 = _this1.sizeMat4 << 1;
								var this3 = new Array(newLength2);
								var newArray2 = this3;
								var _g4 = 0;
								var _g5 = _this1.sizeMat4;
								while(_g4 < _g5) {
									var i2 = _g4++;
									newArray2[i2] = _this1.stackMat4[i2];
									_this1.stackMat4[i2] = null;
								}
								_this1.stackMat4 = newArray2;
							}
							_this1.stackMat4[_this1.sizeMat4++] = mat4;
						}
						if(quat != null) {
							var tx = 0;
							var ty = 0;
							var tz = 0;
							var tw = 1;
							quat.x = tx;
							quat.y = ty;
							quat.z = tz;
							quat.w = tw;
							if(_this1.sizeQuat == _this1.stackQuat.length) {
								var newLength3 = _this1.sizeQuat << 1;
								var this4 = new Array(newLength3);
								var newArray3 = this4;
								var _g6 = 0;
								var _g7 = _this1.sizeQuat;
								while(_g6 < _g7) {
									var i3 = _g6++;
									newArray3[i3] = _this1.stackQuat[i3];
									_this1.stackQuat[i3] = null;
								}
								_this1.stackQuat = newArray3;
							}
							_this1.stackQuat[_this1.sizeQuat++] = quat;
						}
						break;
					case 2:
						var g1 = geom;
						d.cylinder(tf,g1._radius,g1._halfHeight,shapeColor);
						break;
					case 3:
						var g2 = geom;
						d.cone(tf,g2._radius,g2._halfHeight,shapeColor);
						break;
					case 4:
						var g3 = geom;
						d.capsule(tf,g3._radius,g3._halfHeight,shapeColor);
						break;
					case 5:
						var g4 = geom;
						var n2 = g4._numVertices;
						var _this2 = this._pool;
						var v1 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
						var _this3 = this._pool;
						var v2 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
						var _this4 = this._pool;
						var v3 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var v12 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var v13 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var normal = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var m = _this8.sizeMat3 == 0 ? new oimo_common_Mat3() : _this8.stackMat3[--_this8.sizeMat3];
						var _this9 = this._pool;
						var o = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
						var m1 = m;
						m1.e00 = tf._rotation00;
						m1.e01 = tf._rotation01;
						m1.e02 = tf._rotation02;
						m1.e10 = tf._rotation10;
						m1.e11 = tf._rotation11;
						m1.e12 = tf._rotation12;
						m1.e20 = tf._rotation20;
						m1.e21 = tf._rotation21;
						m1.e22 = tf._rotation22;
						var v4 = o;
						v4.x = tf._positionX;
						v4.y = tf._positionY;
						v4.z = tf._positionZ;
						var _g8 = 0;
						var _g9 = n2;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var _this10 = g4._tmpVertices[i4];
							var v5 = g4._vertices[i4];
							_this10.x = v5.x;
							_this10.y = v5.y;
							_this10.z = v5.z;
							var _this11 = _this10;
							var tx1 = _this11.x * m.e00 + _this11.y * m.e01 + _this11.z * m.e02;
							var ty1 = _this11.x * m.e10 + _this11.y * m.e11 + _this11.z * m.e12;
							var tz1 = _this11.x * m.e20 + _this11.y * m.e21 + _this11.z * m.e22;
							_this11.x = tx1;
							_this11.y = ty1;
							_this11.z = tz1;
							var _this12 = _this11;
							var tx2 = _this12.x + o.x;
							var ty2 = _this12.y + o.y;
							var tz2 = _this12.z + o.z;
							_this12.x = tx2;
							_this12.y = ty2;
							_this12.z = tz2;
						}
						if(n2 > 30) {
							var _g10 = 0;
							var _g11 = n2;
							while(_g10 < _g11) {
								var i5 = _g10++;
								var v6 = g4._tmpVertices[i5];
								v1.x = v6.x;
								v1.y = v6.y;
								v1.z = v6.z;
								var v7 = g4._tmpVertices[(i5 + 1) % n2];
								v2.x = v7.x;
								v2.y = v7.y;
								v2.z = v7.z;
								d.line(v1,v2,shapeColor);
							}
						} else if(this._debugDraw.wireframe || n2 > 10) {
							var _g12 = 0;
							var _g13 = n2;
							while(_g12 < _g13) {
								var i6 = _g12++;
								var v8 = g4._tmpVertices[i6];
								v1.x = v8.x;
								v1.y = v8.y;
								v1.z = v8.z;
								var _g14 = 0;
								var _g15 = i6;
								while(_g14 < _g15) {
									var j = _g14++;
									var v9 = g4._tmpVertices[j];
									v2.x = v9.x;
									v2.y = v9.y;
									v2.z = v9.z;
									d.line(v1,v2,shapeColor);
								}
							}
						} else {
							var _g16 = 0;
							var _g17 = n2;
							while(_g16 < _g17) {
								var i7 = _g16++;
								var v10 = g4._tmpVertices[i7];
								v1.x = v10.x;
								v1.y = v10.y;
								v1.z = v10.z;
								var _g18 = 0;
								var _g19 = i7;
								while(_g18 < _g19) {
									var j1 = _g18++;
									var v11 = g4._tmpVertices[j1];
									v2.x = v11.x;
									v2.y = v11.y;
									v2.z = v11.z;
									var _g20 = 0;
									var _g21 = j1;
									while(_g20 < _g21) {
										var k = _g20++;
										var v14 = g4._tmpVertices[k];
										v3.x = v14.x;
										v3.y = v14.y;
										v3.z = v14.z;
										v12.x = v2.x;
										v12.y = v2.y;
										v12.z = v2.z;
										var _this13 = v12;
										var tx3 = _this13.x - v1.x;
										var ty3 = _this13.y - v1.y;
										var tz3 = _this13.z - v1.z;
										_this13.x = tx3;
										_this13.y = ty3;
										_this13.z = tz3;
										v13.x = v3.x;
										v13.y = v3.y;
										v13.z = v3.z;
										var _this14 = v13;
										var tx4 = _this14.x - v1.x;
										var ty4 = _this14.y - v1.y;
										var tz4 = _this14.z - v1.z;
										_this14.x = tx4;
										_this14.y = ty4;
										_this14.z = tz4;
										normal.x = v12.x;
										normal.y = v12.y;
										normal.z = v12.z;
										var _this15 = normal;
										var tx5 = _this15.y * v13.z - _this15.z * v13.y;
										var ty5 = _this15.z * v13.x - _this15.x * v13.z;
										var tz5 = _this15.x * v13.y - _this15.y * v13.x;
										_this15.x = tx5;
										_this15.y = ty5;
										_this15.z = tz5;
										var _this16 = _this15;
										var invLen = Math.sqrt(_this16.x * _this16.x + _this16.y * _this16.y + _this16.z * _this16.z);
										if(invLen > 0) {
											invLen = 1 / invLen;
										}
										var tx6 = _this16.x * invLen;
										var ty6 = _this16.y * invLen;
										var tz6 = _this16.z * invLen;
										_this16.x = tx6;
										_this16.y = ty6;
										_this16.z = tz6;
										d.triangle(v1,v2,v3,normal,normal,normal,shapeColor);
										var tx7 = -normal.x;
										var ty7 = -normal.y;
										var tz7 = -normal.z;
										normal.x = tx7;
										normal.y = ty7;
										normal.z = tz7;
										d.triangle(v1,v3,v2,normal,normal,normal,shapeColor);
									}
								}
							}
						}
						var _this17 = this._pool;
						var mat31 = null;
						var mat41 = null;
						var quat1 = null;
						if(v1 != null) {
							v1.zero();
							if(_this17.sizeVec3 == _this17.stackVec3.length) {
								var newLength4 = _this17.sizeVec3 << 1;
								var this5 = new Array(newLength4);
								var newArray4 = this5;
								var _g22 = 0;
								var _g23 = _this17.sizeVec3;
								while(_g22 < _g23) {
									var i8 = _g22++;
									newArray4[i8] = _this17.stackVec3[i8];
									_this17.stackVec3[i8] = null;
								}
								_this17.stackVec3 = newArray4;
							}
							_this17.stackVec3[_this17.sizeVec3++] = v1;
						}
						if(mat31 != null) {
							var t002 = 1;
							var t012 = 0;
							var t022 = 0;
							var t102 = 0;
							var t112 = 1;
							var t122 = 0;
							var t202 = 0;
							var t212 = 0;
							var t222 = 1;
							mat31.e00 = t002;
							mat31.e01 = t012;
							mat31.e02 = t022;
							mat31.e10 = t102;
							mat31.e11 = t112;
							mat31.e12 = t122;
							mat31.e20 = t202;
							mat31.e21 = t212;
							mat31.e22 = t222;
							if(_this17.sizeMat3 == _this17.stackMat3.length) {
								var newLength5 = _this17.sizeMat3 << 1;
								var this6 = new Array(newLength5);
								var newArray5 = this6;
								var _g24 = 0;
								var _g25 = _this17.sizeMat3;
								while(_g24 < _g25) {
									var i9 = _g24++;
									newArray5[i9] = _this17.stackMat3[i9];
									_this17.stackMat3[i9] = null;
								}
								_this17.stackMat3 = newArray5;
							}
							_this17.stackMat3[_this17.sizeMat3++] = mat31;
						}
						if(mat41 != null) {
							var t003 = 1;
							var t013 = 0;
							var t023 = 0;
							var t031 = 0;
							var t103 = 0;
							var t113 = 1;
							var t123 = 0;
							var t131 = 0;
							var t203 = 0;
							var t213 = 0;
							var t223 = 1;
							var t231 = 0;
							var t301 = 0;
							var t311 = 0;
							var t321 = 0;
							var t331 = 1;
							mat41.e00 = t003;
							mat41.e01 = t013;
							mat41.e02 = t023;
							mat41.e03 = t031;
							mat41.e10 = t103;
							mat41.e11 = t113;
							mat41.e12 = t123;
							mat41.e13 = t131;
							mat41.e20 = t203;
							mat41.e21 = t213;
							mat41.e22 = t223;
							mat41.e23 = t231;
							mat41.e30 = t301;
							mat41.e31 = t311;
							mat41.e32 = t321;
							mat41.e33 = t331;
							if(_this17.sizeMat4 == _this17.stackMat4.length) {
								var newLength6 = _this17.sizeMat4 << 1;
								var this7 = new Array(newLength6);
								var newArray6 = this7;
								var _g26 = 0;
								var _g27 = _this17.sizeMat4;
								while(_g26 < _g27) {
									var i10 = _g26++;
									newArray6[i10] = _this17.stackMat4[i10];
									_this17.stackMat4[i10] = null;
								}
								_this17.stackMat4 = newArray6;
							}
							_this17.stackMat4[_this17.sizeMat4++] = mat41;
						}
						if(quat1 != null) {
							var tx8 = 0;
							var ty8 = 0;
							var tz8 = 0;
							var tw1 = 1;
							quat1.x = tx8;
							quat1.y = ty8;
							quat1.z = tz8;
							quat1.w = tw1;
							if(_this17.sizeQuat == _this17.stackQuat.length) {
								var newLength7 = _this17.sizeQuat << 1;
								var this8 = new Array(newLength7);
								var newArray7 = this8;
								var _g28 = 0;
								var _g29 = _this17.sizeQuat;
								while(_g28 < _g29) {
									var i11 = _g28++;
									newArray7[i11] = _this17.stackQuat[i11];
									_this17.stackQuat[i11] = null;
								}
								_this17.stackQuat = newArray7;
							}
							_this17.stackQuat[_this17.sizeQuat++] = quat1;
						}
						var _this18 = this._pool;
						var mat32 = null;
						var mat42 = null;
						var quat2 = null;
						if(v2 != null) {
							v2.zero();
							if(_this18.sizeVec3 == _this18.stackVec3.length) {
								var newLength8 = _this18.sizeVec3 << 1;
								var this9 = new Array(newLength8);
								var newArray8 = this9;
								var _g30 = 0;
								var _g31 = _this18.sizeVec3;
								while(_g30 < _g31) {
									var i12 = _g30++;
									newArray8[i12] = _this18.stackVec3[i12];
									_this18.stackVec3[i12] = null;
								}
								_this18.stackVec3 = newArray8;
							}
							_this18.stackVec3[_this18.sizeVec3++] = v2;
						}
						if(mat32 != null) {
							var t004 = 1;
							var t014 = 0;
							var t024 = 0;
							var t104 = 0;
							var t114 = 1;
							var t124 = 0;
							var t204 = 0;
							var t214 = 0;
							var t224 = 1;
							mat32.e00 = t004;
							mat32.e01 = t014;
							mat32.e02 = t024;
							mat32.e10 = t104;
							mat32.e11 = t114;
							mat32.e12 = t124;
							mat32.e20 = t204;
							mat32.e21 = t214;
							mat32.e22 = t224;
							if(_this18.sizeMat3 == _this18.stackMat3.length) {
								var newLength9 = _this18.sizeMat3 << 1;
								var this10 = new Array(newLength9);
								var newArray9 = this10;
								var _g32 = 0;
								var _g33 = _this18.sizeMat3;
								while(_g32 < _g33) {
									var i13 = _g32++;
									newArray9[i13] = _this18.stackMat3[i13];
									_this18.stackMat3[i13] = null;
								}
								_this18.stackMat3 = newArray9;
							}
							_this18.stackMat3[_this18.sizeMat3++] = mat32;
						}
						if(mat42 != null) {
							var t005 = 1;
							var t015 = 0;
							var t025 = 0;
							var t032 = 0;
							var t105 = 0;
							var t115 = 1;
							var t125 = 0;
							var t132 = 0;
							var t205 = 0;
							var t215 = 0;
							var t225 = 1;
							var t232 = 0;
							var t302 = 0;
							var t312 = 0;
							var t322 = 0;
							var t332 = 1;
							mat42.e00 = t005;
							mat42.e01 = t015;
							mat42.e02 = t025;
							mat42.e03 = t032;
							mat42.e10 = t105;
							mat42.e11 = t115;
							mat42.e12 = t125;
							mat42.e13 = t132;
							mat42.e20 = t205;
							mat42.e21 = t215;
							mat42.e22 = t225;
							mat42.e23 = t232;
							mat42.e30 = t302;
							mat42.e31 = t312;
							mat42.e32 = t322;
							mat42.e33 = t332;
							if(_this18.sizeMat4 == _this18.stackMat4.length) {
								var newLength10 = _this18.sizeMat4 << 1;
								var this11 = new Array(newLength10);
								var newArray10 = this11;
								var _g34 = 0;
								var _g35 = _this18.sizeMat4;
								while(_g34 < _g35) {
									var i14 = _g34++;
									newArray10[i14] = _this18.stackMat4[i14];
									_this18.stackMat4[i14] = null;
								}
								_this18.stackMat4 = newArray10;
							}
							_this18.stackMat4[_this18.sizeMat4++] = mat42;
						}
						if(quat2 != null) {
							var tx9 = 0;
							var ty9 = 0;
							var tz9 = 0;
							var tw2 = 1;
							quat2.x = tx9;
							quat2.y = ty9;
							quat2.z = tz9;
							quat2.w = tw2;
							if(_this18.sizeQuat == _this18.stackQuat.length) {
								var newLength11 = _this18.sizeQuat << 1;
								var this12 = new Array(newLength11);
								var newArray11 = this12;
								var _g36 = 0;
								var _g37 = _this18.sizeQuat;
								while(_g36 < _g37) {
									var i15 = _g36++;
									newArray11[i15] = _this18.stackQuat[i15];
									_this18.stackQuat[i15] = null;
								}
								_this18.stackQuat = newArray11;
							}
							_this18.stackQuat[_this18.sizeQuat++] = quat2;
						}
						var _this19 = this._pool;
						var mat33 = null;
						var mat43 = null;
						var quat3 = null;
						if(v3 != null) {
							v3.zero();
							if(_this19.sizeVec3 == _this19.stackVec3.length) {
								var newLength12 = _this19.sizeVec3 << 1;
								var this13 = new Array(newLength12);
								var newArray12 = this13;
								var _g38 = 0;
								var _g39 = _this19.sizeVec3;
								while(_g38 < _g39) {
									var i16 = _g38++;
									newArray12[i16] = _this19.stackVec3[i16];
									_this19.stackVec3[i16] = null;
								}
								_this19.stackVec3 = newArray12;
							}
							_this19.stackVec3[_this19.sizeVec3++] = v3;
						}
						if(mat33 != null) {
							var t006 = 1;
							var t016 = 0;
							var t026 = 0;
							var t106 = 0;
							var t116 = 1;
							var t126 = 0;
							var t206 = 0;
							var t216 = 0;
							var t226 = 1;
							mat33.e00 = t006;
							mat33.e01 = t016;
							mat33.e02 = t026;
							mat33.e10 = t106;
							mat33.e11 = t116;
							mat33.e12 = t126;
							mat33.e20 = t206;
							mat33.e21 = t216;
							mat33.e22 = t226;
							if(_this19.sizeMat3 == _this19.stackMat3.length) {
								var newLength13 = _this19.sizeMat3 << 1;
								var this14 = new Array(newLength13);
								var newArray13 = this14;
								var _g40 = 0;
								var _g41 = _this19.sizeMat3;
								while(_g40 < _g41) {
									var i17 = _g40++;
									newArray13[i17] = _this19.stackMat3[i17];
									_this19.stackMat3[i17] = null;
								}
								_this19.stackMat3 = newArray13;
							}
							_this19.stackMat3[_this19.sizeMat3++] = mat33;
						}
						if(mat43 != null) {
							var t007 = 1;
							var t017 = 0;
							var t027 = 0;
							var t033 = 0;
							var t107 = 0;
							var t117 = 1;
							var t127 = 0;
							var t133 = 0;
							var t207 = 0;
							var t217 = 0;
							var t227 = 1;
							var t233 = 0;
							var t303 = 0;
							var t313 = 0;
							var t323 = 0;
							var t333 = 1;
							mat43.e00 = t007;
							mat43.e01 = t017;
							mat43.e02 = t027;
							mat43.e03 = t033;
							mat43.e10 = t107;
							mat43.e11 = t117;
							mat43.e12 = t127;
							mat43.e13 = t133;
							mat43.e20 = t207;
							mat43.e21 = t217;
							mat43.e22 = t227;
							mat43.e23 = t233;
							mat43.e30 = t303;
							mat43.e31 = t313;
							mat43.e32 = t323;
							mat43.e33 = t333;
							if(_this19.sizeMat4 == _this19.stackMat4.length) {
								var newLength14 = _this19.sizeMat4 << 1;
								var this15 = new Array(newLength14);
								var newArray14 = this15;
								var _g42 = 0;
								var _g43 = _this19.sizeMat4;
								while(_g42 < _g43) {
									var i18 = _g42++;
									newArray14[i18] = _this19.stackMat4[i18];
									_this19.stackMat4[i18] = null;
								}
								_this19.stackMat4 = newArray14;
							}
							_this19.stackMat4[_this19.sizeMat4++] = mat43;
						}
						if(quat3 != null) {
							var tx10 = 0;
							var ty10 = 0;
							var tz10 = 0;
							var tw3 = 1;
							quat3.x = tx10;
							quat3.y = ty10;
							quat3.z = tz10;
							quat3.w = tw3;
							if(_this19.sizeQuat == _this19.stackQuat.length) {
								var newLength15 = _this19.sizeQuat << 1;
								var this16 = new Array(newLength15);
								var newArray15 = this16;
								var _g44 = 0;
								var _g45 = _this19.sizeQuat;
								while(_g44 < _g45) {
									var i19 = _g44++;
									newArray15[i19] = _this19.stackQuat[i19];
									_this19.stackQuat[i19] = null;
								}
								_this19.stackQuat = newArray15;
							}
							_this19.stackQuat[_this19.sizeQuat++] = quat3;
						}
						var _this20 = this._pool;
						var mat34 = null;
						var mat44 = null;
						var quat4 = null;
						if(v12 != null) {
							v12.zero();
							if(_this20.sizeVec3 == _this20.stackVec3.length) {
								var newLength16 = _this20.sizeVec3 << 1;
								var this17 = new Array(newLength16);
								var newArray16 = this17;
								var _g46 = 0;
								var _g47 = _this20.sizeVec3;
								while(_g46 < _g47) {
									var i20 = _g46++;
									newArray16[i20] = _this20.stackVec3[i20];
									_this20.stackVec3[i20] = null;
								}
								_this20.stackVec3 = newArray16;
							}
							_this20.stackVec3[_this20.sizeVec3++] = v12;
						}
						if(mat34 != null) {
							var t008 = 1;
							var t018 = 0;
							var t028 = 0;
							var t108 = 0;
							var t118 = 1;
							var t128 = 0;
							var t208 = 0;
							var t218 = 0;
							var t228 = 1;
							mat34.e00 = t008;
							mat34.e01 = t018;
							mat34.e02 = t028;
							mat34.e10 = t108;
							mat34.e11 = t118;
							mat34.e12 = t128;
							mat34.e20 = t208;
							mat34.e21 = t218;
							mat34.e22 = t228;
							if(_this20.sizeMat3 == _this20.stackMat3.length) {
								var newLength17 = _this20.sizeMat3 << 1;
								var this18 = new Array(newLength17);
								var newArray17 = this18;
								var _g48 = 0;
								var _g49 = _this20.sizeMat3;
								while(_g48 < _g49) {
									var i21 = _g48++;
									newArray17[i21] = _this20.stackMat3[i21];
									_this20.stackMat3[i21] = null;
								}
								_this20.stackMat3 = newArray17;
							}
							_this20.stackMat3[_this20.sizeMat3++] = mat34;
						}
						if(mat44 != null) {
							var t009 = 1;
							var t019 = 0;
							var t029 = 0;
							var t034 = 0;
							var t109 = 0;
							var t119 = 1;
							var t129 = 0;
							var t134 = 0;
							var t209 = 0;
							var t219 = 0;
							var t229 = 1;
							var t234 = 0;
							var t304 = 0;
							var t314 = 0;
							var t324 = 0;
							var t334 = 1;
							mat44.e00 = t009;
							mat44.e01 = t019;
							mat44.e02 = t029;
							mat44.e03 = t034;
							mat44.e10 = t109;
							mat44.e11 = t119;
							mat44.e12 = t129;
							mat44.e13 = t134;
							mat44.e20 = t209;
							mat44.e21 = t219;
							mat44.e22 = t229;
							mat44.e23 = t234;
							mat44.e30 = t304;
							mat44.e31 = t314;
							mat44.e32 = t324;
							mat44.e33 = t334;
							if(_this20.sizeMat4 == _this20.stackMat4.length) {
								var newLength18 = _this20.sizeMat4 << 1;
								var this19 = new Array(newLength18);
								var newArray18 = this19;
								var _g50 = 0;
								var _g51 = _this20.sizeMat4;
								while(_g50 < _g51) {
									var i22 = _g50++;
									newArray18[i22] = _this20.stackMat4[i22];
									_this20.stackMat4[i22] = null;
								}
								_this20.stackMat4 = newArray18;
							}
							_this20.stackMat4[_this20.sizeMat4++] = mat44;
						}
						if(quat4 != null) {
							var tx11 = 0;
							var ty11 = 0;
							var tz11 = 0;
							var tw4 = 1;
							quat4.x = tx11;
							quat4.y = ty11;
							quat4.z = tz11;
							quat4.w = tw4;
							if(_this20.sizeQuat == _this20.stackQuat.length) {
								var newLength19 = _this20.sizeQuat << 1;
								var this20 = new Array(newLength19);
								var newArray19 = this20;
								var _g52 = 0;
								var _g53 = _this20.sizeQuat;
								while(_g52 < _g53) {
									var i23 = _g52++;
									newArray19[i23] = _this20.stackQuat[i23];
									_this20.stackQuat[i23] = null;
								}
								_this20.stackQuat = newArray19;
							}
							_this20.stackQuat[_this20.sizeQuat++] = quat4;
						}
						var _this21 = this._pool;
						var mat35 = null;
						var mat45 = null;
						var quat5 = null;
						if(v13 != null) {
							v13.zero();
							if(_this21.sizeVec3 == _this21.stackVec3.length) {
								var newLength20 = _this21.sizeVec3 << 1;
								var this21 = new Array(newLength20);
								var newArray20 = this21;
								var _g54 = 0;
								var _g55 = _this21.sizeVec3;
								while(_g54 < _g55) {
									var i24 = _g54++;
									newArray20[i24] = _this21.stackVec3[i24];
									_this21.stackVec3[i24] = null;
								}
								_this21.stackVec3 = newArray20;
							}
							_this21.stackVec3[_this21.sizeVec3++] = v13;
						}
						if(mat35 != null) {
							var t0010 = 1;
							var t0110 = 0;
							var t0210 = 0;
							var t1010 = 0;
							var t1110 = 1;
							var t1210 = 0;
							var t2010 = 0;
							var t2110 = 0;
							var t2210 = 1;
							mat35.e00 = t0010;
							mat35.e01 = t0110;
							mat35.e02 = t0210;
							mat35.e10 = t1010;
							mat35.e11 = t1110;
							mat35.e12 = t1210;
							mat35.e20 = t2010;
							mat35.e21 = t2110;
							mat35.e22 = t2210;
							if(_this21.sizeMat3 == _this21.stackMat3.length) {
								var newLength21 = _this21.sizeMat3 << 1;
								var this22 = new Array(newLength21);
								var newArray21 = this22;
								var _g56 = 0;
								var _g57 = _this21.sizeMat3;
								while(_g56 < _g57) {
									var i25 = _g56++;
									newArray21[i25] = _this21.stackMat3[i25];
									_this21.stackMat3[i25] = null;
								}
								_this21.stackMat3 = newArray21;
							}
							_this21.stackMat3[_this21.sizeMat3++] = mat35;
						}
						if(mat45 != null) {
							var t0011 = 1;
							var t0111 = 0;
							var t0211 = 0;
							var t035 = 0;
							var t1011 = 0;
							var t1111 = 1;
							var t1211 = 0;
							var t135 = 0;
							var t2011 = 0;
							var t2111 = 0;
							var t2211 = 1;
							var t235 = 0;
							var t305 = 0;
							var t315 = 0;
							var t325 = 0;
							var t335 = 1;
							mat45.e00 = t0011;
							mat45.e01 = t0111;
							mat45.e02 = t0211;
							mat45.e03 = t035;
							mat45.e10 = t1011;
							mat45.e11 = t1111;
							mat45.e12 = t1211;
							mat45.e13 = t135;
							mat45.e20 = t2011;
							mat45.e21 = t2111;
							mat45.e22 = t2211;
							mat45.e23 = t235;
							mat45.e30 = t305;
							mat45.e31 = t315;
							mat45.e32 = t325;
							mat45.e33 = t335;
							if(_this21.sizeMat4 == _this21.stackMat4.length) {
								var newLength22 = _this21.sizeMat4 << 1;
								var this23 = new Array(newLength22);
								var newArray22 = this23;
								var _g58 = 0;
								var _g59 = _this21.sizeMat4;
								while(_g58 < _g59) {
									var i26 = _g58++;
									newArray22[i26] = _this21.stackMat4[i26];
									_this21.stackMat4[i26] = null;
								}
								_this21.stackMat4 = newArray22;
							}
							_this21.stackMat4[_this21.sizeMat4++] = mat45;
						}
						if(quat5 != null) {
							var tx12 = 0;
							var ty12 = 0;
							var tz12 = 0;
							var tw5 = 1;
							quat5.x = tx12;
							quat5.y = ty12;
							quat5.z = tz12;
							quat5.w = tw5;
							if(_this21.sizeQuat == _this21.stackQuat.length) {
								var newLength23 = _this21.sizeQuat << 1;
								var this24 = new Array(newLength23);
								var newArray23 = this24;
								var _g60 = 0;
								var _g61 = _this21.sizeQuat;
								while(_g60 < _g61) {
									var i27 = _g60++;
									newArray23[i27] = _this21.stackQuat[i27];
									_this21.stackQuat[i27] = null;
								}
								_this21.stackQuat = newArray23;
							}
							_this21.stackQuat[_this21.sizeQuat++] = quat5;
						}
						var _this22 = this._pool;
						var mat36 = null;
						var mat46 = null;
						var quat6 = null;
						if(normal != null) {
							normal.zero();
							if(_this22.sizeVec3 == _this22.stackVec3.length) {
								var newLength24 = _this22.sizeVec3 << 1;
								var this25 = new Array(newLength24);
								var newArray24 = this25;
								var _g62 = 0;
								var _g63 = _this22.sizeVec3;
								while(_g62 < _g63) {
									var i28 = _g62++;
									newArray24[i28] = _this22.stackVec3[i28];
									_this22.stackVec3[i28] = null;
								}
								_this22.stackVec3 = newArray24;
							}
							_this22.stackVec3[_this22.sizeVec3++] = normal;
						}
						if(mat36 != null) {
							var t0012 = 1;
							var t0112 = 0;
							var t0212 = 0;
							var t1012 = 0;
							var t1112 = 1;
							var t1212 = 0;
							var t2012 = 0;
							var t2112 = 0;
							var t2212 = 1;
							mat36.e00 = t0012;
							mat36.e01 = t0112;
							mat36.e02 = t0212;
							mat36.e10 = t1012;
							mat36.e11 = t1112;
							mat36.e12 = t1212;
							mat36.e20 = t2012;
							mat36.e21 = t2112;
							mat36.e22 = t2212;
							if(_this22.sizeMat3 == _this22.stackMat3.length) {
								var newLength25 = _this22.sizeMat3 << 1;
								var this26 = new Array(newLength25);
								var newArray25 = this26;
								var _g64 = 0;
								var _g65 = _this22.sizeMat3;
								while(_g64 < _g65) {
									var i29 = _g64++;
									newArray25[i29] = _this22.stackMat3[i29];
									_this22.stackMat3[i29] = null;
								}
								_this22.stackMat3 = newArray25;
							}
							_this22.stackMat3[_this22.sizeMat3++] = mat36;
						}
						if(mat46 != null) {
							var t0013 = 1;
							var t0113 = 0;
							var t0213 = 0;
							var t036 = 0;
							var t1013 = 0;
							var t1113 = 1;
							var t1213 = 0;
							var t136 = 0;
							var t2013 = 0;
							var t2113 = 0;
							var t2213 = 1;
							var t236 = 0;
							var t306 = 0;
							var t316 = 0;
							var t326 = 0;
							var t336 = 1;
							mat46.e00 = t0013;
							mat46.e01 = t0113;
							mat46.e02 = t0213;
							mat46.e03 = t036;
							mat46.e10 = t1013;
							mat46.e11 = t1113;
							mat46.e12 = t1213;
							mat46.e13 = t136;
							mat46.e20 = t2013;
							mat46.e21 = t2113;
							mat46.e22 = t2213;
							mat46.e23 = t236;
							mat46.e30 = t306;
							mat46.e31 = t316;
							mat46.e32 = t326;
							mat46.e33 = t336;
							if(_this22.sizeMat4 == _this22.stackMat4.length) {
								var newLength26 = _this22.sizeMat4 << 1;
								var this27 = new Array(newLength26);
								var newArray26 = this27;
								var _g66 = 0;
								var _g67 = _this22.sizeMat4;
								while(_g66 < _g67) {
									var i30 = _g66++;
									newArray26[i30] = _this22.stackMat4[i30];
									_this22.stackMat4[i30] = null;
								}
								_this22.stackMat4 = newArray26;
							}
							_this22.stackMat4[_this22.sizeMat4++] = mat46;
						}
						if(quat6 != null) {
							var tx13 = 0;
							var ty13 = 0;
							var tz13 = 0;
							var tw6 = 1;
							quat6.x = tx13;
							quat6.y = ty13;
							quat6.z = tz13;
							quat6.w = tw6;
							if(_this22.sizeQuat == _this22.stackQuat.length) {
								var newLength27 = _this22.sizeQuat << 1;
								var this28 = new Array(newLength27);
								var newArray27 = this28;
								var _g68 = 0;
								var _g69 = _this22.sizeQuat;
								while(_g68 < _g69) {
									var i31 = _g68++;
									newArray27[i31] = _this22.stackQuat[i31];
									_this22.stackQuat[i31] = null;
								}
								_this22.stackQuat = newArray27;
							}
							_this22.stackQuat[_this22.sizeQuat++] = quat6;
						}
						var _this23 = this._pool;
						var vec3 = null;
						var mat47 = null;
						var quat7 = null;
						if(vec3 != null) {
							vec3.zero();
							if(_this23.sizeVec3 == _this23.stackVec3.length) {
								var newLength28 = _this23.sizeVec3 << 1;
								var this29 = new Array(newLength28);
								var newArray28 = this29;
								var _g70 = 0;
								var _g71 = _this23.sizeVec3;
								while(_g70 < _g71) {
									var i32 = _g70++;
									newArray28[i32] = _this23.stackVec3[i32];
									_this23.stackVec3[i32] = null;
								}
								_this23.stackVec3 = newArray28;
							}
							_this23.stackVec3[_this23.sizeVec3++] = vec3;
						}
						if(m != null) {
							var t0014 = 1;
							var t0114 = 0;
							var t0214 = 0;
							var t1014 = 0;
							var t1114 = 1;
							var t1214 = 0;
							var t2014 = 0;
							var t2114 = 0;
							var t2214 = 1;
							m.e00 = t0014;
							m.e01 = t0114;
							m.e02 = t0214;
							m.e10 = t1014;
							m.e11 = t1114;
							m.e12 = t1214;
							m.e20 = t2014;
							m.e21 = t2114;
							m.e22 = t2214;
							if(_this23.sizeMat3 == _this23.stackMat3.length) {
								var newLength29 = _this23.sizeMat3 << 1;
								var this30 = new Array(newLength29);
								var newArray29 = this30;
								var _g72 = 0;
								var _g73 = _this23.sizeMat3;
								while(_g72 < _g73) {
									var i33 = _g72++;
									newArray29[i33] = _this23.stackMat3[i33];
									_this23.stackMat3[i33] = null;
								}
								_this23.stackMat3 = newArray29;
							}
							_this23.stackMat3[_this23.sizeMat3++] = m;
						}
						if(mat47 != null) {
							var t0015 = 1;
							var t0115 = 0;
							var t0215 = 0;
							var t037 = 0;
							var t1015 = 0;
							var t1115 = 1;
							var t1215 = 0;
							var t137 = 0;
							var t2015 = 0;
							var t2115 = 0;
							var t2215 = 1;
							var t237 = 0;
							var t307 = 0;
							var t317 = 0;
							var t327 = 0;
							var t337 = 1;
							mat47.e00 = t0015;
							mat47.e01 = t0115;
							mat47.e02 = t0215;
							mat47.e03 = t037;
							mat47.e10 = t1015;
							mat47.e11 = t1115;
							mat47.e12 = t1215;
							mat47.e13 = t137;
							mat47.e20 = t2015;
							mat47.e21 = t2115;
							mat47.e22 = t2215;
							mat47.e23 = t237;
							mat47.e30 = t307;
							mat47.e31 = t317;
							mat47.e32 = t327;
							mat47.e33 = t337;
							if(_this23.sizeMat4 == _this23.stackMat4.length) {
								var newLength30 = _this23.sizeMat4 << 1;
								var this31 = new Array(newLength30);
								var newArray30 = this31;
								var _g74 = 0;
								var _g75 = _this23.sizeMat4;
								while(_g74 < _g75) {
									var i34 = _g74++;
									newArray30[i34] = _this23.stackMat4[i34];
									_this23.stackMat4[i34] = null;
								}
								_this23.stackMat4 = newArray30;
							}
							_this23.stackMat4[_this23.sizeMat4++] = mat47;
						}
						if(quat7 != null) {
							var tx14 = 0;
							var ty14 = 0;
							var tz14 = 0;
							var tw7 = 1;
							quat7.x = tx14;
							quat7.y = ty14;
							quat7.z = tz14;
							quat7.w = tw7;
							if(_this23.sizeQuat == _this23.stackQuat.length) {
								var newLength31 = _this23.sizeQuat << 1;
								var this32 = new Array(newLength31);
								var newArray31 = this32;
								var _g76 = 0;
								var _g77 = _this23.sizeQuat;
								while(_g76 < _g77) {
									var i35 = _g76++;
									newArray31[i35] = _this23.stackQuat[i35];
									_this23.stackQuat[i35] = null;
								}
								_this23.stackQuat = newArray31;
							}
							_this23.stackQuat[_this23.sizeQuat++] = quat7;
						}
						var _this24 = this._pool;
						var mat37 = null;
						var mat48 = null;
						var quat8 = null;
						if(o != null) {
							o.zero();
							if(_this24.sizeVec3 == _this24.stackVec3.length) {
								var newLength32 = _this24.sizeVec3 << 1;
								var this33 = new Array(newLength32);
								var newArray32 = this33;
								var _g78 = 0;
								var _g79 = _this24.sizeVec3;
								while(_g78 < _g79) {
									var i36 = _g78++;
									newArray32[i36] = _this24.stackVec3[i36];
									_this24.stackVec3[i36] = null;
								}
								_this24.stackVec3 = newArray32;
							}
							_this24.stackVec3[_this24.sizeVec3++] = o;
						}
						if(mat37 != null) {
							var t0016 = 1;
							var t0116 = 0;
							var t0216 = 0;
							var t1016 = 0;
							var t1116 = 1;
							var t1216 = 0;
							var t2016 = 0;
							var t2116 = 0;
							var t2216 = 1;
							mat37.e00 = t0016;
							mat37.e01 = t0116;
							mat37.e02 = t0216;
							mat37.e10 = t1016;
							mat37.e11 = t1116;
							mat37.e12 = t1216;
							mat37.e20 = t2016;
							mat37.e21 = t2116;
							mat37.e22 = t2216;
							if(_this24.sizeMat3 == _this24.stackMat3.length) {
								var newLength33 = _this24.sizeMat3 << 1;
								var this34 = new Array(newLength33);
								var newArray33 = this34;
								var _g80 = 0;
								var _g81 = _this24.sizeMat3;
								while(_g80 < _g81) {
									var i37 = _g80++;
									newArray33[i37] = _this24.stackMat3[i37];
									_this24.stackMat3[i37] = null;
								}
								_this24.stackMat3 = newArray33;
							}
							_this24.stackMat3[_this24.sizeMat3++] = mat37;
						}
						if(mat48 != null) {
							var t0017 = 1;
							var t0117 = 0;
							var t0217 = 0;
							var t038 = 0;
							var t1017 = 0;
							var t1117 = 1;
							var t1217 = 0;
							var t138 = 0;
							var t2017 = 0;
							var t2117 = 0;
							var t2217 = 1;
							var t238 = 0;
							var t308 = 0;
							var t318 = 0;
							var t328 = 0;
							var t338 = 1;
							mat48.e00 = t0017;
							mat48.e01 = t0117;
							mat48.e02 = t0217;
							mat48.e03 = t038;
							mat48.e10 = t1017;
							mat48.e11 = t1117;
							mat48.e12 = t1217;
							mat48.e13 = t138;
							mat48.e20 = t2017;
							mat48.e21 = t2117;
							mat48.e22 = t2217;
							mat48.e23 = t238;
							mat48.e30 = t308;
							mat48.e31 = t318;
							mat48.e32 = t328;
							mat48.e33 = t338;
							if(_this24.sizeMat4 == _this24.stackMat4.length) {
								var newLength34 = _this24.sizeMat4 << 1;
								var this35 = new Array(newLength34);
								var newArray34 = this35;
								var _g82 = 0;
								var _g83 = _this24.sizeMat4;
								while(_g82 < _g83) {
									var i38 = _g82++;
									newArray34[i38] = _this24.stackMat4[i38];
									_this24.stackMat4[i38] = null;
								}
								_this24.stackMat4 = newArray34;
							}
							_this24.stackMat4[_this24.sizeMat4++] = mat48;
						}
						if(quat8 != null) {
							var tx15 = 0;
							var ty15 = 0;
							var tz15 = 0;
							var tw8 = 1;
							quat8.x = tx15;
							quat8.y = ty15;
							quat8.z = tz15;
							quat8.w = tw8;
							if(_this24.sizeQuat == _this24.stackQuat.length) {
								var newLength35 = _this24.sizeQuat << 1;
								var this36 = new Array(newLength35);
								var newArray35 = this36;
								var _g84 = 0;
								var _g85 = _this24.sizeQuat;
								while(_g84 < _g85) {
									var i39 = _g84++;
									newArray35[i39] = _this24.stackQuat[i39];
									_this24.stackQuat[i39] = null;
								}
								_this24.stackQuat = newArray35;
							}
							_this24.stackQuat[_this24.sizeQuat++] = quat8;
						}
						break;
					}
				}
				if(d.drawAabbs) {
					var aabb = s._aabb;
					var color = style.aabbColor;
					var _this25 = this._pool;
					var min = _this25.sizeVec3 == 0 ? new oimo_common_Vec3() : _this25.stackVec3[--_this25.sizeVec3];
					var _this26 = this._pool;
					var max = _this26.sizeVec3 == 0 ? new oimo_common_Vec3() : _this26.stackVec3[--_this26.sizeVec3];
					var v15 = min;
					v15.x = aabb._minX;
					v15.y = aabb._minY;
					v15.z = aabb._minZ;
					var v16 = max;
					v16.x = aabb._maxX;
					v16.y = aabb._maxY;
					v16.z = aabb._maxZ;
					d.aabb(min,max,color);
					var _this27 = this._pool;
					var mat38 = null;
					var mat49 = null;
					var quat9 = null;
					if(min != null) {
						min.zero();
						if(_this27.sizeVec3 == _this27.stackVec3.length) {
							var newLength36 = _this27.sizeVec3 << 1;
							var this37 = new Array(newLength36);
							var newArray36 = this37;
							var _g86 = 0;
							var _g87 = _this27.sizeVec3;
							while(_g86 < _g87) {
								var i40 = _g86++;
								newArray36[i40] = _this27.stackVec3[i40];
								_this27.stackVec3[i40] = null;
							}
							_this27.stackVec3 = newArray36;
						}
						_this27.stackVec3[_this27.sizeVec3++] = min;
					}
					if(mat38 != null) {
						var t0018 = 1;
						var t0118 = 0;
						var t0218 = 0;
						var t1018 = 0;
						var t1118 = 1;
						var t1218 = 0;
						var t2018 = 0;
						var t2118 = 0;
						var t2218 = 1;
						mat38.e00 = t0018;
						mat38.e01 = t0118;
						mat38.e02 = t0218;
						mat38.e10 = t1018;
						mat38.e11 = t1118;
						mat38.e12 = t1218;
						mat38.e20 = t2018;
						mat38.e21 = t2118;
						mat38.e22 = t2218;
						if(_this27.sizeMat3 == _this27.stackMat3.length) {
							var newLength37 = _this27.sizeMat3 << 1;
							var this38 = new Array(newLength37);
							var newArray37 = this38;
							var _g88 = 0;
							var _g89 = _this27.sizeMat3;
							while(_g88 < _g89) {
								var i41 = _g88++;
								newArray37[i41] = _this27.stackMat3[i41];
								_this27.stackMat3[i41] = null;
							}
							_this27.stackMat3 = newArray37;
						}
						_this27.stackMat3[_this27.sizeMat3++] = mat38;
					}
					if(mat49 != null) {
						var t0019 = 1;
						var t0119 = 0;
						var t0219 = 0;
						var t039 = 0;
						var t1019 = 0;
						var t1119 = 1;
						var t1219 = 0;
						var t139 = 0;
						var t2019 = 0;
						var t2119 = 0;
						var t2219 = 1;
						var t239 = 0;
						var t309 = 0;
						var t319 = 0;
						var t329 = 0;
						var t339 = 1;
						mat49.e00 = t0019;
						mat49.e01 = t0119;
						mat49.e02 = t0219;
						mat49.e03 = t039;
						mat49.e10 = t1019;
						mat49.e11 = t1119;
						mat49.e12 = t1219;
						mat49.e13 = t139;
						mat49.e20 = t2019;
						mat49.e21 = t2119;
						mat49.e22 = t2219;
						mat49.e23 = t239;
						mat49.e30 = t309;
						mat49.e31 = t319;
						mat49.e32 = t329;
						mat49.e33 = t339;
						if(_this27.sizeMat4 == _this27.stackMat4.length) {
							var newLength38 = _this27.sizeMat4 << 1;
							var this39 = new Array(newLength38);
							var newArray38 = this39;
							var _g90 = 0;
							var _g91 = _this27.sizeMat4;
							while(_g90 < _g91) {
								var i42 = _g90++;
								newArray38[i42] = _this27.stackMat4[i42];
								_this27.stackMat4[i42] = null;
							}
							_this27.stackMat4 = newArray38;
						}
						_this27.stackMat4[_this27.sizeMat4++] = mat49;
					}
					if(quat9 != null) {
						var tx16 = 0;
						var ty16 = 0;
						var tz16 = 0;
						var tw9 = 1;
						quat9.x = tx16;
						quat9.y = ty16;
						quat9.z = tz16;
						quat9.w = tw9;
						if(_this27.sizeQuat == _this27.stackQuat.length) {
							var newLength39 = _this27.sizeQuat << 1;
							var this40 = new Array(newLength39);
							var newArray39 = this40;
							var _g92 = 0;
							var _g93 = _this27.sizeQuat;
							while(_g92 < _g93) {
								var i43 = _g92++;
								newArray39[i43] = _this27.stackQuat[i43];
								_this27.stackQuat[i43] = null;
							}
							_this27.stackQuat = newArray39;
						}
						_this27.stackQuat[_this27.sizeQuat++] = quat9;
					}
					var _this28 = this._pool;
					var mat39 = null;
					var mat410 = null;
					var quat10 = null;
					if(max != null) {
						max.zero();
						if(_this28.sizeVec3 == _this28.stackVec3.length) {
							var newLength40 = _this28.sizeVec3 << 1;
							var this41 = new Array(newLength40);
							var newArray40 = this41;
							var _g94 = 0;
							var _g95 = _this28.sizeVec3;
							while(_g94 < _g95) {
								var i44 = _g94++;
								newArray40[i44] = _this28.stackVec3[i44];
								_this28.stackVec3[i44] = null;
							}
							_this28.stackVec3 = newArray40;
						}
						_this28.stackVec3[_this28.sizeVec3++] = max;
					}
					if(mat39 != null) {
						var t0020 = 1;
						var t0120 = 0;
						var t0220 = 0;
						var t1020 = 0;
						var t1120 = 1;
						var t1220 = 0;
						var t2020 = 0;
						var t2120 = 0;
						var t2220 = 1;
						mat39.e00 = t0020;
						mat39.e01 = t0120;
						mat39.e02 = t0220;
						mat39.e10 = t1020;
						mat39.e11 = t1120;
						mat39.e12 = t1220;
						mat39.e20 = t2020;
						mat39.e21 = t2120;
						mat39.e22 = t2220;
						if(_this28.sizeMat3 == _this28.stackMat3.length) {
							var newLength41 = _this28.sizeMat3 << 1;
							var this42 = new Array(newLength41);
							var newArray41 = this42;
							var _g96 = 0;
							var _g97 = _this28.sizeMat3;
							while(_g96 < _g97) {
								var i45 = _g96++;
								newArray41[i45] = _this28.stackMat3[i45];
								_this28.stackMat3[i45] = null;
							}
							_this28.stackMat3 = newArray41;
						}
						_this28.stackMat3[_this28.sizeMat3++] = mat39;
					}
					if(mat410 != null) {
						var t0021 = 1;
						var t0121 = 0;
						var t0221 = 0;
						var t0310 = 0;
						var t1021 = 0;
						var t1121 = 1;
						var t1221 = 0;
						var t1310 = 0;
						var t2021 = 0;
						var t2121 = 0;
						var t2221 = 1;
						var t2310 = 0;
						var t3010 = 0;
						var t3110 = 0;
						var t3210 = 0;
						var t3310 = 1;
						mat410.e00 = t0021;
						mat410.e01 = t0121;
						mat410.e02 = t0221;
						mat410.e03 = t0310;
						mat410.e10 = t1021;
						mat410.e11 = t1121;
						mat410.e12 = t1221;
						mat410.e13 = t1310;
						mat410.e20 = t2021;
						mat410.e21 = t2121;
						mat410.e22 = t2221;
						mat410.e23 = t2310;
						mat410.e30 = t3010;
						mat410.e31 = t3110;
						mat410.e32 = t3210;
						mat410.e33 = t3310;
						if(_this28.sizeMat4 == _this28.stackMat4.length) {
							var newLength42 = _this28.sizeMat4 << 1;
							var this43 = new Array(newLength42);
							var newArray42 = this43;
							var _g98 = 0;
							var _g99 = _this28.sizeMat4;
							while(_g98 < _g99) {
								var i46 = _g98++;
								newArray42[i46] = _this28.stackMat4[i46];
								_this28.stackMat4[i46] = null;
							}
							_this28.stackMat4 = newArray42;
						}
						_this28.stackMat4[_this28.sizeMat4++] = mat410;
					}
					if(quat10 != null) {
						var tx17 = 0;
						var ty17 = 0;
						var tz17 = 0;
						var tw10 = 1;
						quat10.x = tx17;
						quat10.y = ty17;
						quat10.z = tz17;
						quat10.w = tw10;
						if(_this28.sizeQuat == _this28.stackQuat.length) {
							var newLength43 = _this28.sizeQuat << 1;
							var this44 = new Array(newLength43);
							var newArray43 = this44;
							var _g100 = 0;
							var _g101 = _this28.sizeQuat;
							while(_g100 < _g101) {
								var i47 = _g100++;
								newArray43[i47] = _this28.stackQuat[i47];
								_this28.stackQuat[i47] = null;
							}
							_this28.stackQuat = newArray43;
						}
						_this28.stackQuat[_this28.sizeQuat++] = quat10;
					}
				}
				s = n1;
			}
			r = n;
		}
	}
	,_drawConstraints: function(d) {
		var style = d.style;
		if(d.drawPairs || d.drawContacts) {
			var c = this._contactManager._contactList;
			while(c != null) {
				var n = c._next;
				if(d.drawPairs) {
					var color = style.pairColor;
					var _this = this._pool;
					var v1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
					var _this1 = this._pool;
					var v2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
					var v = v1;
					v.x = c._s1._transform._positionX;
					v.y = c._s1._transform._positionY;
					v.z = c._s1._transform._positionZ;
					var v3 = v2;
					v3.x = c._s2._transform._positionX;
					v3.y = c._s2._transform._positionY;
					v3.z = c._s2._transform._positionZ;
					d.line(v1,v2,color);
					var _this2 = this._pool;
					var mat3 = null;
					var mat4 = null;
					var quat = null;
					if(v1 != null) {
						v1.zero();
						if(_this2.sizeVec3 == _this2.stackVec3.length) {
							var newLength = _this2.sizeVec3 << 1;
							var this1 = new Array(newLength);
							var newArray = this1;
							var _g = 0;
							var _g1 = _this2.sizeVec3;
							while(_g < _g1) {
								var i = _g++;
								newArray[i] = _this2.stackVec3[i];
								_this2.stackVec3[i] = null;
							}
							_this2.stackVec3 = newArray;
						}
						_this2.stackVec3[_this2.sizeVec3++] = v1;
					}
					if(mat3 != null) {
						var t00 = 1;
						var t01 = 0;
						var t02 = 0;
						var t10 = 0;
						var t11 = 1;
						var t12 = 0;
						var t20 = 0;
						var t21 = 0;
						var t22 = 1;
						mat3.e00 = t00;
						mat3.e01 = t01;
						mat3.e02 = t02;
						mat3.e10 = t10;
						mat3.e11 = t11;
						mat3.e12 = t12;
						mat3.e20 = t20;
						mat3.e21 = t21;
						mat3.e22 = t22;
						if(_this2.sizeMat3 == _this2.stackMat3.length) {
							var newLength1 = _this2.sizeMat3 << 1;
							var this2 = new Array(newLength1);
							var newArray1 = this2;
							var _g2 = 0;
							var _g3 = _this2.sizeMat3;
							while(_g2 < _g3) {
								var i1 = _g2++;
								newArray1[i1] = _this2.stackMat3[i1];
								_this2.stackMat3[i1] = null;
							}
							_this2.stackMat3 = newArray1;
						}
						_this2.stackMat3[_this2.sizeMat3++] = mat3;
					}
					if(mat4 != null) {
						var t001 = 1;
						var t011 = 0;
						var t021 = 0;
						var t03 = 0;
						var t101 = 0;
						var t111 = 1;
						var t121 = 0;
						var t13 = 0;
						var t201 = 0;
						var t211 = 0;
						var t221 = 1;
						var t23 = 0;
						var t30 = 0;
						var t31 = 0;
						var t32 = 0;
						var t33 = 1;
						mat4.e00 = t001;
						mat4.e01 = t011;
						mat4.e02 = t021;
						mat4.e03 = t03;
						mat4.e10 = t101;
						mat4.e11 = t111;
						mat4.e12 = t121;
						mat4.e13 = t13;
						mat4.e20 = t201;
						mat4.e21 = t211;
						mat4.e22 = t221;
						mat4.e23 = t23;
						mat4.e30 = t30;
						mat4.e31 = t31;
						mat4.e32 = t32;
						mat4.e33 = t33;
						if(_this2.sizeMat4 == _this2.stackMat4.length) {
							var newLength2 = _this2.sizeMat4 << 1;
							var this3 = new Array(newLength2);
							var newArray2 = this3;
							var _g4 = 0;
							var _g5 = _this2.sizeMat4;
							while(_g4 < _g5) {
								var i2 = _g4++;
								newArray2[i2] = _this2.stackMat4[i2];
								_this2.stackMat4[i2] = null;
							}
							_this2.stackMat4 = newArray2;
						}
						_this2.stackMat4[_this2.sizeMat4++] = mat4;
					}
					if(quat != null) {
						var tx = 0;
						var ty = 0;
						var tz = 0;
						var tw = 1;
						quat.x = tx;
						quat.y = ty;
						quat.z = tz;
						quat.w = tw;
						if(_this2.sizeQuat == _this2.stackQuat.length) {
							var newLength3 = _this2.sizeQuat << 1;
							var this4 = new Array(newLength3);
							var newArray3 = this4;
							var _g6 = 0;
							var _g7 = _this2.sizeQuat;
							while(_g6 < _g7) {
								var i3 = _g6++;
								newArray3[i3] = _this2.stackQuat[i3];
								_this2.stackQuat[i3] = null;
							}
							_this2.stackQuat = newArray3;
						}
						_this2.stackQuat[_this2.sizeQuat++] = quat;
					}
					var _this3 = this._pool;
					var mat31 = null;
					var mat41 = null;
					var quat1 = null;
					if(v2 != null) {
						v2.zero();
						if(_this3.sizeVec3 == _this3.stackVec3.length) {
							var newLength4 = _this3.sizeVec3 << 1;
							var this5 = new Array(newLength4);
							var newArray4 = this5;
							var _g8 = 0;
							var _g9 = _this3.sizeVec3;
							while(_g8 < _g9) {
								var i4 = _g8++;
								newArray4[i4] = _this3.stackVec3[i4];
								_this3.stackVec3[i4] = null;
							}
							_this3.stackVec3 = newArray4;
						}
						_this3.stackVec3[_this3.sizeVec3++] = v2;
					}
					if(mat31 != null) {
						var t002 = 1;
						var t012 = 0;
						var t022 = 0;
						var t102 = 0;
						var t112 = 1;
						var t122 = 0;
						var t202 = 0;
						var t212 = 0;
						var t222 = 1;
						mat31.e00 = t002;
						mat31.e01 = t012;
						mat31.e02 = t022;
						mat31.e10 = t102;
						mat31.e11 = t112;
						mat31.e12 = t122;
						mat31.e20 = t202;
						mat31.e21 = t212;
						mat31.e22 = t222;
						if(_this3.sizeMat3 == _this3.stackMat3.length) {
							var newLength5 = _this3.sizeMat3 << 1;
							var this6 = new Array(newLength5);
							var newArray5 = this6;
							var _g10 = 0;
							var _g11 = _this3.sizeMat3;
							while(_g10 < _g11) {
								var i5 = _g10++;
								newArray5[i5] = _this3.stackMat3[i5];
								_this3.stackMat3[i5] = null;
							}
							_this3.stackMat3 = newArray5;
						}
						_this3.stackMat3[_this3.sizeMat3++] = mat31;
					}
					if(mat41 != null) {
						var t003 = 1;
						var t013 = 0;
						var t023 = 0;
						var t031 = 0;
						var t103 = 0;
						var t113 = 1;
						var t123 = 0;
						var t131 = 0;
						var t203 = 0;
						var t213 = 0;
						var t223 = 1;
						var t231 = 0;
						var t301 = 0;
						var t311 = 0;
						var t321 = 0;
						var t331 = 1;
						mat41.e00 = t003;
						mat41.e01 = t013;
						mat41.e02 = t023;
						mat41.e03 = t031;
						mat41.e10 = t103;
						mat41.e11 = t113;
						mat41.e12 = t123;
						mat41.e13 = t131;
						mat41.e20 = t203;
						mat41.e21 = t213;
						mat41.e22 = t223;
						mat41.e23 = t231;
						mat41.e30 = t301;
						mat41.e31 = t311;
						mat41.e32 = t321;
						mat41.e33 = t331;
						if(_this3.sizeMat4 == _this3.stackMat4.length) {
							var newLength6 = _this3.sizeMat4 << 1;
							var this7 = new Array(newLength6);
							var newArray6 = this7;
							var _g12 = 0;
							var _g13 = _this3.sizeMat4;
							while(_g12 < _g13) {
								var i6 = _g12++;
								newArray6[i6] = _this3.stackMat4[i6];
								_this3.stackMat4[i6] = null;
							}
							_this3.stackMat4 = newArray6;
						}
						_this3.stackMat4[_this3.sizeMat4++] = mat41;
					}
					if(quat1 != null) {
						var tx1 = 0;
						var ty1 = 0;
						var tz1 = 0;
						var tw1 = 1;
						quat1.x = tx1;
						quat1.y = ty1;
						quat1.z = tz1;
						quat1.w = tw1;
						if(_this3.sizeQuat == _this3.stackQuat.length) {
							var newLength7 = _this3.sizeQuat << 1;
							var this8 = new Array(newLength7);
							var newArray7 = this8;
							var _g14 = 0;
							var _g15 = _this3.sizeQuat;
							while(_g14 < _g15) {
								var i7 = _g14++;
								newArray7[i7] = _this3.stackQuat[i7];
								_this3.stackQuat[i7] = null;
							}
							_this3.stackQuat = newArray7;
						}
						_this3.stackQuat[_this3.sizeQuat++] = quat1;
					}
				}
				if(d.drawContacts) {
					var cc = c._contactConstraint;
					var ps = c._contactConstraint._manifold._points;
					var _g16 = 0;
					var _g17 = c._contactConstraint._manifold._numPoints;
					while(_g16 < _g17) {
						var i8 = _g16++;
						var p = ps[i8];
						var style1 = d.style;
						var tf1 = cc._s1._transform;
						var tf2 = cc._s2._transform;
						var _this4 = this._pool;
						var pos1 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
						var _this5 = this._pool;
						var pos2 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
						var _this6 = this._pool;
						var normal = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
						var _this7 = this._pool;
						var tangent = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
						var _this8 = this._pool;
						var binormal = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
						var v4 = pos1;
						v4.x = p._pos1X;
						v4.y = p._pos1Y;
						v4.z = p._pos1Z;
						var v5 = pos2;
						v5.x = p._pos2X;
						v5.y = p._pos2Y;
						v5.z = p._pos2Z;
						var v6 = normal;
						v6.x = cc._manifold._normalX;
						v6.y = cc._manifold._normalY;
						v6.z = cc._manifold._normalZ;
						var v7 = tangent;
						v7.x = cc._manifold._tangentX;
						v7.y = cc._manifold._tangentY;
						v7.z = cc._manifold._tangentZ;
						var v8 = binormal;
						v8.x = cc._manifold._binormalX;
						v8.y = cc._manifold._binormalY;
						v8.z = cc._manifold._binormalZ;
						if(p._disabled) {
							d.point(pos1,style1.disabledContactColor);
							d.point(pos2,style1.disabledContactColor);
							d.line(pos1,pos2,style1.disabledContactColor);
						} else if(p._warmStarted) {
							var color1;
							switch(p._id & 3) {
							case 0:
								color1 = style1.contactColor;
								break;
							case 1:
								color1 = style1.contactColor2;
								break;
							case 2:
								color1 = style1.contactColor3;
								break;
							default:
								color1 = style1.contactColor4;
							}
							d.point(pos1,color1);
							d.point(pos2,color1);
							d.line(pos1,pos2,style1.contactColor);
						} else {
							d.point(pos1,style1.newContactColor);
							d.point(pos2,style1.newContactColor);
							d.line(pos1,pos2,style1.newContactColor);
						}
						pos2.x = pos1.x;
						pos2.y = pos1.y;
						pos2.z = pos1.z;
						var _this9 = pos2;
						var s = style1.contactNormalLength;
						var tx2 = _this9.x + normal.x * s;
						var ty2 = _this9.y + normal.y * s;
						var tz2 = _this9.z + normal.z * s;
						_this9.x = tx2;
						_this9.y = ty2;
						_this9.z = tz2;
						d.line(pos1,pos2,style1.contactNormalColor);
						if(d.drawContactBases) {
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this10 = pos2;
							var s1 = style1.contactTangentLength;
							var tx3 = _this10.x + tangent.x * s1;
							var ty3 = _this10.y + tangent.y * s1;
							var tz3 = _this10.z + tangent.z * s1;
							_this10.x = tx3;
							_this10.y = ty3;
							_this10.z = tz3;
							d.line(pos1,pos2,style1.contactTangentColor);
							pos2.x = pos1.x;
							pos2.y = pos1.y;
							pos2.z = pos1.z;
							var _this11 = pos2;
							var s2 = style1.contactBinormalLength;
							var tx4 = _this11.x + binormal.x * s2;
							var ty4 = _this11.y + binormal.y * s2;
							var tz4 = _this11.z + binormal.z * s2;
							_this11.x = tx4;
							_this11.y = ty4;
							_this11.z = tz4;
							d.line(pos1,pos2,style1.contactBinormalColor);
						}
						var _this12 = this._pool;
						var mat32 = null;
						var mat42 = null;
						var quat2 = null;
						if(pos1 != null) {
							pos1.zero();
							if(_this12.sizeVec3 == _this12.stackVec3.length) {
								var newLength8 = _this12.sizeVec3 << 1;
								var this9 = new Array(newLength8);
								var newArray8 = this9;
								var _g18 = 0;
								var _g19 = _this12.sizeVec3;
								while(_g18 < _g19) {
									var i9 = _g18++;
									newArray8[i9] = _this12.stackVec3[i9];
									_this12.stackVec3[i9] = null;
								}
								_this12.stackVec3 = newArray8;
							}
							_this12.stackVec3[_this12.sizeVec3++] = pos1;
						}
						if(mat32 != null) {
							var t004 = 1;
							var t014 = 0;
							var t024 = 0;
							var t104 = 0;
							var t114 = 1;
							var t124 = 0;
							var t204 = 0;
							var t214 = 0;
							var t224 = 1;
							mat32.e00 = t004;
							mat32.e01 = t014;
							mat32.e02 = t024;
							mat32.e10 = t104;
							mat32.e11 = t114;
							mat32.e12 = t124;
							mat32.e20 = t204;
							mat32.e21 = t214;
							mat32.e22 = t224;
							if(_this12.sizeMat3 == _this12.stackMat3.length) {
								var newLength9 = _this12.sizeMat3 << 1;
								var this10 = new Array(newLength9);
								var newArray9 = this10;
								var _g20 = 0;
								var _g21 = _this12.sizeMat3;
								while(_g20 < _g21) {
									var i10 = _g20++;
									newArray9[i10] = _this12.stackMat3[i10];
									_this12.stackMat3[i10] = null;
								}
								_this12.stackMat3 = newArray9;
							}
							_this12.stackMat3[_this12.sizeMat3++] = mat32;
						}
						if(mat42 != null) {
							var t005 = 1;
							var t015 = 0;
							var t025 = 0;
							var t032 = 0;
							var t105 = 0;
							var t115 = 1;
							var t125 = 0;
							var t132 = 0;
							var t205 = 0;
							var t215 = 0;
							var t225 = 1;
							var t232 = 0;
							var t302 = 0;
							var t312 = 0;
							var t322 = 0;
							var t332 = 1;
							mat42.e00 = t005;
							mat42.e01 = t015;
							mat42.e02 = t025;
							mat42.e03 = t032;
							mat42.e10 = t105;
							mat42.e11 = t115;
							mat42.e12 = t125;
							mat42.e13 = t132;
							mat42.e20 = t205;
							mat42.e21 = t215;
							mat42.e22 = t225;
							mat42.e23 = t232;
							mat42.e30 = t302;
							mat42.e31 = t312;
							mat42.e32 = t322;
							mat42.e33 = t332;
							if(_this12.sizeMat4 == _this12.stackMat4.length) {
								var newLength10 = _this12.sizeMat4 << 1;
								var this11 = new Array(newLength10);
								var newArray10 = this11;
								var _g22 = 0;
								var _g23 = _this12.sizeMat4;
								while(_g22 < _g23) {
									var i11 = _g22++;
									newArray10[i11] = _this12.stackMat4[i11];
									_this12.stackMat4[i11] = null;
								}
								_this12.stackMat4 = newArray10;
							}
							_this12.stackMat4[_this12.sizeMat4++] = mat42;
						}
						if(quat2 != null) {
							var tx5 = 0;
							var ty5 = 0;
							var tz5 = 0;
							var tw2 = 1;
							quat2.x = tx5;
							quat2.y = ty5;
							quat2.z = tz5;
							quat2.w = tw2;
							if(_this12.sizeQuat == _this12.stackQuat.length) {
								var newLength11 = _this12.sizeQuat << 1;
								var this12 = new Array(newLength11);
								var newArray11 = this12;
								var _g24 = 0;
								var _g25 = _this12.sizeQuat;
								while(_g24 < _g25) {
									var i12 = _g24++;
									newArray11[i12] = _this12.stackQuat[i12];
									_this12.stackQuat[i12] = null;
								}
								_this12.stackQuat = newArray11;
							}
							_this12.stackQuat[_this12.sizeQuat++] = quat2;
						}
						var _this13 = this._pool;
						var mat33 = null;
						var mat43 = null;
						var quat3 = null;
						if(pos2 != null) {
							pos2.zero();
							if(_this13.sizeVec3 == _this13.stackVec3.length) {
								var newLength12 = _this13.sizeVec3 << 1;
								var this13 = new Array(newLength12);
								var newArray12 = this13;
								var _g26 = 0;
								var _g27 = _this13.sizeVec3;
								while(_g26 < _g27) {
									var i13 = _g26++;
									newArray12[i13] = _this13.stackVec3[i13];
									_this13.stackVec3[i13] = null;
								}
								_this13.stackVec3 = newArray12;
							}
							_this13.stackVec3[_this13.sizeVec3++] = pos2;
						}
						if(mat33 != null) {
							var t006 = 1;
							var t016 = 0;
							var t026 = 0;
							var t106 = 0;
							var t116 = 1;
							var t126 = 0;
							var t206 = 0;
							var t216 = 0;
							var t226 = 1;
							mat33.e00 = t006;
							mat33.e01 = t016;
							mat33.e02 = t026;
							mat33.e10 = t106;
							mat33.e11 = t116;
							mat33.e12 = t126;
							mat33.e20 = t206;
							mat33.e21 = t216;
							mat33.e22 = t226;
							if(_this13.sizeMat3 == _this13.stackMat3.length) {
								var newLength13 = _this13.sizeMat3 << 1;
								var this14 = new Array(newLength13);
								var newArray13 = this14;
								var _g28 = 0;
								var _g29 = _this13.sizeMat3;
								while(_g28 < _g29) {
									var i14 = _g28++;
									newArray13[i14] = _this13.stackMat3[i14];
									_this13.stackMat3[i14] = null;
								}
								_this13.stackMat3 = newArray13;
							}
							_this13.stackMat3[_this13.sizeMat3++] = mat33;
						}
						if(mat43 != null) {
							var t007 = 1;
							var t017 = 0;
							var t027 = 0;
							var t033 = 0;
							var t107 = 0;
							var t117 = 1;
							var t127 = 0;
							var t133 = 0;
							var t207 = 0;
							var t217 = 0;
							var t227 = 1;
							var t233 = 0;
							var t303 = 0;
							var t313 = 0;
							var t323 = 0;
							var t333 = 1;
							mat43.e00 = t007;
							mat43.e01 = t017;
							mat43.e02 = t027;
							mat43.e03 = t033;
							mat43.e10 = t107;
							mat43.e11 = t117;
							mat43.e12 = t127;
							mat43.e13 = t133;
							mat43.e20 = t207;
							mat43.e21 = t217;
							mat43.e22 = t227;
							mat43.e23 = t233;
							mat43.e30 = t303;
							mat43.e31 = t313;
							mat43.e32 = t323;
							mat43.e33 = t333;
							if(_this13.sizeMat4 == _this13.stackMat4.length) {
								var newLength14 = _this13.sizeMat4 << 1;
								var this15 = new Array(newLength14);
								var newArray14 = this15;
								var _g30 = 0;
								var _g31 = _this13.sizeMat4;
								while(_g30 < _g31) {
									var i15 = _g30++;
									newArray14[i15] = _this13.stackMat4[i15];
									_this13.stackMat4[i15] = null;
								}
								_this13.stackMat4 = newArray14;
							}
							_this13.stackMat4[_this13.sizeMat4++] = mat43;
						}
						if(quat3 != null) {
							var tx6 = 0;
							var ty6 = 0;
							var tz6 = 0;
							var tw3 = 1;
							quat3.x = tx6;
							quat3.y = ty6;
							quat3.z = tz6;
							quat3.w = tw3;
							if(_this13.sizeQuat == _this13.stackQuat.length) {
								var newLength15 = _this13.sizeQuat << 1;
								var this16 = new Array(newLength15);
								var newArray15 = this16;
								var _g32 = 0;
								var _g33 = _this13.sizeQuat;
								while(_g32 < _g33) {
									var i16 = _g32++;
									newArray15[i16] = _this13.stackQuat[i16];
									_this13.stackQuat[i16] = null;
								}
								_this13.stackQuat = newArray15;
							}
							_this13.stackQuat[_this13.sizeQuat++] = quat3;
						}
						var _this14 = this._pool;
						var mat34 = null;
						var mat44 = null;
						var quat4 = null;
						if(normal != null) {
							normal.zero();
							if(_this14.sizeVec3 == _this14.stackVec3.length) {
								var newLength16 = _this14.sizeVec3 << 1;
								var this17 = new Array(newLength16);
								var newArray16 = this17;
								var _g34 = 0;
								var _g35 = _this14.sizeVec3;
								while(_g34 < _g35) {
									var i17 = _g34++;
									newArray16[i17] = _this14.stackVec3[i17];
									_this14.stackVec3[i17] = null;
								}
								_this14.stackVec3 = newArray16;
							}
							_this14.stackVec3[_this14.sizeVec3++] = normal;
						}
						if(mat34 != null) {
							var t008 = 1;
							var t018 = 0;
							var t028 = 0;
							var t108 = 0;
							var t118 = 1;
							var t128 = 0;
							var t208 = 0;
							var t218 = 0;
							var t228 = 1;
							mat34.e00 = t008;
							mat34.e01 = t018;
							mat34.e02 = t028;
							mat34.e10 = t108;
							mat34.e11 = t118;
							mat34.e12 = t128;
							mat34.e20 = t208;
							mat34.e21 = t218;
							mat34.e22 = t228;
							if(_this14.sizeMat3 == _this14.stackMat3.length) {
								var newLength17 = _this14.sizeMat3 << 1;
								var this18 = new Array(newLength17);
								var newArray17 = this18;
								var _g36 = 0;
								var _g37 = _this14.sizeMat3;
								while(_g36 < _g37) {
									var i18 = _g36++;
									newArray17[i18] = _this14.stackMat3[i18];
									_this14.stackMat3[i18] = null;
								}
								_this14.stackMat3 = newArray17;
							}
							_this14.stackMat3[_this14.sizeMat3++] = mat34;
						}
						if(mat44 != null) {
							var t009 = 1;
							var t019 = 0;
							var t029 = 0;
							var t034 = 0;
							var t109 = 0;
							var t119 = 1;
							var t129 = 0;
							var t134 = 0;
							var t209 = 0;
							var t219 = 0;
							var t229 = 1;
							var t234 = 0;
							var t304 = 0;
							var t314 = 0;
							var t324 = 0;
							var t334 = 1;
							mat44.e00 = t009;
							mat44.e01 = t019;
							mat44.e02 = t029;
							mat44.e03 = t034;
							mat44.e10 = t109;
							mat44.e11 = t119;
							mat44.e12 = t129;
							mat44.e13 = t134;
							mat44.e20 = t209;
							mat44.e21 = t219;
							mat44.e22 = t229;
							mat44.e23 = t234;
							mat44.e30 = t304;
							mat44.e31 = t314;
							mat44.e32 = t324;
							mat44.e33 = t334;
							if(_this14.sizeMat4 == _this14.stackMat4.length) {
								var newLength18 = _this14.sizeMat4 << 1;
								var this19 = new Array(newLength18);
								var newArray18 = this19;
								var _g38 = 0;
								var _g39 = _this14.sizeMat4;
								while(_g38 < _g39) {
									var i19 = _g38++;
									newArray18[i19] = _this14.stackMat4[i19];
									_this14.stackMat4[i19] = null;
								}
								_this14.stackMat4 = newArray18;
							}
							_this14.stackMat4[_this14.sizeMat4++] = mat44;
						}
						if(quat4 != null) {
							var tx7 = 0;
							var ty7 = 0;
							var tz7 = 0;
							var tw4 = 1;
							quat4.x = tx7;
							quat4.y = ty7;
							quat4.z = tz7;
							quat4.w = tw4;
							if(_this14.sizeQuat == _this14.stackQuat.length) {
								var newLength19 = _this14.sizeQuat << 1;
								var this20 = new Array(newLength19);
								var newArray19 = this20;
								var _g40 = 0;
								var _g41 = _this14.sizeQuat;
								while(_g40 < _g41) {
									var i20 = _g40++;
									newArray19[i20] = _this14.stackQuat[i20];
									_this14.stackQuat[i20] = null;
								}
								_this14.stackQuat = newArray19;
							}
							_this14.stackQuat[_this14.sizeQuat++] = quat4;
						}
						var _this15 = this._pool;
						var mat35 = null;
						var mat45 = null;
						var quat5 = null;
						if(tangent != null) {
							tangent.zero();
							if(_this15.sizeVec3 == _this15.stackVec3.length) {
								var newLength20 = _this15.sizeVec3 << 1;
								var this21 = new Array(newLength20);
								var newArray20 = this21;
								var _g42 = 0;
								var _g43 = _this15.sizeVec3;
								while(_g42 < _g43) {
									var i21 = _g42++;
									newArray20[i21] = _this15.stackVec3[i21];
									_this15.stackVec3[i21] = null;
								}
								_this15.stackVec3 = newArray20;
							}
							_this15.stackVec3[_this15.sizeVec3++] = tangent;
						}
						if(mat35 != null) {
							var t0010 = 1;
							var t0110 = 0;
							var t0210 = 0;
							var t1010 = 0;
							var t1110 = 1;
							var t1210 = 0;
							var t2010 = 0;
							var t2110 = 0;
							var t2210 = 1;
							mat35.e00 = t0010;
							mat35.e01 = t0110;
							mat35.e02 = t0210;
							mat35.e10 = t1010;
							mat35.e11 = t1110;
							mat35.e12 = t1210;
							mat35.e20 = t2010;
							mat35.e21 = t2110;
							mat35.e22 = t2210;
							if(_this15.sizeMat3 == _this15.stackMat3.length) {
								var newLength21 = _this15.sizeMat3 << 1;
								var this22 = new Array(newLength21);
								var newArray21 = this22;
								var _g44 = 0;
								var _g45 = _this15.sizeMat3;
								while(_g44 < _g45) {
									var i22 = _g44++;
									newArray21[i22] = _this15.stackMat3[i22];
									_this15.stackMat3[i22] = null;
								}
								_this15.stackMat3 = newArray21;
							}
							_this15.stackMat3[_this15.sizeMat3++] = mat35;
						}
						if(mat45 != null) {
							var t0011 = 1;
							var t0111 = 0;
							var t0211 = 0;
							var t035 = 0;
							var t1011 = 0;
							var t1111 = 1;
							var t1211 = 0;
							var t135 = 0;
							var t2011 = 0;
							var t2111 = 0;
							var t2211 = 1;
							var t235 = 0;
							var t305 = 0;
							var t315 = 0;
							var t325 = 0;
							var t335 = 1;
							mat45.e00 = t0011;
							mat45.e01 = t0111;
							mat45.e02 = t0211;
							mat45.e03 = t035;
							mat45.e10 = t1011;
							mat45.e11 = t1111;
							mat45.e12 = t1211;
							mat45.e13 = t135;
							mat45.e20 = t2011;
							mat45.e21 = t2111;
							mat45.e22 = t2211;
							mat45.e23 = t235;
							mat45.e30 = t305;
							mat45.e31 = t315;
							mat45.e32 = t325;
							mat45.e33 = t335;
							if(_this15.sizeMat4 == _this15.stackMat4.length) {
								var newLength22 = _this15.sizeMat4 << 1;
								var this23 = new Array(newLength22);
								var newArray22 = this23;
								var _g46 = 0;
								var _g47 = _this15.sizeMat4;
								while(_g46 < _g47) {
									var i23 = _g46++;
									newArray22[i23] = _this15.stackMat4[i23];
									_this15.stackMat4[i23] = null;
								}
								_this15.stackMat4 = newArray22;
							}
							_this15.stackMat4[_this15.sizeMat4++] = mat45;
						}
						if(quat5 != null) {
							var tx8 = 0;
							var ty8 = 0;
							var tz8 = 0;
							var tw5 = 1;
							quat5.x = tx8;
							quat5.y = ty8;
							quat5.z = tz8;
							quat5.w = tw5;
							if(_this15.sizeQuat == _this15.stackQuat.length) {
								var newLength23 = _this15.sizeQuat << 1;
								var this24 = new Array(newLength23);
								var newArray23 = this24;
								var _g48 = 0;
								var _g49 = _this15.sizeQuat;
								while(_g48 < _g49) {
									var i24 = _g48++;
									newArray23[i24] = _this15.stackQuat[i24];
									_this15.stackQuat[i24] = null;
								}
								_this15.stackQuat = newArray23;
							}
							_this15.stackQuat[_this15.sizeQuat++] = quat5;
						}
						var _this16 = this._pool;
						var mat36 = null;
						var mat46 = null;
						var quat6 = null;
						if(binormal != null) {
							binormal.zero();
							if(_this16.sizeVec3 == _this16.stackVec3.length) {
								var newLength24 = _this16.sizeVec3 << 1;
								var this25 = new Array(newLength24);
								var newArray24 = this25;
								var _g50 = 0;
								var _g51 = _this16.sizeVec3;
								while(_g50 < _g51) {
									var i25 = _g50++;
									newArray24[i25] = _this16.stackVec3[i25];
									_this16.stackVec3[i25] = null;
								}
								_this16.stackVec3 = newArray24;
							}
							_this16.stackVec3[_this16.sizeVec3++] = binormal;
						}
						if(mat36 != null) {
							var t0012 = 1;
							var t0112 = 0;
							var t0212 = 0;
							var t1012 = 0;
							var t1112 = 1;
							var t1212 = 0;
							var t2012 = 0;
							var t2112 = 0;
							var t2212 = 1;
							mat36.e00 = t0012;
							mat36.e01 = t0112;
							mat36.e02 = t0212;
							mat36.e10 = t1012;
							mat36.e11 = t1112;
							mat36.e12 = t1212;
							mat36.e20 = t2012;
							mat36.e21 = t2112;
							mat36.e22 = t2212;
							if(_this16.sizeMat3 == _this16.stackMat3.length) {
								var newLength25 = _this16.sizeMat3 << 1;
								var this26 = new Array(newLength25);
								var newArray25 = this26;
								var _g52 = 0;
								var _g53 = _this16.sizeMat3;
								while(_g52 < _g53) {
									var i26 = _g52++;
									newArray25[i26] = _this16.stackMat3[i26];
									_this16.stackMat3[i26] = null;
								}
								_this16.stackMat3 = newArray25;
							}
							_this16.stackMat3[_this16.sizeMat3++] = mat36;
						}
						if(mat46 != null) {
							var t0013 = 1;
							var t0113 = 0;
							var t0213 = 0;
							var t036 = 0;
							var t1013 = 0;
							var t1113 = 1;
							var t1213 = 0;
							var t136 = 0;
							var t2013 = 0;
							var t2113 = 0;
							var t2213 = 1;
							var t236 = 0;
							var t306 = 0;
							var t316 = 0;
							var t326 = 0;
							var t336 = 1;
							mat46.e00 = t0013;
							mat46.e01 = t0113;
							mat46.e02 = t0213;
							mat46.e03 = t036;
							mat46.e10 = t1013;
							mat46.e11 = t1113;
							mat46.e12 = t1213;
							mat46.e13 = t136;
							mat46.e20 = t2013;
							mat46.e21 = t2113;
							mat46.e22 = t2213;
							mat46.e23 = t236;
							mat46.e30 = t306;
							mat46.e31 = t316;
							mat46.e32 = t326;
							mat46.e33 = t336;
							if(_this16.sizeMat4 == _this16.stackMat4.length) {
								var newLength26 = _this16.sizeMat4 << 1;
								var this27 = new Array(newLength26);
								var newArray26 = this27;
								var _g54 = 0;
								var _g55 = _this16.sizeMat4;
								while(_g54 < _g55) {
									var i27 = _g54++;
									newArray26[i27] = _this16.stackMat4[i27];
									_this16.stackMat4[i27] = null;
								}
								_this16.stackMat4 = newArray26;
							}
							_this16.stackMat4[_this16.sizeMat4++] = mat46;
						}
						if(quat6 != null) {
							var tx9 = 0;
							var ty9 = 0;
							var tz9 = 0;
							var tw6 = 1;
							quat6.x = tx9;
							quat6.y = ty9;
							quat6.z = tz9;
							quat6.w = tw6;
							if(_this16.sizeQuat == _this16.stackQuat.length) {
								var newLength27 = _this16.sizeQuat << 1;
								var this28 = new Array(newLength27);
								var newArray27 = this28;
								var _g56 = 0;
								var _g57 = _this16.sizeQuat;
								while(_g56 < _g57) {
									var i28 = _g56++;
									newArray27[i28] = _this16.stackQuat[i28];
									_this16.stackQuat[i28] = null;
								}
								_this16.stackQuat = newArray27;
							}
							_this16.stackQuat[_this16.sizeQuat++] = quat6;
						}
					}
				}
				c = n;
			}
		}
		if(d.drawJoints) {
			var j = this._jointList;
			while(j != null) {
				var n = j._next;
				var _this = this._pool;
				var p1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
				var _this1 = this._pool;
				var p2 = _this1.sizeVec3 == 0 ? new oimo_common_Vec3() : _this1.stackVec3[--_this1.sizeVec3];
				var v = p1;
				v.x = j._b1._transform._positionX;
				v.y = j._b1._transform._positionY;
				v.z = j._b1._transform._positionZ;
				var v1 = p2;
				v1.x = j._b2._transform._positionX;
				v1.y = j._b2._transform._positionY;
				v1.z = j._b2._transform._positionZ;
				var _this2 = this._pool;
				var anchor1 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
				var _this3 = this._pool;
				var anchor2 = _this3.sizeVec3 == 0 ? new oimo_common_Vec3() : _this3.stackVec3[--_this3.sizeVec3];
				var _this4 = this._pool;
				var basisX1 = _this4.sizeVec3 == 0 ? new oimo_common_Vec3() : _this4.stackVec3[--_this4.sizeVec3];
				var _this5 = this._pool;
				var basisY1 = _this5.sizeVec3 == 0 ? new oimo_common_Vec3() : _this5.stackVec3[--_this5.sizeVec3];
				var _this6 = this._pool;
				var basisZ1 = _this6.sizeVec3 == 0 ? new oimo_common_Vec3() : _this6.stackVec3[--_this6.sizeVec3];
				var _this7 = this._pool;
				var basisX2 = _this7.sizeVec3 == 0 ? new oimo_common_Vec3() : _this7.stackVec3[--_this7.sizeVec3];
				var _this8 = this._pool;
				var basisY2 = _this8.sizeVec3 == 0 ? new oimo_common_Vec3() : _this8.stackVec3[--_this8.sizeVec3];
				var _this9 = this._pool;
				var basisZ2 = _this9.sizeVec3 == 0 ? new oimo_common_Vec3() : _this9.stackVec3[--_this9.sizeVec3];
				var v2 = anchor1;
				v2.x = j._anchor1X;
				v2.y = j._anchor1Y;
				v2.z = j._anchor1Z;
				var v3 = anchor2;
				v3.x = j._anchor2X;
				v3.y = j._anchor2Y;
				v3.z = j._anchor2Z;
				var v4 = basisX1;
				v4.x = j._basisX1X;
				v4.y = j._basisX1Y;
				v4.z = j._basisX1Z;
				var v5 = basisY1;
				v5.x = j._basisY1X;
				v5.y = j._basisY1Y;
				v5.z = j._basisY1Z;
				var v6 = basisZ1;
				v6.x = j._basisZ1X;
				v6.y = j._basisZ1Y;
				v6.z = j._basisZ1Z;
				var v7 = basisX2;
				v7.x = j._basisX2X;
				v7.y = j._basisX2Y;
				v7.z = j._basisX2Z;
				var v8 = basisY2;
				v8.x = j._basisY2X;
				v8.y = j._basisY2Y;
				v8.z = j._basisY2Z;
				var v9 = basisZ2;
				v9.x = j._basisZ2X;
				v9.y = j._basisZ2Y;
				v9.z = j._basisZ2Z;
				d.line(p1,anchor1,d.style.jointLineColor);
				d.line(p2,anchor2,d.style.jointLineColor);
				if(d.drawJointLimits) {
					switch(j._type) {
					case 0:
						break;
					case 1:
						var radius = d.style.jointRotationalConstraintRadius;
						var color = d.style.jointLineColor;
						var lm = j._lm;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY2,radius,lm.lowerLimit,lm.upperLimit,color);
						break;
					case 2:
						var j1 = j;
						var radius1 = d.style.jointRotationalConstraintRadius;
						var color1 = d.style.jointLineColor;
						var rlm = j1._rotLm;
						var tlm = j1._translLm;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY2,radius1,rlm.lowerLimit,rlm.upperLimit,color1);
						this._drawTranslationalLimit(d,anchor1,basisX1,tlm.lowerLimit,tlm.upperLimit,color1);
						break;
					case 3:
						var radius2 = d.style.jointRotationalConstraintRadius;
						var color2 = d.style.jointLineColor;
						var lm1 = j._lm;
						this._drawTranslationalLimit(d,anchor1,basisX1,lm1.lowerLimit,lm1.upperLimit,color2);
						break;
					case 4:
						var j2 = j;
						var radius3 = d.style.jointRotationalConstraintRadius;
						var color3 = d.style.jointLineColor;
						var lm11 = j2._lm1;
						var lm2 = j2._lm2;
						this._drawRotationalLimit(d,anchor1,basisY1,basisZ1,basisY1,radius3,j2._angleX - lm11.upperLimit,j2._angleX - lm11.lowerLimit,color3);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius3,lm2.lowerLimit - j2._angleZ,lm2.upperLimit - j2._angleZ,color3);
						break;
					case 5:
						var j3 = j;
						var radius4 = d.style.jointRotationalConstraintRadius;
						var color4 = d.style.jointLineColor;
						var lm3 = j3._twistLm;
						this._drawRotationalLimit(d,anchor2,basisY2,basisZ2,basisY2,radius4,lm3.lowerLimit - j3._twistAngle,lm3.upperLimit - j3._twistAngle,color4);
						this._drawEllipseOnSphere(d,anchor1,basisX1,basisY1,basisZ1,j3._maxSwingAngle1,j3._maxSwingAngle2,radius4,color4);
						var _this10 = this._pool;
						var _this11 = _this10.sizeVec3 == 0 ? new oimo_common_Vec3() : _this10.stackVec3[--_this10.sizeVec3];
						_this11.x = anchor2.x;
						_this11.y = anchor2.y;
						_this11.z = anchor2.z;
						var _this12 = _this11;
						var tx = _this12.x + basisX2.x * radius4;
						var ty = _this12.y + basisX2.y * radius4;
						var tz = _this12.z + basisX2.z * radius4;
						_this12.x = tx;
						_this12.y = ty;
						_this12.z = tz;
						var to = _this12;
						d.line(anchor2,to,color4);
						var _this13 = this._pool;
						var mat3 = null;
						var mat4 = null;
						var quat = null;
						if(to != null) {
							to.zero();
							if(_this13.sizeVec3 == _this13.stackVec3.length) {
								var newLength = _this13.sizeVec3 << 1;
								var this1 = new Array(newLength);
								var newArray = this1;
								var _g = 0;
								var _g1 = _this13.sizeVec3;
								while(_g < _g1) {
									var i = _g++;
									newArray[i] = _this13.stackVec3[i];
									_this13.stackVec3[i] = null;
								}
								_this13.stackVec3 = newArray;
							}
							_this13.stackVec3[_this13.sizeVec3++] = to;
						}
						if(mat3 != null) {
							var t00 = 1;
							var t01 = 0;
							var t02 = 0;
							var t10 = 0;
							var t11 = 1;
							var t12 = 0;
							var t20 = 0;
							var t21 = 0;
							var t22 = 1;
							mat3.e00 = t00;
							mat3.e01 = t01;
							mat3.e02 = t02;
							mat3.e10 = t10;
							mat3.e11 = t11;
							mat3.e12 = t12;
							mat3.e20 = t20;
							mat3.e21 = t21;
							mat3.e22 = t22;
							if(_this13.sizeMat3 == _this13.stackMat3.length) {
								var newLength1 = _this13.sizeMat3 << 1;
								var this2 = new Array(newLength1);
								var newArray1 = this2;
								var _g2 = 0;
								var _g3 = _this13.sizeMat3;
								while(_g2 < _g3) {
									var i1 = _g2++;
									newArray1[i1] = _this13.stackMat3[i1];
									_this13.stackMat3[i1] = null;
								}
								_this13.stackMat3 = newArray1;
							}
							_this13.stackMat3[_this13.sizeMat3++] = mat3;
						}
						if(mat4 != null) {
							var t001 = 1;
							var t011 = 0;
							var t021 = 0;
							var t03 = 0;
							var t101 = 0;
							var t111 = 1;
							var t121 = 0;
							var t13 = 0;
							var t201 = 0;
							var t211 = 0;
							var t221 = 1;
							var t23 = 0;
							var t30 = 0;
							var t31 = 0;
							var t32 = 0;
							var t33 = 1;
							mat4.e00 = t001;
							mat4.e01 = t011;
							mat4.e02 = t021;
							mat4.e03 = t03;
							mat4.e10 = t101;
							mat4.e11 = t111;
							mat4.e12 = t121;
							mat4.e13 = t13;
							mat4.e20 = t201;
							mat4.e21 = t211;
							mat4.e22 = t221;
							mat4.e23 = t23;
							mat4.e30 = t30;
							mat4.e31 = t31;
							mat4.e32 = t32;
							mat4.e33 = t33;
							if(_this13.sizeMat4 == _this13.stackMat4.length) {
								var newLength2 = _this13.sizeMat4 << 1;
								var this3 = new Array(newLength2);
								var newArray2 = this3;
								var _g4 = 0;
								var _g5 = _this13.sizeMat4;
								while(_g4 < _g5) {
									var i2 = _g4++;
									newArray2[i2] = _this13.stackMat4[i2];
									_this13.stackMat4[i2] = null;
								}
								_this13.stackMat4 = newArray2;
							}
							_this13.stackMat4[_this13.sizeMat4++] = mat4;
						}
						if(quat != null) {
							var tx1 = 0;
							var ty1 = 0;
							var tz1 = 0;
							var tw = 1;
							quat.x = tx1;
							quat.y = ty1;
							quat.z = tz1;
							quat.w = tw;
							if(_this13.sizeQuat == _this13.stackQuat.length) {
								var newLength3 = _this13.sizeQuat << 1;
								var this4 = new Array(newLength3);
								var newArray3 = this4;
								var _g6 = 0;
								var _g7 = _this13.sizeQuat;
								while(_g6 < _g7) {
									var i3 = _g6++;
									newArray3[i3] = _this13.stackQuat[i3];
									_this13.stackQuat[i3] = null;
								}
								_this13.stackQuat = newArray3;
							}
							_this13.stackQuat[_this13.sizeQuat++] = quat;
						}
						break;
					case 6:
						var j4 = j;
						var radius5 = d.style.jointRotationalConstraintRadius;
						var color5 = d.style.jointLineColor;
						var txlm = j4._translLms[0];
						var tylm = j4._translLms[1];
						var tzlm = j4._translLms[2];
						var rxlm = j4._rotLms[0];
						var rylm = j4._rotLms[1];
						var rzlm = j4._rotLms[2];
						this._drawTranslationalLimit3D(d,anchor1,basisX1,basisY1,basisZ1,txlm,tylm,tzlm,color5);
						var _this14 = this._pool;
						var rotYAxis = _this14.sizeVec3 == 0 ? new oimo_common_Vec3() : _this14.stackVec3[--_this14.sizeVec3];
						var v10 = rotYAxis;
						v10.x = j4._axisYX;
						v10.y = j4._axisYY;
						v10.z = j4._axisYZ;
						var _this15 = this._pool;
						var _this16 = _this15.sizeVec3 == 0 ? new oimo_common_Vec3() : _this15.stackVec3[--_this15.sizeVec3];
						_this16.x = basisX1.x;
						_this16.y = basisX1.y;
						_this16.z = basisX1.z;
						var rotYBasisX = _this16;
						var _this17 = this._pool;
						var _this18 = _this17.sizeVec3 == 0 ? new oimo_common_Vec3() : _this17.stackVec3[--_this17.sizeVec3];
						_this18.x = basisX1.x;
						_this18.y = basisX1.y;
						_this18.z = basisX1.z;
						var _this19 = _this18;
						var tx2 = _this19.y * rotYAxis.z - _this19.z * rotYAxis.y;
						var ty2 = _this19.z * rotYAxis.x - _this19.x * rotYAxis.z;
						var tz2 = _this19.x * rotYAxis.y - _this19.y * rotYAxis.x;
						_this19.x = tx2;
						_this19.y = ty2;
						_this19.z = tz2;
						var rotYBasisY = _this19;
						this._drawRotationalLimit(d,anchor2,basisY1,basisZ1,basisY1,radius5,j4._angleX - rxlm.upperLimit,j4._angleX - rxlm.lowerLimit,color5);
						this._drawRotationalLimit(d,anchor2,rotYBasisX,rotYBasisY,rotYBasisX,radius5,rylm.lowerLimit - j4._angleY,rylm.upperLimit - j4._angleY,color5);
						this._drawRotationalLimit(d,anchor2,basisX2,basisY2,basisX2,radius5,rzlm.lowerLimit - j4._angleZ,rzlm.upperLimit - j4._angleZ,color5);
						break;
					}
				}
				d.line(anchor1,anchor2,d.style.jointErrorColor);
				var _this20 = this._pool;
				var mat31 = null;
				var mat41 = null;
				var quat1 = null;
				if(p1 != null) {
					p1.zero();
					if(_this20.sizeVec3 == _this20.stackVec3.length) {
						var newLength4 = _this20.sizeVec3 << 1;
						var this5 = new Array(newLength4);
						var newArray4 = this5;
						var _g8 = 0;
						var _g9 = _this20.sizeVec3;
						while(_g8 < _g9) {
							var i4 = _g8++;
							newArray4[i4] = _this20.stackVec3[i4];
							_this20.stackVec3[i4] = null;
						}
						_this20.stackVec3 = newArray4;
					}
					_this20.stackVec3[_this20.sizeVec3++] = p1;
				}
				if(mat31 != null) {
					var t002 = 1;
					var t012 = 0;
					var t022 = 0;
					var t102 = 0;
					var t112 = 1;
					var t122 = 0;
					var t202 = 0;
					var t212 = 0;
					var t222 = 1;
					mat31.e00 = t002;
					mat31.e01 = t012;
					mat31.e02 = t022;
					mat31.e10 = t102;
					mat31.e11 = t112;
					mat31.e12 = t122;
					mat31.e20 = t202;
					mat31.e21 = t212;
					mat31.e22 = t222;
					if(_this20.sizeMat3 == _this20.stackMat3.length) {
						var newLength5 = _this20.sizeMat3 << 1;
						var this6 = new Array(newLength5);
						var newArray5 = this6;
						var _g10 = 0;
						var _g11 = _this20.sizeMat3;
						while(_g10 < _g11) {
							var i5 = _g10++;
							newArray5[i5] = _this20.stackMat3[i5];
							_this20.stackMat3[i5] = null;
						}
						_this20.stackMat3 = newArray5;
					}
					_this20.stackMat3[_this20.sizeMat3++] = mat31;
				}
				if(mat41 != null) {
					var t003 = 1;
					var t013 = 0;
					var t023 = 0;
					var t031 = 0;
					var t103 = 0;
					var t113 = 1;
					var t123 = 0;
					var t131 = 0;
					var t203 = 0;
					var t213 = 0;
					var t223 = 1;
					var t231 = 0;
					var t301 = 0;
					var t311 = 0;
					var t321 = 0;
					var t331 = 1;
					mat41.e00 = t003;
					mat41.e01 = t013;
					mat41.e02 = t023;
					mat41.e03 = t031;
					mat41.e10 = t103;
					mat41.e11 = t113;
					mat41.e12 = t123;
					mat41.e13 = t131;
					mat41.e20 = t203;
					mat41.e21 = t213;
					mat41.e22 = t223;
					mat41.e23 = t231;
					mat41.e30 = t301;
					mat41.e31 = t311;
					mat41.e32 = t321;
					mat41.e33 = t331;
					if(_this20.sizeMat4 == _this20.stackMat4.length) {
						var newLength6 = _this20.sizeMat4 << 1;
						var this7 = new Array(newLength6);
						var newArray6 = this7;
						var _g12 = 0;
						var _g13 = _this20.sizeMat4;
						while(_g12 < _g13) {
							var i6 = _g12++;
							newArray6[i6] = _this20.stackMat4[i6];
							_this20.stackMat4[i6] = null;
						}
						_this20.stackMat4 = newArray6;
					}
					_this20.stackMat4[_this20.sizeMat4++] = mat41;
				}
				if(quat1 != null) {
					var tx3 = 0;
					var ty3 = 0;
					var tz3 = 0;
					var tw1 = 1;
					quat1.x = tx3;
					quat1.y = ty3;
					quat1.z = tz3;
					quat1.w = tw1;
					if(_this20.sizeQuat == _this20.stackQuat.length) {
						var newLength7 = _this20.sizeQuat << 1;
						var this8 = new Array(newLength7);
						var newArray7 = this8;
						var _g14 = 0;
						var _g15 = _this20.sizeQuat;
						while(_g14 < _g15) {
							var i7 = _g14++;
							newArray7[i7] = _this20.stackQuat[i7];
							_this20.stackQuat[i7] = null;
						}
						_this20.stackQuat = newArray7;
					}
					_this20.stackQuat[_this20.sizeQuat++] = quat1;
				}
				var _this21 = this._pool;
				var mat32 = null;
				var mat42 = null;
				var quat2 = null;
				if(p2 != null) {
					p2.zero();
					if(_this21.sizeVec3 == _this21.stackVec3.length) {
						var newLength8 = _this21.sizeVec3 << 1;
						var this9 = new Array(newLength8);
						var newArray8 = this9;
						var _g16 = 0;
						var _g17 = _this21.sizeVec3;
						while(_g16 < _g17) {
							var i8 = _g16++;
							newArray8[i8] = _this21.stackVec3[i8];
							_this21.stackVec3[i8] = null;
						}
						_this21.stackVec3 = newArray8;
					}
					_this21.stackVec3[_this21.sizeVec3++] = p2;
				}
				if(mat32 != null) {
					var t004 = 1;
					var t014 = 0;
					var t024 = 0;
					var t104 = 0;
					var t114 = 1;
					var t124 = 0;
					var t204 = 0;
					var t214 = 0;
					var t224 = 1;
					mat32.e00 = t004;
					mat32.e01 = t014;
					mat32.e02 = t024;
					mat32.e10 = t104;
					mat32.e11 = t114;
					mat32.e12 = t124;
					mat32.e20 = t204;
					mat32.e21 = t214;
					mat32.e22 = t224;
					if(_this21.sizeMat3 == _this21.stackMat3.length) {
						var newLength9 = _this21.sizeMat3 << 1;
						var this10 = new Array(newLength9);
						var newArray9 = this10;
						var _g18 = 0;
						var _g19 = _this21.sizeMat3;
						while(_g18 < _g19) {
							var i9 = _g18++;
							newArray9[i9] = _this21.stackMat3[i9];
							_this21.stackMat3[i9] = null;
						}
						_this21.stackMat3 = newArray9;
					}
					_this21.stackMat3[_this21.sizeMat3++] = mat32;
				}
				if(mat42 != null) {
					var t005 = 1;
					var t015 = 0;
					var t025 = 0;
					var t032 = 0;
					var t105 = 0;
					var t115 = 1;
					var t125 = 0;
					var t132 = 0;
					var t205 = 0;
					var t215 = 0;
					var t225 = 1;
					var t232 = 0;
					var t302 = 0;
					var t312 = 0;
					var t322 = 0;
					var t332 = 1;
					mat42.e00 = t005;
					mat42.e01 = t015;
					mat42.e02 = t025;
					mat42.e03 = t032;
					mat42.e10 = t105;
					mat42.e11 = t115;
					mat42.e12 = t125;
					mat42.e13 = t132;
					mat42.e20 = t205;
					mat42.e21 = t215;
					mat42.e22 = t225;
					mat42.e23 = t232;
					mat42.e30 = t302;
					mat42.e31 = t312;
					mat42.e32 = t322;
					mat42.e33 = t332;
					if(_this21.sizeMat4 == _this21.stackMat4.length) {
						var newLength10 = _this21.sizeMat4 << 1;
						var this11 = new Array(newLength10);
						var newArray10 = this11;
						var _g20 = 0;
						var _g21 = _this21.sizeMat4;
						while(_g20 < _g21) {
							var i10 = _g20++;
							newArray10[i10] = _this21.stackMat4[i10];
							_this21.stackMat4[i10] = null;
						}
						_this21.stackMat4 = newArray10;
					}
					_this21.stackMat4[_this21.sizeMat4++] = mat42;
				}
				if(quat2 != null) {
					var tx4 = 0;
					var ty4 = 0;
					var tz4 = 0;
					var tw2 = 1;
					quat2.x = tx4;
					quat2.y = ty4;
					quat2.z = tz4;
					quat2.w = tw2;
					if(_this21.sizeQuat == _this21.stackQuat.length) {
						var newLength11 = _this21.sizeQuat << 1;
						var this12 = new Array(newLength11);
						var newArray11 = this12;
						var _g22 = 0;
						var _g23 = _this21.sizeQuat;
						while(_g22 < _g23) {
							var i11 = _g22++;
							newArray11[i11] = _this21.stackQuat[i11];
							_this21.stackQuat[i11] = null;
						}
						_this21.stackQuat = newArray11;
					}
					_this21.stackQuat[_this21.sizeQuat++] = quat2;
				}
				var _this22 = this._pool;
				var mat33 = null;
				var mat43 = null;
				var quat3 = null;
				if(anchor1 != null) {
					anchor1.zero();
					if(_this22.sizeVec3 == _this22.stackVec3.length) {
						var newLength12 = _this22.sizeVec3 << 1;
						var this13 = new Array(newLength12);
						var newArray12 = this13;
						var _g24 = 0;
						var _g25 = _this22.sizeVec3;
						while(_g24 < _g25) {
							var i12 = _g24++;
							newArray12[i12] = _this22.stackVec3[i12];
							_this22.stackVec3[i12] = null;
						}
						_this22.stackVec3 = newArray12;
					}
					_this22.stackVec3[_this22.sizeVec3++] = anchor1;
				}
				if(mat33 != null) {
					var t006 = 1;
					var t016 = 0;
					var t026 = 0;
					var t106 = 0;
					var t116 = 1;
					var t126 = 0;
					var t206 = 0;
					var t216 = 0;
					var t226 = 1;
					mat33.e00 = t006;
					mat33.e01 = t016;
					mat33.e02 = t026;
					mat33.e10 = t106;
					mat33.e11 = t116;
					mat33.e12 = t126;
					mat33.e20 = t206;
					mat33.e21 = t216;
					mat33.e22 = t226;
					if(_this22.sizeMat3 == _this22.stackMat3.length) {
						var newLength13 = _this22.sizeMat3 << 1;
						var this14 = new Array(newLength13);
						var newArray13 = this14;
						var _g26 = 0;
						var _g27 = _this22.sizeMat3;
						while(_g26 < _g27) {
							var i13 = _g26++;
							newArray13[i13] = _this22.stackMat3[i13];
							_this22.stackMat3[i13] = null;
						}
						_this22.stackMat3 = newArray13;
					}
					_this22.stackMat3[_this22.sizeMat3++] = mat33;
				}
				if(mat43 != null) {
					var t007 = 1;
					var t017 = 0;
					var t027 = 0;
					var t033 = 0;
					var t107 = 0;
					var t117 = 1;
					var t127 = 0;
					var t133 = 0;
					var t207 = 0;
					var t217 = 0;
					var t227 = 1;
					var t233 = 0;
					var t303 = 0;
					var t313 = 0;
					var t323 = 0;
					var t333 = 1;
					mat43.e00 = t007;
					mat43.e01 = t017;
					mat43.e02 = t027;
					mat43.e03 = t033;
					mat43.e10 = t107;
					mat43.e11 = t117;
					mat43.e12 = t127;
					mat43.e13 = t133;
					mat43.e20 = t207;
					mat43.e21 = t217;
					mat43.e22 = t227;
					mat43.e23 = t233;
					mat43.e30 = t303;
					mat43.e31 = t313;
					mat43.e32 = t323;
					mat43.e33 = t333;
					if(_this22.sizeMat4 == _this22.stackMat4.length) {
						var newLength14 = _this22.sizeMat4 << 1;
						var this15 = new Array(newLength14);
						var newArray14 = this15;
						var _g28 = 0;
						var _g29 = _this22.sizeMat4;
						while(_g28 < _g29) {
							var i14 = _g28++;
							newArray14[i14] = _this22.stackMat4[i14];
							_this22.stackMat4[i14] = null;
						}
						_this22.stackMat4 = newArray14;
					}
					_this22.stackMat4[_this22.sizeMat4++] = mat43;
				}
				if(quat3 != null) {
					var tx5 = 0;
					var ty5 = 0;
					var tz5 = 0;
					var tw3 = 1;
					quat3.x = tx5;
					quat3.y = ty5;
					quat3.z = tz5;
					quat3.w = tw3;
					if(_this22.sizeQuat == _this22.stackQuat.length) {
						var newLength15 = _this22.sizeQuat << 1;
						var this16 = new Array(newLength15);
						var newArray15 = this16;
						var _g30 = 0;
						var _g31 = _this22.sizeQuat;
						while(_g30 < _g31) {
							var i15 = _g30++;
							newArray15[i15] = _this22.stackQuat[i15];
							_this22.stackQuat[i15] = null;
						}
						_this22.stackQuat = newArray15;
					}
					_this22.stackQuat[_this22.sizeQuat++] = quat3;
				}
				var _this23 = this._pool;
				var mat34 = null;
				var mat44 = null;
				var quat4 = null;
				if(anchor2 != null) {
					anchor2.zero();
					if(_this23.sizeVec3 == _this23.stackVec3.length) {
						var newLength16 = _this23.sizeVec3 << 1;
						var this17 = new Array(newLength16);
						var newArray16 = this17;
						var _g32 = 0;
						var _g33 = _this23.sizeVec3;
						while(_g32 < _g33) {
							var i16 = _g32++;
							newArray16[i16] = _this23.stackVec3[i16];
							_this23.stackVec3[i16] = null;
						}
						_this23.stackVec3 = newArray16;
					}
					_this23.stackVec3[_this23.sizeVec3++] = anchor2;
				}
				if(mat34 != null) {
					var t008 = 1;
					var t018 = 0;
					var t028 = 0;
					var t108 = 0;
					var t118 = 1;
					var t128 = 0;
					var t208 = 0;
					var t218 = 0;
					var t228 = 1;
					mat34.e00 = t008;
					mat34.e01 = t018;
					mat34.e02 = t028;
					mat34.e10 = t108;
					mat34.e11 = t118;
					mat34.e12 = t128;
					mat34.e20 = t208;
					mat34.e21 = t218;
					mat34.e22 = t228;
					if(_this23.sizeMat3 == _this23.stackMat3.length) {
						var newLength17 = _this23.sizeMat3 << 1;
						var this18 = new Array(newLength17);
						var newArray17 = this18;
						var _g34 = 0;
						var _g35 = _this23.sizeMat3;
						while(_g34 < _g35) {
							var i17 = _g34++;
							newArray17[i17] = _this23.stackMat3[i17];
							_this23.stackMat3[i17] = null;
						}
						_this23.stackMat3 = newArray17;
					}
					_this23.stackMat3[_this23.sizeMat3++] = mat34;
				}
				if(mat44 != null) {
					var t009 = 1;
					var t019 = 0;
					var t029 = 0;
					var t034 = 0;
					var t109 = 0;
					var t119 = 1;
					var t129 = 0;
					var t134 = 0;
					var t209 = 0;
					var t219 = 0;
					var t229 = 1;
					var t234 = 0;
					var t304 = 0;
					var t314 = 0;
					var t324 = 0;
					var t334 = 1;
					mat44.e00 = t009;
					mat44.e01 = t019;
					mat44.e02 = t029;
					mat44.e03 = t034;
					mat44.e10 = t109;
					mat44.e11 = t119;
					mat44.e12 = t129;
					mat44.e13 = t134;
					mat44.e20 = t209;
					mat44.e21 = t219;
					mat44.e22 = t229;
					mat44.e23 = t234;
					mat44.e30 = t304;
					mat44.e31 = t314;
					mat44.e32 = t324;
					mat44.e33 = t334;
					if(_this23.sizeMat4 == _this23.stackMat4.length) {
						var newLength18 = _this23.sizeMat4 << 1;
						var this19 = new Array(newLength18);
						var newArray18 = this19;
						var _g36 = 0;
						var _g37 = _this23.sizeMat4;
						while(_g36 < _g37) {
							var i18 = _g36++;
							newArray18[i18] = _this23.stackMat4[i18];
							_this23.stackMat4[i18] = null;
						}
						_this23.stackMat4 = newArray18;
					}
					_this23.stackMat4[_this23.sizeMat4++] = mat44;
				}
				if(quat4 != null) {
					var tx6 = 0;
					var ty6 = 0;
					var tz6 = 0;
					var tw4 = 1;
					quat4.x = tx6;
					quat4.y = ty6;
					quat4.z = tz6;
					quat4.w = tw4;
					if(_this23.sizeQuat == _this23.stackQuat.length) {
						var newLength19 = _this23.sizeQuat << 1;
						var this20 = new Array(newLength19);
						var newArray19 = this20;
						var _g38 = 0;
						var _g39 = _this23.sizeQuat;
						while(_g38 < _g39) {
							var i19 = _g38++;
							newArray19[i19] = _this23.stackQuat[i19];
							_this23.stackQuat[i19] = null;
						}
						_this23.stackQuat = newArray19;
					}
					_this23.stackQuat[_this23.sizeQuat++] = quat4;
				}
				var _this24 = this._pool;
				var mat35 = null;
				var mat45 = null;
				var quat5 = null;
				if(basisX1 != null) {
					basisX1.zero();
					if(_this24.sizeVec3 == _this24.stackVec3.length) {
						var newLength20 = _this24.sizeVec3 << 1;
						var this21 = new Array(newLength20);
						var newArray20 = this21;
						var _g40 = 0;
						var _g41 = _this24.sizeVec3;
						while(_g40 < _g41) {
							var i20 = _g40++;
							newArray20[i20] = _this24.stackVec3[i20];
							_this24.stackVec3[i20] = null;
						}
						_this24.stackVec3 = newArray20;
					}
					_this24.stackVec3[_this24.sizeVec3++] = basisX1;
				}
				if(mat35 != null) {
					var t0010 = 1;
					var t0110 = 0;
					var t0210 = 0;
					var t1010 = 0;
					var t1110 = 1;
					var t1210 = 0;
					var t2010 = 0;
					var t2110 = 0;
					var t2210 = 1;
					mat35.e00 = t0010;
					mat35.e01 = t0110;
					mat35.e02 = t0210;
					mat35.e10 = t1010;
					mat35.e11 = t1110;
					mat35.e12 = t1210;
					mat35.e20 = t2010;
					mat35.e21 = t2110;
					mat35.e22 = t2210;
					if(_this24.sizeMat3 == _this24.stackMat3.length) {
						var newLength21 = _this24.sizeMat3 << 1;
						var this22 = new Array(newLength21);
						var newArray21 = this22;
						var _g42 = 0;
						var _g43 = _this24.sizeMat3;
						while(_g42 < _g43) {
							var i21 = _g42++;
							newArray21[i21] = _this24.stackMat3[i21];
							_this24.stackMat3[i21] = null;
						}
						_this24.stackMat3 = newArray21;
					}
					_this24.stackMat3[_this24.sizeMat3++] = mat35;
				}
				if(mat45 != null) {
					var t0011 = 1;
					var t0111 = 0;
					var t0211 = 0;
					var t035 = 0;
					var t1011 = 0;
					var t1111 = 1;
					var t1211 = 0;
					var t135 = 0;
					var t2011 = 0;
					var t2111 = 0;
					var t2211 = 1;
					var t235 = 0;
					var t305 = 0;
					var t315 = 0;
					var t325 = 0;
					var t335 = 1;
					mat45.e00 = t0011;
					mat45.e01 = t0111;
					mat45.e02 = t0211;
					mat45.e03 = t035;
					mat45.e10 = t1011;
					mat45.e11 = t1111;
					mat45.e12 = t1211;
					mat45.e13 = t135;
					mat45.e20 = t2011;
					mat45.e21 = t2111;
					mat45.e22 = t2211;
					mat45.e23 = t235;
					mat45.e30 = t305;
					mat45.e31 = t315;
					mat45.e32 = t325;
					mat45.e33 = t335;
					if(_this24.sizeMat4 == _this24.stackMat4.length) {
						var newLength22 = _this24.sizeMat4 << 1;
						var this23 = new Array(newLength22);
						var newArray22 = this23;
						var _g44 = 0;
						var _g45 = _this24.sizeMat4;
						while(_g44 < _g45) {
							var i22 = _g44++;
							newArray22[i22] = _this24.stackMat4[i22];
							_this24.stackMat4[i22] = null;
						}
						_this24.stackMat4 = newArray22;
					}
					_this24.stackMat4[_this24.sizeMat4++] = mat45;
				}
				if(quat5 != null) {
					var tx7 = 0;
					var ty7 = 0;
					var tz7 = 0;
					var tw5 = 1;
					quat5.x = tx7;
					quat5.y = ty7;
					quat5.z = tz7;
					quat5.w = tw5;
					if(_this24.sizeQuat == _this24.stackQuat.length) {
						var newLength23 = _this24.sizeQuat << 1;
						var this24 = new Array(newLength23);
						var newArray23 = this24;
						var _g46 = 0;
						var _g47 = _this24.sizeQuat;
						while(_g46 < _g47) {
							var i23 = _g46++;
							newArray23[i23] = _this24.stackQuat[i23];
							_this24.stackQuat[i23] = null;
						}
						_this24.stackQuat = newArray23;
					}
					_this24.stackQuat[_this24.sizeQuat++] = quat5;
				}
				var _this25 = this._pool;
				var mat36 = null;
				var mat46 = null;
				var quat6 = null;
				if(basisY1 != null) {
					basisY1.zero();
					if(_this25.sizeVec3 == _this25.stackVec3.length) {
						var newLength24 = _this25.sizeVec3 << 1;
						var this25 = new Array(newLength24);
						var newArray24 = this25;
						var _g48 = 0;
						var _g49 = _this25.sizeVec3;
						while(_g48 < _g49) {
							var i24 = _g48++;
							newArray24[i24] = _this25.stackVec3[i24];
							_this25.stackVec3[i24] = null;
						}
						_this25.stackVec3 = newArray24;
					}
					_this25.stackVec3[_this25.sizeVec3++] = basisY1;
				}
				if(mat36 != null) {
					var t0012 = 1;
					var t0112 = 0;
					var t0212 = 0;
					var t1012 = 0;
					var t1112 = 1;
					var t1212 = 0;
					var t2012 = 0;
					var t2112 = 0;
					var t2212 = 1;
					mat36.e00 = t0012;
					mat36.e01 = t0112;
					mat36.e02 = t0212;
					mat36.e10 = t1012;
					mat36.e11 = t1112;
					mat36.e12 = t1212;
					mat36.e20 = t2012;
					mat36.e21 = t2112;
					mat36.e22 = t2212;
					if(_this25.sizeMat3 == _this25.stackMat3.length) {
						var newLength25 = _this25.sizeMat3 << 1;
						var this26 = new Array(newLength25);
						var newArray25 = this26;
						var _g50 = 0;
						var _g51 = _this25.sizeMat3;
						while(_g50 < _g51) {
							var i25 = _g50++;
							newArray25[i25] = _this25.stackMat3[i25];
							_this25.stackMat3[i25] = null;
						}
						_this25.stackMat3 = newArray25;
					}
					_this25.stackMat3[_this25.sizeMat3++] = mat36;
				}
				if(mat46 != null) {
					var t0013 = 1;
					var t0113 = 0;
					var t0213 = 0;
					var t036 = 0;
					var t1013 = 0;
					var t1113 = 1;
					var t1213 = 0;
					var t136 = 0;
					var t2013 = 0;
					var t2113 = 0;
					var t2213 = 1;
					var t236 = 0;
					var t306 = 0;
					var t316 = 0;
					var t326 = 0;
					var t336 = 1;
					mat46.e00 = t0013;
					mat46.e01 = t0113;
					mat46.e02 = t0213;
					mat46.e03 = t036;
					mat46.e10 = t1013;
					mat46.e11 = t1113;
					mat46.e12 = t1213;
					mat46.e13 = t136;
					mat46.e20 = t2013;
					mat46.e21 = t2113;
					mat46.e22 = t2213;
					mat46.e23 = t236;
					mat46.e30 = t306;
					mat46.e31 = t316;
					mat46.e32 = t326;
					mat46.e33 = t336;
					if(_this25.sizeMat4 == _this25.stackMat4.length) {
						var newLength26 = _this25.sizeMat4 << 1;
						var this27 = new Array(newLength26);
						var newArray26 = this27;
						var _g52 = 0;
						var _g53 = _this25.sizeMat4;
						while(_g52 < _g53) {
							var i26 = _g52++;
							newArray26[i26] = _this25.stackMat4[i26];
							_this25.stackMat4[i26] = null;
						}
						_this25.stackMat4 = newArray26;
					}
					_this25.stackMat4[_this25.sizeMat4++] = mat46;
				}
				if(quat6 != null) {
					var tx8 = 0;
					var ty8 = 0;
					var tz8 = 0;
					var tw6 = 1;
					quat6.x = tx8;
					quat6.y = ty8;
					quat6.z = tz8;
					quat6.w = tw6;
					if(_this25.sizeQuat == _this25.stackQuat.length) {
						var newLength27 = _this25.sizeQuat << 1;
						var this28 = new Array(newLength27);
						var newArray27 = this28;
						var _g54 = 0;
						var _g55 = _this25.sizeQuat;
						while(_g54 < _g55) {
							var i27 = _g54++;
							newArray27[i27] = _this25.stackQuat[i27];
							_this25.stackQuat[i27] = null;
						}
						_this25.stackQuat = newArray27;
					}
					_this25.stackQuat[_this25.sizeQuat++] = quat6;
				}
				var _this26 = this._pool;
				var mat37 = null;
				var mat47 = null;
				var quat7 = null;
				if(basisZ1 != null) {
					basisZ1.zero();
					if(_this26.sizeVec3 == _this26.stackVec3.length) {
						var newLength28 = _this26.sizeVec3 << 1;
						var this29 = new Array(newLength28);
						var newArray28 = this29;
						var _g56 = 0;
						var _g57 = _this26.sizeVec3;
						while(_g56 < _g57) {
							var i28 = _g56++;
							newArray28[i28] = _this26.stackVec3[i28];
							_this26.stackVec3[i28] = null;
						}
						_this26.stackVec3 = newArray28;
					}
					_this26.stackVec3[_this26.sizeVec3++] = basisZ1;
				}
				if(mat37 != null) {
					var t0014 = 1;
					var t0114 = 0;
					var t0214 = 0;
					var t1014 = 0;
					var t1114 = 1;
					var t1214 = 0;
					var t2014 = 0;
					var t2114 = 0;
					var t2214 = 1;
					mat37.e00 = t0014;
					mat37.e01 = t0114;
					mat37.e02 = t0214;
					mat37.e10 = t1014;
					mat37.e11 = t1114;
					mat37.e12 = t1214;
					mat37.e20 = t2014;
					mat37.e21 = t2114;
					mat37.e22 = t2214;
					if(_this26.sizeMat3 == _this26.stackMat3.length) {
						var newLength29 = _this26.sizeMat3 << 1;
						var this30 = new Array(newLength29);
						var newArray29 = this30;
						var _g58 = 0;
						var _g59 = _this26.sizeMat3;
						while(_g58 < _g59) {
							var i29 = _g58++;
							newArray29[i29] = _this26.stackMat3[i29];
							_this26.stackMat3[i29] = null;
						}
						_this26.stackMat3 = newArray29;
					}
					_this26.stackMat3[_this26.sizeMat3++] = mat37;
				}
				if(mat47 != null) {
					var t0015 = 1;
					var t0115 = 0;
					var t0215 = 0;
					var t037 = 0;
					var t1015 = 0;
					var t1115 = 1;
					var t1215 = 0;
					var t137 = 0;
					var t2015 = 0;
					var t2115 = 0;
					var t2215 = 1;
					var t237 = 0;
					var t307 = 0;
					var t317 = 0;
					var t327 = 0;
					var t337 = 1;
					mat47.e00 = t0015;
					mat47.e01 = t0115;
					mat47.e02 = t0215;
					mat47.e03 = t037;
					mat47.e10 = t1015;
					mat47.e11 = t1115;
					mat47.e12 = t1215;
					mat47.e13 = t137;
					mat47.e20 = t2015;
					mat47.e21 = t2115;
					mat47.e22 = t2215;
					mat47.e23 = t237;
					mat47.e30 = t307;
					mat47.e31 = t317;
					mat47.e32 = t327;
					mat47.e33 = t337;
					if(_this26.sizeMat4 == _this26.stackMat4.length) {
						var newLength30 = _this26.sizeMat4 << 1;
						var this31 = new Array(newLength30);
						var newArray30 = this31;
						var _g60 = 0;
						var _g61 = _this26.sizeMat4;
						while(_g60 < _g61) {
							var i30 = _g60++;
							newArray30[i30] = _this26.stackMat4[i30];
							_this26.stackMat4[i30] = null;
						}
						_this26.stackMat4 = newArray30;
					}
					_this26.stackMat4[_this26.sizeMat4++] = mat47;
				}
				if(quat7 != null) {
					var tx9 = 0;
					var ty9 = 0;
					var tz9 = 0;
					var tw7 = 1;
					quat7.x = tx9;
					quat7.y = ty9;
					quat7.z = tz9;
					quat7.w = tw7;
					if(_this26.sizeQuat == _this26.stackQuat.length) {
						var newLength31 = _this26.sizeQuat << 1;
						var this32 = new Array(newLength31);
						var newArray31 = this32;
						var _g62 = 0;
						var _g63 = _this26.sizeQuat;
						while(_g62 < _g63) {
							var i31 = _g62++;
							newArray31[i31] = _this26.stackQuat[i31];
							_this26.stackQuat[i31] = null;
						}
						_this26.stackQuat = newArray31;
					}
					_this26.stackQuat[_this26.sizeQuat++] = quat7;
				}
				var _this27 = this._pool;
				var mat38 = null;
				var mat48 = null;
				var quat8 = null;
				if(basisX2 != null) {
					basisX2.zero();
					if(_this27.sizeVec3 == _this27.stackVec3.length) {
						var newLength32 = _this27.sizeVec3 << 1;
						var this33 = new Array(newLength32);
						var newArray32 = this33;
						var _g64 = 0;
						var _g65 = _this27.sizeVec3;
						while(_g64 < _g65) {
							var i32 = _g64++;
							newArray32[i32] = _this27.stackVec3[i32];
							_this27.stackVec3[i32] = null;
						}
						_this27.stackVec3 = newArray32;
					}
					_this27.stackVec3[_this27.sizeVec3++] = basisX2;
				}
				if(mat38 != null) {
					var t0016 = 1;
					var t0116 = 0;
					var t0216 = 0;
					var t1016 = 0;
					var t1116 = 1;
					var t1216 = 0;
					var t2016 = 0;
					var t2116 = 0;
					var t2216 = 1;
					mat38.e00 = t0016;
					mat38.e01 = t0116;
					mat38.e02 = t0216;
					mat38.e10 = t1016;
					mat38.e11 = t1116;
					mat38.e12 = t1216;
					mat38.e20 = t2016;
					mat38.e21 = t2116;
					mat38.e22 = t2216;
					if(_this27.sizeMat3 == _this27.stackMat3.length) {
						var newLength33 = _this27.sizeMat3 << 1;
						var this34 = new Array(newLength33);
						var newArray33 = this34;
						var _g66 = 0;
						var _g67 = _this27.sizeMat3;
						while(_g66 < _g67) {
							var i33 = _g66++;
							newArray33[i33] = _this27.stackMat3[i33];
							_this27.stackMat3[i33] = null;
						}
						_this27.stackMat3 = newArray33;
					}
					_this27.stackMat3[_this27.sizeMat3++] = mat38;
				}
				if(mat48 != null) {
					var t0017 = 1;
					var t0117 = 0;
					var t0217 = 0;
					var t038 = 0;
					var t1017 = 0;
					var t1117 = 1;
					var t1217 = 0;
					var t138 = 0;
					var t2017 = 0;
					var t2117 = 0;
					var t2217 = 1;
					var t238 = 0;
					var t308 = 0;
					var t318 = 0;
					var t328 = 0;
					var t338 = 1;
					mat48.e00 = t0017;
					mat48.e01 = t0117;
					mat48.e02 = t0217;
					mat48.e03 = t038;
					mat48.e10 = t1017;
					mat48.e11 = t1117;
					mat48.e12 = t1217;
					mat48.e13 = t138;
					mat48.e20 = t2017;
					mat48.e21 = t2117;
					mat48.e22 = t2217;
					mat48.e23 = t238;
					mat48.e30 = t308;
					mat48.e31 = t318;
					mat48.e32 = t328;
					mat48.e33 = t338;
					if(_this27.sizeMat4 == _this27.stackMat4.length) {
						var newLength34 = _this27.sizeMat4 << 1;
						var this35 = new Array(newLength34);
						var newArray34 = this35;
						var _g68 = 0;
						var _g69 = _this27.sizeMat4;
						while(_g68 < _g69) {
							var i34 = _g68++;
							newArray34[i34] = _this27.stackMat4[i34];
							_this27.stackMat4[i34] = null;
						}
						_this27.stackMat4 = newArray34;
					}
					_this27.stackMat4[_this27.sizeMat4++] = mat48;
				}
				if(quat8 != null) {
					var tx10 = 0;
					var ty10 = 0;
					var tz10 = 0;
					var tw8 = 1;
					quat8.x = tx10;
					quat8.y = ty10;
					quat8.z = tz10;
					quat8.w = tw8;
					if(_this27.sizeQuat == _this27.stackQuat.length) {
						var newLength35 = _this27.sizeQuat << 1;
						var this36 = new Array(newLength35);
						var newArray35 = this36;
						var _g70 = 0;
						var _g71 = _this27.sizeQuat;
						while(_g70 < _g71) {
							var i35 = _g70++;
							newArray35[i35] = _this27.stackQuat[i35];
							_this27.stackQuat[i35] = null;
						}
						_this27.stackQuat = newArray35;
					}
					_this27.stackQuat[_this27.sizeQuat++] = quat8;
				}
				var _this28 = this._pool;
				var mat39 = null;
				var mat49 = null;
				var quat9 = null;
				if(basisY2 != null) {
					basisY2.zero();
					if(_this28.sizeVec3 == _this28.stackVec3.length) {
						var newLength36 = _this28.sizeVec3 << 1;
						var this37 = new Array(newLength36);
						var newArray36 = this37;
						var _g72 = 0;
						var _g73 = _this28.sizeVec3;
						while(_g72 < _g73) {
							var i36 = _g72++;
							newArray36[i36] = _this28.stackVec3[i36];
							_this28.stackVec3[i36] = null;
						}
						_this28.stackVec3 = newArray36;
					}
					_this28.stackVec3[_this28.sizeVec3++] = basisY2;
				}
				if(mat39 != null) {
					var t0018 = 1;
					var t0118 = 0;
					var t0218 = 0;
					var t1018 = 0;
					var t1118 = 1;
					var t1218 = 0;
					var t2018 = 0;
					var t2118 = 0;
					var t2218 = 1;
					mat39.e00 = t0018;
					mat39.e01 = t0118;
					mat39.e02 = t0218;
					mat39.e10 = t1018;
					mat39.e11 = t1118;
					mat39.e12 = t1218;
					mat39.e20 = t2018;
					mat39.e21 = t2118;
					mat39.e22 = t2218;
					if(_this28.sizeMat3 == _this28.stackMat3.length) {
						var newLength37 = _this28.sizeMat3 << 1;
						var this38 = new Array(newLength37);
						var newArray37 = this38;
						var _g74 = 0;
						var _g75 = _this28.sizeMat3;
						while(_g74 < _g75) {
							var i37 = _g74++;
							newArray37[i37] = _this28.stackMat3[i37];
							_this28.stackMat3[i37] = null;
						}
						_this28.stackMat3 = newArray37;
					}
					_this28.stackMat3[_this28.sizeMat3++] = mat39;
				}
				if(mat49 != null) {
					var t0019 = 1;
					var t0119 = 0;
					var t0219 = 0;
					var t039 = 0;
					var t1019 = 0;
					var t1119 = 1;
					var t1219 = 0;
					var t139 = 0;
					var t2019 = 0;
					var t2119 = 0;
					var t2219 = 1;
					var t239 = 0;
					var t309 = 0;
					var t319 = 0;
					var t329 = 0;
					var t339 = 1;
					mat49.e00 = t0019;
					mat49.e01 = t0119;
					mat49.e02 = t0219;
					mat49.e03 = t039;
					mat49.e10 = t1019;
					mat49.e11 = t1119;
					mat49.e12 = t1219;
					mat49.e13 = t139;
					mat49.e20 = t2019;
					mat49.e21 = t2119;
					mat49.e22 = t2219;
					mat49.e23 = t239;
					mat49.e30 = t309;
					mat49.e31 = t319;
					mat49.e32 = t329;
					mat49.e33 = t339;
					if(_this28.sizeMat4 == _this28.stackMat4.length) {
						var newLength38 = _this28.sizeMat4 << 1;
						var this39 = new Array(newLength38);
						var newArray38 = this39;
						var _g76 = 0;
						var _g77 = _this28.sizeMat4;
						while(_g76 < _g77) {
							var i38 = _g76++;
							newArray38[i38] = _this28.stackMat4[i38];
							_this28.stackMat4[i38] = null;
						}
						_this28.stackMat4 = newArray38;
					}
					_this28.stackMat4[_this28.sizeMat4++] = mat49;
				}
				if(quat9 != null) {
					var tx11 = 0;
					var ty11 = 0;
					var tz11 = 0;
					var tw9 = 1;
					quat9.x = tx11;
					quat9.y = ty11;
					quat9.z = tz11;
					quat9.w = tw9;
					if(_this28.sizeQuat == _this28.stackQuat.length) {
						var newLength39 = _this28.sizeQuat << 1;
						var this40 = new Array(newLength39);
						var newArray39 = this40;
						var _g78 = 0;
						var _g79 = _this28.sizeQuat;
						while(_g78 < _g79) {
							var i39 = _g78++;
							newArray39[i39] = _this28.stackQuat[i39];
							_this28.stackQuat[i39] = null;
						}
						_this28.stackQuat = newArray39;
					}
					_this28.stackQuat[_this28.sizeQuat++] = quat9;
				}
				var _this29 = this._pool;
				var mat310 = null;
				var mat410 = null;
				var quat10 = null;
				if(basisZ2 != null) {
					basisZ2.zero();
					if(_this29.sizeVec3 == _this29.stackVec3.length) {
						var newLength40 = _this29.sizeVec3 << 1;
						var this41 = new Array(newLength40);
						var newArray40 = this41;
						var _g80 = 0;
						var _g81 = _this29.sizeVec3;
						while(_g80 < _g81) {
							var i40 = _g80++;
							newArray40[i40] = _this29.stackVec3[i40];
							_this29.stackVec3[i40] = null;
						}
						_this29.stackVec3 = newArray40;
					}
					_this29.stackVec3[_this29.sizeVec3++] = basisZ2;
				}
				if(mat310 != null) {
					var t0020 = 1;
					var t0120 = 0;
					var t0220 = 0;
					var t1020 = 0;
					var t1120 = 1;
					var t1220 = 0;
					var t2020 = 0;
					var t2120 = 0;
					var t2220 = 1;
					mat310.e00 = t0020;
					mat310.e01 = t0120;
					mat310.e02 = t0220;
					mat310.e10 = t1020;
					mat310.e11 = t1120;
					mat310.e12 = t1220;
					mat310.e20 = t2020;
					mat310.e21 = t2120;
					mat310.e22 = t2220;
					if(_this29.sizeMat3 == _this29.stackMat3.length) {
						var newLength41 = _this29.sizeMat3 << 1;
						var this42 = new Array(newLength41);
						var newArray41 = this42;
						var _g82 = 0;
						var _g83 = _this29.sizeMat3;
						while(_g82 < _g83) {
							var i41 = _g82++;
							newArray41[i41] = _this29.stackMat3[i41];
							_this29.stackMat3[i41] = null;
						}
						_this29.stackMat3 = newArray41;
					}
					_this29.stackMat3[_this29.sizeMat3++] = mat310;
				}
				if(mat410 != null) {
					var t0021 = 1;
					var t0121 = 0;
					var t0221 = 0;
					var t0310 = 0;
					var t1021 = 0;
					var t1121 = 1;
					var t1221 = 0;
					var t1310 = 0;
					var t2021 = 0;
					var t2121 = 0;
					var t2221 = 1;
					var t2310 = 0;
					var t3010 = 0;
					var t3110 = 0;
					var t3210 = 0;
					var t3310 = 1;
					mat410.e00 = t0021;
					mat410.e01 = t0121;
					mat410.e02 = t0221;
					mat410.e03 = t0310;
					mat410.e10 = t1021;
					mat410.e11 = t1121;
					mat410.e12 = t1221;
					mat410.e13 = t1310;
					mat410.e20 = t2021;
					mat410.e21 = t2121;
					mat410.e22 = t2221;
					mat410.e23 = t2310;
					mat410.e30 = t3010;
					mat410.e31 = t3110;
					mat410.e32 = t3210;
					mat410.e33 = t3310;
					if(_this29.sizeMat4 == _this29.stackMat4.length) {
						var newLength42 = _this29.sizeMat4 << 1;
						var this43 = new Array(newLength42);
						var newArray42 = this43;
						var _g84 = 0;
						var _g85 = _this29.sizeMat4;
						while(_g84 < _g85) {
							var i42 = _g84++;
							newArray42[i42] = _this29.stackMat4[i42];
							_this29.stackMat4[i42] = null;
						}
						_this29.stackMat4 = newArray42;
					}
					_this29.stackMat4[_this29.sizeMat4++] = mat410;
				}
				if(quat10 != null) {
					var tx12 = 0;
					var ty12 = 0;
					var tz12 = 0;
					var tw10 = 1;
					quat10.x = tx12;
					quat10.y = ty12;
					quat10.z = tz12;
					quat10.w = tw10;
					if(_this29.sizeQuat == _this29.stackQuat.length) {
						var newLength43 = _this29.sizeQuat << 1;
						var this44 = new Array(newLength43);
						var newArray43 = this44;
						var _g86 = 0;
						var _g87 = _this29.sizeQuat;
						while(_g86 < _g87) {
							var i43 = _g86++;
							newArray43[i43] = _this29.stackQuat[i43];
							_this29.stackQuat[i43] = null;
						}
						_this29.stackQuat = newArray43;
					}
					_this29.stackQuat[_this29.sizeQuat++] = quat10;
				}
				j = n;
			}
		}
	}
	,_drawRotationalLimit: function(d,center,ex,ey,needle,radius,min,max,color) {
		if(min != max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this = _this1;
			var tx = _this.x + needle.x * radius;
			var ty = _this.y + needle.y * radius;
			var tz = _this.z + needle.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var to = _this;
			d.line(center,to,color);
			var _this = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(to != null) {
				to.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = to;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			if(min > max) {
				d.ellipse(center,ex,ey,radius,radius,color);
			} else {
				d.arc(center,ex,ey,radius,radius,min,max,true,color);
			}
		}
	}
	,_drawTranslationalLimit: function(d,center,ex,min,max,color) {
		if(min < max) {
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this = _this1;
			var tx = _this.x + ex.x * min;
			var ty = _this.y + ex.y * min;
			var tz = _this.z + ex.z * min;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var lower = _this;
			var _this = this._pool;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this = _this1;
			var tx = _this.x + ex.x * max;
			var ty = _this.y + ex.y * max;
			var tz = _this.z + ex.z * max;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var upper = _this;
			d.line(lower,upper,color);
			var _this = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(lower != null) {
				lower.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = lower;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(upper != null) {
				upper.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = upper;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		}
	}
	,_drawTranslationalLimit3D: function(d,center,ex,ey,ez,xlm,ylm,zlm,color) {
		var minx = xlm.lowerLimit;
		var maxx = xlm.upperLimit;
		var miny = ylm.lowerLimit;
		var maxy = ylm.upperLimit;
		var minz = zlm.lowerLimit;
		var maxz = zlm.upperLimit;
		var _this = this._pool;
		var lower = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this._pool;
		var upper = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * minx;
		var ty = _this.y + ex.y * minx;
		var tz = _this.z + ex.z * minx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * miny;
		var ty = _this1.y + ey.y * miny;
		var tz = _this1.z + ey.z * miny;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * minz;
		var ty = _this.y + ez.y * minz;
		var tz = _this.z + ez.z * minz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var xyz = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * minx;
		var ty = _this.y + ex.y * minx;
		var tz = _this.z + ex.z * minx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * miny;
		var ty = _this1.y + ey.y * miny;
		var tz = _this1.z + ey.z * miny;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * maxz;
		var ty = _this.y + ez.y * maxz;
		var tz = _this.z + ez.z * maxz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var xyZ = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * minx;
		var ty = _this.y + ex.y * minx;
		var tz = _this.z + ex.z * minx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * maxy;
		var ty = _this1.y + ey.y * maxy;
		var tz = _this1.z + ey.z * maxy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * minz;
		var ty = _this.y + ez.y * minz;
		var tz = _this.z + ez.z * minz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var xYz = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * minx;
		var ty = _this.y + ex.y * minx;
		var tz = _this.z + ex.z * minx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * maxy;
		var ty = _this1.y + ey.y * maxy;
		var tz = _this1.z + ey.z * maxy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * maxz;
		var ty = _this.y + ez.y * maxz;
		var tz = _this.z + ez.z * maxz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var xYZ = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * maxx;
		var ty = _this.y + ex.y * maxx;
		var tz = _this.z + ex.z * maxx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * miny;
		var ty = _this1.y + ey.y * miny;
		var tz = _this1.z + ey.z * miny;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * minz;
		var ty = _this.y + ez.y * minz;
		var tz = _this.z + ez.z * minz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var Xyz = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * maxx;
		var ty = _this.y + ex.y * maxx;
		var tz = _this.z + ex.z * maxx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * miny;
		var ty = _this1.y + ey.y * miny;
		var tz = _this1.z + ey.z * miny;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * maxz;
		var ty = _this.y + ez.y * maxz;
		var tz = _this.z + ez.z * maxz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var XyZ = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * maxx;
		var ty = _this.y + ex.y * maxx;
		var tz = _this.z + ex.z * maxx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * maxy;
		var ty = _this1.y + ey.y * maxy;
		var tz = _this1.z + ey.z * maxy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * minz;
		var ty = _this.y + ez.y * minz;
		var tz = _this.z + ez.z * minz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var XYz = _this;
		var _this = this._pool;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var tx = _this.x + ex.x * maxx;
		var ty = _this.y + ex.y * maxx;
		var tz = _this.z + ex.z * maxx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * maxy;
		var ty = _this1.y + ey.y * maxy;
		var tz = _this1.z + ey.z * maxy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * maxz;
		var ty = _this.y + ez.y * maxz;
		var tz = _this.z + ez.z * maxz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var XYZ = _this;
		d.line(xyz,Xyz,color);
		d.line(xYz,XYz,color);
		d.line(xyZ,XyZ,color);
		d.line(xYZ,XYZ,color);
		d.line(xyz,xYz,color);
		d.line(Xyz,XYz,color);
		d.line(xyZ,xYZ,color);
		d.line(XyZ,XYZ,color);
		d.line(xyz,xyZ,color);
		d.line(Xyz,XyZ,color);
		d.line(xYz,xYZ,color);
		d.line(XYz,XYZ,color);
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(xyz != null) {
			xyz.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = xyz;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(xyZ != null) {
			xyZ.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = xyZ;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(xYz != null) {
			xYz.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = xYz;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(xYZ != null) {
			xYZ.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = xYZ;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(Xyz != null) {
			Xyz.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = Xyz;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(XyZ != null) {
			XyZ.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = XyZ;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(XYz != null) {
			XYz.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = XYz;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(XYZ != null) {
			XYZ.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = XYZ;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,_drawEllipseOnSphere: function(d,center,normal,x,y,radiansX,radiansY,radius,color) {
		var n = 16;
		var theta = 0;
		var dTheta = 6.28318530717958 / n;
		var _this = this._pool;
		var rotVec = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this._pool;
		var rotQ = _this.sizeQuat == 0 ? new oimo_common_Quat() : _this.stackQuat[--_this.sizeQuat];
		var _this = this._pool;
		var rotM = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var _this = this._pool;
		var prevV = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _g = 0;
		var _g1 = n + 1;
		while(_g < _g1) {
			var i = _g++;
			var rx = Math.cos(theta) * radiansX;
			var ry = Math.sin(theta) * radiansY;
			var halfRotAng = Math.sqrt(rx * rx + ry * ry);
			var rotSin = Math.sin(halfRotAng * 0.5);
			var rotCos = Math.cos(halfRotAng * 0.5);
			var _this = rotVec.zero();
			var tx = _this.x + x.x * rx;
			var ty = _this.y + x.y * rx;
			var tz = _this.z + x.z * rx;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx1 = _this1.x + y.x * ry;
			var ty1 = _this1.y + y.y * ry;
			var tz1 = _this1.z + y.z * ry;
			_this1.x = tx1;
			_this1.y = ty1;
			_this1.z = tz1;
			var s = 1 / halfRotAng * rotSin;
			var tx2 = rotVec.x * s;
			var ty2 = rotVec.y * s;
			var tz2 = rotVec.z * s;
			rotVec.x = tx2;
			rotVec.y = ty2;
			rotVec.z = tz2;
			rotQ.x = rotVec.x;
			rotQ.y = rotVec.y;
			rotQ.z = rotVec.z;
			rotQ.w = rotCos;
			var x1 = rotQ.x;
			var y1 = rotQ.y;
			var z = rotQ.z;
			var w = rotQ.w;
			var x2 = 2 * x1;
			var y2 = 2 * y1;
			var z2 = 2 * z;
			var xx = x1 * x2;
			var yy = y1 * y2;
			var zz = z * z2;
			var xy = x1 * y2;
			var yz = y1 * z2;
			var xz = x1 * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			rotM.e00 = 1 - yy - zz;
			rotM.e01 = xy - wz;
			rotM.e02 = xz + wy;
			rotM.e10 = xy + wz;
			rotM.e11 = 1 - xx - zz;
			rotM.e12 = yz - wx;
			rotM.e20 = xz - wy;
			rotM.e21 = yz + wx;
			rotM.e22 = 1 - xx - yy;
			var _this2 = this._pool;
			var _this3 = _this2.sizeVec3 == 0 ? new oimo_common_Vec3() : _this2.stackVec3[--_this2.sizeVec3];
			var tx3 = _this3.x + normal.x * radius;
			var ty3 = _this3.y + normal.y * radius;
			var tz3 = _this3.z + normal.z * radius;
			_this3.x = tx3;
			_this3.y = ty3;
			_this3.z = tz3;
			var v = _this3;
			var tx4 = v.x * rotM.e00 + v.y * rotM.e01 + v.z * rotM.e02;
			var ty4 = v.x * rotM.e10 + v.y * rotM.e11 + v.z * rotM.e12;
			var tz4 = v.x * rotM.e20 + v.y * rotM.e21 + v.z * rotM.e22;
			v.x = tx4;
			v.y = ty4;
			v.z = tz4;
			var _this4 = v;
			var tx5 = _this4.x + center.x;
			var ty5 = _this4.y + center.y;
			var tz5 = _this4.z + center.z;
			_this4.x = tx5;
			_this4.y = ty5;
			_this4.z = tz5;
			if(i >= 1) {
				d.line(prevV,v,color);
			}
			var _this5 = this._pool;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(prevV != null) {
				prevV.zero();
				if(_this5.sizeVec3 == _this5.stackVec3.length) {
					var newLength = _this5.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g2 = 0;
					var _g3 = _this5.sizeVec3;
					while(_g2 < _g3) {
						var i1 = _g2++;
						newArray[i1] = _this5.stackVec3[i1];
						_this5.stackVec3[i1] = null;
					}
					_this5.stackVec3 = newArray;
				}
				_this5.stackVec3[_this5.sizeVec3++] = prevV;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this5.sizeMat3 == _this5.stackMat3.length) {
					var newLength1 = _this5.sizeMat3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g4 = 0;
					var _g5 = _this5.sizeMat3;
					while(_g4 < _g5) {
						var i2 = _g4++;
						newArray1[i2] = _this5.stackMat3[i2];
						_this5.stackMat3[i2] = null;
					}
					_this5.stackMat3 = newArray1;
				}
				_this5.stackMat3[_this5.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t001 = 1;
				var t011 = 0;
				var t021 = 0;
				var t03 = 0;
				var t101 = 0;
				var t111 = 1;
				var t121 = 0;
				var t13 = 0;
				var t201 = 0;
				var t211 = 0;
				var t221 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t001;
				mat4.e01 = t011;
				mat4.e02 = t021;
				mat4.e03 = t03;
				mat4.e10 = t101;
				mat4.e11 = t111;
				mat4.e12 = t121;
				mat4.e13 = t13;
				mat4.e20 = t201;
				mat4.e21 = t211;
				mat4.e22 = t221;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this5.sizeMat4 == _this5.stackMat4.length) {
					var newLength2 = _this5.sizeMat4 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g6 = 0;
					var _g7 = _this5.sizeMat4;
					while(_g6 < _g7) {
						var i3 = _g6++;
						newArray2[i3] = _this5.stackMat4[i3];
						_this5.stackMat4[i3] = null;
					}
					_this5.stackMat4 = newArray2;
				}
				_this5.stackMat4[_this5.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx6 = 0;
				var ty6 = 0;
				var tz6 = 0;
				var tw = 1;
				quat.x = tx6;
				quat.y = ty6;
				quat.z = tz6;
				quat.w = tw;
				if(_this5.sizeQuat == _this5.stackQuat.length) {
					var newLength3 = _this5.sizeQuat << 1;
					var this4 = new Array(newLength3);
					var newArray3 = this4;
					var _g8 = 0;
					var _g9 = _this5.sizeQuat;
					while(_g8 < _g9) {
						var i4 = _g8++;
						newArray3[i4] = _this5.stackQuat[i4];
						_this5.stackQuat[i4] = null;
					}
					_this5.stackQuat = newArray3;
				}
				_this5.stackQuat[_this5.sizeQuat++] = quat;
			}
			prevV = v;
			theta += dTheta;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(rotVec != null) {
			rotVec.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = rotVec;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var vec3 = null;
		var mat3 = null;
		var mat4 = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(rotQ != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			rotQ.x = tx;
			rotQ.y = ty;
			rotQ.z = tz;
			rotQ.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = rotQ;
		}
		var _this = this._pool;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(rotM != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			rotM.e00 = t00;
			rotM.e01 = t01;
			rotM.e02 = t02;
			rotM.e10 = t10;
			rotM.e11 = t11;
			rotM.e12 = t12;
			rotM.e20 = t20;
			rotM.e21 = t21;
			rotM.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = rotM;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this._pool;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(prevV != null) {
			prevV.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = prevV;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,step: function(timeStep) {
		if(this._timeStep.dt > 0) {
			this._timeStep.dtRatio = timeStep / this._timeStep.dt;
		}
		this._timeStep.dt = timeStep;
		this._timeStep.invDt = 1 / timeStep;
		var st = HxOverrides.now() / 1000;
		this._updateContacts();
		this._solveIslands();
		var en = HxOverrides.now() / 1000;
		oimo_dynamics_common_Performance.totalTime = (en - st) * 1000;
	}
	,addRigidBody: function(rigidBody) {
		if(rigidBody._world != null) {
			throw new Error("A rigid body cannot belong to multiple worlds.");
		}
		if(this._rigidBodyList == null) {
			this._rigidBodyList = rigidBody;
			this._rigidBodyListLast = rigidBody;
		} else {
			this._rigidBodyListLast._next = rigidBody;
			rigidBody._prev = this._rigidBodyListLast;
			this._rigidBodyListLast = rigidBody;
		}
		rigidBody._world = this;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			s._proxy = this._broadPhase.createProxy(s,s._aabb);
			s._id = this._shapeIdCount++;
			this._numShapes++;
			s = n;
		}
		this._numRigidBodies++;
	}
	,removeRigidBody: function(rigidBody) {
		if(rigidBody._world != this) {
			throw new Error("The rigid body doesn't belong to the world.");
		}
		var prev = rigidBody._prev;
		var next = rigidBody._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(rigidBody == this._rigidBodyList) {
			this._rigidBodyList = this._rigidBodyList._next;
		}
		if(rigidBody == this._rigidBodyListLast) {
			this._rigidBodyListLast = this._rigidBodyListLast._prev;
		}
		rigidBody._next = null;
		rigidBody._prev = null;
		rigidBody._world = null;
		var s = rigidBody._shapeList;
		while(s != null) {
			var n = s._next;
			this._broadPhase.destroyProxy(s._proxy);
			s._proxy = null;
			s._id = -1;
			var cl = s._rigidBody._contactLinkList;
			while(cl != null) {
				var n1 = cl._next;
				var c = cl._contact;
				if(c._s1 == s || c._s2 == s) {
					var _this = cl._other;
					_this._sleeping = false;
					_this._sleepTime = 0;
					var _this1 = this._contactManager;
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == _this1._contactList) {
						_this1._contactList = _this1._contactList._next;
					}
					if(c == _this1._contactListLast) {
						_this1._contactListLast = _this1._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this2 = c._contactConstraint;
					_this2._s1 = null;
					_this2._s2 = null;
					_this2._b1 = null;
					_this2._b2 = null;
					_this2._tf1 = null;
					_this2._tf2 = null;
					c._next = _this1._contactPool;
					_this1._contactPool = c;
					_this1._numContacts--;
				}
				cl = n1;
			}
			this._numShapes--;
			s = n;
		}
		this._numRigidBodies--;
	}
	,addJoint: function(joint) {
		if(joint._world != null) {
			throw new Error("A joint cannot belong to multiple worlds.");
		}
		if(this._jointList == null) {
			this._jointList = joint;
			this._jointListLast = joint;
		} else {
			this._jointListLast._next = joint;
			joint._prev = this._jointListLast;
			this._jointListLast = joint;
		}
		joint._world = this;
		joint._link1._other = joint._b2;
		joint._link2._other = joint._b1;
		if(joint._b1._jointLinkList == null) {
			joint._b1._jointLinkList = joint._link1;
			joint._b1._jointLinkListLast = joint._link1;
		} else {
			joint._b1._jointLinkListLast._next = joint._link1;
			joint._link1._prev = joint._b1._jointLinkListLast;
			joint._b1._jointLinkListLast = joint._link1;
		}
		if(joint._b2._jointLinkList == null) {
			joint._b2._jointLinkList = joint._link2;
			joint._b2._jointLinkListLast = joint._link2;
		} else {
			joint._b2._jointLinkListLast._next = joint._link2;
			joint._link2._prev = joint._b2._jointLinkListLast;
			joint._b2._jointLinkListLast = joint._link2;
		}
		joint._b1._numJointLinks++;
		joint._b2._numJointLinks++;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = joint._b2;
		_this._sleeping = false;
		_this._sleepTime = 0;
		joint._syncAnchors();
		this._numJoints++;
	}
	,removeJoint: function(joint) {
		if(joint._world != this) {
			throw new Error("The joint doesn't belong to the world.");
		}
		var prev = joint._prev;
		var next = joint._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint == this._jointList) {
			this._jointList = this._jointList._next;
		}
		if(joint == this._jointListLast) {
			this._jointListLast = this._jointListLast._prev;
		}
		joint._next = null;
		joint._prev = null;
		joint._world = null;
		var prev = joint._link1._prev;
		var next = joint._link1._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint._link1 == joint._b1._jointLinkList) {
			joint._b1._jointLinkList = joint._b1._jointLinkList._next;
		}
		if(joint._link1 == joint._b1._jointLinkListLast) {
			joint._b1._jointLinkListLast = joint._b1._jointLinkListLast._prev;
		}
		joint._link1._next = null;
		joint._link1._prev = null;
		var prev = joint._link2._prev;
		var next = joint._link2._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(joint._link2 == joint._b2._jointLinkList) {
			joint._b2._jointLinkList = joint._b2._jointLinkList._next;
		}
		if(joint._link2 == joint._b2._jointLinkListLast) {
			joint._b2._jointLinkListLast = joint._b2._jointLinkListLast._prev;
		}
		joint._link2._next = null;
		joint._link2._prev = null;
		joint._link1._other = null;
		joint._link2._other = null;
		joint._b1._numJointLinks--;
		joint._b2._numJointLinks--;
		var _this = joint._b1;
		_this._sleeping = false;
		_this._sleepTime = 0;
		var _this = joint._b2;
		_this._sleeping = false;
		_this._sleepTime = 0;
		this._numJoints--;
	}
	,setDebugDraw: function(debugDraw) {
		this._debugDraw = debugDraw;
	}
	,getDebugDraw: function() {
		return this._debugDraw;
	}
	,debugDraw: function() {
		if(this._debugDraw != null) {
			if(this._broadPhase._type == 2) {
				var bvhBroadPhase = this._broadPhase;
				this._drawBvh(this._debugDraw,bvhBroadPhase._tree);
			}
			this._drawRigidBodies(this._debugDraw);
			this._drawConstraints(this._debugDraw);
		}
	}
	,rayCast: function(begin,end,callback) {
		var _this = this._rayCastWrapper.begin;
		_this.x = begin.x;
		_this.y = begin.y;
		_this.z = begin.z;
		var _this = this._rayCastWrapper.end;
		_this.x = end.x;
		_this.y = end.y;
		_this.z = end.z;
		this._rayCastWrapper.callback = callback;
		this._broadPhase.rayCast(begin,end,this._rayCastWrapper);
	}
	,convexCast: function(convex,begin,translation,callback) {
		this._convexCastWrapper.convex = convex;
		var _this = this._convexCastWrapper.begin;
		_this._positionX = begin._positionX;
		_this._positionY = begin._positionY;
		_this._positionZ = begin._positionZ;
		_this._rotation00 = begin._rotation00;
		_this._rotation01 = begin._rotation01;
		_this._rotation02 = begin._rotation02;
		_this._rotation10 = begin._rotation10;
		_this._rotation11 = begin._rotation11;
		_this._rotation12 = begin._rotation12;
		_this._rotation20 = begin._rotation20;
		_this._rotation21 = begin._rotation21;
		_this._rotation22 = begin._rotation22;
		var _this = this._convexCastWrapper.translation;
		_this.x = translation.x;
		_this.y = translation.y;
		_this.z = translation.z;
		this._convexCastWrapper.callback = callback;
		this._broadPhase.convexCast(convex,begin,translation,this._convexCastWrapper);
	}
	,aabbTest: function(aabb,callback) {
		this._aabbTestWrapper._aabb.copyFrom(aabb);
		this._aabbTestWrapper._callback = callback;
		this._broadPhase.aabbTest(aabb,this._aabbTestWrapper);
	}
	,getRigidBodyList: function() {
		return this._rigidBodyList;
	}
	,getJointList: function() {
		return this._jointList;
	}
	,getBroadPhase: function() {
		return this._broadPhase;
	}
	,getContactManager: function() {
		return this._contactManager;
	}
	,getNumRigidBodies: function() {
		return this._numRigidBodies;
	}
	,getNumJoints: function() {
		return this._numJoints;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getNumIslands: function() {
		return this._numIslands;
	}
	,getNumVelocityIterations: function() {
		return this._numVelocityIterations;
	}
	,setNumVelocityIterations: function(numVelocityIterations) {
		this._numVelocityIterations = numVelocityIterations;
	}
	,getNumPositionIterations: function() {
		return this._numPositionIterations;
	}
	,setNumPositionIterations: function(numPositionIterations) {
		this._numPositionIterations = numPositionIterations;
	}
	,getGravity: function() {
		return this._gravity;
	}
	,setGravity: function(gravity) {
		var _this = this._gravity;
		_this.x = gravity.x;
		_this.y = gravity.y;
		_this.z = gravity.z;
	}
	,__class__: oimo_dynamics_World
};
var oimo_dynamics__$World_RayCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Vec3();
	this.end = new oimo_common_Vec3();
	this.callback = null;
};
oimo_dynamics__$World_RayCastWrapper.__name__ = "oimo.dynamics._World.RayCastWrapper";
oimo_dynamics__$World_RayCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_RayCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		if(shape._geom.rayCast(this.begin,this.end,shape._transform,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
	,__class__: oimo_dynamics__$World_RayCastWrapper
});
var oimo_dynamics__$World_ConvexCastWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this.rayCastHit = new oimo_collision_geometry_RayCastHit();
	this.begin = new oimo_common_Transform();
	this.translation = new oimo_common_Vec3();
	this.zero = new oimo_common_Vec3();
	this.callback = null;
	this.convex = null;
};
oimo_dynamics__$World_ConvexCastWrapper.__name__ = "oimo.dynamics._World.ConvexCastWrapper";
oimo_dynamics__$World_ConvexCastWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_ConvexCastWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var type = shape._geom._type;
		if(type < 0 || type > 5) {
			return;
		}
		var geom = shape._geom;
		if(oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance.convexCast(this.convex,geom,this.begin,shape._transform,this.translation,this.zero,this.rayCastHit)) {
			this.callback.process(shape,this.rayCastHit);
		}
	}
	,__class__: oimo_dynamics__$World_ConvexCastWrapper
});
var oimo_dynamics__$World_AabbTestWrapper = function() {
	oimo_collision_broadphase_BroadPhaseProxyCallback.call(this);
	this._aabb = new oimo_collision_geometry_Aabb();
	this._callback = null;
};
oimo_dynamics__$World_AabbTestWrapper.__name__ = "oimo.dynamics._World.AabbTestWrapper";
oimo_dynamics__$World_AabbTestWrapper.__super__ = oimo_collision_broadphase_BroadPhaseProxyCallback;
oimo_dynamics__$World_AabbTestWrapper.prototype = $extend(oimo_collision_broadphase_BroadPhaseProxyCallback.prototype,{
	process: function(proxy) {
		var shape = proxy.userData;
		var shapeAabb = shape._aabb;
		if(shapeAabb._minX < this._aabb._maxX && shapeAabb._maxX > this._aabb._minX && shapeAabb._minY < this._aabb._maxY && shapeAabb._maxY > this._aabb._minY && shapeAabb._minZ < this._aabb._maxZ && shapeAabb._maxZ > this._aabb._minZ) {
			this._callback.process(shape);
		}
	}
	,__class__: oimo_dynamics__$World_AabbTestWrapper
});
var oimo_dynamics_callback_AabbTestCallback = function() {
};
oimo_dynamics_callback_AabbTestCallback.__name__ = "oimo.dynamics.callback.AabbTestCallback";
oimo_dynamics_callback_AabbTestCallback.prototype = {
	process: function(shape) {
	}
	,__class__: oimo_dynamics_callback_AabbTestCallback
};
var oimo_dynamics_callback_ContactCallback = function() {
};
oimo_dynamics_callback_ContactCallback.__name__ = "oimo.dynamics.callback.ContactCallback";
oimo_dynamics_callback_ContactCallback.prototype = {
	beginContact: function(c) {
	}
	,preSolve: function(c) {
	}
	,postSolve: function(c) {
	}
	,endContact: function(c) {
	}
	,__class__: oimo_dynamics_callback_ContactCallback
};
var oimo_dynamics_callback_RayCastCallback = function() {
};
oimo_dynamics_callback_RayCastCallback.__name__ = "oimo.dynamics.callback.RayCastCallback";
oimo_dynamics_callback_RayCastCallback.prototype = {
	process: function(shape,hit) {
	}
	,__class__: oimo_dynamics_callback_RayCastCallback
};
var oimo_dynamics_common_DebugDraw = function() {
	this.p = new oimo_common_Pool();
	this.wireframe = false;
	this.drawShapes = true;
	this.drawBvh = false;
	this.drawBvhMinLevel = 0;
	this.drawBvhMaxLevel = 65536;
	this.drawAabbs = false;
	this.drawBases = false;
	this.drawPairs = false;
	this.drawContacts = false;
	this.drawJoints = true;
	this.drawJointLimits = false;
	var nt = 4;
	var dt = 3.14159265358979 / nt;
	var np = 8;
	var dp = 6.28318530717958 / np;
	var this1 = new Array(nt + 1);
	this.sphereCoords = this1;
	var this1 = new Array(nt + 1);
	this.tmpSphereVerts = this1;
	var this1 = new Array(nt + 1);
	this.tmpSphereNorms = this1;
	var _g = 0;
	var _g1 = nt + 1;
	while(_g < _g1) {
		var i = _g++;
		var num = i == 0 || i == nt ? 1 : np;
		var this1 = this.sphereCoords;
		var this2 = new Array(num);
		this1[i] = this2;
		var this3 = this.tmpSphereVerts;
		var this4 = new Array(num);
		this3[i] = this4;
		var this5 = this.tmpSphereNorms;
		var this6 = new Array(num);
		this5[i] = this6;
		var _g2 = 0;
		var _g3 = np;
		while(_g2 < _g3) {
			var j = _g2++;
			var theta = i * dt;
			var phi = j * dp;
			this.sphereCoords[i][j] = new oimo_common_Vec3(Math.sin(theta) * Math.cos(phi),Math.cos(theta),-Math.sin(theta) * Math.sin(phi));
			this.tmpSphereVerts[i][j] = new oimo_common_Vec3();
			this.tmpSphereNorms[i][j] = new oimo_common_Vec3();
		}
	}
	var this1 = new Array(8);
	this.circleCoords = this1;
	var this1 = new Array(8);
	this.circleCoordsShift = this1;
	var this1 = new Array(8);
	this.tmpCircleVerts1 = this1;
	var this1 = new Array(8);
	this.tmpCircleVerts2 = this1;
	var this1 = new Array(8);
	this.tmpCircleNorms = this1;
	var td = 0.7853981633974475;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.circleCoords[i] = new oimo_common_Vec3(Math.cos(i * td),0,-Math.sin(i * td));
		this.circleCoordsShift[i] = new oimo_common_Vec3(Math.cos((i + 0.5) * td),0,-Math.sin((i + 0.5) * td));
		this.tmpCircleVerts1[i] = new oimo_common_Vec3();
		this.tmpCircleVerts2[i] = new oimo_common_Vec3();
		this.tmpCircleNorms[i] = new oimo_common_Vec3();
	}
	this.style = new oimo_dynamics_common_DebugDrawStyle();
};
oimo_dynamics_common_DebugDraw.__name__ = "oimo.dynamics.common.DebugDraw";
oimo_dynamics_common_DebugDraw.prototype = {
	aabb: function(min,max,color) {
		var _this = this.p;
		var v1 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,min.y,min.z);
		var _this = this.p;
		var v2 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,min.y,max.z);
		var _this = this.p;
		var v3 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,max.y,min.z);
		var _this = this.p;
		var v4 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(min.x,max.y,max.z);
		var _this = this.p;
		var v5 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,min.y,min.z);
		var _this = this.p;
		var v6 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,min.y,max.z);
		var _this = this.p;
		var v7 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,max.y,min.z);
		var _this = this.p;
		var v8 = (_this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3]).init(max.x,max.y,max.z);
		this.line(v1,v2,color);
		this.line(v3,v4,color);
		this.line(v5,v6,color);
		this.line(v7,v8,color);
		this.line(v1,v3,color);
		this.line(v2,v4,color);
		this.line(v5,v7,color);
		this.line(v6,v8,color);
		this.line(v1,v5,color);
		this.line(v2,v6,color);
		this.line(v3,v7,color);
		this.line(v4,v8,color);
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v1 != null) {
			v1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v1;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v2 != null) {
			v2.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v2;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v3 != null) {
			v3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v3;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v4 != null) {
			v4.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v4;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v5 != null) {
			v5.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v5;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v6 != null) {
			v6.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v6;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v7 != null) {
			v7.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v7;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v8 != null) {
			v8.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v8;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,basis: function(transform,length,colorX,colorY,colorZ) {
		var _this = this.p;
		var pos = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var rot = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var v = pos;
		v.x = transform._positionX;
		v.y = transform._positionY;
		v.z = transform._positionZ;
		var m = rot;
		m.e00 = transform._rotation00;
		m.e01 = transform._rotation01;
		m.e02 = transform._rotation02;
		m.e10 = transform._rotation10;
		m.e11 = transform._rotation11;
		m.e12 = transform._rotation12;
		m.e20 = transform._rotation20;
		m.e21 = transform._rotation21;
		m.e22 = transform._rotation22;
		ex.init(rot.e00,rot.e10,rot.e20);
		ey.init(rot.e01,rot.e11,rot.e21);
		ez.init(rot.e02,rot.e12,rot.e22);
		var tx = ex.x * length;
		var ty = ex.y * length;
		var tz = ex.z * length;
		ex.x = tx;
		ex.y = ty;
		ex.z = tz;
		var _this = ex;
		var tx = _this.x + pos.x;
		var ty = _this.y + pos.y;
		var tz = _this.z + pos.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var tx = ey.x * length;
		var ty = ey.y * length;
		var tz = ey.z * length;
		ey.x = tx;
		ey.y = ty;
		ey.z = tz;
		var _this = ey;
		var tx = _this.x + pos.x;
		var ty = _this.y + pos.y;
		var tz = _this.z + pos.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var tx = ez.x * length;
		var ty = ez.y * length;
		var tz = ez.z * length;
		ez.x = tx;
		ez.y = ty;
		ez.z = tz;
		var _this = ez;
		var tx = _this.x + pos.x;
		var ty = _this.y + pos.y;
		var tz = _this.z + pos.z;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		this.line(pos,ex,colorX);
		this.line(pos,ey,colorY);
		this.line(pos,ez,colorZ);
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(pos != null) {
			pos.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = pos;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(rot != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			rot.e00 = t00;
			rot.e01 = t01;
			rot.e02 = t02;
			rot.e10 = t10;
			rot.e11 = t11;
			rot.e12 = t12;
			rot.e20 = t20;
			rot.e21 = t21;
			rot.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = rot;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,ellipse: function(center,ex,ey,radiusX,radiusY,color) {
		this.arc(center,ex,ey,radiusX,radiusY,0,6.28318530717958,false,color);
	}
	,arc: function(center,ex,ey,radiusX,radiusY,startAngle,endAngle,drawSector,color) {
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = ex.x;
		_this1.y = ex.y;
		_this1.z = ex.z;
		var _this = _this1;
		var tx = _this.x * radiusX;
		var ty = _this.y * radiusX;
		var tz = _this.z * radiusX;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		ex = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = ey.x;
		_this1.y = ey.y;
		_this1.z = ey.z;
		var _this = _this1;
		var tx = _this.x * radiusY;
		var ty = _this.y * radiusY;
		var tz = _this.z * radiusY;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		ey = _this;
		var step = 0.52359877559829837;
		var angDiff = endAngle - startAngle;
		if(angDiff < 0) {
			angDiff = -angDiff;
		}
		var n = angDiff / step + 0.5 | 0;
		if(n == 0) {
			n = 1;
		}
		var theta = startAngle;
		var dt = (endAngle - startAngle) / n;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = center.x;
		_this1.y = center.y;
		_this1.z = center.z;
		var _this = _this1;
		var s = Math.cos(theta);
		var tx = _this.x + ex.x * s;
		var ty = _this.y + ex.y * s;
		var tz = _this.z + ex.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var s = Math.sin(theta);
		var tx = _this1.x + ey.x * s;
		var ty = _this1.y + ey.y * s;
		var tz = _this1.z + ey.z * s;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var v = _this1;
		var prevV = v;
		if(drawSector) {
			this.line(center,prevV,color);
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			theta += dt;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = center.x;
			_this1.y = center.y;
			_this1.z = center.z;
			var _this2 = _this1;
			var s = Math.cos(theta);
			var tx = _this2.x + ex.x * s;
			var ty = _this2.y + ex.y * s;
			var tz = _this2.z + ex.z * s;
			_this2.x = tx;
			_this2.y = ty;
			_this2.z = tz;
			var _this3 = _this2;
			var s1 = Math.sin(theta);
			var tx1 = _this3.x + ey.x * s1;
			var ty1 = _this3.y + ey.y * s1;
			var tz1 = _this3.z + ey.z * s1;
			_this3.x = tx1;
			_this3.y = ty1;
			_this3.z = tz1;
			var v = _this3;
			var v1 = v;
			this.line(prevV,v1,color);
			var _this4 = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(prevV != null) {
				prevV.zero();
				if(_this4.sizeVec3 == _this4.stackVec3.length) {
					var newLength = _this4.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g2 = 0;
					var _g3 = _this4.sizeVec3;
					while(_g2 < _g3) {
						var i1 = _g2++;
						newArray[i1] = _this4.stackVec3[i1];
						_this4.stackVec3[i1] = null;
					}
					_this4.stackVec3 = newArray;
				}
				_this4.stackVec3[_this4.sizeVec3++] = prevV;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this4.sizeMat3 == _this4.stackMat3.length) {
					var newLength1 = _this4.sizeMat3 << 1;
					var this2 = new Array(newLength1);
					var newArray1 = this2;
					var _g4 = 0;
					var _g5 = _this4.sizeMat3;
					while(_g4 < _g5) {
						var i2 = _g4++;
						newArray1[i2] = _this4.stackMat3[i2];
						_this4.stackMat3[i2] = null;
					}
					_this4.stackMat3 = newArray1;
				}
				_this4.stackMat3[_this4.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t001 = 1;
				var t011 = 0;
				var t021 = 0;
				var t03 = 0;
				var t101 = 0;
				var t111 = 1;
				var t121 = 0;
				var t13 = 0;
				var t201 = 0;
				var t211 = 0;
				var t221 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t001;
				mat4.e01 = t011;
				mat4.e02 = t021;
				mat4.e03 = t03;
				mat4.e10 = t101;
				mat4.e11 = t111;
				mat4.e12 = t121;
				mat4.e13 = t13;
				mat4.e20 = t201;
				mat4.e21 = t211;
				mat4.e22 = t221;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this4.sizeMat4 == _this4.stackMat4.length) {
					var newLength2 = _this4.sizeMat4 << 1;
					var this3 = new Array(newLength2);
					var newArray2 = this3;
					var _g6 = 0;
					var _g7 = _this4.sizeMat4;
					while(_g6 < _g7) {
						var i3 = _g6++;
						newArray2[i3] = _this4.stackMat4[i3];
						_this4.stackMat4[i3] = null;
					}
					_this4.stackMat4 = newArray2;
				}
				_this4.stackMat4[_this4.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx2 = 0;
				var ty2 = 0;
				var tz2 = 0;
				var tw = 1;
				quat.x = tx2;
				quat.y = ty2;
				quat.z = tz2;
				quat.w = tw;
				if(_this4.sizeQuat == _this4.stackQuat.length) {
					var newLength3 = _this4.sizeQuat << 1;
					var this4 = new Array(newLength3);
					var newArray3 = this4;
					var _g8 = 0;
					var _g9 = _this4.sizeQuat;
					while(_g8 < _g9) {
						var i4 = _g8++;
						newArray3[i4] = _this4.stackQuat[i4];
						_this4.stackQuat[i4] = null;
					}
					_this4.stackQuat = newArray3;
				}
				_this4.stackQuat[_this4.sizeQuat++] = quat;
			}
			prevV = v1;
		}
		if(drawSector) {
			this.line(center,prevV,color);
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(prevV != null) {
			prevV.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = prevV;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,cone: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ey.x * halfHeight;
		var ty = _this.y + ey.y * halfHeight;
		var tz = _this.z + ey.z * halfHeight;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var top = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -halfHeight;
		var tx = _this.x + ey.x * s;
		var ty = _this.y + ey.y * s;
		var tz = _this.z + ey.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var bottom = _this;
		if(this.wireframe) {
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var s = -radius;
			var tx = _this.x + ex.x * s;
			var ty = _this.y + ex.y * s;
			var tz = _this.z + ex.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom1 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * radius;
			var ty = _this.y + ex.y * radius;
			var tz = _this.z + ex.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom2 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = -radius;
			var tx = _this1.x + ez.x * s;
			var ty = _this1.y + ez.y * s;
			var tz = _this1.z + ez.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom3 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * radius;
			var ty = _this1.y + ez.y * radius;
			var tz = _this1.z + ez.z * radius;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom4 = _this1;
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top,bottom1,color);
			this.line(top,bottom2,color);
			this.line(top,bottom3,color);
			this.line(top,bottom4,color);
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom1;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom2;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom3;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom4;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		} else {
			var invDenom = 1 / Math.sqrt(radius * radius + 4 * halfHeight * halfHeight);
			var cos = 2 * halfHeight * invDenom;
			var sin = radius * invDenom;
			var invDenom2 = 1 / Math.sqrt(2 * (1 + cos));
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var _this1 = _this;
				var tx = _this1.x * cos;
				var ty = _this1.y * cos;
				var tz = _this1.z * cos;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
				_this1.y += sin;
				var _this2 = this.tmpCircleNorms[i];
				var tx1 = _this2.x * m.e00 + _this2.y * m.e01 + _this2.z * m.e02;
				var ty1 = _this2.x * m.e10 + _this2.y * m.e11 + _this2.z * m.e12;
				var tz1 = _this2.x * m.e20 + _this2.y * m.e21 + _this2.z * m.e22;
				_this2.x = tx1;
				_this2.y = ty1;
				_this2.z = tz1;
				var _this3 = this.tmpCircleVerts1[i];
				var v1 = this.circleCoordsShift[i];
				_this3.x = v1.x;
				_this3.y = v1.y;
				_this3.z = v1.z;
				var _this4 = _this3;
				var tx2 = _this4.x * cos;
				var ty2 = _this4.y * cos;
				var tz2 = _this4.z * cos;
				_this4.x = tx2;
				_this4.y = ty2;
				_this4.z = tz2;
				_this4.y += sin;
				var _this5 = this.tmpCircleVerts1[i];
				var tx3 = _this5.x * m.e00 + _this5.y * m.e01 + _this5.z * m.e02;
				var ty3 = _this5.x * m.e10 + _this5.y * m.e11 + _this5.z * m.e12;
				var tz3 = _this5.x * m.e20 + _this5.y * m.e21 + _this5.z * m.e22;
				_this5.x = tx3;
				_this5.y = ty3;
				_this5.z = tz3;
				var _this6 = this.tmpCircleVerts2[i];
				var v2 = this.circleCoords[i];
				_this6.x = v2.x;
				_this6.y = v2.y;
				_this6.z = v2.z;
				var _this7 = _this6;
				var tx4 = _this7.x * m.e00 + _this7.y * m.e01 + _this7.z * m.e02;
				var ty4 = _this7.x * m.e10 + _this7.y * m.e11 + _this7.z * m.e12;
				var tz4 = _this7.x * m.e20 + _this7.y * m.e21 + _this7.z * m.e22;
				_this7.x = tx4;
				_this7.y = ty4;
				_this7.z = tz4;
				var _this8 = _this7;
				var tx5 = _this8.x * radius;
				var ty5 = _this8.y * radius;
				var tz5 = _this8.z * radius;
				_this8.x = tx5;
				_this8.y = ty5;
				_this8.z = tz5;
				var _this9 = _this8;
				var tx6 = _this9.x + o.x;
				var ty6 = _this9.y + o.y;
				var tz6 = _this9.z + o.z;
				_this9.x = tx6;
				_this9.y = ty6;
				_this9.z = tz6;
				var _this10 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				var tx7 = _this10.x + ey.x * s;
				var ty7 = _this10.y + ey.y * s;
				var tz7 = _this10.z + ey.z * s;
				_this10.x = tx7;
				_this10.y = ty7;
				_this10.z = tz7;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var v1 = top;
				var v2 = this.tmpCircleVerts2[i];
				var v3 = this.tmpCircleVerts2[(i + 1) % 8];
				var n1 = this.tmpCircleVerts1[i];
				var n2 = this.tmpCircleNorms[i];
				var n3 = this.tmpCircleNorms[(i + 1) % 8];
				this.triangle(v1,v2,v3,n1,n2,n3,color);
				v1 = bottom;
				v2 = this.tmpCircleVerts2[(i + 1) % 8];
				v3 = this.tmpCircleVerts2[i];
				var _this = this.p;
				var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
				_this1.x = ey.x;
				_this1.y = ey.y;
				_this1.z = ey.z;
				var _this2 = _this1;
				var tx = -_this2.x;
				var ty = -_this2.y;
				var tz = -_this2.z;
				_this2.x = tx;
				_this2.y = ty;
				_this2.z = tz;
				n1 = _this2;
				this.triangle(v1,v2,v3,n1,n1,n1,color);
				var _this3 = this.p;
				var mat3 = null;
				var mat4 = null;
				var quat = null;
				if(n1 != null) {
					n1.zero();
					if(_this3.sizeVec3 == _this3.stackVec3.length) {
						var newLength = _this3.sizeVec3 << 1;
						var this1 = new Array(newLength);
						var newArray = this1;
						var _g1 = 0;
						var _g2 = _this3.sizeVec3;
						while(_g1 < _g2) {
							var i1 = _g1++;
							newArray[i1] = _this3.stackVec3[i1];
							_this3.stackVec3[i1] = null;
						}
						_this3.stackVec3 = newArray;
					}
					_this3.stackVec3[_this3.sizeVec3++] = n1;
				}
				if(mat3 != null) {
					var t00 = 1;
					var t01 = 0;
					var t02 = 0;
					var t10 = 0;
					var t11 = 1;
					var t12 = 0;
					var t20 = 0;
					var t21 = 0;
					var t22 = 1;
					mat3.e00 = t00;
					mat3.e01 = t01;
					mat3.e02 = t02;
					mat3.e10 = t10;
					mat3.e11 = t11;
					mat3.e12 = t12;
					mat3.e20 = t20;
					mat3.e21 = t21;
					mat3.e22 = t22;
					if(_this3.sizeMat3 == _this3.stackMat3.length) {
						var newLength1 = _this3.sizeMat3 << 1;
						var this2 = new Array(newLength1);
						var newArray1 = this2;
						var _g3 = 0;
						var _g4 = _this3.sizeMat3;
						while(_g3 < _g4) {
							var i2 = _g3++;
							newArray1[i2] = _this3.stackMat3[i2];
							_this3.stackMat3[i2] = null;
						}
						_this3.stackMat3 = newArray1;
					}
					_this3.stackMat3[_this3.sizeMat3++] = mat3;
				}
				if(mat4 != null) {
					var t001 = 1;
					var t011 = 0;
					var t021 = 0;
					var t03 = 0;
					var t101 = 0;
					var t111 = 1;
					var t121 = 0;
					var t13 = 0;
					var t201 = 0;
					var t211 = 0;
					var t221 = 1;
					var t23 = 0;
					var t30 = 0;
					var t31 = 0;
					var t32 = 0;
					var t33 = 1;
					mat4.e00 = t001;
					mat4.e01 = t011;
					mat4.e02 = t021;
					mat4.e03 = t03;
					mat4.e10 = t101;
					mat4.e11 = t111;
					mat4.e12 = t121;
					mat4.e13 = t13;
					mat4.e20 = t201;
					mat4.e21 = t211;
					mat4.e22 = t221;
					mat4.e23 = t23;
					mat4.e30 = t30;
					mat4.e31 = t31;
					mat4.e32 = t32;
					mat4.e33 = t33;
					if(_this3.sizeMat4 == _this3.stackMat4.length) {
						var newLength2 = _this3.sizeMat4 << 1;
						var this3 = new Array(newLength2);
						var newArray2 = this3;
						var _g5 = 0;
						var _g6 = _this3.sizeMat4;
						while(_g5 < _g6) {
							var i3 = _g5++;
							newArray2[i3] = _this3.stackMat4[i3];
							_this3.stackMat4[i3] = null;
						}
						_this3.stackMat4 = newArray2;
					}
					_this3.stackMat4[_this3.sizeMat4++] = mat4;
				}
				if(quat != null) {
					var tx1 = 0;
					var ty1 = 0;
					var tz1 = 0;
					var tw = 1;
					quat.x = tx1;
					quat.y = ty1;
					quat.z = tz1;
					quat.w = tw;
					if(_this3.sizeQuat == _this3.stackQuat.length) {
						var newLength3 = _this3.sizeQuat << 1;
						var this4 = new Array(newLength3);
						var newArray3 = this4;
						var _g7 = 0;
						var _g8 = _this3.sizeQuat;
						while(_g7 < _g8) {
							var i4 = _g7++;
							newArray3[i4] = _this3.stackQuat[i4];
							_this3.stackQuat[i4] = null;
						}
						_this3.stackQuat = newArray3;
					}
					_this3.stackQuat[_this3.sizeQuat++] = quat;
				}
			}
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(top != null) {
			top.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = top;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(bottom != null) {
			bottom.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = bottom;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,cylinder: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ey.x * halfHeight;
		var ty = _this.y + ey.y * halfHeight;
		var tz = _this.z + ey.z * halfHeight;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var top = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -halfHeight;
		var tx = _this.x + ey.x * s;
		var ty = _this.y + ey.y * s;
		var tz = _this.z + ey.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var bottom = _this;
		if(this.wireframe) {
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var s = -radius;
			var tx = _this.x + ex.x * s;
			var ty = _this.y + ex.y * s;
			var tz = _this.z + ex.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top1 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * radius;
			var ty = _this.y + ex.y * radius;
			var tz = _this.z + ex.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top2 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = -radius;
			var tx = _this1.x + ez.x * s;
			var ty = _this1.y + ez.y * s;
			var tz = _this1.z + ez.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top3 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * radius;
			var ty = _this1.y + ez.y * radius;
			var tz = _this1.z + ez.z * radius;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top4 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var s = -radius;
			var tx = _this.x + ex.x * s;
			var ty = _this.y + ex.y * s;
			var tz = _this.z + ex.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom1 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * radius;
			var ty = _this.y + ex.y * radius;
			var tz = _this.z + ex.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom2 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = -radius;
			var tx = _this1.x + ez.x * s;
			var ty = _this1.y + ez.y * s;
			var tz = _this1.z + ez.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom3 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * radius;
			var ty = _this1.y + ez.y * radius;
			var tz = _this1.z + ez.z * radius;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom4 = _this1;
			this.ellipse(top,ex,ez,radius,radius,color);
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top1,bottom1,color);
			this.line(top2,bottom2,color);
			this.line(top3,bottom3,color);
			this.line(top4,bottom4,color);
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top1 != null) {
				top1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top1;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top2 != null) {
				top2.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top2;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top3 != null) {
				top3.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top3;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top4 != null) {
				top4.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top4;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom1;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom2;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom3;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom4;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		} else {
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var _this1 = _this;
				var tx = _this1.x * m.e00 + _this1.y * m.e01 + _this1.z * m.e02;
				var ty = _this1.x * m.e10 + _this1.y * m.e11 + _this1.z * m.e12;
				var tz = _this1.x * m.e20 + _this1.y * m.e21 + _this1.z * m.e22;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
				var _this2 = this.tmpCircleVerts1[i];
				var v1 = this.tmpCircleNorms[i];
				_this2.x = v1.x;
				_this2.y = v1.y;
				_this2.z = v1.z;
				var _this3 = _this2;
				var tx1 = _this3.x * radius;
				var ty1 = _this3.y * radius;
				var tz1 = _this3.z * radius;
				_this3.x = tx1;
				_this3.y = ty1;
				_this3.z = tz1;
				var _this4 = _this3;
				var tx2 = _this4.x + o.x;
				var ty2 = _this4.y + o.y;
				var tz2 = _this4.z + o.z;
				_this4.x = tx2;
				_this4.y = ty2;
				_this4.z = tz2;
				var _this5 = this.tmpCircleVerts2[i];
				var v2 = this.tmpCircleVerts1[i];
				_this5.x = v2.x;
				_this5.y = v2.y;
				_this5.z = v2.z;
				var _this6 = this.tmpCircleVerts1[i];
				var tx3 = _this6.x + ey.x * halfHeight;
				var ty3 = _this6.y + ey.y * halfHeight;
				var tz3 = _this6.z + ey.z * halfHeight;
				_this6.x = tx3;
				_this6.y = ty3;
				_this6.z = tz3;
				var _this7 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				var tx4 = _this7.x + ey.x * s;
				var ty4 = _this7.y + ey.y * s;
				var tz4 = _this7.z + ey.z * s;
				_this7.x = tx4;
				_this7.y = ty4;
				_this7.z = tz4;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var n3;
				var n4;
				var v1 = top;
				var v2 = this.tmpCircleVerts1[i];
				var v3 = this.tmpCircleVerts1[(i + 1) % 8];
				var n1 = ey;
				this.triangle(v1,v2,v3,n1,n1,n1,color);
				v1 = bottom;
				v2 = this.tmpCircleVerts2[(i + 1) % 8];
				v3 = this.tmpCircleVerts2[i];
				var _this = this.p;
				var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
				_this1.x = ey.x;
				_this1.y = ey.y;
				_this1.z = ey.z;
				var _this2 = _this1;
				var tx = -_this2.x;
				var ty = -_this2.y;
				var tz = -_this2.z;
				_this2.x = tx;
				_this2.y = ty;
				_this2.z = tz;
				n1 = _this2;
				this.triangle(v1,v2,v3,n1,n1,n1,color);
				var _this3 = this.p;
				var mat3 = null;
				var mat4 = null;
				var quat = null;
				if(n1 != null) {
					n1.zero();
					if(_this3.sizeVec3 == _this3.stackVec3.length) {
						var newLength = _this3.sizeVec3 << 1;
						var this1 = new Array(newLength);
						var newArray = this1;
						var _g1 = 0;
						var _g2 = _this3.sizeVec3;
						while(_g1 < _g2) {
							var i1 = _g1++;
							newArray[i1] = _this3.stackVec3[i1];
							_this3.stackVec3[i1] = null;
						}
						_this3.stackVec3 = newArray;
					}
					_this3.stackVec3[_this3.sizeVec3++] = n1;
				}
				if(mat3 != null) {
					var t00 = 1;
					var t01 = 0;
					var t02 = 0;
					var t10 = 0;
					var t11 = 1;
					var t12 = 0;
					var t20 = 0;
					var t21 = 0;
					var t22 = 1;
					mat3.e00 = t00;
					mat3.e01 = t01;
					mat3.e02 = t02;
					mat3.e10 = t10;
					mat3.e11 = t11;
					mat3.e12 = t12;
					mat3.e20 = t20;
					mat3.e21 = t21;
					mat3.e22 = t22;
					if(_this3.sizeMat3 == _this3.stackMat3.length) {
						var newLength1 = _this3.sizeMat3 << 1;
						var this2 = new Array(newLength1);
						var newArray1 = this2;
						var _g3 = 0;
						var _g4 = _this3.sizeMat3;
						while(_g3 < _g4) {
							var i2 = _g3++;
							newArray1[i2] = _this3.stackMat3[i2];
							_this3.stackMat3[i2] = null;
						}
						_this3.stackMat3 = newArray1;
					}
					_this3.stackMat3[_this3.sizeMat3++] = mat3;
				}
				if(mat4 != null) {
					var t001 = 1;
					var t011 = 0;
					var t021 = 0;
					var t03 = 0;
					var t101 = 0;
					var t111 = 1;
					var t121 = 0;
					var t13 = 0;
					var t201 = 0;
					var t211 = 0;
					var t221 = 1;
					var t23 = 0;
					var t30 = 0;
					var t31 = 0;
					var t32 = 0;
					var t33 = 1;
					mat4.e00 = t001;
					mat4.e01 = t011;
					mat4.e02 = t021;
					mat4.e03 = t03;
					mat4.e10 = t101;
					mat4.e11 = t111;
					mat4.e12 = t121;
					mat4.e13 = t13;
					mat4.e20 = t201;
					mat4.e21 = t211;
					mat4.e22 = t221;
					mat4.e23 = t23;
					mat4.e30 = t30;
					mat4.e31 = t31;
					mat4.e32 = t32;
					mat4.e33 = t33;
					if(_this3.sizeMat4 == _this3.stackMat4.length) {
						var newLength2 = _this3.sizeMat4 << 1;
						var this3 = new Array(newLength2);
						var newArray2 = this3;
						var _g5 = 0;
						var _g6 = _this3.sizeMat4;
						while(_g5 < _g6) {
							var i3 = _g5++;
							newArray2[i3] = _this3.stackMat4[i3];
							_this3.stackMat4[i3] = null;
						}
						_this3.stackMat4 = newArray2;
					}
					_this3.stackMat4[_this3.sizeMat4++] = mat4;
				}
				if(quat != null) {
					var tx1 = 0;
					var ty1 = 0;
					var tz1 = 0;
					var tw = 1;
					quat.x = tx1;
					quat.y = ty1;
					quat.z = tz1;
					quat.w = tw;
					if(_this3.sizeQuat == _this3.stackQuat.length) {
						var newLength3 = _this3.sizeQuat << 1;
						var this4 = new Array(newLength3);
						var newArray3 = this4;
						var _g7 = 0;
						var _g8 = _this3.sizeQuat;
						while(_g7 < _g8) {
							var i4 = _g7++;
							newArray3[i4] = _this3.stackQuat[i4];
							_this3.stackQuat[i4] = null;
						}
						_this3.stackQuat = newArray3;
					}
					_this3.stackQuat[_this3.sizeQuat++] = quat;
				}
				v1 = this.tmpCircleVerts1[i];
				v2 = this.tmpCircleVerts2[i];
				v3 = this.tmpCircleVerts2[(i + 1) % 8];
				var v4 = this.tmpCircleVerts1[(i + 1) % 8];
				n1 = this.tmpCircleNorms[i];
				var n2 = this.tmpCircleNorms[(i + 1) % 8];
				this.rect(v1,v2,v3,v4,n1,n1,n2,n2,color);
			}
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(top != null) {
			top.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = top;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(bottom != null) {
			bottom.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = bottom;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,capsule: function(tf,radius,halfHeight,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var nt = 4;
		var np = 8;
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g = 0;
		var _g1 = nt + 1;
		while(_g < _g1) {
			var i2 = _g++;
			var n = this.tmpSphereVerts[i2].length;
			var _g2 = 0;
			var _g3 = n;
			while(_g2 < _g3) {
				var j2 = _g2++;
				var _this = ns[i2][j2];
				var v = this.sphereCoords[i2][j2];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var _this1 = _this;
				var tx = _this1.x * m.e00 + _this1.y * m.e01 + _this1.z * m.e02;
				var ty = _this1.x * m.e10 + _this1.y * m.e11 + _this1.z * m.e12;
				var tz = _this1.x * m.e20 + _this1.y * m.e21 + _this1.z * m.e22;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
			}
		}
		var _g = 0;
		var _g1 = nt;
		while(_g < _g1) {
			var i = _g++;
			if(i == 0) {
				var half = nt >> 1;
				var _g2 = 0;
				var _g3 = half + 1;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var n = this.tmpSphereVerts[i2].length;
					var _g4 = 0;
					var _g5 = n;
					while(_g4 < _g5) {
						var j2 = _g4++;
						var _this = vs[i2][j2];
						var v = ns[i2][j2];
						_this.x = v.x;
						_this.y = v.y;
						_this.z = v.z;
						var _this1 = _this;
						var tx = _this1.x * radius;
						var ty = _this1.y * radius;
						var tz = _this1.z * radius;
						_this1.x = tx;
						_this1.y = ty;
						_this1.z = tz;
						var _this2 = _this1;
						var tx1 = _this2.x + o.x;
						var ty1 = _this2.y + o.y;
						var tz1 = _this2.z + o.z;
						_this2.x = tx1;
						_this2.y = ty1;
						_this2.z = tz1;
						var _this3 = _this2;
						var tx2 = _this3.x + ey.x * halfHeight;
						var ty2 = _this3.y + ey.y * halfHeight;
						var tz2 = _this3.z + ey.z * halfHeight;
						_this3.x = tx2;
						_this3.y = ty2;
						_this3.z = tz2;
					}
				}
			}
			if(i == nt >> 1) {
				var half1 = nt >> 1;
				var _g6 = half1;
				var _g7 = nt + 1;
				while(_g6 < _g7) {
					var i21 = _g6++;
					var n1 = this.tmpSphereVerts[i21].length;
					var _g8 = 0;
					var _g9 = n1;
					while(_g8 < _g9) {
						var j21 = _g8++;
						var _this4 = vs[i21][j21];
						var v1 = ns[i21][j21];
						_this4.x = v1.x;
						_this4.y = v1.y;
						_this4.z = v1.z;
						var _this5 = _this4;
						var tx3 = _this5.x * radius;
						var ty3 = _this5.y * radius;
						var tz3 = _this5.z * radius;
						_this5.x = tx3;
						_this5.y = ty3;
						_this5.z = tz3;
						var _this6 = _this5;
						var tx4 = _this6.x + o.x;
						var ty4 = _this6.y + o.y;
						var tz4 = _this6.z + o.z;
						_this6.x = tx4;
						_this6.y = ty4;
						_this6.z = tz4;
						var _this7 = _this6;
						var s = -halfHeight;
						var tx5 = _this7.x + ey.x * s;
						var ty5 = _this7.y + ey.y * s;
						var tz5 = _this7.z + ey.z * s;
						_this7.x = tx5;
						_this7.y = ty5;
						_this7.z = tz5;
					}
				}
			}
			var _g10 = 0;
			var _g11 = np;
			while(_g10 < _g11) {
				var j = _g10++;
				var v11;
				var v2;
				var v3;
				var v4;
				var n11;
				var n2;
				var n3;
				var n4;
				if(i == 0) {
					if(this.wireframe) {
						v11 = vs[0][0];
						v2 = vs[1][j];
						this.line(v11,v2,color);
					} else {
						v11 = vs[0][0];
						v2 = vs[1][j];
						v3 = vs[1][(j + 1) % np];
						n11 = ns[0][0];
						n2 = ns[1][j];
						n3 = ns[1][(j + 1) % np];
						this.triangle(v11,v2,v3,n11,n2,n3,color);
					}
				} else if(i == nt - 1) {
					if(this.wireframe) {
						v11 = vs[nt][0];
						v2 = vs[i][(j + 1) % np];
						v3 = vs[i][j];
						this.line(v11,v2,color);
						this.line(v2,v3,color);
					} else {
						v11 = vs[nt][0];
						v2 = vs[i][(j + 1) % np];
						v3 = vs[i][j];
						n11 = ns[nt][0];
						n2 = ns[i][(j + 1) % np];
						n3 = ns[i][j];
						this.triangle(v11,v2,v3,n11,n2,n3,color);
					}
				} else if(this.wireframe) {
					v11 = vs[i][j];
					v2 = vs[i][(j + 1) % np];
					v3 = vs[i + 1][j];
					this.line(v11,v2,color);
					this.line(v11,v3,color);
				} else {
					v11 = vs[i][j];
					v2 = vs[i][(j + 1) % np];
					v3 = vs[i + 1][j];
					v4 = vs[i + 1][(j + 1) % np];
					n11 = ns[i][j];
					n2 = ns[i][(j + 1) % np];
					n3 = ns[i + 1][j];
					n4 = ns[i + 1][(j + 1) % np];
					this.rect(v11,v3,v4,v2,n11,n3,n4,n2,color);
				}
			}
		}
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ey.x * halfHeight;
		var ty = _this.y + ey.y * halfHeight;
		var tz = _this.z + ey.z * halfHeight;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var top = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -halfHeight;
		var tx = _this.x + ey.x * s;
		var ty = _this.y + ey.y * s;
		var tz = _this.z + ey.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var bottom = _this;
		if(this.wireframe) {
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var s = -radius;
			var tx = _this.x + ex.x * s;
			var ty = _this.y + ex.y * s;
			var tz = _this.z + ex.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top1 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * radius;
			var ty = _this.y + ex.y * radius;
			var tz = _this.z + ex.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top2 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = -radius;
			var tx = _this1.x + ez.x * s;
			var ty = _this1.y + ez.y * s;
			var tz = _this1.z + ez.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top3 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = top.x;
			_this1.y = top.y;
			_this1.z = top.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * radius;
			var ty = _this1.y + ez.y * radius;
			var tz = _this1.z + ez.z * radius;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var top4 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var s = -radius;
			var tx = _this.x + ex.x * s;
			var ty = _this.y + ex.y * s;
			var tz = _this.z + ex.z * s;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom1 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * radius;
			var ty = _this.y + ex.y * radius;
			var tz = _this.z + ex.z * radius;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * 0;
			var ty = _this1.y + ez.y * 0;
			var tz = _this1.z + ez.z * 0;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom2 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var s = -radius;
			var tx = _this1.x + ez.x * s;
			var ty = _this1.y + ez.y * s;
			var tz = _this1.z + ez.z * s;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom3 = _this1;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = bottom.x;
			_this1.y = bottom.y;
			_this1.z = bottom.z;
			var _this = _this1;
			var tx = _this.x + ex.x * 0;
			var ty = _this.y + ex.y * 0;
			var tz = _this.z + ex.z * 0;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var _this1 = _this;
			var tx = _this1.x + ez.x * radius;
			var ty = _this1.y + ez.y * radius;
			var tz = _this1.z + ez.z * radius;
			_this1.x = tx;
			_this1.y = ty;
			_this1.z = tz;
			var bottom4 = _this1;
			this.ellipse(top,ex,ez,radius,radius,color);
			this.ellipse(bottom,ex,ez,radius,radius,color);
			this.line(top1,bottom1,color);
			this.line(top2,bottom2,color);
			this.line(top3,bottom3,color);
			this.line(top4,bottom4,color);
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top1 != null) {
				top1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top1;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top2 != null) {
				top2.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top2;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top3 != null) {
				top3.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top3;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(top4 != null) {
				top4.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = top4;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom1 != null) {
				bottom1.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom1;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom2 != null) {
				bottom2.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom2;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom3 != null) {
				bottom3.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom3;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(bottom4 != null) {
				bottom4.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = bottom4;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		} else {
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var _this = this.tmpCircleNorms[i];
				var v = this.circleCoords[i];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var _this1 = _this;
				var tx = _this1.x * m.e00 + _this1.y * m.e01 + _this1.z * m.e02;
				var ty = _this1.x * m.e10 + _this1.y * m.e11 + _this1.z * m.e12;
				var tz = _this1.x * m.e20 + _this1.y * m.e21 + _this1.z * m.e22;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
				var _this2 = this.tmpCircleVerts1[i];
				var v1 = this.tmpCircleNorms[i];
				_this2.x = v1.x;
				_this2.y = v1.y;
				_this2.z = v1.z;
				var _this3 = _this2;
				var tx1 = _this3.x * radius;
				var ty1 = _this3.y * radius;
				var tz1 = _this3.z * radius;
				_this3.x = tx1;
				_this3.y = ty1;
				_this3.z = tz1;
				var _this4 = _this3;
				var tx2 = _this4.x + o.x;
				var ty2 = _this4.y + o.y;
				var tz2 = _this4.z + o.z;
				_this4.x = tx2;
				_this4.y = ty2;
				_this4.z = tz2;
				var _this5 = this.tmpCircleVerts2[i];
				var v2 = this.tmpCircleVerts1[i];
				_this5.x = v2.x;
				_this5.y = v2.y;
				_this5.z = v2.z;
				var _this6 = this.tmpCircleVerts1[i];
				var tx3 = _this6.x + ey.x * halfHeight;
				var ty3 = _this6.y + ey.y * halfHeight;
				var tz3 = _this6.z + ey.z * halfHeight;
				_this6.x = tx3;
				_this6.y = ty3;
				_this6.z = tz3;
				var _this7 = this.tmpCircleVerts2[i];
				var s = -halfHeight;
				var tx4 = _this7.x + ey.x * s;
				var ty4 = _this7.y + ey.y * s;
				var tz4 = _this7.z + ey.z * s;
				_this7.x = tx4;
				_this7.y = ty4;
				_this7.z = tz4;
			}
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				var v1 = this.tmpCircleVerts1[i];
				var v2 = this.tmpCircleVerts2[i];
				var v3 = this.tmpCircleVerts2[(i + 1) % 8];
				var v4 = this.tmpCircleVerts1[(i + 1) % 8];
				var n1 = this.tmpCircleNorms[i];
				var n2 = this.tmpCircleNorms[(i + 1) % 8];
				this.rect(v1,v2,v3,v4,n1,n1,n2,n2,color);
			}
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(top != null) {
			top.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = top;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(bottom != null) {
			bottom.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = bottom;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,sphere: function(tf,radius,color) {
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		var nt = 4;
		var np = 8;
		var vs = this.tmpSphereVerts;
		var ns = this.tmpSphereNorms;
		var _g = 0;
		var _g1 = nt + 1;
		while(_g < _g1) {
			var i = _g++;
			var n = this.tmpSphereVerts[i].length;
			var _g2 = 0;
			var _g3 = n;
			while(_g2 < _g3) {
				var j = _g2++;
				var _this = ns[i][j];
				var v = this.sphereCoords[i][j];
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				var _this1 = _this;
				var tx = _this1.x * m.e00 + _this1.y * m.e01 + _this1.z * m.e02;
				var ty = _this1.x * m.e10 + _this1.y * m.e11 + _this1.z * m.e12;
				var tz = _this1.x * m.e20 + _this1.y * m.e21 + _this1.z * m.e22;
				_this1.x = tx;
				_this1.y = ty;
				_this1.z = tz;
				var _this2 = vs[i][j];
				var v1 = ns[i][j];
				_this2.x = v1.x;
				_this2.y = v1.y;
				_this2.z = v1.z;
				var _this3 = _this2;
				var tx1 = _this3.x * radius;
				var ty1 = _this3.y * radius;
				var tz1 = _this3.z * radius;
				_this3.x = tx1;
				_this3.y = ty1;
				_this3.z = tz1;
				var _this4 = _this3;
				var tx2 = _this4.x + o.x;
				var ty2 = _this4.y + o.y;
				var tz2 = _this4.z + o.z;
				_this4.x = tx2;
				_this4.y = ty2;
				_this4.z = tz2;
			}
		}
		var _g = 0;
		var _g1 = nt;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = np;
			while(_g2 < _g3) {
				var j = _g2++;
				var v1;
				var v2;
				var v3;
				var v4;
				var n1;
				var n2;
				var n3;
				var n4;
				if(i == 0) {
					if(this.wireframe) {
						v1 = vs[0][0];
						v2 = vs[1][j];
						this.line(v1,v2,color);
					} else {
						v1 = vs[0][0];
						v2 = vs[1][j];
						v3 = vs[1][(j + 1) % np];
						n1 = ns[0][0];
						n2 = ns[1][j];
						n3 = ns[1][(j + 1) % np];
						this.triangle(v1,v2,v3,n1,n2,n3,color);
					}
				} else if(i == nt - 1) {
					if(this.wireframe) {
						v1 = vs[nt][0];
						v2 = vs[i][(j + 1) % np];
						v3 = vs[i][j];
						this.line(v1,v2,color);
						this.line(v2,v3,color);
					} else {
						v1 = vs[nt][0];
						v2 = vs[i][(j + 1) % np];
						v3 = vs[i][j];
						n1 = ns[nt][0];
						n2 = ns[i][(j + 1) % np];
						n3 = ns[i][j];
						this.triangle(v1,v2,v3,n1,n2,n3,color);
					}
				} else if(this.wireframe) {
					v1 = vs[i][j];
					v2 = vs[i][(j + 1) % np];
					v3 = vs[i + 1][j];
					this.line(v1,v2,color);
					this.line(v1,v3,color);
				} else {
					v1 = vs[i][j];
					v2 = vs[i][(j + 1) % np];
					v3 = vs[i + 1][j];
					v4 = vs[i + 1][(j + 1) % np];
					n1 = ns[i][j];
					n2 = ns[i][(j + 1) % np];
					n3 = ns[i + 1][j];
					n4 = ns[i + 1][(j + 1) % np];
					this.rect(v1,v3,v4,v2,n1,n3,n4,n2,color);
				}
			}
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,box: function(tf,halfExtents,color) {
		var _this = this.p;
		var ex = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ey = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var ez = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var o = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		var _this = this.p;
		var m = _this.sizeMat3 == 0 ? new oimo_common_Mat3() : _this.stackMat3[--_this.sizeMat3];
		var v = o;
		v.x = tf._positionX;
		v.y = tf._positionY;
		v.z = tf._positionZ;
		var m1 = m;
		m1.e00 = tf._rotation00;
		m1.e01 = tf._rotation01;
		m1.e02 = tf._rotation02;
		m1.e10 = tf._rotation10;
		m1.e11 = tf._rotation11;
		m1.e12 = tf._rotation12;
		m1.e20 = tf._rotation20;
		m1.e21 = tf._rotation21;
		m1.e22 = tf._rotation22;
		ex.init(m.e00,m.e10,m.e20);
		ey.init(m.e01,m.e11,m.e21);
		ez.init(m.e02,m.e12,m.e22);
		var hx = halfExtents.x;
		var hy = halfExtents.y;
		var hz = halfExtents.z;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -hx;
		var tx = _this.x + ex.x * s;
		var ty = _this.y + ex.y * s;
		var tz = _this.z + ex.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var s = -hy;
		var tx = _this1.x + ey.x * s;
		var ty = _this1.y + ey.y * s;
		var tz = _this1.z + ey.z * s;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var s = -hz;
		var tx = _this.x + ez.x * s;
		var ty = _this.y + ez.y * s;
		var tz = _this.z + ez.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v1 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -hx;
		var tx = _this.x + ex.x * s;
		var ty = _this.y + ex.y * s;
		var tz = _this.z + ex.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var s = -hy;
		var tx = _this1.x + ey.x * s;
		var ty = _this1.y + ey.y * s;
		var tz = _this1.z + ey.z * s;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * hz;
		var ty = _this.y + ez.y * hz;
		var tz = _this.z + ez.z * hz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v2 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -hx;
		var tx = _this.x + ex.x * s;
		var ty = _this.y + ex.y * s;
		var tz = _this.z + ex.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * hy;
		var ty = _this1.y + ey.y * hy;
		var tz = _this1.z + ey.z * hy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var s = -hz;
		var tx = _this.x + ez.x * s;
		var ty = _this.y + ez.y * s;
		var tz = _this.z + ez.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v3 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var s = -hx;
		var tx = _this.x + ex.x * s;
		var ty = _this.y + ex.y * s;
		var tz = _this.z + ex.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * hy;
		var ty = _this1.y + ey.y * hy;
		var tz = _this1.z + ey.z * hy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * hz;
		var ty = _this.y + ez.y * hz;
		var tz = _this.z + ez.z * hz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v4 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ex.x * hx;
		var ty = _this.y + ex.y * hx;
		var tz = _this.z + ex.z * hx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var s = -hy;
		var tx = _this1.x + ey.x * s;
		var ty = _this1.y + ey.y * s;
		var tz = _this1.z + ey.z * s;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var s = -hz;
		var tx = _this.x + ez.x * s;
		var ty = _this.y + ez.y * s;
		var tz = _this.z + ez.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v5 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ex.x * hx;
		var ty = _this.y + ex.y * hx;
		var tz = _this.z + ex.z * hx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var s = -hy;
		var tx = _this1.x + ey.x * s;
		var ty = _this1.y + ey.y * s;
		var tz = _this1.z + ey.z * s;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * hz;
		var ty = _this.y + ez.y * hz;
		var tz = _this.z + ez.z * hz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v6 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ex.x * hx;
		var ty = _this.y + ex.y * hx;
		var tz = _this.z + ex.z * hx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * hy;
		var ty = _this1.y + ey.y * hy;
		var tz = _this1.z + ey.z * hy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var s = -hz;
		var tx = _this.x + ez.x * s;
		var ty = _this.y + ez.y * s;
		var tz = _this.z + ez.z * s;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v7 = _this;
		var _this = this.p;
		var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
		_this1.x = o.x;
		_this1.y = o.y;
		_this1.z = o.z;
		var _this = _this1;
		var tx = _this.x + ex.x * hx;
		var ty = _this.y + ex.y * hx;
		var tz = _this.z + ex.z * hx;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var _this1 = _this;
		var tx = _this1.x + ey.x * hy;
		var ty = _this1.y + ey.y * hy;
		var tz = _this1.z + ey.z * hy;
		_this1.x = tx;
		_this1.y = ty;
		_this1.z = tz;
		var _this = _this1;
		var tx = _this.x + ez.x * hz;
		var ty = _this.y + ez.y * hz;
		var tz = _this.z + ez.z * hz;
		_this.x = tx;
		_this.y = ty;
		_this.z = tz;
		var v8 = _this;
		if(this.wireframe) {
			this.line(v1,v2,color);
			this.line(v3,v4,color);
			this.line(v5,v6,color);
			this.line(v7,v8,color);
			this.line(v1,v3,color);
			this.line(v2,v4,color);
			this.line(v5,v7,color);
			this.line(v6,v8,color);
			this.line(v1,v5,color);
			this.line(v2,v6,color);
			this.line(v3,v7,color);
			this.line(v4,v8,color);
		} else {
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = ex.x;
			_this1.y = ex.y;
			_this1.z = ex.z;
			var _this = _this1;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var nex = _this;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = ey.x;
			_this1.y = ey.y;
			_this1.z = ey.z;
			var _this = _this1;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var ney = _this;
			var _this = this.p;
			var _this1 = _this.sizeVec3 == 0 ? new oimo_common_Vec3() : _this.stackVec3[--_this.sizeVec3];
			_this1.x = ez.x;
			_this1.y = ez.y;
			_this1.z = ez.z;
			var _this = _this1;
			var tx = -_this.x;
			var ty = -_this.y;
			var tz = -_this.z;
			_this.x = tx;
			_this.y = ty;
			_this.z = tz;
			var nez = _this;
			this.rect(v1,v2,v4,v3,nex,nex,nex,nex,color);
			this.rect(v5,v7,v8,v6,ex,ex,ex,ex,color);
			this.rect(v1,v5,v6,v2,ney,ney,ney,ney,color);
			this.rect(v3,v4,v8,v7,ey,ey,ey,ey,color);
			this.rect(v1,v3,v7,v5,nez,nez,nez,nez,color);
			this.rect(v2,v6,v8,v4,ez,ez,ez,ez,color);
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(nex != null) {
				nex.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = nex;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(ney != null) {
				ney.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = ney;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
			var _this = this.p;
			var mat3 = null;
			var mat4 = null;
			var quat = null;
			if(nez != null) {
				nez.zero();
				if(_this.sizeVec3 == _this.stackVec3.length) {
					var newLength = _this.sizeVec3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeVec3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackVec3[i];
						_this.stackVec3[i] = null;
					}
					_this.stackVec3 = newArray;
				}
				_this.stackVec3[_this.sizeVec3++] = nez;
			}
			if(mat3 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				mat3.e00 = t00;
				mat3.e01 = t01;
				mat3.e02 = t02;
				mat3.e10 = t10;
				mat3.e11 = t11;
				mat3.e12 = t12;
				mat3.e20 = t20;
				mat3.e21 = t21;
				mat3.e22 = t22;
				if(_this.sizeMat3 == _this.stackMat3.length) {
					var newLength = _this.sizeMat3 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat3;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat3[i];
						_this.stackMat3[i] = null;
					}
					_this.stackMat3 = newArray;
				}
				_this.stackMat3[_this.sizeMat3++] = mat3;
			}
			if(mat4 != null) {
				var t00 = 1;
				var t01 = 0;
				var t02 = 0;
				var t03 = 0;
				var t10 = 0;
				var t11 = 1;
				var t12 = 0;
				var t13 = 0;
				var t20 = 0;
				var t21 = 0;
				var t22 = 1;
				var t23 = 0;
				var t30 = 0;
				var t31 = 0;
				var t32 = 0;
				var t33 = 1;
				mat4.e00 = t00;
				mat4.e01 = t01;
				mat4.e02 = t02;
				mat4.e03 = t03;
				mat4.e10 = t10;
				mat4.e11 = t11;
				mat4.e12 = t12;
				mat4.e13 = t13;
				mat4.e20 = t20;
				mat4.e21 = t21;
				mat4.e22 = t22;
				mat4.e23 = t23;
				mat4.e30 = t30;
				mat4.e31 = t31;
				mat4.e32 = t32;
				mat4.e33 = t33;
				if(_this.sizeMat4 == _this.stackMat4.length) {
					var newLength = _this.sizeMat4 << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeMat4;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackMat4[i];
						_this.stackMat4[i] = null;
					}
					_this.stackMat4 = newArray;
				}
				_this.stackMat4[_this.sizeMat4++] = mat4;
			}
			if(quat != null) {
				var tx = 0;
				var ty = 0;
				var tz = 0;
				var tw = 1;
				quat.x = tx;
				quat.y = ty;
				quat.z = tz;
				quat.w = tw;
				if(_this.sizeQuat == _this.stackQuat.length) {
					var newLength = _this.sizeQuat << 1;
					var this1 = new Array(newLength);
					var newArray = this1;
					var _g = 0;
					var _g1 = _this.sizeQuat;
					while(_g < _g1) {
						var i = _g++;
						newArray[i] = _this.stackQuat[i];
						_this.stackQuat[i] = null;
					}
					_this.stackQuat = newArray;
				}
				_this.stackQuat[_this.sizeQuat++] = quat;
			}
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v1 != null) {
			v1.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v1;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v2 != null) {
			v2.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v2;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v3 != null) {
			v3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v3;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v4 != null) {
			v4.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v4;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v5 != null) {
			v5.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v5;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v6 != null) {
			v6.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v6;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v7 != null) {
			v7.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v7;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(v8 != null) {
			v8.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = v8;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(o != null) {
			o.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = o;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var vec3 = null;
		var mat4 = null;
		var quat = null;
		if(vec3 != null) {
			vec3.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = vec3;
		}
		if(m != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			m.e00 = t00;
			m.e01 = t01;
			m.e02 = t02;
			m.e10 = t10;
			m.e11 = t11;
			m.e12 = t12;
			m.e20 = t20;
			m.e21 = t21;
			m.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = m;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ex != null) {
			ex.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ex;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ey != null) {
			ey.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ey;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
		var _this = this.p;
		var mat3 = null;
		var mat4 = null;
		var quat = null;
		if(ez != null) {
			ez.zero();
			if(_this.sizeVec3 == _this.stackVec3.length) {
				var newLength = _this.sizeVec3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeVec3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackVec3[i];
					_this.stackVec3[i] = null;
				}
				_this.stackVec3 = newArray;
			}
			_this.stackVec3[_this.sizeVec3++] = ez;
		}
		if(mat3 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			mat3.e00 = t00;
			mat3.e01 = t01;
			mat3.e02 = t02;
			mat3.e10 = t10;
			mat3.e11 = t11;
			mat3.e12 = t12;
			mat3.e20 = t20;
			mat3.e21 = t21;
			mat3.e22 = t22;
			if(_this.sizeMat3 == _this.stackMat3.length) {
				var newLength = _this.sizeMat3 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat3;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat3[i];
					_this.stackMat3[i] = null;
				}
				_this.stackMat3 = newArray;
			}
			_this.stackMat3[_this.sizeMat3++] = mat3;
		}
		if(mat4 != null) {
			var t00 = 1;
			var t01 = 0;
			var t02 = 0;
			var t03 = 0;
			var t10 = 0;
			var t11 = 1;
			var t12 = 0;
			var t13 = 0;
			var t20 = 0;
			var t21 = 0;
			var t22 = 1;
			var t23 = 0;
			var t30 = 0;
			var t31 = 0;
			var t32 = 0;
			var t33 = 1;
			mat4.e00 = t00;
			mat4.e01 = t01;
			mat4.e02 = t02;
			mat4.e03 = t03;
			mat4.e10 = t10;
			mat4.e11 = t11;
			mat4.e12 = t12;
			mat4.e13 = t13;
			mat4.e20 = t20;
			mat4.e21 = t21;
			mat4.e22 = t22;
			mat4.e23 = t23;
			mat4.e30 = t30;
			mat4.e31 = t31;
			mat4.e32 = t32;
			mat4.e33 = t33;
			if(_this.sizeMat4 == _this.stackMat4.length) {
				var newLength = _this.sizeMat4 << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeMat4;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackMat4[i];
					_this.stackMat4[i] = null;
				}
				_this.stackMat4 = newArray;
			}
			_this.stackMat4[_this.sizeMat4++] = mat4;
		}
		if(quat != null) {
			var tx = 0;
			var ty = 0;
			var tz = 0;
			var tw = 1;
			quat.x = tx;
			quat.y = ty;
			quat.z = tz;
			quat.w = tw;
			if(_this.sizeQuat == _this.stackQuat.length) {
				var newLength = _this.sizeQuat << 1;
				var this1 = new Array(newLength);
				var newArray = this1;
				var _g = 0;
				var _g1 = _this.sizeQuat;
				while(_g < _g1) {
					var i = _g++;
					newArray[i] = _this.stackQuat[i];
					_this.stackQuat[i] = null;
				}
				_this.stackQuat = newArray;
			}
			_this.stackQuat[_this.sizeQuat++] = quat;
		}
	}
	,rect: function(v1,v2,v3,v4,n1,n2,n3,n4,color) {
		this.triangle(v1,v2,v3,n1,n2,n3,color);
		this.triangle(v1,v3,v4,n1,n3,n4,color);
	}
	,point: function(v,color) {
	}
	,triangle: function(v1,v2,v3,n1,n2,n3,color) {
	}
	,line: function(v1,v2,color) {
	}
	,__class__: oimo_dynamics_common_DebugDraw
};
var oimo_dynamics_common_DebugDrawStyle = function() {
	this.basisColorZ = new oimo_common_Vec3(0.0,0.0,1.0);
	this.basisColorY = new oimo_common_Vec3(0.0,1.0,0.0);
	this.basisColorX = new oimo_common_Vec3(1.0,0.0,0.0);
	this.basisLength = 0.5;
	this.jointRotationalConstraintRadius = 0.3;
	this.jointErrorColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.jointLineColor = new oimo_common_Vec3(0.8,0.8,0.8);
	this.contactBinormalLength = 0.5;
	this.contactTangentLength = 0.5;
	this.contactNormalLength = 0.5;
	this.contactBinormalColor = new oimo_common_Vec3(0.2,0.2,1.0);
	this.contactTangentColor = new oimo_common_Vec3(0.1,0.8,0.1);
	this.contactNormalColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.disabledContactColor = new oimo_common_Vec3(0.5,0.1,0.1);
	this.newContactColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.contactColor4 = new oimo_common_Vec3(0.8,0.1,1.0);
	this.contactColor3 = new oimo_common_Vec3(0.1,0.8,0.6);
	this.contactColor2 = new oimo_common_Vec3(1.0,0.6,0.1);
	this.contactColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.pairColor = new oimo_common_Vec3(1.0,1.0,0.1);
	this.bvhNodeColor = new oimo_common_Vec3(0.4,0.4,0.4);
	this.aabbColor = new oimo_common_Vec3(1.0,0.1,0.1);
	this.kinematicShapeColor = new oimo_common_Vec3(1.0,0.5,0.1);
	this.staticShapeColor = new oimo_common_Vec3(0.7,0.7,0.7);
	this.sleepingShapeColor2 = new oimo_common_Vec3(0.2,0.8,0.5);
	this.sleepingShapeColor1 = new oimo_common_Vec3(0.3,0.3,0.8);
	this.sleepyShapeColor2 = new oimo_common_Vec3(0.6,0.8,0.3);
	this.sleepyShapeColor1 = new oimo_common_Vec3(0.5,0.25,0.6);
	this.shapeColor2 = new oimo_common_Vec3(1.0,0.8,0.1);
	this.shapeColor1 = new oimo_common_Vec3(0.7,0.2,0.4);
};
oimo_dynamics_common_DebugDrawStyle.__name__ = "oimo.dynamics.common.DebugDrawStyle";
oimo_dynamics_common_DebugDrawStyle.prototype = {
	__class__: oimo_dynamics_common_DebugDrawStyle
};
var oimo_dynamics_common_Performance = function() { };
oimo_dynamics_common_Performance.__name__ = "oimo.dynamics.common.Performance";
var oimo_dynamics_constraint_ConstraintSolver = function() {
	this._b1 = null;
	this._b2 = null;
	this._addedToIsland = false;
};
oimo_dynamics_constraint_ConstraintSolver.__name__ = "oimo.dynamics.constraint.ConstraintSolver";
oimo_dynamics_constraint_ConstraintSolver.prototype = {
	preSolveVelocity: function(timeStep) {
	}
	,warmStart: function(timeStep) {
	}
	,solveVelocity: function() {
	}
	,postSolveVelocity: function(timeStep) {
	}
	,preSolvePosition: function(timeStep) {
	}
	,solvePositionSplitImpulse: function() {
	}
	,solvePositionNgs: function(timeStep) {
	}
	,postSolve: function() {
	}
	,__class__: oimo_dynamics_constraint_ConstraintSolver
};
var oimo_dynamics_constraint_PositionCorrectionAlgorithm = function() { };
oimo_dynamics_constraint_PositionCorrectionAlgorithm.__name__ = "oimo.dynamics.constraint.PositionCorrectionAlgorithm";
var oimo_dynamics_constraint_contact_ContactConstraint = function(manifold) {
	this._solver = new oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver(this);
	this._manifold = manifold;
};
oimo_dynamics_constraint_contact_ContactConstraint.__name__ = "oimo.dynamics.constraint.contact.ContactConstraint";
oimo_dynamics_constraint_contact_ContactConstraint.prototype = {
	_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		var tangent;
		var tangentX;
		var tangentY;
		var tangentZ;
		var binormal;
		var binormalX;
		var binormalY;
		var binormalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		tangentX = this._manifold._tangentX;
		tangentY = this._manifold._tangentY;
		tangentZ = this._manifold._tangentZ;
		binormalX = this._manifold._binormalX;
		binormalY = this._manifold._binormalY;
		binormalZ = this._manifold._binormalZ;
		var friction = Math.sqrt(this._s1._friction * this._s2._friction);
		var restitution = Math.sqrt(this._s1._restitution * this._s2._restitution);
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var posDiff;
		var posDiffX;
		var posDiffY;
		var posDiffZ;
		posDiffX = this._tf1._positionX - this._tf2._positionX;
		posDiffY = this._tf1._positionY - this._tf2._positionY;
		posDiffZ = this._tf1._positionZ - this._tf2._positionZ;
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			var p = this._manifold._points[i];
			if(p._depth < 0) {
				p._disabled = true;
				var _this = p._impulse;
				_this.impulseN = 0;
				_this.impulseT = 0;
				_this.impulseB = 0;
				_this.impulseP = 0;
				_this.impulseLX = 0;
				_this.impulseLY = 0;
				_this.impulseLZ = 0;
				continue;
			} else {
				p._disabled = false;
			}
			var row = info.rows[info.numRows++];
			row.friction = friction;
			row.cfm = 0;
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			j = row.jacobianT;
			j.lin1X = tangentX;
			j.lin1Y = tangentY;
			j.lin1Z = tangentZ;
			j.lin2X = tangentX;
			j.lin2Y = tangentY;
			j.lin2Z = tangentZ;
			j.ang1X = p._relPos1Y * tangentZ - p._relPos1Z * tangentY;
			j.ang1Y = p._relPos1Z * tangentX - p._relPos1X * tangentZ;
			j.ang1Z = p._relPos1X * tangentY - p._relPos1Y * tangentX;
			j.ang2X = p._relPos2Y * tangentZ - p._relPos2Z * tangentY;
			j.ang2Y = p._relPos2Z * tangentX - p._relPos2X * tangentZ;
			j.ang2Z = p._relPos2X * tangentY - p._relPos2Y * tangentX;
			j = row.jacobianB;
			j.lin1X = binormalX;
			j.lin1Y = binormalY;
			j.lin1Z = binormalZ;
			j.lin2X = binormalX;
			j.lin2Y = binormalY;
			j.lin2Z = binormalZ;
			j.ang1X = p._relPos1Y * binormalZ - p._relPos1Z * binormalY;
			j.ang1Y = p._relPos1Z * binormalX - p._relPos1X * binormalZ;
			j.ang1Z = p._relPos1X * binormalY - p._relPos1Y * binormalX;
			j.ang2X = p._relPos2Y * binormalZ - p._relPos2Z * binormalY;
			j.ang2Y = p._relPos2Z * binormalX - p._relPos2X * binormalZ;
			j.ang2Z = p._relPos2X * binormalY - p._relPos2Y * binormalX;
			j = row.jacobianN;
			var rvn = j.lin1X * this._b1._velX + j.lin1Y * this._b1._velY + j.lin1Z * this._b1._velZ + (j.ang1X * this._b1._angVelX + j.ang1Y * this._b1._angVelY + j.ang1Z * this._b1._angVelZ) - (j.lin2X * this._b2._velX + j.lin2Y * this._b2._velY + j.lin2Z * this._b2._velZ + (j.ang2X * this._b2._angVelX + j.ang2Y * this._b2._angVelY + j.ang2Z * this._b2._angVelZ));
			if(rvn < -oimo_common_Setting.contactEnableBounceThreshold && !p._warmStarted) {
				row.rhs = -rvn * restitution;
			} else {
				row.rhs = 0;
			}
			if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
				if(p._depth > oimo_common_Setting.linearSlop) {
					var minRhs = (p._depth - oimo_common_Setting.linearSlop) * oimo_common_Setting.velocityBaumgarte * timeStep.invDt;
					if(row.rhs < minRhs) {
						row.rhs = minRhs;
					}
				}
			}
			if(!p._warmStarted) {
				var _this1 = p._impulse;
				_this1.impulseN = 0;
				_this1.impulseT = 0;
				_this1.impulseB = 0;
				_this1.impulseP = 0;
				_this1.impulseLX = 0;
				_this1.impulseLY = 0;
				_this1.impulseLZ = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		var normal;
		var normalX;
		var normalY;
		var normalZ;
		normalX = this._manifold._normalX;
		normalY = this._manifold._normalY;
		normalZ = this._manifold._normalZ;
		var num = this._manifold._numPoints;
		info.numRows = 0;
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			var p = this._manifold._points[i];
			if(p._disabled) {
				continue;
			}
			var row = info.rows[info.numRows++];
			var j = row.jacobianN;
			j.lin1X = normalX;
			j.lin1Y = normalY;
			j.lin1Z = normalZ;
			j.lin2X = normalX;
			j.lin2Y = normalY;
			j.lin2Z = normalZ;
			j.ang1X = p._relPos1Y * normalZ - p._relPos1Z * normalY;
			j.ang1Y = p._relPos1Z * normalX - p._relPos1X * normalZ;
			j.ang1Z = p._relPos1X * normalY - p._relPos1Y * normalX;
			j.ang2X = p._relPos2Y * normalZ - p._relPos2Z * normalY;
			j.ang2Y = p._relPos2Z * normalX - p._relPos2X * normalZ;
			j.ang2Z = p._relPos2X * normalY - p._relPos2Y * normalX;
			row.rhs = p._depth - oimo_common_Setting.linearSlop;
			if(row.rhs < 0) {
				row.rhs = 0;
			}
			row.impulse = p._impulse;
		}
	}
	,_syncManifold: function() {
		this._manifold._updateDepthsAndPositions(this._tf1,this._tf2);
	}
	,getShape1: function() {
		return this._s1;
	}
	,getShape2: function() {
		return this._s2;
	}
	,getManifold: function() {
		return this._manifold;
	}
	,isTouching: function() {
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) {
			var i = _g++;
			if(this._manifold._points[i]._depth >= 0) {
				return true;
			}
		}
		return false;
	}
	,__class__: oimo_dynamics_constraint_contact_ContactConstraint
};
var oimo_dynamics_constraint_contact_ContactImpulse = function() {
	this.impulseN = 0;
	this.impulseT = 0;
	this.impulseB = 0;
	this.impulseP = 0;
	this.impulseLX = 0;
	this.impulseLY = 0;
	this.impulseLZ = 0;
};
oimo_dynamics_constraint_contact_ContactImpulse.__name__ = "oimo.dynamics.constraint.contact.ContactImpulse";
oimo_dynamics_constraint_contact_ContactImpulse.prototype = {
	copyFrom: function(imp) {
		this.impulseN = imp.impulseN;
		this.impulseT = imp.impulseT;
		this.impulseB = imp.impulseB;
		this.impulseLX = imp.impulseLX;
		this.impulseLY = imp.impulseLY;
		this.impulseLZ = imp.impulseLZ;
	}
	,__class__: oimo_dynamics_constraint_contact_ContactImpulse
};
var oimo_dynamics_constraint_contact_Manifold = function() {
	this._normalX = 0;
	this._normalY = 0;
	this._normalZ = 0;
	this._tangentX = 0;
	this._tangentY = 0;
	this._tangentZ = 0;
	this._binormalX = 0;
	this._binormalY = 0;
	this._binormalZ = 0;
	this._numPoints = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this._points = this1;
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this._points[i] = new oimo_dynamics_constraint_contact_ManifoldPoint();
	}
};
oimo_dynamics_constraint_contact_Manifold.__name__ = "oimo.dynamics.constraint.contact.Manifold";
oimo_dynamics_constraint_contact_Manifold.prototype = {
	_clear: function() {
		var _g = 0;
		var _g1 = this._numPoints;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._points[i];
			_this._localPos1X = 0;
			_this._localPos1Y = 0;
			_this._localPos1Z = 0;
			_this._localPos2X = 0;
			_this._localPos2Y = 0;
			_this._localPos2Z = 0;
			_this._relPos1X = 0;
			_this._relPos1Y = 0;
			_this._relPos1Z = 0;
			_this._relPos2X = 0;
			_this._relPos2Y = 0;
			_this._relPos2Z = 0;
			_this._pos1X = 0;
			_this._pos1Y = 0;
			_this._pos1Z = 0;
			_this._pos2X = 0;
			_this._pos2Y = 0;
			_this._pos2Z = 0;
			_this._depth = 0;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._warmStarted = false;
			_this._disabled = false;
			_this._id = -1;
		}
		this._numPoints = 0;
	}
	,_buildBasis: function(normal) {
		var v = normal;
		this._normalX = v.x;
		this._normalY = v.y;
		this._normalZ = v.z;
		var nx = normal.x;
		var ny = normal.y;
		var nz = normal.z;
		var nx2 = nx * nx;
		var ny2 = ny * ny;
		var nz2 = nz * nz;
		var tx;
		var ty;
		var tz;
		var bx;
		var by;
		var bz;
		if(nx2 < ny2) {
			if(nx2 < nz2) {
				var invL = 1 / Math.sqrt(ny2 + nz2);
				tx = 0;
				ty = -nz * invL;
				tz = ny * invL;
				bx = ny * tz - nz * ty;
				by = -nx * tz;
				bz = nx * ty;
			} else {
				var invL = 1 / Math.sqrt(nx2 + ny2);
				tx = -ny * invL;
				ty = nx * invL;
				tz = 0;
				bx = -nz * ty;
				by = nz * tx;
				bz = nx * ty - ny * tx;
			}
		} else if(ny2 < nz2) {
			var invL = 1 / Math.sqrt(nx2 + nz2);
			tx = nz * invL;
			ty = 0;
			tz = -nx * invL;
			bx = ny * tz;
			by = nz * tx - nx * tz;
			bz = -ny * tx;
		} else {
			var invL = 1 / Math.sqrt(nx2 + ny2);
			tx = -ny * invL;
			ty = nx * invL;
			tz = 0;
			bx = -nz * ty;
			by = nz * tx;
			bz = nx * ty - ny * tx;
		}
		this._tangentX = tx;
		this._tangentY = ty;
		this._tangentZ = tz;
		this._binormalX = bx;
		this._binormalY = by;
		this._binormalZ = bz;
	}
	,_updateDepthsAndPositions: function(tf1,tf2) {
		var _g = 0;
		var _g1 = this._numPoints;
		while(_g < _g1) {
			var i = _g++;
			var p = this._points[i];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._pos1X = p._relPos1X + tf1._positionX;
			p._pos1Y = p._relPos1Y + tf1._positionY;
			p._pos1Z = p._relPos1Z + tf1._positionZ;
			p._pos2X = p._relPos2X + tf2._positionX;
			p._pos2Y = p._relPos2Y + tf2._positionY;
			p._pos2Z = p._relPos2Z + tf2._positionZ;
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			var dotN = diffX * this._normalX + diffY * this._normalY + diffZ * this._normalZ;
			p._depth = -dotN;
		}
	}
	,getNormal: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._normalX;
		v1.y = this._normalY;
		v1.z = this._normalZ;
		return v;
	}
	,getNormalTo: function(normal) {
		var v = normal;
		v.x = this._normalX;
		v.y = this._normalY;
		v.z = this._normalZ;
	}
	,getTangent: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._tangentX;
		v1.y = this._tangentY;
		v1.z = this._tangentZ;
		return v;
	}
	,getTangentTo: function(tangent) {
		var v = tangent;
		v.x = this._tangentX;
		v.y = this._tangentY;
		v.z = this._tangentZ;
	}
	,getBinormal: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._binormalX;
		v1.y = this._binormalY;
		v1.z = this._binormalZ;
		return v;
	}
	,getBinormalTo: function(binormal) {
		var v = binormal;
		v.x = this._binormalX;
		v.y = this._binormalY;
		v.z = this._binormalZ;
	}
	,getPoints: function() {
		return this._points;
	}
	,getNumPoints: function() {
		return this._numPoints;
	}
	,__class__: oimo_dynamics_constraint_contact_Manifold
};
var oimo_dynamics_constraint_contact_ManifoldPoint = function() {
	this._localPos1X = 0;
	this._localPos1Y = 0;
	this._localPos1Z = 0;
	this._localPos2X = 0;
	this._localPos2Y = 0;
	this._localPos2Z = 0;
	this._relPos1X = 0;
	this._relPos1Y = 0;
	this._relPos1Z = 0;
	this._relPos2X = 0;
	this._relPos2Y = 0;
	this._relPos2Z = 0;
	this._pos1X = 0;
	this._pos1Y = 0;
	this._pos1Z = 0;
	this._pos2X = 0;
	this._pos2Y = 0;
	this._pos2Z = 0;
	this._depth = 0;
	this._impulse = new oimo_dynamics_constraint_contact_ContactImpulse();
	this._warmStarted = false;
	this._disabled = false;
	this._id = -1;
};
oimo_dynamics_constraint_contact_ManifoldPoint.__name__ = "oimo.dynamics.constraint.contact.ManifoldPoint";
oimo_dynamics_constraint_contact_ManifoldPoint.prototype = {
	getPosition1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._pos1X;
		v1.y = this._pos1Y;
		v1.z = this._pos1Z;
		return v;
	}
	,getPosition1To: function(position) {
		var v = position;
		v.x = this._pos1X;
		v.y = this._pos1Y;
		v.z = this._pos1Z;
	}
	,getPosition2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._pos2X;
		v1.y = this._pos2Y;
		v1.z = this._pos2Z;
		return v;
	}
	,getPosition2To: function(position) {
		var v = position;
		v.x = this._pos2X;
		v.y = this._pos2Y;
		v.z = this._pos2Z;
	}
	,getDepth: function() {
		return this._depth;
	}
	,isWarmStarted: function() {
		return this._warmStarted;
	}
	,getNormalImpulse: function() {
		return this._impulse.impulseN;
	}
	,getTangentImpulse: function() {
		return this._impulse.impulseT;
	}
	,getBinormalImpulse: function() {
		return this._impulse.impulseB;
	}
	,isEnabled: function() {
		return !this._disabled;
	}
	,__class__: oimo_dynamics_constraint_contact_ManifoldPoint
};
var oimo_dynamics_constraint_contact_ManifoldUpdater = function(manifold) {
	this._manifold = manifold;
	this.numOldPoints = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.oldPoints = this1;
	var _g = 0;
	var _g1 = oimo_common_Setting.maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.oldPoints[i] = new oimo_dynamics_constraint_contact_ManifoldPoint();
	}
};
oimo_dynamics_constraint_contact_ManifoldUpdater.__name__ = "oimo.dynamics.constraint.contact.ManifoldUpdater";
oimo_dynamics_constraint_contact_ManifoldUpdater.prototype = {
	removeOutdatedPoints: function() {
		var num = this._manifold._numPoints;
		var index = num;
		while(--index >= 0) {
			var p = this._manifold._points[index];
			var diff;
			var diffX;
			var diffY;
			var diffZ;
			diffX = p._pos1X - p._pos2X;
			diffY = p._pos1Y - p._pos2Y;
			diffZ = p._pos1Z - p._pos2Z;
			var dotN = this._manifold._normalX * diffX + this._manifold._normalY * diffY + this._manifold._normalZ * diffZ;
			if(dotN > oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
			diffX += this._manifold._normalX * -dotN;
			diffY += this._manifold._normalY * -dotN;
			diffZ += this._manifold._normalZ * -dotN;
			if(diffX * diffX + diffY * diffY + diffZ * diffZ > oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold) {
				this.removeManifoldPoint(index);
				continue;
			}
		}
	}
	,removeManifoldPoint: function(index) {
		var lastIndex = --this._manifold._numPoints;
		if(index != lastIndex) {
			var tmp = this._manifold._points[index];
			this._manifold._points[index] = this._manifold._points[lastIndex];
			this._manifold._points[lastIndex] = tmp;
		}
		var _this = this._manifold._points[lastIndex];
		_this._localPos1X = 0;
		_this._localPos1Y = 0;
		_this._localPos1Z = 0;
		_this._localPos2X = 0;
		_this._localPos2Y = 0;
		_this._localPos2Z = 0;
		_this._relPos1X = 0;
		_this._relPos1Y = 0;
		_this._relPos1Z = 0;
		_this._relPos2X = 0;
		_this._relPos2Y = 0;
		_this._relPos2Z = 0;
		_this._pos1X = 0;
		_this._pos1Y = 0;
		_this._pos1Z = 0;
		_this._pos2X = 0;
		_this._pos2Y = 0;
		_this._pos2Z = 0;
		_this._depth = 0;
		var _this1 = _this._impulse;
		_this1.impulseN = 0;
		_this1.impulseT = 0;
		_this1.impulseB = 0;
		_this1.impulseP = 0;
		_this1.impulseLX = 0;
		_this1.impulseLY = 0;
		_this1.impulseLZ = 0;
		_this._warmStarted = false;
		_this._disabled = false;
		_this._id = -1;
	}
	,addManifoldPoint: function(point,tf1,tf2) {
		var num = this._manifold._numPoints;
		if(num == oimo_common_Setting.maxManifoldPoints) {
			var targetIndex = this.computeTargetIndex(point,tf1,tf2);
			var _this = this._manifold._points[targetIndex];
			var v = point.position1;
			_this._pos1X = v.x;
			_this._pos1Y = v.y;
			_this._pos1Z = v.z;
			var v = point.position2;
			_this._pos2X = v.x;
			_this._pos2Y = v.y;
			_this._pos2Z = v.z;
			_this._relPos1X = _this._pos1X - tf1._positionX;
			_this._relPos1Y = _this._pos1Y - tf1._positionY;
			_this._relPos1Z = _this._pos1Z - tf1._positionZ;
			_this._relPos2X = _this._pos2X - tf2._positionX;
			_this._relPos2Y = _this._pos2Y - tf2._positionY;
			_this._relPos2Z = _this._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * _this._relPos1X + tf1._rotation10 * _this._relPos1Y + tf1._rotation20 * _this._relPos1Z;
			__tmp__Y = tf1._rotation01 * _this._relPos1X + tf1._rotation11 * _this._relPos1Y + tf1._rotation21 * _this._relPos1Z;
			__tmp__Z = tf1._rotation02 * _this._relPos1X + tf1._rotation12 * _this._relPos1Y + tf1._rotation22 * _this._relPos1Z;
			_this._localPos1X = __tmp__X;
			_this._localPos1Y = __tmp__Y;
			_this._localPos1Z = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * _this._relPos2X + tf2._rotation10 * _this._relPos2Y + tf2._rotation20 * _this._relPos2Z;
			__tmp__Y = tf2._rotation01 * _this._relPos2X + tf2._rotation11 * _this._relPos2Y + tf2._rotation21 * _this._relPos2Z;
			__tmp__Z = tf2._rotation02 * _this._relPos2X + tf2._rotation12 * _this._relPos2Y + tf2._rotation22 * _this._relPos2Z;
			_this._localPos2X = __tmp__X;
			_this._localPos2Y = __tmp__Y;
			_this._localPos2Z = __tmp__Z;
			_this._depth = point.depth;
			var _this1 = _this._impulse;
			_this1.impulseN = 0;
			_this1.impulseT = 0;
			_this1.impulseB = 0;
			_this1.impulseP = 0;
			_this1.impulseLX = 0;
			_this1.impulseLY = 0;
			_this1.impulseLZ = 0;
			_this._id = point.id;
			_this._warmStarted = false;
			_this._disabled = false;
			return;
		}
		var _this = this._manifold._points[num];
		var v = point.position1;
		_this._pos1X = v.x;
		_this._pos1Y = v.y;
		_this._pos1Z = v.z;
		var v = point.position2;
		_this._pos2X = v.x;
		_this._pos2Y = v.y;
		_this._pos2Z = v.z;
		_this._relPos1X = _this._pos1X - tf1._positionX;
		_this._relPos1Y = _this._pos1Y - tf1._positionY;
		_this._relPos1Z = _this._pos1Z - tf1._positionZ;
		_this._relPos2X = _this._pos2X - tf2._positionX;
		_this._relPos2Y = _this._pos2Y - tf2._positionY;
		_this._relPos2Z = _this._pos2Z - tf2._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * _this._relPos1X + tf1._rotation10 * _this._relPos1Y + tf1._rotation20 * _this._relPos1Z;
		__tmp__Y = tf1._rotation01 * _this._relPos1X + tf1._rotation11 * _this._relPos1Y + tf1._rotation21 * _this._relPos1Z;
		__tmp__Z = tf1._rotation02 * _this._relPos1X + tf1._rotation12 * _this._relPos1Y + tf1._rotation22 * _this._relPos1Z;
		_this._localPos1X = __tmp__X;
		_this._localPos1Y = __tmp__Y;
		_this._localPos1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * _this._relPos2X + tf2._rotation10 * _this._relPos2Y + tf2._rotation20 * _this._relPos2Z;
		__tmp__Y = tf2._rotation01 * _this._relPos2X + tf2._rotation11 * _this._relPos2Y + tf2._rotation21 * _this._relPos2Z;
		__tmp__Z = tf2._rotation02 * _this._relPos2X + tf2._rotation12 * _this._relPos2Y + tf2._rotation22 * _this._relPos2Z;
		_this._localPos2X = __tmp__X;
		_this._localPos2Y = __tmp__Y;
		_this._localPos2Z = __tmp__Z;
		_this._depth = point.depth;
		var _this1 = _this._impulse;
		_this1.impulseN = 0;
		_this1.impulseT = 0;
		_this1.impulseB = 0;
		_this1.impulseP = 0;
		_this1.impulseLX = 0;
		_this1.impulseLY = 0;
		_this1.impulseLZ = 0;
		_this._id = point.id;
		_this._warmStarted = false;
		_this._disabled = false;
		this._manifold._numPoints++;
	}
	,computeTargetIndex: function(newPoint,tf1,tf2) {
		var p1 = this._manifold._points[0];
		var p2 = this._manifold._points[1];
		var p3 = this._manifold._points[2];
		var p4 = this._manifold._points[3];
		var maxDepth = p1._depth;
		var maxDepthIndex = 0;
		if(p2._depth > maxDepth) {
			maxDepth = p2._depth;
			maxDepthIndex = 1;
		}
		if(p3._depth > maxDepth) {
			maxDepth = p3._depth;
			maxDepthIndex = 2;
		}
		if(p4._depth > maxDepth) {
			maxDepth = p4._depth;
			maxDepthIndex = 3;
		}
		var rp1;
		var rp1X;
		var rp1Y;
		var rp1Z;
		var v = newPoint.position1;
		rp1X = v.x;
		rp1Y = v.y;
		rp1Z = v.z;
		rp1X -= tf1._positionX;
		rp1Y -= tf1._positionY;
		rp1Z -= tf1._positionZ;
		var p1X = p2._relPos1X;
		var p1Y = p2._relPos1Y;
		var p1Z = p2._relPos1Z;
		var p2X = p3._relPos1X;
		var p2Y = p3._relPos1Y;
		var p2Z = p3._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v34;
		var v34X;
		var v34Y;
		var v34Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var v24;
		var v24X;
		var v24Y;
		var v24Z;
		var v14;
		var v14X;
		var v14Y;
		var v14Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a11 = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p3._relPos1X;
		var p2Y = p3._relPos1Y;
		var p2Z = p3._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v34;
		var v34X;
		var v34Y;
		var v34Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var v24;
		var v24X;
		var v24Y;
		var v24Z;
		var v14;
		var v14X;
		var v14Y;
		var v14Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a21 = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p2._relPos1X;
		var p2Y = p2._relPos1Y;
		var p2Z = p2._relPos1Z;
		var p3X = p4._relPos1X;
		var p3Y = p4._relPos1Y;
		var p3Z = p4._relPos1Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v34;
		var v34X;
		var v34Y;
		var v34Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var v24;
		var v24X;
		var v24Y;
		var v24Z;
		var v14;
		var v14X;
		var v14Y;
		var v14Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a31 = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var p1X = p1._relPos1X;
		var p1Y = p1._relPos1Y;
		var p1Z = p1._relPos1Z;
		var p2X = p2._relPos1X;
		var p2Y = p2._relPos1Y;
		var p2Z = p2._relPos1Z;
		var p3X = p3._relPos1X;
		var p3Y = p3._relPos1Y;
		var p3Z = p3._relPos1Z;
		var v12;
		var v12X;
		var v12Y;
		var v12Z;
		var v34;
		var v34X;
		var v34Y;
		var v34Z;
		var v13;
		var v13X;
		var v13Y;
		var v13Z;
		var v24;
		var v24X;
		var v24Y;
		var v24Z;
		var v14;
		var v14X;
		var v14Y;
		var v14Z;
		var v23;
		var v23X;
		var v23Y;
		var v23Z;
		v12X = p2X - p1X;
		v12Y = p2Y - p1Y;
		v12Z = p2Z - p1Z;
		v34X = rp1X - p3X;
		v34Y = rp1Y - p3Y;
		v34Z = rp1Z - p3Z;
		v13X = p3X - p1X;
		v13Y = p3Y - p1Y;
		v13Z = p3Z - p1Z;
		v24X = rp1X - p2X;
		v24Y = rp1Y - p2Y;
		v24Z = rp1Z - p2Z;
		v14X = rp1X - p1X;
		v14Y = rp1Y - p1Y;
		v14Z = rp1Z - p1Z;
		v23X = p3X - p2X;
		v23Y = p3Y - p2Y;
		v23Z = p3Z - p2Z;
		var cross1;
		var cross1X;
		var cross1Y;
		var cross1Z;
		var cross2;
		var cross2X;
		var cross2Y;
		var cross2Z;
		var cross3;
		var cross3X;
		var cross3Y;
		var cross3Z;
		cross1X = v12Y * v34Z - v12Z * v34Y;
		cross1Y = v12Z * v34X - v12X * v34Z;
		cross1Z = v12X * v34Y - v12Y * v34X;
		cross2X = v13Y * v24Z - v13Z * v24Y;
		cross2Y = v13Z * v24X - v13X * v24Z;
		cross2Z = v13X * v24Y - v13Y * v24X;
		cross3X = v14Y * v23Z - v14Z * v23Y;
		cross3Y = v14Z * v23X - v14X * v23Z;
		cross3Z = v14X * v23Y - v14Y * v23X;
		var a1 = cross1X * cross1X + cross1Y * cross1Y + cross1Z * cross1Z;
		var a2 = cross2X * cross2X + cross2Y * cross2Y + cross2Z * cross2Z;
		var a3 = cross3X * cross3X + cross3Y * cross3Y + cross3Z * cross3Z;
		var a4 = a1 > a2 ? a1 > a3 ? a1 : a3 : a2 > a3 ? a2 : a3;
		var max = a11;
		var target = 0;
		if(a21 > max && maxDepthIndex != 1 || maxDepthIndex == 0) {
			max = a21;
			target = 1;
		}
		if(a31 > max && maxDepthIndex != 2) {
			max = a31;
			target = 2;
		}
		if(a4 > max && maxDepthIndex != 3) {
			max = a4;
			target = 3;
		}
		return target;
	}
	,computeRelativePositions: function(tf1,tf2) {
		var num = this._manifold._numPoints;
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			var p = this._manifold._points[i];
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._localPos1X + tf1._rotation01 * p._localPos1Y + tf1._rotation02 * p._localPos1Z;
			__tmp__Y = tf1._rotation10 * p._localPos1X + tf1._rotation11 * p._localPos1Y + tf1._rotation12 * p._localPos1Z;
			__tmp__Z = tf1._rotation20 * p._localPos1X + tf1._rotation21 * p._localPos1Y + tf1._rotation22 * p._localPos1Z;
			p._relPos1X = __tmp__X;
			p._relPos1Y = __tmp__Y;
			p._relPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._localPos2X + tf2._rotation01 * p._localPos2Y + tf2._rotation02 * p._localPos2Z;
			__tmp__Y1 = tf2._rotation10 * p._localPos2X + tf2._rotation11 * p._localPos2Y + tf2._rotation12 * p._localPos2Z;
			__tmp__Z1 = tf2._rotation20 * p._localPos2X + tf2._rotation21 * p._localPos2Y + tf2._rotation22 * p._localPos2Z;
			p._relPos2X = __tmp__X1;
			p._relPos2Y = __tmp__Y1;
			p._relPos2Z = __tmp__Z1;
			p._warmStarted = true;
		}
	}
	,findNearestContactPointIndex: function(target,tf1,tf2) {
		var nearestSq = oimo_common_Setting.contactPersistenceThreshold * oimo_common_Setting.contactPersistenceThreshold;
		var idx = -1;
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) {
			var i = _g++;
			var mp = this._manifold._points[i];
			var rp1;
			var rp1X;
			var rp1Y;
			var rp1Z;
			var rp2;
			var rp2X;
			var rp2Y;
			var rp2Z;
			var v = target.position1;
			rp1X = v.x;
			rp1Y = v.y;
			rp1Z = v.z;
			var v1 = target.position2;
			rp2X = v1.x;
			rp2Y = v1.y;
			rp2Z = v1.z;
			rp1X -= tf1._positionX;
			rp1Y -= tf1._positionY;
			rp1Z -= tf1._positionZ;
			rp2X -= tf2._positionX;
			rp2Y -= tf2._positionY;
			rp2Z -= tf2._positionZ;
			var diff1;
			var diff1X;
			var diff1Y;
			var diff1Z;
			var diff2;
			var diff2X;
			var diff2Y;
			var diff2Z;
			diff1X = mp._relPos1X - rp1X;
			diff1Y = mp._relPos1Y - rp1Y;
			diff1Z = mp._relPos1Z - rp1Z;
			diff2X = mp._relPos2X - rp2X;
			diff2Y = mp._relPos2Y - rp2Y;
			diff2Z = mp._relPos2Z - rp2Z;
			var sq1 = diff1X * diff1X + diff1Y * diff1Y + diff1Z * diff1Z;
			var sq2 = diff2X * diff2X + diff2Y * diff2Y + diff2Z * diff2Z;
			var d = sq1 < sq2 ? sq1 : sq2;
			if(d < nearestSq) {
				nearestSq = d;
				idx = i;
			}
		}
		return idx;
	}
	,totalUpdate: function(result,tf1,tf2) {
		this.numOldPoints = this._manifold._numPoints;
		var _g = 0;
		var _g1 = this.numOldPoints;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.oldPoints[i];
			var cp = this._manifold._points[i];
			_this._localPos1X = cp._localPos1X;
			_this._localPos1Y = cp._localPos1Y;
			_this._localPos1Z = cp._localPos1Z;
			_this._localPos2X = cp._localPos2X;
			_this._localPos2Y = cp._localPos2Y;
			_this._localPos2Z = cp._localPos2Z;
			_this._relPos1X = cp._relPos1X;
			_this._relPos1Y = cp._relPos1Y;
			_this._relPos1Z = cp._relPos1Z;
			_this._relPos2X = cp._relPos2X;
			_this._relPos2Y = cp._relPos2Y;
			_this._relPos2Z = cp._relPos2Z;
			_this._pos1X = cp._pos1X;
			_this._pos1Y = cp._pos1Y;
			_this._pos1Z = cp._pos1Z;
			_this._pos2X = cp._pos2X;
			_this._pos2Y = cp._pos2Y;
			_this._pos2Z = cp._pos2Z;
			_this._depth = cp._depth;
			_this._impulse.copyFrom(cp._impulse);
			_this._id = cp._id;
			_this._warmStarted = cp._warmStarted;
			_this._disabled = false;
		}
		var num = result.numPoints;
		this._manifold._numPoints = num;
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			var p = this._manifold._points[i];
			var ref = result.points[i];
			var v = ref.position1;
			p._pos1X = v.x;
			p._pos1Y = v.y;
			p._pos1Z = v.z;
			var v1 = ref.position2;
			p._pos2X = v1.x;
			p._pos2Y = v1.y;
			p._pos2Z = v1.z;
			p._relPos1X = p._pos1X - tf1._positionX;
			p._relPos1Y = p._pos1Y - tf1._positionY;
			p._relPos1Z = p._pos1Z - tf1._positionZ;
			p._relPos2X = p._pos2X - tf2._positionX;
			p._relPos2Y = p._pos2Y - tf2._positionY;
			p._relPos2Z = p._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * p._relPos1X + tf1._rotation10 * p._relPos1Y + tf1._rotation20 * p._relPos1Z;
			__tmp__Y = tf1._rotation01 * p._relPos1X + tf1._rotation11 * p._relPos1Y + tf1._rotation21 * p._relPos1Z;
			__tmp__Z = tf1._rotation02 * p._relPos1X + tf1._rotation12 * p._relPos1Y + tf1._rotation22 * p._relPos1Z;
			p._localPos1X = __tmp__X;
			p._localPos1Y = __tmp__Y;
			p._localPos1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = tf2._rotation00 * p._relPos2X + tf2._rotation10 * p._relPos2Y + tf2._rotation20 * p._relPos2Z;
			__tmp__Y1 = tf2._rotation01 * p._relPos2X + tf2._rotation11 * p._relPos2Y + tf2._rotation21 * p._relPos2Z;
			__tmp__Z1 = tf2._rotation02 * p._relPos2X + tf2._rotation12 * p._relPos2Y + tf2._rotation22 * p._relPos2Z;
			p._localPos2X = __tmp__X1;
			p._localPos2Y = __tmp__Y1;
			p._localPos2Z = __tmp__Z1;
			p._depth = ref.depth;
			var _this = p._impulse;
			_this.impulseN = 0;
			_this.impulseT = 0;
			_this.impulseB = 0;
			_this.impulseP = 0;
			_this.impulseLX = 0;
			_this.impulseLY = 0;
			_this.impulseLZ = 0;
			p._id = ref.id;
			p._warmStarted = false;
			p._disabled = false;
			var _g2 = 0;
			var _g3 = this.numOldPoints;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var ocp = this.oldPoints[i1];
				if(p._id == ocp._id) {
					p._impulse.copyFrom(ocp._impulse);
					p._warmStarted = true;
					break;
				}
			}
		}
	}
	,incrementalUpdate: function(result,tf1,tf2) {
		this._manifold._updateDepthsAndPositions(tf1,tf2);
		var _g = 0;
		var _g1 = this._manifold._numPoints;
		while(_g < _g1) {
			var i = _g++;
			this._manifold._points[i]._warmStarted = true;
		}
		var newPoint = result.points[0];
		var index = this.findNearestContactPointIndex(newPoint,tf1,tf2);
		if(index == -1) {
			this.addManifoldPoint(newPoint,tf1,tf2);
		} else {
			var cp = this._manifold._points[index];
			var v = newPoint.position1;
			cp._pos1X = v.x;
			cp._pos1Y = v.y;
			cp._pos1Z = v.z;
			var v = newPoint.position2;
			cp._pos2X = v.x;
			cp._pos2Y = v.y;
			cp._pos2Z = v.z;
			cp._relPos1X = cp._pos1X - tf1._positionX;
			cp._relPos1Y = cp._pos1Y - tf1._positionY;
			cp._relPos1Z = cp._pos1Z - tf1._positionZ;
			cp._relPos2X = cp._pos2X - tf2._positionX;
			cp._relPos2Y = cp._pos2Y - tf2._positionY;
			cp._relPos2Z = cp._pos2Z - tf2._positionZ;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf1._rotation00 * cp._relPos1X + tf1._rotation10 * cp._relPos1Y + tf1._rotation20 * cp._relPos1Z;
			__tmp__Y = tf1._rotation01 * cp._relPos1X + tf1._rotation11 * cp._relPos1Y + tf1._rotation21 * cp._relPos1Z;
			__tmp__Z = tf1._rotation02 * cp._relPos1X + tf1._rotation12 * cp._relPos1Y + tf1._rotation22 * cp._relPos1Z;
			cp._localPos1X = __tmp__X;
			cp._localPos1Y = __tmp__Y;
			cp._localPos1Z = __tmp__Z;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = tf2._rotation00 * cp._relPos2X + tf2._rotation10 * cp._relPos2Y + tf2._rotation20 * cp._relPos2Z;
			__tmp__Y = tf2._rotation01 * cp._relPos2X + tf2._rotation11 * cp._relPos2Y + tf2._rotation21 * cp._relPos2Z;
			__tmp__Z = tf2._rotation02 * cp._relPos2X + tf2._rotation12 * cp._relPos2Y + tf2._rotation22 * cp._relPos2Z;
			cp._localPos2X = __tmp__X;
			cp._localPos2Y = __tmp__Y;
			cp._localPos2Z = __tmp__Z;
			cp._depth = newPoint.depth;
		}
		this.removeOutdatedPoints();
	}
	,__class__: oimo_dynamics_constraint_contact_ManifoldUpdater
};
var oimo_dynamics_constraint_info_JacobianRow = function() {
	this.lin1X = 0;
	this.lin1Y = 0;
	this.lin1Z = 0;
	this.lin2X = 0;
	this.lin2Y = 0;
	this.lin2Z = 0;
	this.ang1X = 0;
	this.ang1Y = 0;
	this.ang1Z = 0;
	this.ang2X = 0;
	this.ang2Y = 0;
	this.ang2Z = 0;
	this.flag = 0;
};
oimo_dynamics_constraint_info_JacobianRow.__name__ = "oimo.dynamics.constraint.info.JacobianRow";
oimo_dynamics_constraint_info_JacobianRow.prototype = {
	updateSparsity: function() {
		this.flag = 0;
		if(!(this.lin1X == 0 && this.lin1Y == 0 && this.lin1Z == 0) || !(this.lin2X == 0 && this.lin2Y == 0 && this.lin2Z == 0)) {
			this.flag |= 1;
		}
		if(!(this.ang1X == 0 && this.ang1Y == 0 && this.ang1Z == 0) || !(this.ang2X == 0 && this.ang2Y == 0 && this.ang2Z == 0)) {
			this.flag |= 2;
		}
	}
	,__class__: oimo_dynamics_constraint_info_JacobianRow
};
var oimo_dynamics_constraint_info_contact_ContactSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.rows = this1;
	var _g = 0;
	var _g1 = this.rows.length;
	while(_g < _g1) {
		var i = _g++;
		this.rows[i] = new oimo_dynamics_constraint_info_contact_ContactSolverInfoRow();
	}
};
oimo_dynamics_constraint_info_contact_ContactSolverInfo.__name__ = "oimo.dynamics.constraint.info.contact.ContactSolverInfo";
oimo_dynamics_constraint_info_contact_ContactSolverInfo.prototype = {
	__class__: oimo_dynamics_constraint_info_contact_ContactSolverInfo
};
var oimo_dynamics_constraint_info_contact_ContactSolverInfoRow = function() {
	this.jacobianN = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianT = new oimo_dynamics_constraint_info_JacobianRow();
	this.jacobianB = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.friction = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_contact_ContactSolverInfoRow.__name__ = "oimo.dynamics.constraint.info.contact.ContactSolverInfoRow";
oimo_dynamics_constraint_info_contact_ContactSolverInfoRow.prototype = {
	__class__: oimo_dynamics_constraint_info_contact_ContactSolverInfoRow
};
var oimo_dynamics_constraint_info_joint_JointSolverInfo = function() {
	this.b1 = null;
	this.b2 = null;
	this.numRows = 0;
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this.rows = this1;
	var _g = 0;
	var _g1 = this.rows.length;
	while(_g < _g1) {
		var i = _g++;
		this.rows[i] = new oimo_dynamics_constraint_info_joint_JointSolverInfoRow();
	}
};
oimo_dynamics_constraint_info_joint_JointSolverInfo.__name__ = "oimo.dynamics.constraint.info.joint.JointSolverInfo";
oimo_dynamics_constraint_info_joint_JointSolverInfo.prototype = {
	__class__: oimo_dynamics_constraint_info_joint_JointSolverInfo
};
var oimo_dynamics_constraint_info_joint_JointSolverInfoRow = function() {
	this.jacobian = new oimo_dynamics_constraint_info_JacobianRow();
	this.rhs = 0;
	this.cfm = 0;
	this.minImpulse = 0;
	this.maxImpulse = 0;
	this.motorSpeed = 0;
	this.motorMaxImpulse = 0;
	this.impulse = null;
};
oimo_dynamics_constraint_info_joint_JointSolverInfoRow.__name__ = "oimo.dynamics.constraint.info.joint.JointSolverInfoRow";
oimo_dynamics_constraint_info_joint_JointSolverInfoRow.prototype = {
	__class__: oimo_dynamics_constraint_info_joint_JointSolverInfoRow
};
var oimo_dynamics_constraint_joint_BasisTracker = function(joint) {
	this.joint = joint;
	this.xX = 0;
	this.xY = 0;
	this.xZ = 0;
	this.yX = 0;
	this.yY = 0;
	this.yZ = 0;
	this.zX = 0;
	this.zY = 0;
	this.zZ = 0;
};
oimo_dynamics_constraint_joint_BasisTracker.__name__ = "oimo.dynamics.constraint.joint.BasisTracker";
oimo_dynamics_constraint_joint_BasisTracker.prototype = {
	__class__: oimo_dynamics_constraint_joint_BasisTracker
};
var oimo_dynamics_constraint_joint_Joint = function(config,type) {
	this._link1 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._link2 = new oimo_dynamics_constraint_joint_JointLink(this);
	this._positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this._type = type;
	this._world = null;
	this._b1 = config.rigidBody1;
	this._b2 = config.rigidBody2;
	this._allowCollision = config.allowCollision;
	this._breakForce = config.breakForce;
	this._breakTorque = config.breakTorque;
	switch(config.solverType) {
	case 0:
		this._solver = new oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver(this);
		break;
	case 1:
		this._solver = new oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver(this);
		break;
	}
	var v = config.localAnchor1;
	this._localAnchor1X = v.x;
	this._localAnchor1Y = v.y;
	this._localAnchor1Z = v.z;
	var v = config.localAnchor2;
	this._localAnchor2X = v.x;
	this._localAnchor2Y = v.y;
	this._localAnchor2Z = v.z;
	this._relativeAnchor1X = 0;
	this._relativeAnchor1Y = 0;
	this._relativeAnchor1Z = 0;
	this._relativeAnchor2X = 0;
	this._relativeAnchor2Y = 0;
	this._relativeAnchor2Z = 0;
	this._anchor1X = 0;
	this._anchor1Y = 0;
	this._anchor1Z = 0;
	this._anchor2X = 0;
	this._anchor2Y = 0;
	this._anchor2Z = 0;
	this._localBasisX1X = 0;
	this._localBasisX1Y = 0;
	this._localBasisX1Z = 0;
	this._localBasisY1X = 0;
	this._localBasisY1Y = 0;
	this._localBasisY1Z = 0;
	this._localBasisZ1X = 0;
	this._localBasisZ1Y = 0;
	this._localBasisZ1Z = 0;
	this._localBasisX2X = 0;
	this._localBasisX2Y = 0;
	this._localBasisX2Z = 0;
	this._localBasisY2X = 0;
	this._localBasisY2Y = 0;
	this._localBasisY2Z = 0;
	this._localBasisZ2X = 0;
	this._localBasisZ2Y = 0;
	this._localBasisZ2Z = 0;
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this._impulses = this1;
	var _g = 0;
	var _g1 = oimo_common_Setting.maxJacobianRows;
	while(_g < _g1) {
		var i = _g++;
		this._impulses[i] = new oimo_dynamics_constraint_joint_JointImpulse();
	}
};
oimo_dynamics_constraint_joint_Joint.__name__ = "oimo.dynamics.constraint.joint.Joint";
oimo_dynamics_constraint_joint_Joint.prototype = {
	buildLocalBasesFromX: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX2X *= l;
			this._localBasisX2Y *= l;
			this._localBasisX2Z *= l;
		}
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var x1 = this._localBasisX1X;
		var y1 = this._localBasisX1Y;
		var z1 = this._localBasisX1Z;
		var x2 = x1 * x1;
		var y2 = y1 * y1;
		var z2 = z1 * z1;
		var d;
		if(x2 < y2) {
			if(x2 < z2) {
				d = 1 / Math.sqrt(y2 + z2);
				this._localBasisY1X = 0;
				this._localBasisY1Y = z1 * d;
				this._localBasisY1Z = -y1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
		} else if(y2 < z2) {
			d = 1 / Math.sqrt(z2 + x2);
			this._localBasisY1X = -z1 * d;
			this._localBasisY1Y = 0;
			this._localBasisY1Z = x1 * d;
		} else {
			d = 1 / Math.sqrt(x2 + y2);
			this._localBasisY1X = y1 * d;
			this._localBasisY1Y = -x1 * d;
			this._localBasisY1Z = 0;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,buildLocalBasesFromXY: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z == 0) {
			this._localBasisX2X = 1;
			this._localBasisX2Y = 0;
			this._localBasisX2Z = 0;
		} else {
			var l = this._localBasisX2X * this._localBasisX2X + this._localBasisX2Y * this._localBasisX2Y + this._localBasisX2Z * this._localBasisX2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX2X *= l;
			this._localBasisX2Y *= l;
			this._localBasisX2Z *= l;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
		this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
		this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ1X *= l;
			this._localBasisZ1Y *= l;
			this._localBasisZ1Z *= l;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			var x1 = this._localBasisX2X;
			var y1 = this._localBasisX2Y;
			var z1 = this._localBasisX2Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY2X = 0;
					this._localBasisY2Y = z1 * d;
					this._localBasisY2Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY2X = y1 * d;
					this._localBasisY2Y = -x1 * d;
					this._localBasisY2Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY2X = -z1 * d;
				this._localBasisY2Y = 0;
				this._localBasisY2Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY2X = y1 * d;
				this._localBasisY2Y = -x1 * d;
				this._localBasisY2Z = 0;
			}
			this._localBasisZ2X = this._localBasisX2Y * this._localBasisY2Z - this._localBasisX2Z * this._localBasisY2Y;
			this._localBasisZ2Y = this._localBasisX2Z * this._localBasisY2X - this._localBasisX2X * this._localBasisY2Z;
			this._localBasisZ2Z = this._localBasisX2X * this._localBasisY2Y - this._localBasisX2Y * this._localBasisY2X;
		} else {
			var l = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ2X *= l;
			this._localBasisZ2Y *= l;
			this._localBasisZ2Z *= l;
			this._localBasisY2X = this._localBasisZ2Y * this._localBasisX2Z - this._localBasisZ2Z * this._localBasisX2Y;
			this._localBasisY2Y = this._localBasisZ2Z * this._localBasisX2X - this._localBasisZ2X * this._localBasisX2Z;
			this._localBasisY2Z = this._localBasisZ2X * this._localBasisX2Y - this._localBasisZ2Y * this._localBasisX2X;
		}
	}
	,buildLocalBasesFromX1Z2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		if(this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z == 0) {
			this._localBasisZ2X = 0;
			this._localBasisZ2Y = 0;
			this._localBasisZ2Z = 1;
		} else {
			var l = this._localBasisZ2X * this._localBasisZ2X + this._localBasisZ2Y * this._localBasisZ2Y + this._localBasisZ2Z * this._localBasisZ2Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ2X *= l;
			this._localBasisZ2Y *= l;
			this._localBasisZ2Z *= l;
		}
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var worldX1;
		var worldX1X;
		var worldX1Y;
		var worldX1Z;
		var worldZ1;
		var worldZ1X;
		var worldZ1Y;
		var worldZ1Z;
		var worldY;
		var worldYX;
		var worldYY;
		var worldYZ;
		var worldX2;
		var worldX2X;
		var worldX2Y;
		var worldX2Z;
		var worldZ2;
		var worldZ2X;
		var worldZ2Y;
		var worldZ2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		worldX1X = __tmp__X;
		worldX1Y = __tmp__Y;
		worldX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		worldZ2X = __tmp__X;
		worldZ2Y = __tmp__Y;
		worldZ2Z = __tmp__Z;
		worldYX = worldZ2Y * worldX1Z - worldZ2Z * worldX1Y;
		worldYY = worldZ2Z * worldX1X - worldZ2X * worldX1Z;
		worldYZ = worldZ2X * worldX1Y - worldZ2Y * worldX1X;
		if(worldYX * worldYX + worldYY * worldYY + worldYZ * worldYZ == 0) {
			var x1 = worldX1X;
			var y1 = worldX1Y;
			var z1 = worldX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					worldYX = 0;
					worldYY = z1 * d;
					worldYZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					worldYX = y1 * d;
					worldYY = -x1 * d;
					worldYZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				worldYX = -z1 * d;
				worldYY = 0;
				worldYZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				worldYX = y1 * d;
				worldYY = -x1 * d;
				worldYZ = 0;
			}
		}
		worldZ1X = worldX1Y * worldYZ - worldX1Z * worldYY;
		worldZ1Y = worldX1Z * worldYX - worldX1X * worldYZ;
		worldZ1Z = worldX1X * worldYY - worldX1Y * worldYX;
		worldX2X = worldYY * worldZ2Z - worldYZ * worldZ2Y;
		worldX2Y = worldYZ * worldZ2X - worldYX * worldZ2Z;
		worldX2Z = worldYX * worldZ2Y - worldYY * worldZ2X;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldX1X + tf1._rotation10 * worldX1Y + tf1._rotation20 * worldX1Z;
		__tmp__Y = tf1._rotation01 * worldX1X + tf1._rotation11 * worldX1Y + tf1._rotation21 * worldX1Z;
		__tmp__Z = tf1._rotation02 * worldX1X + tf1._rotation12 * worldX1Y + tf1._rotation22 * worldX1Z;
		this._localBasisX1X = __tmp__X;
		this._localBasisX1Y = __tmp__Y;
		this._localBasisX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldYX + tf1._rotation10 * worldYY + tf1._rotation20 * worldYZ;
		__tmp__Y = tf1._rotation01 * worldYX + tf1._rotation11 * worldYY + tf1._rotation21 * worldYZ;
		__tmp__Z = tf1._rotation02 * worldYX + tf1._rotation12 * worldYY + tf1._rotation22 * worldYZ;
		this._localBasisY1X = __tmp__X;
		this._localBasisY1Y = __tmp__Y;
		this._localBasisY1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * worldZ1X + tf1._rotation10 * worldZ1Y + tf1._rotation20 * worldZ1Z;
		__tmp__Y = tf1._rotation01 * worldZ1X + tf1._rotation11 * worldZ1Y + tf1._rotation21 * worldZ1Z;
		__tmp__Z = tf1._rotation02 * worldZ1X + tf1._rotation12 * worldZ1Y + tf1._rotation22 * worldZ1Z;
		this._localBasisZ1X = __tmp__X;
		this._localBasisZ1Y = __tmp__Y;
		this._localBasisZ1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldX2X + tf2._rotation10 * worldX2Y + tf2._rotation20 * worldX2Z;
		__tmp__Y = tf2._rotation01 * worldX2X + tf2._rotation11 * worldX2Y + tf2._rotation21 * worldX2Z;
		__tmp__Z = tf2._rotation02 * worldX2X + tf2._rotation12 * worldX2Y + tf2._rotation22 * worldX2Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldYX + tf2._rotation10 * worldYY + tf2._rotation20 * worldYZ;
		__tmp__Y = tf2._rotation01 * worldYX + tf2._rotation11 * worldYY + tf2._rotation21 * worldYZ;
		__tmp__Z = tf2._rotation02 * worldYX + tf2._rotation12 * worldYY + tf2._rotation22 * worldYZ;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * worldZ2X + tf2._rotation10 * worldZ2Y + tf2._rotation20 * worldZ2Z;
		__tmp__Y = tf2._rotation01 * worldZ2X + tf2._rotation11 * worldZ2Y + tf2._rotation21 * worldZ2Z;
		__tmp__Z = tf2._rotation02 * worldZ2X + tf2._rotation12 * worldZ2Y + tf2._rotation22 * worldZ2Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,buildLocalBasesFromXY1X2: function() {
		if(this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z == 0) {
			this._localBasisX1X = 1;
			this._localBasisX1Y = 0;
			this._localBasisX1Z = 0;
		} else {
			var l = this._localBasisX1X * this._localBasisX1X + this._localBasisX1Y * this._localBasisX1Y + this._localBasisX1Z * this._localBasisX1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisX1X *= l;
			this._localBasisX1Y *= l;
			this._localBasisX1Z *= l;
		}
		this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
		this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
		this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		if(this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z == 0) {
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					this._localBasisY1X = 0;
					this._localBasisY1Y = z1 * d;
					this._localBasisY1Z = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					this._localBasisY1X = y1 * d;
					this._localBasisY1Y = -x1 * d;
					this._localBasisY1Z = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				this._localBasisY1X = -z1 * d;
				this._localBasisY1Y = 0;
				this._localBasisY1Z = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				this._localBasisY1X = y1 * d;
				this._localBasisY1Y = -x1 * d;
				this._localBasisY1Z = 0;
			}
			this._localBasisZ1X = this._localBasisX1Y * this._localBasisY1Z - this._localBasisX1Z * this._localBasisY1Y;
			this._localBasisZ1Y = this._localBasisX1Z * this._localBasisY1X - this._localBasisX1X * this._localBasisY1Z;
			this._localBasisZ1Z = this._localBasisX1X * this._localBasisY1Y - this._localBasisX1Y * this._localBasisY1X;
		} else {
			var l = this._localBasisZ1X * this._localBasisZ1X + this._localBasisZ1Y * this._localBasisZ1Y + this._localBasisZ1Z * this._localBasisZ1Z;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			this._localBasisZ1X *= l;
			this._localBasisZ1Y *= l;
			this._localBasisZ1Z *= l;
			this._localBasisY1X = this._localBasisZ1Y * this._localBasisX1Z - this._localBasisZ1Z * this._localBasisX1Y;
			this._localBasisY1Y = this._localBasisZ1Z * this._localBasisX1X - this._localBasisZ1X * this._localBasisX1Z;
			this._localBasisY1Z = this._localBasisZ1X * this._localBasisX1Y - this._localBasisZ1Y * this._localBasisX1X;
		}
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var d = this._localBasisX1X * this._localBasisX2X + this._localBasisX1Y * this._localBasisX2Y + this._localBasisX1Z * this._localBasisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = this._localBasisX1X;
			var y1 = this._localBasisX1Y;
			var z1 = this._localBasisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = this._localBasisX1Y * this._localBasisX2Z - this._localBasisX1Z * this._localBasisX2Y;
			cY = this._localBasisX1Z * this._localBasisX2X - this._localBasisX1X * this._localBasisX2Z;
			cZ = this._localBasisX1X * this._localBasisX2Y - this._localBasisX1Y * this._localBasisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisX1X + slerpM01 * this._localBasisX1Y + slerpM02 * this._localBasisX1Z;
		__tmp__Y = slerpM10 * this._localBasisX1X + slerpM11 * this._localBasisX1Y + slerpM12 * this._localBasisX1Z;
		__tmp__Z = slerpM20 * this._localBasisX1X + slerpM21 * this._localBasisX1Y + slerpM22 * this._localBasisX1Z;
		this._localBasisX2X = __tmp__X;
		this._localBasisX2Y = __tmp__Y;
		this._localBasisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisY1X + slerpM01 * this._localBasisY1Y + slerpM02 * this._localBasisY1Z;
		__tmp__Y = slerpM10 * this._localBasisY1X + slerpM11 * this._localBasisY1Y + slerpM12 * this._localBasisY1Z;
		__tmp__Z = slerpM20 * this._localBasisY1X + slerpM21 * this._localBasisY1Y + slerpM22 * this._localBasisY1Z;
		this._localBasisY2X = __tmp__X;
		this._localBasisY2Y = __tmp__Y;
		this._localBasisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * this._localBasisZ1X + slerpM01 * this._localBasisZ1Y + slerpM02 * this._localBasisZ1Z;
		__tmp__Y = slerpM10 * this._localBasisZ1X + slerpM11 * this._localBasisZ1Y + slerpM12 * this._localBasisZ1Z;
		__tmp__Z = slerpM20 * this._localBasisZ1X + slerpM21 * this._localBasisZ1Y + slerpM22 * this._localBasisZ1Z;
		this._localBasisZ2X = __tmp__X;
		this._localBasisZ2Y = __tmp__Y;
		this._localBasisZ2Z = __tmp__Z;
	}
	,setSolverInfoRowLinear: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.linearSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorForce > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorForce * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		var invMass = mass == 0 ? 0 : 1 / mass;
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * invMass;
		row.rhs = error * erp;
	}
	,setSolverInfoRowAngular: function(row,diff,lm,mass,sd,timeStep,isPositionPart) {
		var cfmFactor;
		var erp;
		var slop = oimo_common_Setting.angularSlop;
		if(isPositionPart) {
			cfmFactor = 0;
			erp = 1;
		} else {
			if(sd.frequency > 0) {
				slop = 0;
				var omega = 6.28318530717958 * sd.frequency;
				var zeta = sd.dampingRatio;
				if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
					zeta = oimo_common_Setting.minSpringDamperDampingRatio;
				}
				var h = timeStep.dt;
				var c = 2 * zeta * omega;
				var k = omega * omega;
				if(sd.useSymplecticEuler) {
					cfmFactor = 1 / (h * c);
					erp = k / c;
				} else {
					cfmFactor = 1 / (h * (h * k + c));
					erp = k / (h * k + c);
				}
			} else {
				cfmFactor = 0;
				erp = this.getErp(timeStep,false);
			}
			if(lm.motorTorque > 0) {
				row.motorSpeed = lm.motorSpeed;
				row.motorMaxImpulse = lm.motorTorque * timeStep.dt;
			} else {
				row.motorSpeed = 0;
				row.motorMaxImpulse = 0;
			}
		}
		var lower = lm.lowerLimit;
		var upper = lm.upperLimit;
		var mid = (lower + upper) * 0.5;
		diff -= mid;
		diff = ((diff + 3.14159265358979) % 6.28318530717958 + 6.28318530717958) % 6.28318530717958 - 3.14159265358979;
		diff += mid;
		var minImp;
		var maxImp;
		var error;
		if(lower > upper) {
			minImp = 0;
			maxImp = 0;
			error = 0;
		} else if(lower == upper) {
			minImp = -1e65536;
			maxImp = 1e65536;
			error = diff - lower;
		} else if(diff < lower) {
			minImp = -1e65536;
			maxImp = 0;
			error = diff - lower + slop;
			if(error > 0) {
				error = 0;
			}
		} else if(diff > upper) {
			minImp = 0;
			maxImp = 1e65536;
			error = diff - upper - slop;
			if(error < 0) {
				error = 0;
			}
		} else {
			minImp = 0;
			maxImp = 0;
			error = 0;
		}
		var invMass = mass == 0 ? 0 : 1 / mass;
		row.minImpulse = minImp;
		row.maxImpulse = maxImp;
		row.cfm = cfmFactor * invMass;
		row.rhs = error * erp;
	}
	,getErp: function(timeStep,isPositionPart) {
		if(isPositionPart) {
			return 1;
		} else if(this._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE) {
			return timeStep.invDt * oimo_common_Setting.velocityBaumgarte;
		} else {
			return 0;
		}
	}
	,computeEffectiveInertiaMoment: function(axisX,axisY,axisZ) {
		var ia1;
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axisX + this._b1._invInertia01 * axisY + this._b1._invInertia02 * axisZ;
		__tmp__Y = this._b1._invInertia10 * axisX + this._b1._invInertia11 * axisY + this._b1._invInertia12 * axisZ;
		__tmp__Z = this._b1._invInertia20 * axisX + this._b1._invInertia21 * axisY + this._b1._invInertia22 * axisZ;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b2._invInertia00 * axisX + this._b2._invInertia01 * axisY + this._b2._invInertia02 * axisZ;
		__tmp__Y = this._b2._invInertia10 * axisX + this._b2._invInertia11 * axisY + this._b2._invInertia12 * axisZ;
		__tmp__Z = this._b2._invInertia20 * axisX + this._b2._invInertia21 * axisY + this._b2._invInertia22 * axisZ;
		ia2X = __tmp__X;
		ia2Y = __tmp__Y;
		ia2Z = __tmp__Z;
		var invI1 = ia1X * axisX + ia1Y * axisY + ia1Z * axisZ;
		var invI2 = ia2X * axisX + ia2Y * axisY + ia2Z * axisZ;
		if(invI1 > 0) {
			var rsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z;
			var dot = axisX * this._relativeAnchor1X + axisY * this._relativeAnchor1Y + axisZ * this._relativeAnchor1Z;
			var projsq = rsq - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var rsq = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z;
			var dot = axisX * this._relativeAnchor2X + axisY * this._relativeAnchor2Y + axisZ * this._relativeAnchor2Z;
			var projsq = rsq - dot * dot;
			if(projsq > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,computeEffectiveInertiaMoment2: function(axis1X,axis1Y,axis1Z,axis2X,axis2Y,axis2Z) {
		var ia1;
		var ia1X;
		var ia1Y;
		var ia1Z;
		var ia2;
		var ia2X;
		var ia2Y;
		var ia2Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b1._invInertia00 * axis1X + this._b1._invInertia01 * axis1Y + this._b1._invInertia02 * axis1Z;
		__tmp__Y = this._b1._invInertia10 * axis1X + this._b1._invInertia11 * axis1Y + this._b1._invInertia12 * axis1Z;
		__tmp__Z = this._b1._invInertia20 * axis1X + this._b1._invInertia21 * axis1Y + this._b1._invInertia22 * axis1Z;
		ia1X = __tmp__X;
		ia1Y = __tmp__Y;
		ia1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._b2._invInertia00 * axis2X + this._b2._invInertia01 * axis2Y + this._b2._invInertia02 * axis2Z;
		__tmp__Y = this._b2._invInertia10 * axis2X + this._b2._invInertia11 * axis2Y + this._b2._invInertia12 * axis2Z;
		__tmp__Z = this._b2._invInertia20 * axis2X + this._b2._invInertia21 * axis2Y + this._b2._invInertia22 * axis2Z;
		ia2X = __tmp__X;
		ia2Y = __tmp__Y;
		ia2Z = __tmp__Z;
		var invI1 = ia1X * axis1X + ia1Y * axis1Y + ia1Z * axis1Z;
		var invI2 = ia2X * axis2X + ia2Y * axis2Y + ia2Z * axis2Z;
		if(invI1 > 0) {
			var rsq = this._relativeAnchor1X * this._relativeAnchor1X + this._relativeAnchor1Y * this._relativeAnchor1Y + this._relativeAnchor1Z * this._relativeAnchor1Z;
			var dot = axis1X * this._relativeAnchor1X + axis1Y * this._relativeAnchor1Y + axis1Z * this._relativeAnchor1Z;
			var projsq = rsq * rsq - dot * dot;
			if(projsq > 0) {
				if(this._b1._invMass > 0) {
					invI1 = 1 / (1 / invI1 + this._b1._mass * projsq);
				} else {
					invI1 = 0;
				}
			}
		}
		if(invI2 > 0) {
			var rsq = this._relativeAnchor2X * this._relativeAnchor2X + this._relativeAnchor2Y * this._relativeAnchor2Y + this._relativeAnchor2Z * this._relativeAnchor2Z;
			var dot = axis2X * this._relativeAnchor2X + axis2Y * this._relativeAnchor2Y + axis2Z * this._relativeAnchor2Z;
			var projsq = rsq * rsq - dot * dot;
			if(projsq > 0) {
				if(this._b2._invMass > 0) {
					invI2 = 1 / (1 / invI2 + this._b2._mass * projsq);
				} else {
					invI2 = 0;
				}
			}
		}
		if(invI1 + invI2 == 0) {
			return 0;
		} else {
			return 1 / (invI1 + invI2);
		}
	}
	,_syncAnchors: function() {
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localAnchor1X + tf1._rotation01 * this._localAnchor1Y + tf1._rotation02 * this._localAnchor1Z;
		__tmp__Y = tf1._rotation10 * this._localAnchor1X + tf1._rotation11 * this._localAnchor1Y + tf1._rotation12 * this._localAnchor1Z;
		__tmp__Z = tf1._rotation20 * this._localAnchor1X + tf1._rotation21 * this._localAnchor1Y + tf1._rotation22 * this._localAnchor1Z;
		this._relativeAnchor1X = __tmp__X;
		this._relativeAnchor1Y = __tmp__Y;
		this._relativeAnchor1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localAnchor2X + tf2._rotation01 * this._localAnchor2Y + tf2._rotation02 * this._localAnchor2Z;
		__tmp__Y = tf2._rotation10 * this._localAnchor2X + tf2._rotation11 * this._localAnchor2Y + tf2._rotation12 * this._localAnchor2Z;
		__tmp__Z = tf2._rotation20 * this._localAnchor2X + tf2._rotation21 * this._localAnchor2Y + tf2._rotation22 * this._localAnchor2Z;
		this._relativeAnchor2X = __tmp__X;
		this._relativeAnchor2Y = __tmp__Y;
		this._relativeAnchor2Z = __tmp__Z;
		this._anchor1X = this._relativeAnchor1X + tf1._positionX;
		this._anchor1Y = this._relativeAnchor1Y + tf1._positionY;
		this._anchor1Z = this._relativeAnchor1Z + tf1._positionZ;
		this._anchor2X = this._relativeAnchor2X + tf2._positionX;
		this._anchor2Y = this._relativeAnchor2Y + tf2._positionY;
		this._anchor2Z = this._relativeAnchor2Z + tf2._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisX1X + tf1._rotation01 * this._localBasisX1Y + tf1._rotation02 * this._localBasisX1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisX1X + tf1._rotation11 * this._localBasisX1Y + tf1._rotation12 * this._localBasisX1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisX1X + tf1._rotation21 * this._localBasisX1Y + tf1._rotation22 * this._localBasisX1Z;
		this._basisX1X = __tmp__X;
		this._basisX1Y = __tmp__Y;
		this._basisX1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisY1X + tf1._rotation01 * this._localBasisY1Y + tf1._rotation02 * this._localBasisY1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisY1X + tf1._rotation11 * this._localBasisY1Y + tf1._rotation12 * this._localBasisY1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisY1X + tf1._rotation21 * this._localBasisY1Y + tf1._rotation22 * this._localBasisY1Z;
		this._basisY1X = __tmp__X;
		this._basisY1Y = __tmp__Y;
		this._basisY1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf1._rotation00 * this._localBasisZ1X + tf1._rotation01 * this._localBasisZ1Y + tf1._rotation02 * this._localBasisZ1Z;
		__tmp__Y = tf1._rotation10 * this._localBasisZ1X + tf1._rotation11 * this._localBasisZ1Y + tf1._rotation12 * this._localBasisZ1Z;
		__tmp__Z = tf1._rotation20 * this._localBasisZ1X + tf1._rotation21 * this._localBasisZ1Y + tf1._rotation22 * this._localBasisZ1Z;
		this._basisZ1X = __tmp__X;
		this._basisZ1Y = __tmp__Y;
		this._basisZ1Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisX2X + tf2._rotation01 * this._localBasisX2Y + tf2._rotation02 * this._localBasisX2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisX2X + tf2._rotation11 * this._localBasisX2Y + tf2._rotation12 * this._localBasisX2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisX2X + tf2._rotation21 * this._localBasisX2Y + tf2._rotation22 * this._localBasisX2Z;
		this._basisX2X = __tmp__X;
		this._basisX2Y = __tmp__Y;
		this._basisX2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisY2X + tf2._rotation01 * this._localBasisY2Y + tf2._rotation02 * this._localBasisY2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisY2X + tf2._rotation11 * this._localBasisY2Y + tf2._rotation12 * this._localBasisY2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisY2X + tf2._rotation21 * this._localBasisY2Y + tf2._rotation22 * this._localBasisY2Z;
		this._basisY2X = __tmp__X;
		this._basisY2Y = __tmp__Y;
		this._basisY2Z = __tmp__Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = tf2._rotation00 * this._localBasisZ2X + tf2._rotation01 * this._localBasisZ2Y + tf2._rotation02 * this._localBasisZ2Z;
		__tmp__Y = tf2._rotation10 * this._localBasisZ2X + tf2._rotation11 * this._localBasisZ2Y + tf2._rotation12 * this._localBasisZ2Z;
		__tmp__Z = tf2._rotation20 * this._localBasisZ2X + tf2._rotation21 * this._localBasisZ2Y + tf2._rotation22 * this._localBasisZ2Z;
		this._basisZ2X = __tmp__X;
		this._basisZ2Y = __tmp__Y;
		this._basisZ2Z = __tmp__Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_getPositionSolverInfo: function(info) {
		info.b1 = this._b1;
		info.b2 = this._b2;
		info.numRows = 0;
	}
	,_checkDestruction: function() {
		var forceSq = this._appliedForceX * this._appliedForceX + this._appliedForceY * this._appliedForceY + this._appliedForceZ * this._appliedForceZ;
		var torqueSq = this._appliedTorqueX * this._appliedTorqueX + this._appliedTorqueY * this._appliedTorqueY + this._appliedTorqueZ * this._appliedTorqueZ;
		if(this._breakForce > 0 && forceSq > this._breakForce * this._breakForce) {
			this._world.removeJoint(this);
			return;
		}
		if(this._breakTorque > 0 && torqueSq > this._breakTorque * this._breakTorque) {
			this._world.removeJoint(this);
			return;
		}
	}
	,getRigidBody1: function() {
		return this._b1;
	}
	,getRigidBody2: function() {
		return this._b2;
	}
	,getType: function() {
		return this._type;
	}
	,getAnchor1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._anchor1X;
		v1.y = this._anchor1Y;
		v1.z = this._anchor1Z;
		return v;
	}
	,getAnchor2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._anchor2X;
		v1.y = this._anchor2Y;
		v1.z = this._anchor2Z;
		return v;
	}
	,getAnchor1To: function(anchor) {
		var v = anchor;
		v.x = this._anchor1X;
		v.y = this._anchor1Y;
		v.z = this._anchor1Z;
	}
	,getAnchor2To: function(anchor) {
		var v = anchor;
		v.x = this._anchor2X;
		v.y = this._anchor2Y;
		v.z = this._anchor2Z;
	}
	,getLocalAnchor1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localAnchor1X;
		v1.y = this._localAnchor1Y;
		v1.z = this._localAnchor1Z;
		return v;
	}
	,getLocalAnchor2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localAnchor2X;
		v1.y = this._localAnchor2Y;
		v1.z = this._localAnchor2Z;
		return v;
	}
	,getLocalAnchor1To: function(localAnchor) {
		var v = localAnchor;
		v.x = this._localAnchor1X;
		v.y = this._localAnchor1Y;
		v.z = this._localAnchor1Z;
	}
	,getLocalAnchor2To: function(localAnchor) {
		var v = localAnchor;
		v.x = this._localAnchor2X;
		v.y = this._localAnchor2Y;
		v.z = this._localAnchor2Z;
	}
	,getBasis1: function() {
		var m = new oimo_common_Mat3();
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		var m1 = m;
		m1.e00 = b00;
		m1.e01 = b01;
		m1.e02 = b02;
		m1.e10 = b10;
		m1.e11 = b11;
		m1.e12 = b12;
		m1.e20 = b20;
		m1.e21 = b21;
		m1.e22 = b22;
		return m;
	}
	,getBasis2: function() {
		var m = new oimo_common_Mat3();
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		var m1 = m;
		m1.e00 = b00;
		m1.e01 = b01;
		m1.e02 = b02;
		m1.e10 = b10;
		m1.e11 = b11;
		m1.e12 = b12;
		m1.e20 = b20;
		m1.e21 = b21;
		m1.e22 = b22;
		return m;
	}
	,getBasis1To: function(basis) {
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX1X;
		b01 = this._basisY1X;
		b02 = this._basisZ1X;
		b10 = this._basisX1Y;
		b11 = this._basisY1Y;
		b12 = this._basisZ1Y;
		b20 = this._basisX1Z;
		b21 = this._basisY1Z;
		b22 = this._basisZ1Z;
		var m = basis;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
	}
	,getBasis2To: function(basis) {
		var b;
		var b00;
		var b01;
		var b02;
		var b10;
		var b11;
		var b12;
		var b20;
		var b21;
		var b22;
		b00 = this._basisX2X;
		b01 = this._basisY2X;
		b02 = this._basisZ2X;
		b10 = this._basisX2Y;
		b11 = this._basisY2Y;
		b12 = this._basisZ2Y;
		b20 = this._basisX2Z;
		b21 = this._basisY2Z;
		b22 = this._basisZ2Z;
		var m = basis;
		m.e00 = b00;
		m.e01 = b01;
		m.e02 = b02;
		m.e10 = b10;
		m.e11 = b11;
		m.e12 = b12;
		m.e20 = b20;
		m.e21 = b21;
		m.e22 = b22;
	}
	,getAllowCollision: function() {
		return this._allowCollision;
	}
	,setAllowCollision: function(allowCollision) {
		this._allowCollision = allowCollision;
	}
	,getBreakForce: function() {
		return this._breakForce;
	}
	,setBreakForce: function(breakForce) {
		this._breakForce = breakForce;
	}
	,getBreakTorque: function() {
		return this._breakTorque;
	}
	,setBreakTorque: function(breakTorque) {
		this._breakTorque = breakTorque;
	}
	,getPositionCorrectionAlgorithm: function() {
		return this._positionCorrectionAlgorithm;
	}
	,setPositionCorrectionAlgorithm: function(positionCorrectionAlgorithm) {
		switch(positionCorrectionAlgorithm) {
		case 0:case 1:case 2:
			break;
		default:
			throw new Error("invalid position correction algorithm id: " + positionCorrectionAlgorithm);
		}
		this._positionCorrectionAlgorithm = positionCorrectionAlgorithm;
	}
	,getAppliedForce: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._appliedForceX;
		v1.y = this._appliedForceY;
		v1.z = this._appliedForceZ;
		return v;
	}
	,getAppliedForceTo: function(appliedForce) {
		var v = appliedForce;
		v.x = this._appliedForceX;
		v.y = this._appliedForceY;
		v.z = this._appliedForceZ;
	}
	,getAppliedTorque: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._appliedTorqueX;
		v1.y = this._appliedTorqueY;
		v1.z = this._appliedTorqueZ;
		return v;
	}
	,getAppliedTorqueTo: function(appliedTorque) {
		var v = appliedTorque;
		v.x = this._appliedTorqueX;
		v.y = this._appliedTorqueY;
		v.z = this._appliedTorqueZ;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_constraint_joint_Joint
};
var oimo_dynamics_constraint_joint_CylindricalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,2);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._translSd = config.translationalSpringDamper.clone();
	this._translLm = config.translationalLimitMotor.clone();
	this._rotSd = config.rotationalSpringDamper.clone();
	this._rotLm = config.rotationalLimitMotor.clone();
};
oimo_dynamics_constraint_joint_CylindricalJoint.__name__ = "oimo.dynamics.constraint.joint.CylindricalJoint";
oimo_dynamics_constraint_joint_CylindricalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_CylindricalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var row;
		var j;
		var translationalMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var rotationalMotorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		if(this._translSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translation,this._translLm,translationalMotorMass,this._translSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse = this._impulses[1];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse = this._impulses[2];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		if(this._rotSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[3];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowAngular(row,this.angle,this._rotLm,rotationalMotorMass,this._rotSd,timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse = this._impulses[4];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse = this._impulses[5];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angError;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		var l = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		angErrorX *= l;
		angErrorY *= l;
		angErrorZ *= l;
		angErrorX *= theta;
		angErrorY *= theta;
		angErrorZ *= theta;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCross;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getTranslationalSpringDamper: function() {
		return this._translSd;
	}
	,getRotationalSpringDamper: function() {
		return this._rotSd;
	}
	,getTranslationalLimitMotor: function() {
		return this._translLm;
	}
	,getRotationalLimitMotor: function() {
		return this._rotLm;
	}
	,getAngle: function() {
		return this.angle;
	}
	,getTranslation: function() {
		return this.translation;
	}
	,__class__: oimo_dynamics_constraint_joint_CylindricalJoint
});
var oimo_dynamics_constraint_joint_JointConfig = function() {
	this.rigidBody1 = null;
	this.rigidBody2 = null;
	this.localAnchor1 = new oimo_common_Vec3();
	this.localAnchor2 = new oimo_common_Vec3();
	this.allowCollision = false;
	this.solverType = oimo_common_Setting.defaultJointConstraintSolverType;
	this.positionCorrectionAlgorithm = oimo_common_Setting.defaultJointPositionCorrectionAlgorithm;
	this.breakForce = 0;
	this.breakTorque = 0;
};
oimo_dynamics_constraint_joint_JointConfig.__name__ = "oimo.dynamics.constraint.joint.JointConfig";
oimo_dynamics_constraint_joint_JointConfig.prototype = {
	_init: function(rb1,rb2,worldAnchor) {
		this.rigidBody1 = rb1;
		this.rigidBody2 = rb2;
		var _this = this.rigidBody1;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAnchor;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		vX -= _this._transform._positionX;
		vY -= _this._transform._positionY;
		vZ -= _this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = _this._transform._rotation00 * vX + _this._transform._rotation10 * vY + _this._transform._rotation20 * vZ;
		__tmp__Y = _this._transform._rotation01 * vX + _this._transform._rotation11 * vY + _this._transform._rotation21 * vZ;
		__tmp__Z = _this._transform._rotation02 * vX + _this._transform._rotation12 * vY + _this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAnchor1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var _this = this.rigidBody2;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAnchor;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		vX -= _this._transform._positionX;
		vY -= _this._transform._positionY;
		vZ -= _this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = _this._transform._rotation00 * vX + _this._transform._rotation10 * vY + _this._transform._rotation20 * vZ;
		__tmp__Y = _this._transform._rotation01 * vX + _this._transform._rotation11 * vY + _this._transform._rotation21 * vZ;
		__tmp__Z = _this._transform._rotation02 * vX + _this._transform._rotation12 * vY + _this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAnchor2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
	}
	,__class__: oimo_dynamics_constraint_joint_JointConfig
};
var oimo_dynamics_constraint_joint_CylindricalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.translationalLimitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.translationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.rotationalLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.rotationalSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_CylindricalJointConfig.__name__ = "oimo.dynamics.constraint.joint.CylindricalJointConfig";
oimo_dynamics_constraint_joint_CylindricalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_CylindricalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_CylindricalJointConfig
});
var oimo_dynamics_constraint_joint_GenericJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.GENERIC);
	var tmp;
	var _this = config.localBasis1;
	if(!(_this.e00 * (_this.e11 * _this.e22 - _this.e12 * _this.e21) - _this.e01 * (_this.e10 * _this.e22 - _this.e12 * _this.e20) + _this.e02 * (_this.e10 * _this.e21 - _this.e11 * _this.e20) < 0)) {
		var _this = config.localBasis2;
		tmp = _this.e00 * (_this.e11 * _this.e22 - _this.e12 * _this.e21) - _this.e01 * (_this.e10 * _this.e22 - _this.e12 * _this.e20) + _this.e02 * (_this.e10 * _this.e21 - _this.e11 * _this.e20) < 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		haxe_Log.trace("[warning] joint basis must be right handed",{ fileName : "oimo/dynamics/constraint/joint/GenericJoint.hx", lineNumber : 50, className : "oimo.dynamics.constraint.joint.GenericJoint", methodName : "new"});
	}
	var lb1;
	var lb100;
	var lb101;
	var lb102;
	var lb110;
	var lb111;
	var lb112;
	var lb120;
	var lb121;
	var lb122;
	var lb2;
	var lb200;
	var lb201;
	var lb202;
	var lb210;
	var lb211;
	var lb212;
	var lb220;
	var lb221;
	var lb222;
	var m = config.localBasis1;
	lb100 = m.e00;
	lb101 = m.e01;
	lb102 = m.e02;
	lb110 = m.e10;
	lb111 = m.e11;
	lb112 = m.e12;
	lb120 = m.e20;
	lb121 = m.e21;
	lb122 = m.e22;
	var m = config.localBasis2;
	lb200 = m.e00;
	lb201 = m.e01;
	lb202 = m.e02;
	lb210 = m.e10;
	lb211 = m.e11;
	lb212 = m.e12;
	lb220 = m.e20;
	lb221 = m.e21;
	lb222 = m.e22;
	this._localBasisX1X = lb100;
	this._localBasisX1Y = lb110;
	this._localBasisX1Z = lb120;
	this._localBasisY1X = lb101;
	this._localBasisY1Y = lb111;
	this._localBasisY1Z = lb121;
	this._localBasisZ1X = lb102;
	this._localBasisZ1Y = lb112;
	this._localBasisZ1Z = lb122;
	this._localBasisX2X = lb200;
	this._localBasisX2Y = lb210;
	this._localBasisX2Z = lb220;
	this._localBasisY2X = lb201;
	this._localBasisY2Y = lb211;
	this._localBasisY2Z = lb221;
	this._localBasisZ2X = lb202;
	this._localBasisZ2Y = lb212;
	this._localBasisZ2Z = lb222;
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.translationX = 0;
	this.translationY = 0;
	this.translationZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	var this1 = new Array(3);
	this._translLms = this1;
	var this1 = new Array(3);
	this._translSds = this1;
	var this1 = new Array(3);
	this._rotLms = this1;
	var this1 = new Array(3);
	this._rotSds = this1;
	this._translLms[0] = config.translationalLimitMotors[0].clone();
	this._translLms[1] = config.translationalLimitMotors[1].clone();
	this._translLms[2] = config.translationalLimitMotors[2].clone();
	this._translSds[0] = config.translationalSpringDampers[0].clone();
	this._translSds[1] = config.translationalSpringDampers[1].clone();
	this._translSds[2] = config.translationalSpringDampers[2].clone();
	this._rotLms[0] = config.rotationalLimitMotors[0].clone();
	this._rotLms[1] = config.rotationalLimitMotors[1].clone();
	this._rotLms[2] = config.rotationalLimitMotors[2].clone();
	this._rotSds[0] = config.rotationalSpringDampers[0].clone();
	this._rotSds[1] = config.rotationalSpringDampers[1].clone();
	this._rotSds[2] = config.rotationalSpringDampers[2].clone();
};
oimo_dynamics_constraint_joint_GenericJoint.__name__ = "oimo.dynamics.constraint.joint.GenericJoint";
oimo_dynamics_constraint_joint_GenericJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_GenericJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var row;
		var j;
		var translMotorMass = 1 / (this._b1._invMass + this._b2._invMass);
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassY = this.computeEffectiveInertiaMoment(this._axisYX,this._axisYY,this._axisYZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		if(this._translSds[0].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translationX,this._translLms[0],translMotorMass,this._translSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisX1X;
			j.lin1Y = this._basisX1Y;
			j.lin1Z = this._basisX1Z;
			j.lin2X = this._basisX1X;
			j.lin2Y = this._basisX1Y;
			j.lin2Z = this._basisX1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisX1Z - this._relativeAnchor1Z * this._basisX1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisX1X - this._relativeAnchor1X * this._basisX1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisX1Y - this._relativeAnchor1Y * this._basisX1X;
			j.ang2X = this._relativeAnchor2Y * this._basisX1Z - this._relativeAnchor2Z * this._basisX1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisX1X - this._relativeAnchor2X * this._basisX1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisX1Y - this._relativeAnchor2Y * this._basisX1X;
		}
		if(this._translSds[1].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[1];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translationY,this._translLms[1],translMotorMass,this._translSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisY1X;
			j.lin1Y = this._basisY1Y;
			j.lin1Z = this._basisY1Z;
			j.lin2X = this._basisY1X;
			j.lin2Y = this._basisY1Y;
			j.lin2Z = this._basisY1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisY1Z - this._relativeAnchor1Z * this._basisY1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisY1X - this._relativeAnchor1X * this._basisY1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisY1Y - this._relativeAnchor1Y * this._basisY1X;
			j.ang2X = this._relativeAnchor2Y * this._basisY1Z - this._relativeAnchor2Z * this._basisY1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisY1X - this._relativeAnchor2X * this._basisY1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisY1Y - this._relativeAnchor2Y * this._basisY1X;
		}
		if(this._translSds[2].frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[2];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translationZ,this._translLms[2],translMotorMass,this._translSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basisZ1X;
			j.lin1Y = this._basisZ1Y;
			j.lin1Z = this._basisZ1Z;
			j.lin2X = this._basisZ1X;
			j.lin2Y = this._basisZ1Y;
			j.lin2Z = this._basisZ1Z;
			j.ang1X = this._relativeAnchor1Y * this._basisZ1Z - this._relativeAnchor1Z * this._basisZ1Y;
			j.ang1Y = this._relativeAnchor1Z * this._basisZ1X - this._relativeAnchor1X * this._basisZ1Z;
			j.ang1Z = this._relativeAnchor1X * this._basisZ1Y - this._relativeAnchor1Y * this._basisZ1X;
			j.ang2X = this._relativeAnchor2Y * this._basisZ1Z - this._relativeAnchor2Z * this._basisZ1Y;
			j.ang2Y = this._relativeAnchor2Z * this._basisZ1X - this._relativeAnchor2X * this._basisZ1Z;
			j.ang2Z = this._relativeAnchor2X * this._basisZ1Y - this._relativeAnchor2Y * this._basisZ1X;
		}
		if(!this.xSingular && (this._rotSds[0].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowAngular(row,this._angleX,this._rotLms[0],motorMassX,this._rotSds[0],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular && (this._rotSds[1].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[4];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowAngular(row,this._angleY,this._rotLms[1],motorMassY,this._rotSds[1],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._rotSds[2].frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[5];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowAngular(row,this._angleZ,this._rotLms[2],motorMassZ,this._rotSds[2],timeStep,isPositionPart);
			j = row.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angleAxisX;
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisY;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisYX *= l;
		this._axisYY *= l;
		this._axisYZ *= l;
		var l = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisZX *= l;
		this._axisZY *= l;
		this._axisZZ *= l;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angles;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot21,relRot11);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot21,relRot11);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			var y = Math.asin(sy);
			var x = Math.atan2(-relRot12,relRot22);
			var z = Math.atan2(-relRot01,relRot00);
			anglesX = x;
			anglesY = y;
			anglesZ = z;
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translationX = anchorDiffX * this._basisX1X + anchorDiffY * this._basisX1Y + anchorDiffZ * this._basisX1Z;
		this.translationY = anchorDiffX * this._basisY1X + anchorDiffY * this._basisY1Y + anchorDiffZ * this._basisY1Z;
		this.translationZ = anchorDiffX * this._basisZ1X + anchorDiffY * this._basisZ1Y + anchorDiffZ * this._basisZ1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxisX: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxisY: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._axisYX;
		v1.y = this._axisYY;
		v1.z = this._axisYZ;
		return v;
	}
	,getAxisZ: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisZ2X;
		v1.y = this._basisZ2Y;
		v1.z = this._basisZ2Z;
		return v;
	}
	,getTranslationalSpringDampers: function() {
		return this._translSds.slice(0);
	}
	,getRotationalSpringDampers: function() {
		return this._translSds.slice(0);
	}
	,getTranslationalLimitMotors: function() {
		return this._translLms.slice(0);
	}
	,getRotationalLimitMotors: function() {
		return this._rotLms.slice(0);
	}
	,getAngles: function() {
		return new oimo_common_Vec3(this._angleX,this._angleY,this._angleZ);
	}
	,getTranslations: function() {
		return new oimo_common_Vec3(this.translationX,this.translationY,this.translationZ);
	}
	,__class__: oimo_dynamics_constraint_joint_GenericJoint
});
var oimo_dynamics_constraint_joint_GenericJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localBasis1 = new oimo_common_Mat3();
	this.localBasis2 = new oimo_common_Mat3();
	var _g = [];
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_TranslationalLimitMotor().setLimits(0,0));
	this.translationalLimitMotors = _g;
	var _g = [];
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	_g.push(new oimo_dynamics_constraint_joint_RotationalLimitMotor().setLimits(0,0));
	this.rotationalLimitMotors = _g;
	this.translationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
	this.rotationalSpringDampers = [new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper(),new oimo_dynamics_constraint_joint_SpringDamper()];
};
oimo_dynamics_constraint_joint_GenericJointConfig.__name__ = "oimo.dynamics.constraint.joint.GenericJointConfig";
oimo_dynamics_constraint_joint_GenericJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_GenericJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldBasis1,worldBasis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var tf1 = rigidBody1._transform;
		var tf2 = rigidBody2._transform;
		var wb1;
		var wb100;
		var wb101;
		var wb102;
		var wb110;
		var wb111;
		var wb112;
		var wb120;
		var wb121;
		var wb122;
		var wb2;
		var wb200;
		var wb201;
		var wb202;
		var wb210;
		var wb211;
		var wb212;
		var wb220;
		var wb221;
		var wb222;
		var lb1;
		var lb100;
		var lb101;
		var lb102;
		var lb110;
		var lb111;
		var lb112;
		var lb120;
		var lb121;
		var lb122;
		var lb2;
		var lb200;
		var lb201;
		var lb202;
		var lb210;
		var lb211;
		var lb212;
		var lb220;
		var lb221;
		var lb222;
		var m = worldBasis1;
		wb100 = m.e00;
		wb101 = m.e01;
		wb102 = m.e02;
		wb110 = m.e10;
		wb111 = m.e11;
		wb112 = m.e12;
		wb120 = m.e20;
		wb121 = m.e21;
		wb122 = m.e22;
		var m = worldBasis2;
		wb200 = m.e00;
		wb201 = m.e01;
		wb202 = m.e02;
		wb210 = m.e10;
		wb211 = m.e11;
		wb212 = m.e12;
		wb220 = m.e20;
		wb221 = m.e21;
		wb222 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf1._rotation00 * wb100 + tf1._rotation10 * wb110 + tf1._rotation20 * wb120;
		__tmp__01 = tf1._rotation00 * wb101 + tf1._rotation10 * wb111 + tf1._rotation20 * wb121;
		__tmp__02 = tf1._rotation00 * wb102 + tf1._rotation10 * wb112 + tf1._rotation20 * wb122;
		__tmp__10 = tf1._rotation01 * wb100 + tf1._rotation11 * wb110 + tf1._rotation21 * wb120;
		__tmp__11 = tf1._rotation01 * wb101 + tf1._rotation11 * wb111 + tf1._rotation21 * wb121;
		__tmp__12 = tf1._rotation01 * wb102 + tf1._rotation11 * wb112 + tf1._rotation21 * wb122;
		__tmp__20 = tf1._rotation02 * wb100 + tf1._rotation12 * wb110 + tf1._rotation22 * wb120;
		__tmp__21 = tf1._rotation02 * wb101 + tf1._rotation12 * wb111 + tf1._rotation22 * wb121;
		__tmp__22 = tf1._rotation02 * wb102 + tf1._rotation12 * wb112 + tf1._rotation22 * wb122;
		lb100 = __tmp__00;
		lb101 = __tmp__01;
		lb102 = __tmp__02;
		lb110 = __tmp__10;
		lb111 = __tmp__11;
		lb112 = __tmp__12;
		lb120 = __tmp__20;
		lb121 = __tmp__21;
		lb122 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = tf2._rotation00 * wb200 + tf2._rotation10 * wb210 + tf2._rotation20 * wb220;
		__tmp__01 = tf2._rotation00 * wb201 + tf2._rotation10 * wb211 + tf2._rotation20 * wb221;
		__tmp__02 = tf2._rotation00 * wb202 + tf2._rotation10 * wb212 + tf2._rotation20 * wb222;
		__tmp__10 = tf2._rotation01 * wb200 + tf2._rotation11 * wb210 + tf2._rotation21 * wb220;
		__tmp__11 = tf2._rotation01 * wb201 + tf2._rotation11 * wb211 + tf2._rotation21 * wb221;
		__tmp__12 = tf2._rotation01 * wb202 + tf2._rotation11 * wb212 + tf2._rotation21 * wb222;
		__tmp__20 = tf2._rotation02 * wb200 + tf2._rotation12 * wb210 + tf2._rotation22 * wb220;
		__tmp__21 = tf2._rotation02 * wb201 + tf2._rotation12 * wb211 + tf2._rotation22 * wb221;
		__tmp__22 = tf2._rotation02 * wb202 + tf2._rotation12 * wb212 + tf2._rotation22 * wb222;
		lb200 = __tmp__00;
		lb201 = __tmp__01;
		lb202 = __tmp__02;
		lb210 = __tmp__10;
		lb211 = __tmp__11;
		lb212 = __tmp__12;
		lb220 = __tmp__20;
		lb221 = __tmp__21;
		lb222 = __tmp__22;
		var m = this.localBasis1;
		m.e00 = lb100;
		m.e01 = lb101;
		m.e02 = lb102;
		m.e10 = lb110;
		m.e11 = lb111;
		m.e12 = lb112;
		m.e20 = lb120;
		m.e21 = lb121;
		m.e22 = lb122;
		var m = this.localBasis2;
		m.e00 = lb200;
		m.e01 = lb201;
		m.e02 = lb202;
		m.e10 = lb210;
		m.e11 = lb211;
		m.e12 = lb212;
		m.e20 = lb220;
		m.e21 = lb221;
		m.e22 = lb222;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_GenericJointConfig
});
var oimo_dynamics_constraint_joint_JointImpulse = function() {
	this.impulse = 0;
	this.impulseM = 0;
	this.impulseP = 0;
};
oimo_dynamics_constraint_joint_JointImpulse.__name__ = "oimo.dynamics.constraint.joint.JointImpulse";
oimo_dynamics_constraint_joint_JointImpulse.prototype = {
	__class__: oimo_dynamics_constraint_joint_JointImpulse
};
var oimo_dynamics_constraint_joint_JointLink = function(joint) {
	this._joint = joint;
};
oimo_dynamics_constraint_joint_JointLink.__name__ = "oimo.dynamics.constraint.joint.JointLink";
oimo_dynamics_constraint_joint_JointLink.prototype = {
	getContact: function() {
		return this._joint;
	}
	,getOther: function() {
		return this._other;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_constraint_joint_JointLink
};
var oimo_dynamics_constraint_joint_JointMacro = function() { };
oimo_dynamics_constraint_joint_JointMacro.__name__ = "oimo.dynamics.constraint.joint.JointMacro";
var oimo_dynamics_constraint_joint_JointType = function() { };
oimo_dynamics_constraint_joint_JointType.__name__ = "oimo.dynamics.constraint.joint.JointType";
var oimo_dynamics_constraint_joint_PrismaticJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.PRISMATIC);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this.translation = 0;
	this.linearErrorY = 0;
	this.linearErrorZ = 0;
	this.angularErrorX = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_PrismaticJoint.__name__ = "oimo.dynamics.constraint.joint.PrismaticJoint";
oimo_dynamics_constraint_joint_PrismaticJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_PrismaticJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linRhsY = this.linearErrorY * erp;
		var linRhsZ = this.linearErrorZ * erp;
		var angRhsX = this.angularErrorX * erp;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var row;
		var j;
		var motorMass = 1 / (this._b1._invMass + this._b2._invMass);
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[0];
			var row1 = info.rows[info.numRows++];
			var _this = row1.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row1.rhs = 0;
			row1.cfm = 0;
			row1.minImpulse = 0;
			row1.maxImpulse = 0;
			row1.motorSpeed = 0;
			row1.motorMaxImpulse = 0;
			row1.impulse = null;
			row1.impulse = impulse;
			row = row1;
			this.setSolverInfoRowLinear(row,this.translation,this._lm,motorMass,this._sd,timeStep,isPositionPart);
			j = row.jacobian;
			j.lin1X = this._basis.xX;
			j.lin1Y = this._basis.xY;
			j.lin1Z = this._basis.xZ;
			j.lin2X = this._basis.xX;
			j.lin2Y = this._basis.xY;
			j.lin2Z = this._basis.xZ;
			j.ang1X = this._relativeAnchor1Y * this._basis.xZ - this._relativeAnchor1Z * this._basis.xY;
			j.ang1Y = this._relativeAnchor1Z * this._basis.xX - this._relativeAnchor1X * this._basis.xZ;
			j.ang1Z = this._relativeAnchor1X * this._basis.xY - this._relativeAnchor1Y * this._basis.xX;
			j.ang2X = this._relativeAnchor2Y * this._basis.xZ - this._relativeAnchor2Z * this._basis.xY;
			j.ang2Y = this._relativeAnchor2Z * this._basis.xX - this._relativeAnchor2X * this._basis.xZ;
			j.ang2Z = this._relativeAnchor2X * this._basis.xY - this._relativeAnchor2Y * this._basis.xX;
		}
		var impulse = this._impulses[1];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = linRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.yX;
		j.lin1Y = this._basis.yY;
		j.lin1Z = this._basis.yZ;
		j.lin2X = this._basis.yX;
		j.lin2Y = this._basis.yY;
		j.lin2Z = this._basis.yZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.yZ - this._relativeAnchor1Z * this._basis.yY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.yX - this._relativeAnchor1X * this._basis.yZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.yY - this._relativeAnchor1Y * this._basis.yX;
		j.ang2X = this._relativeAnchor2Y * this._basis.yZ - this._relativeAnchor2Z * this._basis.yY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.yX - this._relativeAnchor2X * this._basis.yZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.yY - this._relativeAnchor2Y * this._basis.yX;
		var impulse = this._impulses[2];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = linRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.lin1X = this._basis.zX;
		j.lin1Y = this._basis.zY;
		j.lin1Z = this._basis.zZ;
		j.lin2X = this._basis.zX;
		j.lin2Y = this._basis.zY;
		j.lin2Z = this._basis.zZ;
		j.ang1X = this._relativeAnchor1Y * this._basis.zZ - this._relativeAnchor1Z * this._basis.zY;
		j.ang1Y = this._relativeAnchor1Z * this._basis.zX - this._relativeAnchor1X * this._basis.zZ;
		j.ang1Z = this._relativeAnchor1X * this._basis.zY - this._relativeAnchor1Y * this._basis.zX;
		j.ang2X = this._relativeAnchor2Y * this._basis.zZ - this._relativeAnchor2Z * this._basis.zY;
		j.ang2Y = this._relativeAnchor2Z * this._basis.zX - this._relativeAnchor2X * this._basis.zZ;
		j.ang2Z = this._relativeAnchor2X * this._basis.zY - this._relativeAnchor2Y * this._basis.zX;
		var impulse = this._impulses[3];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = angRhsX;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 1;
		j.ang1Y = 0;
		j.ang1Z = 0;
		j.ang2X = 1;
		j.ang2Y = 0;
		j.ang2Z = 0;
		var impulse = this._impulses[4];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = angRhsY;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 1;
		j.ang1Z = 0;
		j.ang2X = 0;
		j.ang2Y = 1;
		j.ang2Z = 0;
		var impulse = this._impulses[5];
		var row1 = info.rows[info.numRows++];
		var _this = row1.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row1.rhs = 0;
		row1.cfm = 0;
		row1.minImpulse = 0;
		row1.maxImpulse = 0;
		row1.motorSpeed = 0;
		row1.motorMaxImpulse = 0;
		row1.impulse = null;
		row1.impulse = impulse;
		row = row1;
		row.rhs = angRhsZ;
		row.cfm = 0;
		row.minImpulse = -1e65536;
		row.maxImpulse = 1e65536;
		j = row.jacobian;
		j.ang1X = 0;
		j.ang1Y = 0;
		j.ang1Z = 1;
		j.ang2X = 0;
		j.ang2Y = 0;
		j.ang2Z = 1;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot200 * rot100 + rot201 * rot101 + rot202 * rot102;
		__tmp__01 = rot200 * rot110 + rot201 * rot111 + rot202 * rot112;
		__tmp__02 = rot200 * rot120 + rot201 * rot121 + rot202 * rot122;
		__tmp__10 = rot210 * rot100 + rot211 * rot101 + rot212 * rot102;
		__tmp__11 = rot210 * rot110 + rot211 * rot111 + rot212 * rot112;
		__tmp__12 = rot210 * rot120 + rot211 * rot121 + rot212 * rot122;
		__tmp__20 = rot220 * rot100 + rot221 * rot101 + rot222 * rot102;
		__tmp__21 = rot220 * rot110 + rot221 * rot111 + rot222 * rot112;
		__tmp__22 = rot220 * rot120 + rot221 * rot121 + rot222 * rot122;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var relQ;
		var relQX;
		var relQY;
		var relQZ;
		var relQW;
		var e00 = relRot00;
		var e11 = relRot11;
		var e22 = relRot22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			relQW = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot21 - relRot12) * s;
			relQY = (relRot02 - relRot20) * s;
			relQZ = (relRot10 - relRot01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				relQX = 0.5 * s;
				s = 0.5 / s;
				relQY = (relRot01 + relRot10) * s;
				relQZ = (relRot02 + relRot20) * s;
				relQW = (relRot21 - relRot12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				relQZ = 0.5 * s;
				s = 0.5 / s;
				relQX = (relRot02 + relRot20) * s;
				relQY = (relRot12 + relRot21) * s;
				relQW = (relRot10 - relRot01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			relQY = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot01 + relRot10) * s;
			relQZ = (relRot12 + relRot21) * s;
			relQW = (relRot02 - relRot20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			relQZ = 0.5 * s;
			s = 0.5 / s;
			relQX = (relRot02 + relRot20) * s;
			relQY = (relRot12 + relRot21) * s;
			relQW = (relRot10 - relRot01) * s;
		}
		var cosHalfTheta = relQW;
		var theta = (cosHalfTheta <= -1 ? 3.14159265358979 : cosHalfTheta >= 1 ? 0 : Math.acos(cosHalfTheta)) * 2;
		this.angularErrorX = relQX;
		this.angularErrorY = relQY;
		this.angularErrorZ = relQZ;
		var l = this.angularErrorX * this.angularErrorX + this.angularErrorY * this.angularErrorY + this.angularErrorZ * this.angularErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this.angularErrorX *= l;
		this.angularErrorY *= l;
		this.angularErrorZ *= l;
		this.angularErrorX *= theta;
		this.angularErrorY *= theta;
		this.angularErrorZ *= theta;
		var anchorDiff;
		var anchorDiffX;
		var anchorDiffY;
		var anchorDiffZ;
		anchorDiffX = this._anchor2X - this._anchor1X;
		anchorDiffY = this._anchor2Y - this._anchor1Y;
		anchorDiffZ = this._anchor2Z - this._anchor1Z;
		this.translation = anchorDiffX * this._basis.xX + anchorDiffY * this._basis.xY + anchorDiffZ * this._basis.xZ;
		this.linearErrorY = anchorDiffX * this._basis.yX + anchorDiffY * this._basis.yY + anchorDiffZ * this._basis.yZ;
		this.linearErrorZ = anchorDiffX * this._basis.zX + anchorDiffY * this._basis.zY + anchorDiffZ * this._basis.zZ;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getTranslation: function() {
		return this.translation;
	}
	,__class__: oimo_dynamics_constraint_joint_PrismaticJoint
});
var oimo_dynamics_constraint_joint_PrismaticJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.limitMotor = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_PrismaticJointConfig.__name__ = "oimo.dynamics.constraint.joint.PrismaticJointConfig";
oimo_dynamics_constraint_joint_PrismaticJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_PrismaticJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_PrismaticJointConfig
});
var oimo_dynamics_constraint_joint_RagdollJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.RAGDOLL);
	var v = config.localTwistAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localSwingAxis1;
	this._localBasisY1X = v.x;
	this._localBasisY1Y = v.y;
	this._localBasisY1Z = v.z;
	var v = config.localTwistAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromXY1X2();
	this._twistSd = config.twistSpringDamper.clone();
	this._twistLm = config.twistLimitMotor.clone();
	this._swingSd = config.swingSpringDamper.clone();
	this._maxSwingAngle1 = config.maxSwingAngle1;
	this._maxSwingAngle2 = config.maxSwingAngle2;
	if(this._maxSwingAngle1 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle1 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	if(this._maxSwingAngle2 < oimo_common_Setting.minRagdollMaxSwingAngle) {
		this._maxSwingAngle2 = oimo_common_Setting.minRagdollMaxSwingAngle;
	}
	this.dummySwingLm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.dummySwingLm.lowerLimit = -1;
	this.dummySwingLm.upperLimit = 0;
	this._swingAngle = 0;
	this._twistAngle = 0;
	this.swingError = 0;
	this.swingAxisX = 0;
	this.swingAxisY = 0;
	this.swingAxisZ = 0;
	this.twistAxisX = 0;
	this.twistAxisY = 0;
	this.twistAxisZ = 0;
};
oimo_dynamics_constraint_joint_RagdollJoint.__name__ = "oimo.dynamics.constraint.joint.RagdollJoint";
oimo_dynamics_constraint_joint_RagdollJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RagdollJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var swingMass = this.computeEffectiveInertiaMoment(this.swingAxisX,this.swingAxisY,this.swingAxisZ);
		var twistMass = this.computeEffectiveInertiaMoment(this._basisX2X,this._basisX2Y,this._basisX2Z);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this.swingError > 0 && (this._swingSd.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			this.setSolverInfoRowAngular(row1,this.swingError,this.dummySwingLm,swingMass,this._swingSd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this.swingAxisX;
			j.ang1Y = this.swingAxisY;
			j.ang1Z = this.swingAxisZ;
			j.ang2X = this.swingAxisX;
			j.ang2Y = this.swingAxisY;
			j.ang2Z = this.swingAxisZ;
		}
		if(this._twistSd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[4];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			this.setSolverInfoRowAngular(row1,this._twistAngle,this._twistLm,twistMass,this._twistSd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this.twistAxisX;
			j.ang1Y = this.twistAxisY;
			j.ang1Z = this.twistAxisZ;
			j.ang2X = this.twistAxisX;
			j.ang2Y = this.twistAxisY;
			j.ang2Z = this.twistAxisZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var tf1 = this._b1._transform;
		var tf2 = this._b2._transform;
		var axis1;
		var axis1X;
		var axis1Y;
		var axis1Z;
		var axis2;
		var axis2X;
		var axis2Y;
		var axis2Z;
		axis1X = this._basisX1X;
		axis1Y = this._basisX1Y;
		axis1Z = this._basisX1Z;
		axis2X = this._basisX2X;
		axis2Y = this._basisX2Y;
		axis2Z = this._basisX2Z;
		var basis1Mat;
		var basis1Mat00;
		var basis1Mat01;
		var basis1Mat02;
		var basis1Mat10;
		var basis1Mat11;
		var basis1Mat12;
		var basis1Mat20;
		var basis1Mat21;
		var basis1Mat22;
		var basis2Mat;
		var basis2Mat00;
		var basis2Mat01;
		var basis2Mat02;
		var basis2Mat10;
		var basis2Mat11;
		var basis2Mat12;
		var basis2Mat20;
		var basis2Mat21;
		var basis2Mat22;
		basis1Mat00 = this._basisX1X;
		basis1Mat01 = this._basisY1X;
		basis1Mat02 = this._basisZ1X;
		basis1Mat10 = this._basisX1Y;
		basis1Mat11 = this._basisY1Y;
		basis1Mat12 = this._basisZ1Y;
		basis1Mat20 = this._basisX1Z;
		basis1Mat21 = this._basisY1Z;
		basis1Mat22 = this._basisZ1Z;
		basis2Mat00 = this._basisX2X;
		basis2Mat01 = this._basisY2X;
		basis2Mat02 = this._basisZ2X;
		basis2Mat10 = this._basisX2Y;
		basis2Mat11 = this._basisY2Y;
		basis2Mat12 = this._basisZ2Y;
		basis2Mat20 = this._basisX2Z;
		basis2Mat21 = this._basisY2Z;
		basis2Mat22 = this._basisZ2Z;
		var swingQ;
		var swingQX;
		var swingQY;
		var swingQZ;
		var swingQW;
		var swingM;
		var swingM00;
		var swingM01;
		var swingM02;
		var swingM10;
		var swingM11;
		var swingM12;
		var swingM20;
		var swingM21;
		var swingM22;
		var swingV;
		var swingVX;
		var swingVY;
		var swingVZ;
		var d = axis1X * axis2X + axis1Y * axis2Y + axis1Z * axis2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = axis1X;
			var y1 = axis1Y;
			var z1 = axis1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			swingQX = vX;
			swingQY = vY;
			swingQZ = vZ;
			swingQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = axis1Y * axis2Z - axis1Z * axis2Y;
			cY = axis1Z * axis2X - axis1X * axis2Z;
			cZ = axis1X * axis2Y - axis1Y * axis2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			swingQX = cX;
			swingQY = cY;
			swingQZ = cZ;
			swingQW = w;
		}
		var x = swingQX;
		var y = swingQY;
		var z = swingQZ;
		var w = swingQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		swingM00 = 1 - yy - zz;
		swingM01 = xy - wz;
		swingM02 = xz + wy;
		swingM10 = xy + wz;
		swingM11 = 1 - xx - zz;
		swingM12 = yz - wx;
		swingM20 = xz - wy;
		swingM21 = yz + wx;
		swingM22 = 1 - xx - yy;
		this._swingAngle = (swingQW <= -1 ? 3.14159265358979 : swingQW >= 1 ? 0 : Math.acos(swingQW)) * 2;
		swingVX = swingQX;
		swingVY = swingQY;
		swingVZ = swingQZ;
		var basisY2In1;
		var basisY2In1X;
		var basisY2In1Y;
		var basisY2In1Z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = swingM00 * this._basisY2X + swingM10 * this._basisY2Y + swingM20 * this._basisY2Z;
		__tmp__Y = swingM01 * this._basisY2X + swingM11 * this._basisY2Y + swingM21 * this._basisY2Z;
		__tmp__Z = swingM02 * this._basisY2X + swingM12 * this._basisY2Y + swingM22 * this._basisY2Z;
		basisY2In1X = __tmp__X;
		basisY2In1Y = __tmp__Y;
		basisY2In1Z = __tmp__Z;
		var yCoord = this._basisY1X * basisY2In1X + this._basisY1Y * basisY2In1Y + this._basisY1Z * basisY2In1Z;
		var zCoord = this._basisZ1X * basisY2In1X + this._basisZ1Y * basisY2In1Y + this._basisZ1Z * basisY2In1Z;
		this._twistAngle = Math.atan2(zCoord,yCoord);
		this.twistAxisX = this._basisX1X + this._basisX2X;
		this.twistAxisY = this._basisX1Y + this._basisX2Y;
		this.twistAxisZ = this._basisX1Z + this._basisX2Z;
		var l = this.twistAxisX * this.twistAxisX + this.twistAxisY * this.twistAxisY + this.twistAxisZ * this.twistAxisZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this.twistAxisX *= l;
		this.twistAxisY *= l;
		this.twistAxisZ *= l;
		var invLen = Math.sqrt(swingVX * swingVX + swingVY * swingVY + swingVZ * swingVZ);
		if(invLen > 0) {
			invLen = 1 / invLen;
		}
		swingVX *= invLen * this._swingAngle;
		swingVY *= invLen * this._swingAngle;
		swingVZ *= invLen * this._swingAngle;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = basis1Mat00 * swingVX + basis1Mat10 * swingVY + basis1Mat20 * swingVZ;
		__tmp__Y = basis1Mat01 * swingVX + basis1Mat11 * swingVY + basis1Mat21 * swingVZ;
		__tmp__Z = basis1Mat02 * swingVX + basis1Mat12 * swingVY + basis1Mat22 * swingVZ;
		swingVX = __tmp__X;
		swingVY = __tmp__Y;
		swingVZ = __tmp__Z;
		var x = swingVY;
		var y = swingVZ;
		var a = this._maxSwingAngle1;
		var b = this._maxSwingAngle2;
		var invA2 = 1 / (a * a);
		var invB2 = 1 / (b * b);
		var w = x * x * invA2 + y * y * invB2;
		if(w == 0) {
			this.swingAxisX = 0;
			this.swingAxisY = 0;
			this.swingAxisZ = 0;
			this.swingError = 0;
		} else {
			var t = Math.sqrt(1 / w);
			var x0 = x * t;
			var y0 = y * t;
			var nx = x0 * invA2;
			var ny = y0 * invB2;
			invLen = 1 / Math.sqrt(nx * nx + ny * ny);
			nx *= invLen;
			ny *= invLen;
			var depth = (x - x0) * nx + (y - y0) * ny;
			if(depth > 0) {
				this.swingError = depth;
				this.swingAxisX = 0;
				this.swingAxisY = nx;
				this.swingAxisZ = ny;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = basis1Mat00 * this.swingAxisX + basis1Mat01 * this.swingAxisY + basis1Mat02 * this.swingAxisZ;
				__tmp__Y = basis1Mat10 * this.swingAxisX + basis1Mat11 * this.swingAxisY + basis1Mat12 * this.swingAxisZ;
				__tmp__Z = basis1Mat20 * this.swingAxisX + basis1Mat21 * this.swingAxisY + basis1Mat22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X;
				this.swingAxisY = __tmp__Y;
				this.swingAxisZ = __tmp__Z;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = swingM00 * this.swingAxisX + swingM01 * this.swingAxisY + swingM02 * this.swingAxisZ;
				__tmp__Y = swingM10 * this.swingAxisX + swingM11 * this.swingAxisY + swingM12 * this.swingAxisZ;
				__tmp__Z = swingM20 * this.swingAxisX + swingM21 * this.swingAxisY + swingM22 * this.swingAxisZ;
				this.swingAxisX = __tmp__X;
				this.swingAxisY = __tmp__Y;
				this.swingAxisZ = __tmp__Z;
			} else {
				this.swingError = 0;
			}
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getTwistSpringDamper: function() {
		return this._twistSd;
	}
	,getTwistLimitMotor: function() {
		return this._twistLm;
	}
	,getSwingSpringDamper: function() {
		return this._swingSd;
	}
	,getSwingAxis: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this.swingAxisX;
		v1.y = this.swingAxisY;
		v1.z = this.swingAxisZ;
		return v;
	}
	,getSwingAxisTo: function(axis) {
		var v = axis;
		v.x = this.swingAxisX;
		v.y = this.swingAxisY;
		v.z = this.swingAxisZ;
	}
	,getSwingAngle: function() {
		return this._swingAngle;
	}
	,getTwistAngle: function() {
		return this._twistAngle;
	}
	,__class__: oimo_dynamics_constraint_joint_RagdollJoint
});
var oimo_dynamics_constraint_joint_RagdollJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localTwistAxis1 = new oimo_common_Vec3(1,0,0);
	this.localTwistAxis2 = new oimo_common_Vec3(1,0,0);
	this.localSwingAxis1 = new oimo_common_Vec3(0,1,0);
	this.twistSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.swingSpringDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.twistLimitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.maxSwingAngle1 = 3.14159265358979;
	this.maxSwingAngle2 = 3.14159265358979;
};
oimo_dynamics_constraint_joint_RagdollJointConfig.__name__ = "oimo.dynamics.constraint.joint.RagdollJointConfig";
oimo_dynamics_constraint_joint_RagdollJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RagdollJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldTwistAxis,worldSwingAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldTwistAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localTwistAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldTwistAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localTwistAxis2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldSwingAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localSwingAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_RagdollJointConfig
});
var oimo_dynamics_constraint_joint_RevoluteJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,1);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisX2X = v.x;
	this._localBasisX2Y = v.y;
	this._localBasisX2Z = v.z;
	this.buildLocalBasesFromX();
	this.angle = 0;
	this.angularErrorY = 0;
	this.angularErrorZ = 0;
	this._basis = new oimo_dynamics_constraint_joint_BasisTracker(this);
	this._sd = config.springDamper.clone();
	this._lm = config.limitMotor.clone();
};
oimo_dynamics_constraint_joint_RevoluteJoint.__name__ = "oimo.dynamics.constraint.joint.RevoluteJoint";
oimo_dynamics_constraint_joint_RevoluteJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_RevoluteJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var angRhsY = this.angularErrorY * erp;
		var angRhsZ = this.angularErrorZ * erp;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMass = this.computeEffectiveInertiaMoment(this._basis.xX,this._basis.xY,this._basis.xZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(this._sd.frequency <= 0 || !isPositionPart) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			this.setSolverInfoRowAngular(row1,this.angle,this._lm,motorMass,this._sd,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._basis.xX;
			j.ang1Y = this._basis.xY;
			j.ang1Z = this._basis.xZ;
			j.ang2X = this._basis.xX;
			j.ang2Y = this._basis.xY;
			j.ang2Z = this._basis.xZ;
		}
		var impulse = this._impulses[4];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = angRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.ang1X = this._basis.yX;
		j.ang1Y = this._basis.yY;
		j.ang1Z = this._basis.yZ;
		j.ang2X = this._basis.yX;
		j.ang2Y = this._basis.yY;
		j.ang2Z = this._basis.yZ;
		var impulse = this._impulses[5];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = angRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.ang1X = this._basis.zX;
		j.ang1Y = this._basis.zY;
		j.ang1Z = this._basis.zZ;
		j.ang2X = this._basis.zX;
		j.ang2Y = this._basis.zY;
		j.ang2Z = this._basis.zZ;
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var _this = this._basis;
		var invM1 = _this.joint._b1._invMass;
		var invM2 = _this.joint._b2._invMass;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var idQ;
		var idQX;
		var idQY;
		var idQZ;
		var idQW;
		var slerpQ;
		var slerpQX;
		var slerpQY;
		var slerpQZ;
		var slerpQW;
		var slerpM;
		var slerpM00;
		var slerpM01;
		var slerpM02;
		var slerpM10;
		var slerpM11;
		var slerpM12;
		var slerpM20;
		var slerpM21;
		var slerpM22;
		var newX;
		var newXX;
		var newXY;
		var newXZ;
		var newY;
		var newYX;
		var newYY;
		var newYZ;
		var newZ;
		var newZX;
		var newZY;
		var newZZ;
		var prevX;
		var prevXX;
		var prevXY;
		var prevXZ;
		var prevY;
		var prevYX;
		var prevYY;
		var prevYZ;
		var d = _this.joint._basisX1X * _this.joint._basisX2X + _this.joint._basisX1Y * _this.joint._basisX2Y + _this.joint._basisX1Z * _this.joint._basisX2Z;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = _this.joint._basisX1X;
			var y1 = _this.joint._basisX1Y;
			var z1 = _this.joint._basisX1Z;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			qX = vX;
			qY = vY;
			qZ = vZ;
			qW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = _this.joint._basisX1Y * _this.joint._basisX2Z - _this.joint._basisX1Z * _this.joint._basisX2Y;
			cY = _this.joint._basisX1Z * _this.joint._basisX2X - _this.joint._basisX1X * _this.joint._basisX2Z;
			cZ = _this.joint._basisX1X * _this.joint._basisX2Y - _this.joint._basisX1Y * _this.joint._basisX2X;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			qX = cX;
			qY = cY;
			qZ = cZ;
			qW = w;
		}
		idQX = 0;
		idQY = 0;
		idQZ = 0;
		idQW = 1;
		var qx;
		var qy;
		var qz;
		var qw;
		var q1X;
		var q1Y;
		var q1Z;
		var q1W;
		var q2X;
		var q2Y;
		var q2Z;
		var q2W;
		q1X = idQX;
		q1Y = idQY;
		q1Z = idQZ;
		q1W = idQW;
		q2X = qX;
		q2Y = qY;
		q2Z = qZ;
		q2W = qW;
		var d = q1X * q2X + q1Y * q2Y + q1Z * q2Z + q1W * q2W;
		if(d < 0) {
			d = -d;
			q2X = -q2X;
			q2Y = -q2Y;
			q2Z = -q2Z;
			q2W = -q2W;
		}
		if(d > 0.999999) {
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = q2X - q1X;
			dqY = q2Y - q1Y;
			dqZ = q2Z - q1Z;
			dqW = q2W - q1W;
			q2X = q1X + dqX * (invM1 / (invM1 + invM2));
			q2Y = q1Y + dqY * (invM1 / (invM1 + invM2));
			q2Z = q1Z + dqZ * (invM1 / (invM1 + invM2));
			q2W = q1W + dqW * (invM1 / (invM1 + invM2));
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			slerpQX = q2X * l;
			slerpQY = q2Y * l;
			slerpQZ = q2Z * l;
			slerpQW = q2W * l;
		} else {
			var theta = invM1 / (invM1 + invM2) * Math.acos(d);
			q2X += q1X * -d;
			q2Y += q1Y * -d;
			q2Z += q1Z * -d;
			q2W += q1W * -d;
			var l = q2X * q2X + q2Y * q2Y + q2Z * q2Z + q2W * q2W;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			q2X *= l;
			q2Y *= l;
			q2Z *= l;
			q2W *= l;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			q1X *= cos;
			q1Y *= cos;
			q1Z *= cos;
			q1W *= cos;
			slerpQX = q1X + q2X * sin;
			slerpQY = q1Y + q2Y * sin;
			slerpQZ = q1Z + q2Z * sin;
			slerpQW = q1W + q2W * sin;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * _this.joint._basisX1X + slerpM01 * _this.joint._basisX1Y + slerpM02 * _this.joint._basisX1Z;
		__tmp__Y = slerpM10 * _this.joint._basisX1X + slerpM11 * _this.joint._basisX1Y + slerpM12 * _this.joint._basisX1Z;
		__tmp__Z = slerpM20 * _this.joint._basisX1X + slerpM21 * _this.joint._basisX1Y + slerpM22 * _this.joint._basisX1Z;
		newXX = __tmp__X;
		newXY = __tmp__Y;
		newXZ = __tmp__Z;
		prevXX = _this.xX;
		prevXY = _this.xY;
		prevXZ = _this.xZ;
		prevYX = _this.yX;
		prevYY = _this.yY;
		prevYZ = _this.yZ;
		var d = prevXX * newXX + prevXY * newXY + prevXZ * newXZ;
		if(d < -0.999999999) {
			var vX;
			var vY;
			var vZ;
			var x1 = prevXX;
			var y1 = prevXY;
			var z1 = prevXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d1;
			if(x2 < y2) {
				if(x2 < z2) {
					d1 = 1 / Math.sqrt(y2 + z2);
					vX = 0;
					vY = z1 * d1;
					vZ = -y1 * d1;
				} else {
					d1 = 1 / Math.sqrt(x2 + y2);
					vX = y1 * d1;
					vY = -x1 * d1;
					vZ = 0;
				}
			} else if(y2 < z2) {
				d1 = 1 / Math.sqrt(z2 + x2);
				vX = -z1 * d1;
				vY = 0;
				vZ = x1 * d1;
			} else {
				d1 = 1 / Math.sqrt(x2 + y2);
				vX = y1 * d1;
				vY = -x1 * d1;
				vZ = 0;
			}
			slerpQX = vX;
			slerpQY = vY;
			slerpQZ = vZ;
			slerpQW = 0;
		} else {
			var cX;
			var cY;
			var cZ;
			cX = prevXY * newXZ - prevXZ * newXY;
			cY = prevXZ * newXX - prevXX * newXZ;
			cZ = prevXX * newXY - prevXY * newXX;
			var w = Math.sqrt((1 + d) * 0.5);
			d = 0.5 / w;
			cX *= d;
			cY *= d;
			cZ *= d;
			slerpQX = cX;
			slerpQY = cY;
			slerpQZ = cZ;
			slerpQW = w;
		}
		var x = slerpQX;
		var y = slerpQY;
		var z = slerpQZ;
		var w = slerpQW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		slerpM00 = 1 - yy - zz;
		slerpM01 = xy - wz;
		slerpM02 = xz + wy;
		slerpM10 = xy + wz;
		slerpM11 = 1 - xx - zz;
		slerpM12 = yz - wx;
		slerpM20 = xz - wy;
		slerpM21 = yz + wx;
		slerpM22 = 1 - xx - yy;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = slerpM00 * prevYX + slerpM01 * prevYY + slerpM02 * prevYZ;
		__tmp__Y = slerpM10 * prevYX + slerpM11 * prevYY + slerpM12 * prevYZ;
		__tmp__Z = slerpM20 * prevYX + slerpM21 * prevYY + slerpM22 * prevYZ;
		newYX = __tmp__X;
		newYY = __tmp__Y;
		newYZ = __tmp__Z;
		newZX = newXY * newYZ - newXZ * newYY;
		newZY = newXZ * newYX - newXX * newYZ;
		newZZ = newXX * newYY - newXY * newYX;
		if(newZX * newZX + newZY * newZY + newZZ * newZZ > 1e-6) {
			var l = newZX * newZX + newZY * newZY + newZZ * newZZ;
			if(l > 0) {
				l = 1 / Math.sqrt(l);
			}
			newZX *= l;
			newZY *= l;
			newZZ *= l;
		} else {
			var x1 = newXX;
			var y1 = newXY;
			var z1 = newXZ;
			var x2 = x1 * x1;
			var y2 = y1 * y1;
			var z2 = z1 * z1;
			var d;
			if(x2 < y2) {
				if(x2 < z2) {
					d = 1 / Math.sqrt(y2 + z2);
					newZX = 0;
					newZY = z1 * d;
					newZZ = -y1 * d;
				} else {
					d = 1 / Math.sqrt(x2 + y2);
					newZX = y1 * d;
					newZY = -x1 * d;
					newZZ = 0;
				}
			} else if(y2 < z2) {
				d = 1 / Math.sqrt(z2 + x2);
				newZX = -z1 * d;
				newZY = 0;
				newZZ = x1 * d;
			} else {
				d = 1 / Math.sqrt(x2 + y2);
				newZX = y1 * d;
				newZY = -x1 * d;
				newZZ = 0;
			}
		}
		newYX = newZY * newXZ - newZZ * newXY;
		newYY = newZZ * newXX - newZX * newXZ;
		newYZ = newZX * newXY - newZY * newXX;
		_this.xX = newXX;
		_this.xY = newXY;
		_this.xZ = newXZ;
		_this.yX = newYX;
		_this.yY = newYY;
		_this.yZ = newYZ;
		_this.zX = newZX;
		_this.zY = newZY;
		_this.zZ = newZZ;
		var angError;
		var angErrorX;
		var angErrorY;
		var angErrorZ;
		angErrorX = this._basisX1Y * this._basisX2Z - this._basisX1Z * this._basisX2Y;
		angErrorY = this._basisX1Z * this._basisX2X - this._basisX1X * this._basisX2Z;
		angErrorZ = this._basisX1X * this._basisX2Y - this._basisX1Y * this._basisX2X;
		var cos = this._basisX1X * this._basisX2X + this._basisX1Y * this._basisX2Y + this._basisX1Z * this._basisX2Z;
		var theta = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		var l = angErrorX * angErrorX + angErrorY * angErrorY + angErrorZ * angErrorZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		angErrorX *= l;
		angErrorY *= l;
		angErrorZ *= l;
		angErrorX *= theta;
		angErrorY *= theta;
		angErrorZ *= theta;
		this.angularErrorY = angErrorX * this._basis.yX + angErrorY * this._basis.yY + angErrorZ * this._basis.yZ;
		this.angularErrorZ = angErrorX * this._basis.zX + angErrorY * this._basis.zY + angErrorZ * this._basis.zZ;
		var perpCross;
		var perpCrossX;
		var perpCrossY;
		var perpCrossZ;
		perpCrossX = this._basisY1Y * this._basisY2Z - this._basisY1Z * this._basisY2Y;
		perpCrossY = this._basisY1Z * this._basisY2X - this._basisY1X * this._basisY2Z;
		perpCrossZ = this._basisY1X * this._basisY2Y - this._basisY1Y * this._basisY2X;
		cos = this._basisY1X * this._basisY2X + this._basisY1Y * this._basisY2Y + this._basisY1Z * this._basisY2Z;
		this.angle = cos <= -1 ? 3.14159265358979 : cos >= 1 ? 0 : Math.acos(cos);
		if(perpCrossX * this._basis.xX + perpCrossY * this._basis.xY + perpCrossZ * this._basis.xZ < 0) {
			this.angle = -this.angle;
		}
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX2X;
		v1.y = this._basisX2Y;
		v1.z = this._basisX2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisX2X;
		v.y = this._basisX2Y;
		v.z = this._basisX2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX2X;
		v1.y = this._localBasisX2Y;
		v1.z = this._localBasisX2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisX2X;
		v.y = this._localBasisX2Y;
		v.z = this._localBasisX2Z;
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,getLimitMotor: function() {
		return this._lm;
	}
	,getAngle: function() {
		return this.angle;
	}
	,__class__: oimo_dynamics_constraint_joint_RevoluteJoint
});
var oimo_dynamics_constraint_joint_RevoluteJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_RevoluteJointConfig.__name__ = "oimo.dynamics.constraint.joint.RevoluteJointConfig";
oimo_dynamics_constraint_joint_RevoluteJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_RevoluteJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_RevoluteJointConfig
});
var oimo_dynamics_constraint_joint_RotationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorTorque = 0;
};
oimo_dynamics_constraint_joint_RotationalLimitMotor.__name__ = "oimo.dynamics.constraint.joint.RotationalLimitMotor";
oimo_dynamics_constraint_joint_RotationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,torque) {
		this.motorSpeed = speed;
		this.motorTorque = torque;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorTorque = this.motorTorque;
		return lm;
	}
	,__class__: oimo_dynamics_constraint_joint_RotationalLimitMotor
};
var oimo_dynamics_constraint_joint_SphericalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,0);
	this._sd = config.springDamper.clone();
};
oimo_dynamics_constraint_joint_SphericalJoint.__name__ = "oimo.dynamics.constraint.joint.SphericalJoint";
oimo_dynamics_constraint_joint_SphericalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_SphericalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		if(this._sd.frequency > 0 && isPositionPart) {
			return;
		}
		var error;
		var errorX;
		var errorY;
		var errorZ;
		errorX = this._anchor2X - this._anchor1X;
		errorY = this._anchor2Y - this._anchor1Y;
		errorZ = this._anchor2Z - this._anchor1Z;
		var cfm;
		var erp;
		if(this._sd.frequency > 0) {
			var omega = 6.28318530717958 * this._sd.frequency;
			var zeta = this._sd.dampingRatio;
			if(zeta < oimo_common_Setting.minSpringDamperDampingRatio) {
				zeta = oimo_common_Setting.minSpringDamperDampingRatio;
			}
			var h = timeStep.dt;
			var c = 2 * zeta * omega;
			var k = omega * omega;
			if(this._sd.useSymplecticEuler) {
				cfm = 1 / (h * c);
				erp = k / c;
			} else {
				cfm = 1 / (h * (h * k + c));
				erp = k / (h * k + c);
			}
			cfm *= this._b1._invMass + this._b2._invMass;
		} else {
			cfm = 0;
			erp = this.getErp(timeStep,isPositionPart);
		}
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = errorX * erp;
		linearRhsY = errorY * erp;
		linearRhsZ = errorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsY;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsZ;
		row1.cfm = cfm;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getSpringDamper: function() {
		return this._sd;
	}
	,__class__: oimo_dynamics_constraint_joint_SphericalJoint
});
var oimo_dynamics_constraint_joint_SphericalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.springDamper = new oimo_dynamics_constraint_joint_SpringDamper();
};
oimo_dynamics_constraint_joint_SphericalJointConfig.__name__ = "oimo.dynamics.constraint.joint.SphericalJointConfig";
oimo_dynamics_constraint_joint_SphericalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_SphericalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_SphericalJointConfig
});
var oimo_dynamics_constraint_joint_SpringDamper = function() {
	this.frequency = 0;
	this.dampingRatio = 0;
	this.useSymplecticEuler = false;
};
oimo_dynamics_constraint_joint_SpringDamper.__name__ = "oimo.dynamics.constraint.joint.SpringDamper";
oimo_dynamics_constraint_joint_SpringDamper.prototype = {
	setSpring: function(frequency,dampingRatio) {
		this.frequency = frequency;
		this.dampingRatio = dampingRatio;
		return this;
	}
	,setSymplecticEuler: function(useSymplecticEuler) {
		this.useSymplecticEuler = useSymplecticEuler;
		return this;
	}
	,clone: function() {
		var sd = new oimo_dynamics_constraint_joint_SpringDamper();
		sd.frequency = this.frequency;
		sd.dampingRatio = this.dampingRatio;
		sd.useSymplecticEuler = this.useSymplecticEuler;
		return sd;
	}
	,__class__: oimo_dynamics_constraint_joint_SpringDamper
};
var oimo_dynamics_constraint_joint_TranslationalLimitMotor = function() {
	this.lowerLimit = 1;
	this.upperLimit = 0;
	this.motorForce = 0;
};
oimo_dynamics_constraint_joint_TranslationalLimitMotor.__name__ = "oimo.dynamics.constraint.joint.TranslationalLimitMotor";
oimo_dynamics_constraint_joint_TranslationalLimitMotor.prototype = {
	setLimits: function(lower,upper) {
		this.lowerLimit = lower;
		this.upperLimit = upper;
		return this;
	}
	,setMotor: function(speed,force) {
		this.motorSpeed = speed;
		this.motorForce = force;
		return this;
	}
	,clone: function() {
		var lm = new oimo_dynamics_constraint_joint_TranslationalLimitMotor();
		lm.lowerLimit = this.lowerLimit;
		lm.upperLimit = this.upperLimit;
		lm.motorSpeed = this.motorSpeed;
		lm.motorForce = this.motorForce;
		return lm;
	}
	,__class__: oimo_dynamics_constraint_joint_TranslationalLimitMotor
};
var oimo_dynamics_constraint_joint_UniversalJoint = function(config) {
	oimo_dynamics_constraint_joint_Joint.call(this,config,oimo_dynamics_constraint_joint_JointType.UNIVERSAL);
	var v = config.localAxis1;
	this._localBasisX1X = v.x;
	this._localBasisX1Y = v.y;
	this._localBasisX1Z = v.z;
	var v = config.localAxis2;
	this._localBasisZ2X = v.x;
	this._localBasisZ2Y = v.y;
	this._localBasisZ2Z = v.z;
	this.buildLocalBasesFromX1Z2();
	this._angleX = 0;
	this._angleY = 0;
	this._angleZ = 0;
	this.xSingular = false;
	this.ySingular = false;
	this.zSingular = false;
	this._sd1 = config.springDamper1.clone();
	this._sd2 = config.springDamper2.clone();
	this._lm1 = config.limitMotor1.clone();
	this._lm2 = config.limitMotor2.clone();
};
oimo_dynamics_constraint_joint_UniversalJoint.__name__ = "oimo.dynamics.constraint.joint.UniversalJoint";
oimo_dynamics_constraint_joint_UniversalJoint.__super__ = oimo_dynamics_constraint_joint_Joint;
oimo_dynamics_constraint_joint_UniversalJoint.prototype = $extend(oimo_dynamics_constraint_joint_Joint.prototype,{
	getInfo: function(info,timeStep,isPositionPart) {
		var erp = this.getErp(timeStep,isPositionPart);
		var linearRhs;
		var linearRhsX;
		var linearRhsY;
		var linearRhsZ;
		linearRhsX = this.linearErrorX * erp;
		linearRhsY = this.linearErrorY * erp;
		linearRhsZ = this.linearErrorZ * erp;
		var linRhsX = linearRhsX;
		var linRhsY = linearRhsY;
		var linRhsZ = linearRhsZ;
		var angRhsY = this._angleY * erp;
		var crossR1;
		var crossR100;
		var crossR101;
		var crossR102;
		var crossR110;
		var crossR111;
		var crossR112;
		var crossR120;
		var crossR121;
		var crossR122;
		var crossR2;
		var crossR200;
		var crossR201;
		var crossR202;
		var crossR210;
		var crossR211;
		var crossR212;
		var crossR220;
		var crossR221;
		var crossR222;
		crossR100 = 0;
		crossR101 = -this._relativeAnchor1Z;
		crossR102 = this._relativeAnchor1Y;
		crossR110 = this._relativeAnchor1Z;
		crossR111 = 0;
		crossR112 = -this._relativeAnchor1X;
		crossR120 = -this._relativeAnchor1Y;
		crossR121 = this._relativeAnchor1X;
		crossR122 = 0;
		crossR200 = 0;
		crossR201 = -this._relativeAnchor2Z;
		crossR202 = this._relativeAnchor2Y;
		crossR210 = this._relativeAnchor2Z;
		crossR211 = 0;
		crossR212 = -this._relativeAnchor2X;
		crossR220 = -this._relativeAnchor2Y;
		crossR221 = this._relativeAnchor2X;
		crossR222 = 0;
		crossR100 = -crossR100;
		crossR101 = -crossR101;
		crossR102 = -crossR102;
		crossR110 = -crossR110;
		crossR111 = -crossR111;
		crossR112 = -crossR112;
		crossR120 = -crossR120;
		crossR121 = -crossR121;
		crossR122 = -crossR122;
		crossR200 = -crossR200;
		crossR201 = -crossR201;
		crossR202 = -crossR202;
		crossR210 = -crossR210;
		crossR211 = -crossR211;
		crossR212 = -crossR212;
		crossR220 = -crossR220;
		crossR221 = -crossR221;
		crossR222 = -crossR222;
		var motorMassX = this.computeEffectiveInertiaMoment(this._axisXX,this._axisXY,this._axisXZ);
		var motorMassZ = this.computeEffectiveInertiaMoment(this._axisZX,this._axisZY,this._axisZZ);
		var impulse = this._impulses[0];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		var row1 = row;
		row1.rhs = linRhsX;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		var j = row1.jacobian;
		j.lin1X = 1;
		j.lin1Y = 0;
		j.lin1Z = 0;
		j.lin2X = 1;
		j.lin2Y = 0;
		j.lin2Z = 0;
		j.ang1X = crossR100;
		j.ang1Y = crossR101;
		j.ang1Z = crossR102;
		j.ang2X = crossR200;
		j.ang2Y = crossR201;
		j.ang2Z = crossR202;
		var impulse = this._impulses[1];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsY;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 1;
		j.lin1Z = 0;
		j.lin2X = 0;
		j.lin2Y = 1;
		j.lin2Z = 0;
		j.ang1X = crossR110;
		j.ang1Y = crossR111;
		j.ang1Z = crossR112;
		j.ang2X = crossR210;
		j.ang2Y = crossR211;
		j.ang2Z = crossR212;
		var impulse = this._impulses[2];
		var row = info.rows[info.numRows++];
		var _this = row.jacobian;
		_this.lin1X = 0;
		_this.lin1Y = 0;
		_this.lin1Z = 0;
		_this.lin2X = 0;
		_this.lin2Y = 0;
		_this.lin2Z = 0;
		_this.ang1X = 0;
		_this.ang1Y = 0;
		_this.ang1Z = 0;
		_this.ang2X = 0;
		_this.ang2Y = 0;
		_this.ang2Z = 0;
		row.rhs = 0;
		row.cfm = 0;
		row.minImpulse = 0;
		row.maxImpulse = 0;
		row.motorSpeed = 0;
		row.motorMaxImpulse = 0;
		row.impulse = null;
		row.impulse = impulse;
		row1 = row;
		row1.rhs = linRhsZ;
		row1.cfm = 0;
		row1.minImpulse = -1e65536;
		row1.maxImpulse = 1e65536;
		j = row1.jacobian;
		j.lin1X = 0;
		j.lin1Y = 0;
		j.lin1Z = 1;
		j.lin2X = 0;
		j.lin2Y = 0;
		j.lin2Z = 1;
		j.ang1X = crossR120;
		j.ang1Y = crossR121;
		j.ang1Z = crossR122;
		j.ang2X = crossR220;
		j.ang2Y = crossR221;
		j.ang2Z = crossR222;
		if(!this.xSingular && (this._sd1.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[3];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			this.setSolverInfoRowAngular(row1,this._angleX,this._lm1,motorMassX,this._sd1,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._axisXX;
			j.ang1Y = this._axisXY;
			j.ang1Z = this._axisXZ;
			j.ang2X = this._axisXX;
			j.ang2Y = this._axisXY;
			j.ang2Z = this._axisXZ;
		}
		if(!this.ySingular) {
			var impulse = this._impulses[4];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			row1.rhs = angRhsY;
			row1.cfm = 0;
			row1.minImpulse = -1e65536;
			row1.maxImpulse = 1e65536;
			j = row1.jacobian;
			j.ang1X = this._axisYX;
			j.ang1Y = this._axisYY;
			j.ang1Z = this._axisYZ;
			j.ang2X = this._axisYX;
			j.ang2Y = this._axisYY;
			j.ang2Z = this._axisYZ;
		}
		if(!this.zSingular && (this._sd2.frequency <= 0 || !isPositionPart)) {
			var impulse = this._impulses[5];
			var row = info.rows[info.numRows++];
			var _this = row.jacobian;
			_this.lin1X = 0;
			_this.lin1Y = 0;
			_this.lin1Z = 0;
			_this.lin2X = 0;
			_this.lin2Y = 0;
			_this.lin2Z = 0;
			_this.ang1X = 0;
			_this.ang1Y = 0;
			_this.ang1Z = 0;
			_this.ang2X = 0;
			_this.ang2Y = 0;
			_this.ang2Z = 0;
			row.rhs = 0;
			row.cfm = 0;
			row.minImpulse = 0;
			row.maxImpulse = 0;
			row.motorSpeed = 0;
			row.motorMaxImpulse = 0;
			row.impulse = null;
			row.impulse = impulse;
			row1 = row;
			this.setSolverInfoRowAngular(row1,this._angleZ,this._lm2,motorMassZ,this._sd2,timeStep,isPositionPart);
			j = row1.jacobian;
			j.ang1X = this._axisZX;
			j.ang1Y = this._axisZY;
			j.ang1Z = this._axisZZ;
			j.ang2X = this._axisZX;
			j.ang2Y = this._axisZY;
			j.ang2Z = this._axisZZ;
		}
	}
	,_syncAnchors: function() {
		oimo_dynamics_constraint_joint_Joint.prototype._syncAnchors.call(this);
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angleAxisX;
		var angleAxisXX;
		var angleAxisXY;
		var angleAxisXZ;
		var angleAxisY;
		var angleAxisYX;
		var angleAxisYY;
		var angleAxisYZ;
		var angleAxisZ;
		var angleAxisZX;
		var angleAxisZY;
		var angleAxisZZ;
		angleAxisXX = this._basisX1X;
		angleAxisXY = this._basisX1Y;
		angleAxisXZ = this._basisX1Z;
		angleAxisZX = this._basisZ2X;
		angleAxisZY = this._basisZ2Y;
		angleAxisZZ = this._basisZ2Z;
		angleAxisYX = angleAxisZY * angleAxisXZ - angleAxisZZ * angleAxisXY;
		angleAxisYY = angleAxisZZ * angleAxisXX - angleAxisZX * angleAxisXZ;
		angleAxisYZ = angleAxisZX * angleAxisXY - angleAxisZY * angleAxisXX;
		this._axisXX = angleAxisYY * angleAxisZZ - angleAxisYZ * angleAxisZY;
		this._axisXY = angleAxisYZ * angleAxisZX - angleAxisYX * angleAxisZZ;
		this._axisXZ = angleAxisYX * angleAxisZY - angleAxisYY * angleAxisZX;
		this._axisYX = angleAxisYX;
		this._axisYY = angleAxisYY;
		this._axisYZ = angleAxisYZ;
		this._axisZX = angleAxisXY * angleAxisYZ - angleAxisXZ * angleAxisYY;
		this._axisZY = angleAxisXZ * angleAxisYX - angleAxisXX * angleAxisYZ;
		this._axisZZ = angleAxisXX * angleAxisYY - angleAxisXY * angleAxisYX;
		var l = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisXX *= l;
		this._axisXY *= l;
		this._axisXZ *= l;
		var l = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisYX *= l;
		this._axisYY *= l;
		this._axisYZ *= l;
		var l = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ;
		if(l > 0) {
			l = 1 / Math.sqrt(l);
		}
		this._axisZX *= l;
		this._axisZY *= l;
		this._axisZZ *= l;
		this.xSingular = this._axisXX * this._axisXX + this._axisXY * this._axisXY + this._axisXZ * this._axisXZ == 0;
		this.ySingular = this._axisYX * this._axisYX + this._axisYY * this._axisYY + this._axisYZ * this._axisYZ == 0;
		this.zSingular = this._axisZX * this._axisZX + this._axisZY * this._axisZY + this._axisZZ * this._axisZZ == 0;
		var rot1;
		var rot100;
		var rot101;
		var rot102;
		var rot110;
		var rot111;
		var rot112;
		var rot120;
		var rot121;
		var rot122;
		var rot2;
		var rot200;
		var rot201;
		var rot202;
		var rot210;
		var rot211;
		var rot212;
		var rot220;
		var rot221;
		var rot222;
		rot100 = this._basisX1X;
		rot101 = this._basisY1X;
		rot102 = this._basisZ1X;
		rot110 = this._basisX1Y;
		rot111 = this._basisY1Y;
		rot112 = this._basisZ1Y;
		rot120 = this._basisX1Z;
		rot121 = this._basisY1Z;
		rot122 = this._basisZ1Z;
		rot200 = this._basisX2X;
		rot201 = this._basisY2X;
		rot202 = this._basisZ2X;
		rot210 = this._basisX2Y;
		rot211 = this._basisY2Y;
		rot212 = this._basisZ2Y;
		rot220 = this._basisX2Z;
		rot221 = this._basisY2Z;
		rot222 = this._basisZ2Z;
		var relRot;
		var relRot00;
		var relRot01;
		var relRot02;
		var relRot10;
		var relRot11;
		var relRot12;
		var relRot20;
		var relRot21;
		var relRot22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot100 * rot200 + rot110 * rot210 + rot120 * rot220;
		__tmp__01 = rot100 * rot201 + rot110 * rot211 + rot120 * rot221;
		__tmp__02 = rot100 * rot202 + rot110 * rot212 + rot120 * rot222;
		__tmp__10 = rot101 * rot200 + rot111 * rot210 + rot121 * rot220;
		__tmp__11 = rot101 * rot201 + rot111 * rot211 + rot121 * rot221;
		__tmp__12 = rot101 * rot202 + rot111 * rot212 + rot121 * rot222;
		__tmp__20 = rot102 * rot200 + rot112 * rot210 + rot122 * rot220;
		__tmp__21 = rot102 * rot201 + rot112 * rot211 + rot122 * rot221;
		__tmp__22 = rot102 * rot202 + rot112 * rot212 + rot122 * rot222;
		relRot00 = __tmp__00;
		relRot01 = __tmp__01;
		relRot02 = __tmp__02;
		relRot10 = __tmp__10;
		relRot11 = __tmp__11;
		relRot12 = __tmp__12;
		relRot20 = __tmp__20;
		relRot21 = __tmp__21;
		relRot22 = __tmp__22;
		var angles;
		var anglesX;
		var anglesY;
		var anglesZ;
		var sy = relRot02;
		if(sy <= -1) {
			var xSubZ = Math.atan2(relRot21,relRot11);
			anglesX = xSubZ * 0.5;
			anglesY = -1.570796326794895;
			anglesZ = -xSubZ * 0.5;
		} else if(sy >= 1) {
			var xAddZ = Math.atan2(relRot21,relRot11);
			anglesX = xAddZ * 0.5;
			anglesY = 1.570796326794895;
			anglesZ = xAddZ * 0.5;
		} else {
			var y = Math.asin(sy);
			var x = Math.atan2(-relRot12,relRot22);
			var z = Math.atan2(-relRot01,relRot00);
			anglesX = x;
			anglesY = y;
			anglesZ = z;
		}
		this._angleX = anglesX;
		this._angleY = anglesY;
		this._angleZ = anglesZ;
		this.linearErrorX = this._anchor2X - this._anchor1X;
		this.linearErrorY = this._anchor2Y - this._anchor1Y;
		this.linearErrorZ = this._anchor2Z - this._anchor1Z;
	}
	,_getVelocitySolverInfo: function(timeStep,info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getVelocitySolverInfo.call(this,timeStep,info);
		this.getInfo(info,timeStep,false);
	}
	,_getPositionSolverInfo: function(info) {
		oimo_dynamics_constraint_joint_Joint.prototype._getPositionSolverInfo.call(this,info);
		this.getInfo(info,null,true);
	}
	,getAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisX1X;
		v1.y = this._basisX1Y;
		v1.z = this._basisX1Z;
		return v;
	}
	,getAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._basisZ2X;
		v1.y = this._basisZ2Y;
		v1.z = this._basisZ2Z;
		return v;
	}
	,getAxis1To: function(axis) {
		var v = axis;
		v.x = this._basisX1X;
		v.y = this._basisX1Y;
		v.z = this._basisX1Z;
	}
	,getAxis2To: function(axis) {
		var v = axis;
		v.x = this._basisZ2X;
		v.y = this._basisZ2Y;
		v.z = this._basisZ2Z;
	}
	,getLocalAxis1: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisX1X;
		v1.y = this._localBasisX1Y;
		v1.z = this._localBasisX1Z;
		return v;
	}
	,getLocalAxis2: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._localBasisZ2X;
		v1.y = this._localBasisZ2Y;
		v1.z = this._localBasisZ2Z;
		return v;
	}
	,getLocalAxis1To: function(axis) {
		var v = axis;
		v.x = this._localBasisX1X;
		v.y = this._localBasisX1Y;
		v.z = this._localBasisX1Z;
	}
	,getLocalAxis2To: function(axis) {
		var v = axis;
		v.x = this._localBasisZ2X;
		v.y = this._localBasisZ2Y;
		v.z = this._localBasisZ2Z;
	}
	,getSpringDamper1: function() {
		return this._sd1;
	}
	,getSpringDamper2: function() {
		return this._sd2;
	}
	,getLimitMotor1: function() {
		return this._lm1;
	}
	,getLimitMotor2: function() {
		return this._lm2;
	}
	,getAngle1: function() {
		return this._angleX;
	}
	,getAngle2: function() {
		return this._angleZ;
	}
	,__class__: oimo_dynamics_constraint_joint_UniversalJoint
});
var oimo_dynamics_constraint_joint_UniversalJointConfig = function() {
	oimo_dynamics_constraint_joint_JointConfig.call(this);
	this.localAxis1 = new oimo_common_Vec3(1,0,0);
	this.localAxis2 = new oimo_common_Vec3(1,0,0);
	this.springDamper1 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.springDamper2 = new oimo_dynamics_constraint_joint_SpringDamper();
	this.limitMotor1 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
	this.limitMotor2 = new oimo_dynamics_constraint_joint_RotationalLimitMotor();
};
oimo_dynamics_constraint_joint_UniversalJointConfig.__name__ = "oimo.dynamics.constraint.joint.UniversalJointConfig";
oimo_dynamics_constraint_joint_UniversalJointConfig.__super__ = oimo_dynamics_constraint_joint_JointConfig;
oimo_dynamics_constraint_joint_UniversalJointConfig.prototype = $extend(oimo_dynamics_constraint_joint_JointConfig.prototype,{
	init: function(rigidBody1,rigidBody2,worldAnchor,worldAxis1,worldAxis2) {
		this._init(rigidBody1,rigidBody2,worldAnchor);
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis1;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody1._transform._rotation00 * vX + rigidBody1._transform._rotation10 * vY + rigidBody1._transform._rotation20 * vZ;
		__tmp__Y = rigidBody1._transform._rotation01 * vX + rigidBody1._transform._rotation11 * vY + rigidBody1._transform._rotation21 * vZ;
		__tmp__Z = rigidBody1._transform._rotation02 * vX + rigidBody1._transform._rotation12 * vY + rigidBody1._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis1;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldAxis2;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = rigidBody2._transform._rotation00 * vX + rigidBody2._transform._rotation10 * vY + rigidBody2._transform._rotation20 * vZ;
		__tmp__Y = rigidBody2._transform._rotation01 * vX + rigidBody2._transform._rotation11 * vY + rigidBody2._transform._rotation21 * vZ;
		__tmp__Z = rigidBody2._transform._rotation02 * vX + rigidBody2._transform._rotation12 * vY + rigidBody2._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = this.localAxis2;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return this;
	}
	,__class__: oimo_dynamics_constraint_joint_UniversalJointConfig
});
var oimo_dynamics_constraint_solver_ConstraintSolverType = function() { };
oimo_dynamics_constraint_solver_ConstraintSolverType.__name__ = "oimo.dynamics.constraint.solver.ConstraintSolverType";
var oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow = function() {
	this.invMLinN1X = 0;
	this.invMLinN1Y = 0;
	this.invMLinN1Z = 0;
	this.invMLinN2X = 0;
	this.invMLinN2Y = 0;
	this.invMLinN2Z = 0;
	this.invMAngN1X = 0;
	this.invMAngN1Y = 0;
	this.invMAngN1Z = 0;
	this.invMAngN2X = 0;
	this.invMAngN2Y = 0;
	this.invMAngN2Z = 0;
	this.invMLinT1X = 0;
	this.invMLinT1Y = 0;
	this.invMLinT1Z = 0;
	this.invMLinT2X = 0;
	this.invMLinT2Y = 0;
	this.invMLinT2Z = 0;
	this.invMAngT1X = 0;
	this.invMAngT1Y = 0;
	this.invMAngT1Z = 0;
	this.invMAngT2X = 0;
	this.invMAngT2Y = 0;
	this.invMAngT2Z = 0;
	this.invMLinB1X = 0;
	this.invMLinB1Y = 0;
	this.invMLinB1Z = 0;
	this.invMLinB2X = 0;
	this.invMLinB2Y = 0;
	this.invMLinB2Z = 0;
	this.invMAngB1X = 0;
	this.invMAngB1Y = 0;
	this.invMAngB1Z = 0;
	this.invMAngB2X = 0;
	this.invMAngB2Y = 0;
	this.invMAngB2Z = 0;
	this.massN = 0;
	this.massTB00 = 0;
	this.massTB01 = 0;
	this.massTB10 = 0;
	this.massTB11 = 0;
};
oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow.__name__ = "oimo.dynamics.constraint.solver.common.ContactSolverMassDataRow";
oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow.prototype = {
	__class__: oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow
};
var oimo_dynamics_constraint_solver_common_JointSolverMassDataRow = function() {
	this.invMLin1X = 0;
	this.invMLin1Y = 0;
	this.invMLin1Z = 0;
	this.invMLin2X = 0;
	this.invMLin2Y = 0;
	this.invMLin2Z = 0;
	this.invMAng1X = 0;
	this.invMAng1Y = 0;
	this.invMAng1Z = 0;
	this.invMAng2X = 0;
	this.invMAng2Y = 0;
	this.invMAng2Z = 0;
	this.mass = 0;
	this.massWithoutCfm = 0;
};
oimo_dynamics_constraint_solver_common_JointSolverMassDataRow.__name__ = "oimo.dynamics.constraint.solver.common.JointSolverMassDataRow";
oimo_dynamics_constraint_solver_common_JointSolverMassDataRow.prototype = {
	__class__: oimo_dynamics_constraint_solver_common_JointSolverMassDataRow
};
var oimo_dynamics_constraint_solver_direct_Boundary = function(maxRows) {
	var this1 = new Array(maxRows);
	this.iBounded = this1;
	var this1 = new Array(maxRows);
	this.iUnbounded = this1;
	var this1 = new Array(maxRows);
	this.signs = this1;
	var this1 = new Array(maxRows);
	this.b = this1;
	this.numBounded = 0;
	this.numUnbounded = 0;
	this.matrixId = 0;
};
oimo_dynamics_constraint_solver_direct_Boundary.__name__ = "oimo.dynamics.constraint.solver.direct.Boundary";
oimo_dynamics_constraint_solver_direct_Boundary.prototype = {
	init: function(buildInfo) {
		this.numBounded = buildInfo.numBounded;
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			this.iBounded[i] = buildInfo.iBounded[i];
			this.signs[i] = buildInfo.signs[i];
		}
		this.numUnbounded = buildInfo.numUnbounded;
		this.matrixId = 0;
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = buildInfo.iUnbounded[i];
			this.iUnbounded[i] = idx;
			this.matrixId |= 1 << idx;
		}
	}
	,computeImpulses: function(info,mass,relVels,impulses,dImpulses,impulseFactor,noCheck) {
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iUnbounded[i];
			var row = info.rows[idx];
			var relVel = relVels[idx];
			this.b[idx] = row.rhs * impulseFactor - relVel - row.cfm * impulses[idx];
		}
		var invMassWithoutCfm = mass._invMassWithoutCfm;
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iBounded[i];
			var sign = this.signs[i];
			var row = info.rows[idx];
			var oldImpulse = impulses[idx];
			var impulse = sign < 0 ? row.minImpulse : sign > 0 ? row.maxImpulse : 0;
			var dImpulse = impulse - oldImpulse;
			dImpulses[idx] = dImpulse;
			if(dImpulse != 0) {
				var _g2 = 0;
				var _g3 = this.numUnbounded;
				while(_g2 < _g3) {
					var j = _g2++;
					var idx2 = this.iUnbounded[j];
					var dRelVel = invMassWithoutCfm[idx][idx2] * dImpulse;
					this.b[idx2] -= dRelVel;
				}
			}
		}
		var indices = this.iUnbounded;
		var n = this.numUnbounded;
		var id = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			id |= 1 << indices[i];
		}
		var massMatrix;
		if(mass._cacheComputed[id]) {
			massMatrix = mass._cachedSubmatrices[id];
		} else {
			mass.computeSubmatrix(id,indices,n);
			mass._cacheComputed[id] = true;
			massMatrix = mass._cachedSubmatrices[id];
		}
		var ok = true;
		var _g = 0;
		var _g1 = this.numUnbounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iUnbounded[i];
			var row = info.rows[idx];
			var oldImpulse = impulses[idx];
			var impulse = oldImpulse;
			var _g2 = 0;
			var _g3 = this.numUnbounded;
			while(_g2 < _g3) {
				var j = _g2++;
				var idx2 = this.iUnbounded[j];
				impulse += this.b[idx2] * massMatrix[i][j];
			}
			if(impulse < row.minImpulse - oimo_common_Setting.directMlcpSolverEps || impulse > row.maxImpulse + oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
			dImpulses[idx] = impulse - oldImpulse;
		}
		if(noCheck) {
			return true;
		}
		if(!ok) {
			return false;
		}
		var _g = 0;
		var _g1 = this.numBounded;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.iBounded[i];
			var row = info.rows[idx];
			var sign = this.signs[i];
			var error = 0;
			var newImpulse = impulses[idx] + dImpulses[idx];
			var relVel = relVels[idx];
			var _g2 = 0;
			var _g3 = info.numRows;
			while(_g2 < _g3) {
				var j = _g2++;
				relVel += invMassWithoutCfm[idx][j] * dImpulses[j];
			}
			error = row.rhs * impulseFactor - relVel - row.cfm * newImpulse;
			if(sign < 0 && error > oimo_common_Setting.directMlcpSolverEps || sign > 0 && error < -oimo_common_Setting.directMlcpSolverEps) {
				ok = false;
				break;
			}
		}
		return ok;
	}
	,__class__: oimo_dynamics_constraint_solver_direct_Boundary
};
var oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo = function(size) {
	this.size = size;
	this.numBounded = 0;
	var this1 = new Array(size);
	this.iBounded = this1;
	var this1 = new Array(size);
	this.signs = this1;
	this.numUnbounded = 0;
	var this1 = new Array(size);
	this.iUnbounded = this1;
};
oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo.__name__ = "oimo.dynamics.constraint.solver.direct.BoundaryBuildInfo";
oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo.prototype = {
	__class__: oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo
};
var oimo_dynamics_constraint_solver_direct_BoundaryBuilder = function(maxRows) {
	this.maxRows = maxRows;
	this.numBoundaries = 0;
	var this1 = new Array(1 << maxRows);
	this.boundaries = this1;
	this.bbInfo = new oimo_dynamics_constraint_solver_direct_BoundaryBuildInfo(maxRows);
};
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.__name__ = "oimo.dynamics.constraint.solver.direct.BoundaryBuilder";
oimo_dynamics_constraint_solver_direct_BoundaryBuilder.prototype = {
	buildBoundariesRecursive: function(info,i) {
		if(i == info.numRows) {
			if(this.boundaries[this.numBoundaries] == null) {
				this.boundaries[this.numBoundaries] = new oimo_dynamics_constraint_solver_direct_Boundary(this.maxRows);
			}
			this.boundaries[this.numBoundaries++].init(this.bbInfo);
			return;
		}
		var row = info.rows[i];
		var lowerLimitEnabled = row.minImpulse > -1e65536;
		var upperLimitEnabled = row.maxImpulse < 1e65536;
		var disabled = row.minImpulse == 0 && row.maxImpulse == 0;
		if(disabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = 0;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
			return;
		}
		var _this = this.bbInfo;
		_this.iUnbounded[_this.numUnbounded] = i;
		_this.numUnbounded++;
		this.buildBoundariesRecursive(info,i + 1);
		this.bbInfo.numUnbounded--;
		if(lowerLimitEnabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = -1;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
		if(upperLimitEnabled) {
			var _this = this.bbInfo;
			_this.iBounded[_this.numBounded] = i;
			_this.signs[_this.numBounded] = 1;
			_this.numBounded++;
			this.buildBoundariesRecursive(info,i + 1);
			this.bbInfo.numBounded--;
		}
	}
	,buildBoundaries: function(info) {
		this.numBoundaries = 0;
		var _this = this.bbInfo;
		_this.numBounded = 0;
		_this.numUnbounded = 0;
		this.buildBoundariesRecursive(info,0);
	}
	,__class__: oimo_dynamics_constraint_solver_direct_BoundaryBuilder
};
var oimo_dynamics_constraint_solver_direct_BoundarySelector = function(n) {
	this.n = n;
	var this1 = new Array(n);
	this.indices = this1;
	var this1 = new Array(n);
	this.tmpIndices = this1;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		this.indices[i] = i;
	}
};
oimo_dynamics_constraint_solver_direct_BoundarySelector.__name__ = "oimo.dynamics.constraint.solver.direct.BoundarySelector";
oimo_dynamics_constraint_solver_direct_BoundarySelector.prototype = {
	getIndex: function(i) {
		return this.indices[i];
	}
	,select: function(index) {
		var i = 0;
		while(this.indices[i] != index) ++i;
		while(i > 0) {
			var tmp = this.indices[i];
			this.indices[i] = this.indices[i - 1];
			this.indices[i - 1] = tmp;
			--i;
		}
	}
	,setSize: function(size) {
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = this.n;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.indices[i];
			if(idx < size) {
				this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = this.indices;
		this.indices = this.tmpIndices;
		this.tmpIndices = tmp;
	}
	,__class__: oimo_dynamics_constraint_solver_direct_BoundarySelector
};
var oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	var maxRows = oimo_common_Setting.maxJacobianRows;
	this.massMatrix = new oimo_dynamics_constraint_solver_direct_MassMatrix(maxRows);
	this.boundaryBuilder = new oimo_dynamics_constraint_solver_direct_BoundaryBuilder(maxRows);
	var this1 = new Array(maxRows);
	this.massData = this1;
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) {
		var i = _g++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
	}
	var numMaxBoundaries = this.boundaryBuilder.boundaries.length;
	this.velBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	this.posBoundarySelector = new oimo_dynamics_constraint_solver_direct_BoundarySelector(numMaxBoundaries);
	var this1 = new Array(maxRows);
	this.relVels = this1;
	var this1 = new Array(maxRows);
	this.impulses = this1;
	var this1 = new Array(maxRows);
	this.dImpulses = this1;
	var this1 = new Array(maxRows);
	this.dTotalImpulses = this1;
	var _g = 0;
	var _g1 = maxRows;
	while(_g < _g1) {
		var i = _g++;
		this.relVels[i] = 0;
		this.impulses[i] = 0;
		this.dImpulses[i] = 0;
		this.dTotalImpulses[i] = 0;
	}
};
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__name__ = "oimo.dynamics.constraint.solver.direct.DirectJointConstraintSolver";
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.velBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var i = _g++;
			var idx = _this.indices[i];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
	}
	,warmStart: function(timeStep) {
		var factor = this.joint._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g = 0;
			var _g1 = this.info.numRows;
			while(_g < _g1) {
				var i = _g++;
				var row = this.info.rows[i];
				var _this = row.impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var impulse = imp.impulse * factor;
			if(impulse < row.minImpulse) {
				impulse = row.minImpulse;
			} else if(impulse > row.maxImpulse) {
				impulse = row.maxImpulse;
			}
			imp.impulse = impulse;
			if(row.motorMaxImpulse > 0) {
				var impulseM = imp.impulseM * factor;
				var max = row.motorMaxImpulse;
				if(impulseM < -max) {
					impulseM = -max;
				} else if(impulseM > max) {
					impulseM = max;
				}
				imp.impulseM = impulseM;
			} else {
				imp.impulseM = 0;
			}
			this.dImpulses[i] = imp.impulse + imp.impulseM;
		}
		var impulses = this.dImpulses;
		var linearSet = false;
		var angularSet = false;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var j = row.jacobian;
			var md = this.massData[i];
			var imp = impulses[i];
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * imp;
				lv1Y += md.invMLin1Y * imp;
				lv1Z += md.invMLin1Z * imp;
				lv2X += md.invMLin2X * -imp;
				lv2Y += md.invMLin2Y * -imp;
				lv2Z += md.invMLin2Z * -imp;
				linearSet = true;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * imp;
				av1Y += md.invMAng1Y * imp;
				av1Z += md.invMAng1Z * imp;
				av2X += md.invMAng2X * -imp;
				av2Y += md.invMAng2Y * -imp;
				av2Z += md.invMAng2Z * -imp;
				angularSet = true;
			}
		}
		if(linearSet) {
			this._b1._velX = lv1X;
			this._b1._velY = lv1Y;
			this._b1._velZ = lv1Z;
			this._b2._velX = lv2X;
			this._b2._velY = lv2Y;
			this._b2._velZ = lv2Z;
		}
		if(angularSet) {
			this._b1._angVelX = av1X;
			this._b1._angVelY = av1Y;
			this._b1._angVelZ = av1Z;
			this._b2._angVelX = av2X;
			this._b2._angVelY = av2Y;
			this._b2._angVelZ = av2Z;
		}
	}
	,solveVelocity: function() {
		var numRows = this.info.numRows;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = imp.impulse;
			this.dTotalImpulses[i] = 0;
		}
		var invMass = this.massMatrix._invMassWithoutCfm;
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var md = this.massData[i];
			if(row.motorMaxImpulse > 0) {
				var oldImpulseM = imp.impulseM;
				var impulseM = oldImpulseM + md.massWithoutCfm * (-row.motorSpeed - this.relVels[i]);
				var maxImpulseM = row.motorMaxImpulse;
				if(impulseM < -maxImpulseM) {
					impulseM = -maxImpulseM;
				} else if(impulseM > maxImpulseM) {
					impulseM = maxImpulseM;
				}
				imp.impulseM = impulseM;
				var dImpulseM = impulseM - oldImpulseM;
				this.dTotalImpulses[i] = dImpulseM;
				var _g2 = 0;
				var _g3 = numRows;
				while(_g2 < _g3) {
					var j = _g2++;
					this.relVels[j] += dImpulseM * invMass[i][j];
				}
			}
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.velBoundarySelector.indices[i];
			var b = this.boundaryBuilder.boundaries[idx];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,1,false)) {
				var _g2 = 0;
				var _g3 = numRows;
				while(_g2 < _g3) {
					var j = _g2++;
					var row = this.info.rows[j];
					var imp = row.impulse;
					var dimp = this.dImpulses[j];
					imp.impulse += dimp;
					this.dTotalImpulses[j] += dimp;
				}
				var impulses = this.dTotalImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1;
				var av1X;
				var av1Y;
				var av1Z;
				var av2;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = this._b1._velX;
				lv1Y = this._b1._velY;
				lv1Z = this._b1._velZ;
				lv2X = this._b2._velX;
				lv2Y = this._b2._velY;
				lv2Z = this._b2._velZ;
				av1X = this._b1._angVelX;
				av1Y = this._b1._angVelY;
				av1Z = this._b1._angVelZ;
				av2X = this._b2._angVelX;
				av2Y = this._b2._angVelY;
				av2Z = this._b2._angVelZ;
				var _g4 = 0;
				var _g5 = this.info.numRows;
				while(_g4 < _g5) {
					var i1 = _g4++;
					var row1 = this.info.rows[i1];
					var j1 = row1.jacobian;
					var md = this.massData[i1];
					var imp1 = impulses[i1];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp1;
						lv1Y += md.invMLin1Y * imp1;
						lv1Z += md.invMLin1Z * imp1;
						lv2X += md.invMLin2X * -imp1;
						lv2Y += md.invMLin2Y * -imp1;
						lv2Z += md.invMLin2Z * -imp1;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp1;
						av1Y += md.invMAng1Y * imp1;
						av1Z += md.invMAng1Z * imp1;
						av2X += md.invMAng2X * -imp1;
						av2Y += md.invMAng2Y * -imp1;
						av2Z += md.invMAng2Z * -imp1;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._velX = lv1X;
					this._b1._velY = lv1Y;
					this._b1._velZ = lv1Z;
					this._b2._velX = lv2X;
					this._b2._velY = lv2Y;
					this._b2._velZ = lv2Z;
				}
				if(angularSet) {
					this._b1._angVelX = av1X;
					this._b1._angVelY = av1Y;
					this._b1._angVelZ = av1Z;
					this._b2._angVelX = av2X;
					this._b2._angVelY = av2Y;
					this._b2._angVelZ = av2Z;
				}
				var _this = this.velBoundarySelector;
				var i2 = 0;
				while(_this.indices[i2] != idx) ++i2;
				while(i2 > 0) {
					var tmp = _this.indices[i2];
					_this.indices[i2] = _this.indices[i2 - 1];
					_this.indices[i2 - 1] = tmp;
					--i2;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			haxe_Log.trace("could not find solution. (velocity)",{ fileName : "oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx", lineNumber : 335, className : "oimo.dynamics.constraint.solver.direct.DirectJointConstraintSolver", methodName : "solveVelocity"});
			return;
		}
	}
	,postSolveVelocity: function(timeStep) {
		var lin;
		var linX;
		var linY;
		var linZ;
		var ang;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var i = _g++;
			var idx = _this.indices[i];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			this.info.rows[i].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var numRows = this.info.numRows;
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var relVel = 0;
			relVel += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			relVel -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			relVel += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			relVel -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			this.relVels[i] = relVel;
			this.impulses[i] = imp.impulseP;
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.posBoundarySelector.indices[i];
			var b = this.boundaryBuilder.boundaries[idx];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionSplitImpulseBaumgarte,false)) {
				var _g2 = 0;
				var _g3 = numRows;
				while(_g2 < _g3) {
					var j = _g2++;
					var row = this.info.rows[j];
					var imp = row.impulse;
					var dimp = this.dImpulses[j];
					imp.impulseP += dimp;
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1;
				var av1X;
				var av1Y;
				var av1Z;
				var av2;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = this._b1._pseudoVelX;
				lv1Y = this._b1._pseudoVelY;
				lv1Z = this._b1._pseudoVelZ;
				lv2X = this._b2._pseudoVelX;
				lv2Y = this._b2._pseudoVelY;
				lv2Z = this._b2._pseudoVelZ;
				av1X = this._b1._angPseudoVelX;
				av1Y = this._b1._angPseudoVelY;
				av1Z = this._b1._angPseudoVelZ;
				av2X = this._b2._angPseudoVelX;
				av2Y = this._b2._angPseudoVelY;
				av2Z = this._b2._angPseudoVelZ;
				var _g4 = 0;
				var _g5 = this.info.numRows;
				while(_g4 < _g5) {
					var i1 = _g4++;
					var row1 = this.info.rows[i1];
					var j1 = row1.jacobian;
					var md = this.massData[i1];
					var imp1 = impulses[i1];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp1;
						lv1Y += md.invMLin1Y * imp1;
						lv1Z += md.invMLin1Z * imp1;
						lv2X += md.invMLin2X * -imp1;
						lv2Y += md.invMLin2Y * -imp1;
						lv2Z += md.invMLin2Z * -imp1;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp1;
						av1Y += md.invMAng1Y * imp1;
						av1Z += md.invMAng1Z * imp1;
						av2X += md.invMAng2X * -imp1;
						av2Y += md.invMAng2Y * -imp1;
						av2Z += md.invMAng2Z * -imp1;
						angularSet = true;
					}
				}
				if(linearSet) {
					this._b1._pseudoVelX = lv1X;
					this._b1._pseudoVelY = lv1Y;
					this._b1._pseudoVelZ = lv1Z;
					this._b2._pseudoVelX = lv2X;
					this._b2._pseudoVelY = lv2Y;
					this._b2._pseudoVelZ = lv2Z;
				}
				if(angularSet) {
					this._b1._angPseudoVelX = av1X;
					this._b1._angPseudoVelY = av1Y;
					this._b1._angPseudoVelZ = av1Z;
					this._b2._angPseudoVelX = av2X;
					this._b2._angPseudoVelY = av2Y;
					this._b2._angPseudoVelZ = av2Z;
				}
				var _this = this.posBoundarySelector;
				var i2 = 0;
				while(_this.indices[i2] != idx) ++i2;
				while(i2 > 0) {
					var tmp = _this.indices[i2];
					_this.indices[i2] = _this.indices[i2 - 1];
					_this.indices[i2 - 1] = tmp;
					--i2;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			haxe_Log.trace("could not find solution. (split impulse)",{ fileName : "oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx", lineNumber : 450, className : "oimo.dynamics.constraint.solver.direct.DirectJointConstraintSolver", methodName : "solvePositionSplitImpulse"});
			return;
		}
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		this.massMatrix.computeInvMass(this.info,this.massData);
		var _this = this.boundaryBuilder;
		_this.numBoundaries = 0;
		var _this1 = _this.bbInfo;
		_this1.numBounded = 0;
		_this1.numUnbounded = 0;
		_this.buildBoundariesRecursive(this.info,0);
		var _this = this.posBoundarySelector;
		var size = this.boundaryBuilder.numBoundaries;
		var numSmaller = 0;
		var numGreater = 0;
		var _g = 0;
		var _g1 = _this.n;
		while(_g < _g1) {
			var i = _g++;
			var idx = _this.indices[i];
			if(idx < size) {
				_this.tmpIndices[numSmaller] = idx;
				++numSmaller;
			} else {
				_this.tmpIndices[size + numGreater] = idx;
				++numGreater;
			}
		}
		var tmp = _this.indices;
		_this.indices = _this.tmpIndices;
		_this.tmpIndices = tmp;
		var numRows = this.info.numRows;
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			this.relVels[i] = 0;
			this.impulses[i] = imp.impulseP;
		}
		var solved = false;
		var _g = 0;
		var _g1 = this.boundaryBuilder.numBoundaries;
		while(_g < _g1) {
			var i = _g++;
			var idx = this.posBoundarySelector.indices[i];
			var b = this.boundaryBuilder.boundaries[idx];
			if(b.computeImpulses(this.info,this.massMatrix,this.relVels,this.impulses,this.dImpulses,oimo_common_Setting.positionNgsBaumgarte,false)) {
				var _g2 = 0;
				var _g3 = numRows;
				while(_g2 < _g3) {
					var j = _g2++;
					var row = this.info.rows[j];
					var imp = row.impulse;
					var dimp = this.dImpulses[j];
					imp.impulseP += dimp;
				}
				var impulses = this.dImpulses;
				var linearSet = false;
				var angularSet = false;
				var lv1;
				var lv1X;
				var lv1Y;
				var lv1Z;
				var lv2;
				var lv2X;
				var lv2Y;
				var lv2Z;
				var av1;
				var av1X;
				var av1Y;
				var av1Z;
				var av2;
				var av2X;
				var av2Y;
				var av2Z;
				lv1X = 0;
				lv1Y = 0;
				lv1Z = 0;
				lv2X = 0;
				lv2Y = 0;
				lv2Z = 0;
				av1X = 0;
				av1Y = 0;
				av1Z = 0;
				av2X = 0;
				av2Y = 0;
				av2Z = 0;
				var _g4 = 0;
				var _g5 = this.info.numRows;
				while(_g4 < _g5) {
					var i1 = _g4++;
					var row1 = this.info.rows[i1];
					var j1 = row1.jacobian;
					var md = this.massData[i1];
					var imp1 = impulses[i1];
					if((j1.flag & 1) != 0) {
						lv1X += md.invMLin1X * imp1;
						lv1Y += md.invMLin1Y * imp1;
						lv1Z += md.invMLin1Z * imp1;
						lv2X += md.invMLin2X * -imp1;
						lv2Y += md.invMLin2Y * -imp1;
						lv2Z += md.invMLin2Z * -imp1;
						linearSet = true;
					}
					if((j1.flag & 2) != 0) {
						av1X += md.invMAng1X * imp1;
						av1Y += md.invMAng1Y * imp1;
						av1Z += md.invMAng1Z * imp1;
						av2X += md.invMAng2X * -imp1;
						av2Y += md.invMAng2Y * -imp1;
						av2Z += md.invMAng2Z * -imp1;
						angularSet = true;
					}
				}
				if(linearSet) {
					var _this = this._b1;
					_this._transform._positionX += lv1X;
					_this._transform._positionY += lv1Y;
					_this._transform._positionZ += lv1Z;
					var _this1 = this._b2;
					_this1._transform._positionX += lv2X;
					_this1._transform._positionY += lv2Y;
					_this1._transform._positionZ += lv2Z;
				}
				if(angularSet) {
					var _this2 = this._b1;
					var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
					var halfTheta = theta * 0.5;
					var rotationToSinAxisFactor;
					var cosHalfTheta;
					if(halfTheta < 0.5) {
						var ht2 = halfTheta * halfTheta;
						rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
						cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
						cosHalfTheta = Math.cos(halfTheta);
					}
					var sinAxis;
					var sinAxisX;
					var sinAxisY;
					var sinAxisZ;
					sinAxisX = av1X * rotationToSinAxisFactor;
					sinAxisY = av1Y * rotationToSinAxisFactor;
					sinAxisZ = av1Z * rotationToSinAxisFactor;
					var dq;
					var dqX;
					var dqY;
					var dqZ;
					var dqW;
					dqX = sinAxisX;
					dqY = sinAxisY;
					dqZ = sinAxisZ;
					dqW = cosHalfTheta;
					var q;
					var qX;
					var qY;
					var qZ;
					var qW;
					var e00 = _this2._transform._rotation00;
					var e11 = _this2._transform._rotation11;
					var e22 = _this2._transform._rotation22;
					var t = e00 + e11 + e22;
					var s;
					if(t > 0) {
						s = Math.sqrt(t + 1);
						qW = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
						qY = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
						qZ = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
					} else if(e00 > e11) {
						if(e00 > e22) {
							s = Math.sqrt(e00 - e11 - e22 + 1);
							qX = 0.5 * s;
							s = 0.5 / s;
							qY = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
							qZ = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
							qW = (_this2._transform._rotation21 - _this2._transform._rotation12) * s;
						} else {
							s = Math.sqrt(e22 - e00 - e11 + 1);
							qZ = 0.5 * s;
							s = 0.5 / s;
							qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
							qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
							qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
						}
					} else if(e11 > e22) {
						s = Math.sqrt(e11 - e22 - e00 + 1);
						qY = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation01 + _this2._transform._rotation10) * s;
						qZ = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
						qW = (_this2._transform._rotation02 - _this2._transform._rotation20) * s;
					} else {
						s = Math.sqrt(e22 - e00 - e11 + 1);
						qZ = 0.5 * s;
						s = 0.5 / s;
						qX = (_this2._transform._rotation02 + _this2._transform._rotation20) * s;
						qY = (_this2._transform._rotation12 + _this2._transform._rotation21) * s;
						qW = (_this2._transform._rotation10 - _this2._transform._rotation01) * s;
					}
					qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
					qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
					qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
					qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
					var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
					if(l > 1e-32) {
						l = 1 / Math.sqrt(l);
					}
					qX *= l;
					qY *= l;
					qZ *= l;
					qW *= l;
					var x = qX;
					var y = qY;
					var z = qZ;
					var w = qW;
					var x2 = 2 * x;
					var y2 = 2 * y;
					var z2 = 2 * z;
					var xx = x * x2;
					var yy = y * y2;
					var zz = z * z2;
					var xy = x * y2;
					var yz = y * z2;
					var xz = x * z2;
					var wx = w * x2;
					var wy = w * y2;
					var wz = w * z2;
					_this2._transform._rotation00 = 1 - yy - zz;
					_this2._transform._rotation01 = xy - wz;
					_this2._transform._rotation02 = xz + wy;
					_this2._transform._rotation10 = xy + wz;
					_this2._transform._rotation11 = 1 - xx - zz;
					_this2._transform._rotation12 = yz - wx;
					_this2._transform._rotation20 = xz - wy;
					_this2._transform._rotation21 = yz + wx;
					_this2._transform._rotation22 = 1 - xx - yy;
					var __tmp__00;
					var __tmp__01;
					var __tmp__02;
					var __tmp__10;
					var __tmp__11;
					var __tmp__12;
					var __tmp__20;
					var __tmp__21;
					var __tmp__22;
					__tmp__00 = _this2._transform._rotation00 * _this2._invLocalInertia00 + _this2._transform._rotation01 * _this2._invLocalInertia10 + _this2._transform._rotation02 * _this2._invLocalInertia20;
					__tmp__01 = _this2._transform._rotation00 * _this2._invLocalInertia01 + _this2._transform._rotation01 * _this2._invLocalInertia11 + _this2._transform._rotation02 * _this2._invLocalInertia21;
					__tmp__02 = _this2._transform._rotation00 * _this2._invLocalInertia02 + _this2._transform._rotation01 * _this2._invLocalInertia12 + _this2._transform._rotation02 * _this2._invLocalInertia22;
					__tmp__10 = _this2._transform._rotation10 * _this2._invLocalInertia00 + _this2._transform._rotation11 * _this2._invLocalInertia10 + _this2._transform._rotation12 * _this2._invLocalInertia20;
					__tmp__11 = _this2._transform._rotation10 * _this2._invLocalInertia01 + _this2._transform._rotation11 * _this2._invLocalInertia11 + _this2._transform._rotation12 * _this2._invLocalInertia21;
					__tmp__12 = _this2._transform._rotation10 * _this2._invLocalInertia02 + _this2._transform._rotation11 * _this2._invLocalInertia12 + _this2._transform._rotation12 * _this2._invLocalInertia22;
					__tmp__20 = _this2._transform._rotation20 * _this2._invLocalInertia00 + _this2._transform._rotation21 * _this2._invLocalInertia10 + _this2._transform._rotation22 * _this2._invLocalInertia20;
					__tmp__21 = _this2._transform._rotation20 * _this2._invLocalInertia01 + _this2._transform._rotation21 * _this2._invLocalInertia11 + _this2._transform._rotation22 * _this2._invLocalInertia21;
					__tmp__22 = _this2._transform._rotation20 * _this2._invLocalInertia02 + _this2._transform._rotation21 * _this2._invLocalInertia12 + _this2._transform._rotation22 * _this2._invLocalInertia22;
					_this2._invInertia00 = __tmp__00;
					_this2._invInertia01 = __tmp__01;
					_this2._invInertia02 = __tmp__02;
					_this2._invInertia10 = __tmp__10;
					_this2._invInertia11 = __tmp__11;
					_this2._invInertia12 = __tmp__12;
					_this2._invInertia20 = __tmp__20;
					_this2._invInertia21 = __tmp__21;
					_this2._invInertia22 = __tmp__22;
					var __tmp__001;
					var __tmp__011;
					var __tmp__021;
					var __tmp__101;
					var __tmp__111;
					var __tmp__121;
					var __tmp__201;
					var __tmp__211;
					var __tmp__221;
					__tmp__001 = _this2._invInertia00 * _this2._transform._rotation00 + _this2._invInertia01 * _this2._transform._rotation01 + _this2._invInertia02 * _this2._transform._rotation02;
					__tmp__011 = _this2._invInertia00 * _this2._transform._rotation10 + _this2._invInertia01 * _this2._transform._rotation11 + _this2._invInertia02 * _this2._transform._rotation12;
					__tmp__021 = _this2._invInertia00 * _this2._transform._rotation20 + _this2._invInertia01 * _this2._transform._rotation21 + _this2._invInertia02 * _this2._transform._rotation22;
					__tmp__101 = _this2._invInertia10 * _this2._transform._rotation00 + _this2._invInertia11 * _this2._transform._rotation01 + _this2._invInertia12 * _this2._transform._rotation02;
					__tmp__111 = _this2._invInertia10 * _this2._transform._rotation10 + _this2._invInertia11 * _this2._transform._rotation11 + _this2._invInertia12 * _this2._transform._rotation12;
					__tmp__121 = _this2._invInertia10 * _this2._transform._rotation20 + _this2._invInertia11 * _this2._transform._rotation21 + _this2._invInertia12 * _this2._transform._rotation22;
					__tmp__201 = _this2._invInertia20 * _this2._transform._rotation00 + _this2._invInertia21 * _this2._transform._rotation01 + _this2._invInertia22 * _this2._transform._rotation02;
					__tmp__211 = _this2._invInertia20 * _this2._transform._rotation10 + _this2._invInertia21 * _this2._transform._rotation11 + _this2._invInertia22 * _this2._transform._rotation12;
					__tmp__221 = _this2._invInertia20 * _this2._transform._rotation20 + _this2._invInertia21 * _this2._transform._rotation21 + _this2._invInertia22 * _this2._transform._rotation22;
					_this2._invInertia00 = __tmp__001;
					_this2._invInertia01 = __tmp__011;
					_this2._invInertia02 = __tmp__021;
					_this2._invInertia10 = __tmp__101;
					_this2._invInertia11 = __tmp__111;
					_this2._invInertia12 = __tmp__121;
					_this2._invInertia20 = __tmp__201;
					_this2._invInertia21 = __tmp__211;
					_this2._invInertia22 = __tmp__221;
					_this2._invInertia00 *= _this2._rotFactor.x;
					_this2._invInertia01 *= _this2._rotFactor.x;
					_this2._invInertia02 *= _this2._rotFactor.x;
					_this2._invInertia10 *= _this2._rotFactor.y;
					_this2._invInertia11 *= _this2._rotFactor.y;
					_this2._invInertia12 *= _this2._rotFactor.y;
					_this2._invInertia20 *= _this2._rotFactor.z;
					_this2._invInertia21 *= _this2._rotFactor.z;
					_this2._invInertia22 *= _this2._rotFactor.z;
					var _this3 = this._b2;
					var theta1 = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
					var halfTheta1 = theta1 * 0.5;
					var rotationToSinAxisFactor1;
					var cosHalfTheta1;
					if(halfTheta1 < 0.5) {
						var ht21 = halfTheta1 * halfTheta1;
						rotationToSinAxisFactor1 = 0.5 * (1 - ht21 * 0.16666666666666666 + ht21 * ht21 * 0.0083333333333333332);
						cosHalfTheta1 = 1 - ht21 * 0.5 + ht21 * ht21 * 0.041666666666666664;
					} else {
						rotationToSinAxisFactor1 = Math.sin(halfTheta1) / theta1;
						cosHalfTheta1 = Math.cos(halfTheta1);
					}
					var sinAxis1;
					var sinAxisX1;
					var sinAxisY1;
					var sinAxisZ1;
					sinAxisX1 = av2X * rotationToSinAxisFactor1;
					sinAxisY1 = av2Y * rotationToSinAxisFactor1;
					sinAxisZ1 = av2Z * rotationToSinAxisFactor1;
					var dq1;
					var dqX1;
					var dqY1;
					var dqZ1;
					var dqW1;
					dqX1 = sinAxisX1;
					dqY1 = sinAxisY1;
					dqZ1 = sinAxisZ1;
					dqW1 = cosHalfTheta1;
					var q1;
					var qX1;
					var qY1;
					var qZ1;
					var qW1;
					var e001 = _this3._transform._rotation00;
					var e111 = _this3._transform._rotation11;
					var e221 = _this3._transform._rotation22;
					var t1 = e001 + e111 + e221;
					var s1;
					if(t1 > 0) {
						s1 = Math.sqrt(t1 + 1);
						qW1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
						qY1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
						qZ1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
					} else if(e001 > e111) {
						if(e001 > e221) {
							s1 = Math.sqrt(e001 - e111 - e221 + 1);
							qX1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qY1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
							qZ1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
							qW1 = (_this3._transform._rotation21 - _this3._transform._rotation12) * s1;
						} else {
							s1 = Math.sqrt(e221 - e001 - e111 + 1);
							qZ1 = 0.5 * s1;
							s1 = 0.5 / s1;
							qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
							qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
							qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
						}
					} else if(e111 > e221) {
						s1 = Math.sqrt(e111 - e221 - e001 + 1);
						qY1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation01 + _this3._transform._rotation10) * s1;
						qZ1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
						qW1 = (_this3._transform._rotation02 - _this3._transform._rotation20) * s1;
					} else {
						s1 = Math.sqrt(e221 - e001 - e111 + 1);
						qZ1 = 0.5 * s1;
						s1 = 0.5 / s1;
						qX1 = (_this3._transform._rotation02 + _this3._transform._rotation20) * s1;
						qY1 = (_this3._transform._rotation12 + _this3._transform._rotation21) * s1;
						qW1 = (_this3._transform._rotation10 - _this3._transform._rotation01) * s1;
					}
					qX1 = dqW1 * qX1 + dqX1 * qW1 + dqY1 * qZ1 - dqZ1 * qY1;
					qY1 = dqW1 * qY1 - dqX1 * qZ1 + dqY1 * qW1 + dqZ1 * qX1;
					qZ1 = dqW1 * qZ1 + dqX1 * qY1 - dqY1 * qX1 + dqZ1 * qW1;
					qW1 = dqW1 * qW1 - dqX1 * qX1 - dqY1 * qY1 - dqZ1 * qZ1;
					var l1 = qX1 * qX1 + qY1 * qY1 + qZ1 * qZ1 + qW1 * qW1;
					if(l1 > 1e-32) {
						l1 = 1 / Math.sqrt(l1);
					}
					qX1 *= l1;
					qY1 *= l1;
					qZ1 *= l1;
					qW1 *= l1;
					var x1 = qX1;
					var y1 = qY1;
					var z1 = qZ1;
					var w1 = qW1;
					var x21 = 2 * x1;
					var y21 = 2 * y1;
					var z21 = 2 * z1;
					var xx1 = x1 * x21;
					var yy1 = y1 * y21;
					var zz1 = z1 * z21;
					var xy1 = x1 * y21;
					var yz1 = y1 * z21;
					var xz1 = x1 * z21;
					var wx1 = w1 * x21;
					var wy1 = w1 * y21;
					var wz1 = w1 * z21;
					_this3._transform._rotation00 = 1 - yy1 - zz1;
					_this3._transform._rotation01 = xy1 - wz1;
					_this3._transform._rotation02 = xz1 + wy1;
					_this3._transform._rotation10 = xy1 + wz1;
					_this3._transform._rotation11 = 1 - xx1 - zz1;
					_this3._transform._rotation12 = yz1 - wx1;
					_this3._transform._rotation20 = xz1 - wy1;
					_this3._transform._rotation21 = yz1 + wx1;
					_this3._transform._rotation22 = 1 - xx1 - yy1;
					var __tmp__002;
					var __tmp__012;
					var __tmp__022;
					var __tmp__102;
					var __tmp__112;
					var __tmp__122;
					var __tmp__202;
					var __tmp__212;
					var __tmp__222;
					__tmp__002 = _this3._transform._rotation00 * _this3._invLocalInertia00 + _this3._transform._rotation01 * _this3._invLocalInertia10 + _this3._transform._rotation02 * _this3._invLocalInertia20;
					__tmp__012 = _this3._transform._rotation00 * _this3._invLocalInertia01 + _this3._transform._rotation01 * _this3._invLocalInertia11 + _this3._transform._rotation02 * _this3._invLocalInertia21;
					__tmp__022 = _this3._transform._rotation00 * _this3._invLocalInertia02 + _this3._transform._rotation01 * _this3._invLocalInertia12 + _this3._transform._rotation02 * _this3._invLocalInertia22;
					__tmp__102 = _this3._transform._rotation10 * _this3._invLocalInertia00 + _this3._transform._rotation11 * _this3._invLocalInertia10 + _this3._transform._rotation12 * _this3._invLocalInertia20;
					__tmp__112 = _this3._transform._rotation10 * _this3._invLocalInertia01 + _this3._transform._rotation11 * _this3._invLocalInertia11 + _this3._transform._rotation12 * _this3._invLocalInertia21;
					__tmp__122 = _this3._transform._rotation10 * _this3._invLocalInertia02 + _this3._transform._rotation11 * _this3._invLocalInertia12 + _this3._transform._rotation12 * _this3._invLocalInertia22;
					__tmp__202 = _this3._transform._rotation20 * _this3._invLocalInertia00 + _this3._transform._rotation21 * _this3._invLocalInertia10 + _this3._transform._rotation22 * _this3._invLocalInertia20;
					__tmp__212 = _this3._transform._rotation20 * _this3._invLocalInertia01 + _this3._transform._rotation21 * _this3._invLocalInertia11 + _this3._transform._rotation22 * _this3._invLocalInertia21;
					__tmp__222 = _this3._transform._rotation20 * _this3._invLocalInertia02 + _this3._transform._rotation21 * _this3._invLocalInertia12 + _this3._transform._rotation22 * _this3._invLocalInertia22;
					_this3._invInertia00 = __tmp__002;
					_this3._invInertia01 = __tmp__012;
					_this3._invInertia02 = __tmp__022;
					_this3._invInertia10 = __tmp__102;
					_this3._invInertia11 = __tmp__112;
					_this3._invInertia12 = __tmp__122;
					_this3._invInertia20 = __tmp__202;
					_this3._invInertia21 = __tmp__212;
					_this3._invInertia22 = __tmp__222;
					var __tmp__003;
					var __tmp__013;
					var __tmp__023;
					var __tmp__103;
					var __tmp__113;
					var __tmp__123;
					var __tmp__203;
					var __tmp__213;
					var __tmp__223;
					__tmp__003 = _this3._invInertia00 * _this3._transform._rotation00 + _this3._invInertia01 * _this3._transform._rotation01 + _this3._invInertia02 * _this3._transform._rotation02;
					__tmp__013 = _this3._invInertia00 * _this3._transform._rotation10 + _this3._invInertia01 * _this3._transform._rotation11 + _this3._invInertia02 * _this3._transform._rotation12;
					__tmp__023 = _this3._invInertia00 * _this3._transform._rotation20 + _this3._invInertia01 * _this3._transform._rotation21 + _this3._invInertia02 * _this3._transform._rotation22;
					__tmp__103 = _this3._invInertia10 * _this3._transform._rotation00 + _this3._invInertia11 * _this3._transform._rotation01 + _this3._invInertia12 * _this3._transform._rotation02;
					__tmp__113 = _this3._invInertia10 * _this3._transform._rotation10 + _this3._invInertia11 * _this3._transform._rotation11 + _this3._invInertia12 * _this3._transform._rotation12;
					__tmp__123 = _this3._invInertia10 * _this3._transform._rotation20 + _this3._invInertia11 * _this3._transform._rotation21 + _this3._invInertia12 * _this3._transform._rotation22;
					__tmp__203 = _this3._invInertia20 * _this3._transform._rotation00 + _this3._invInertia21 * _this3._transform._rotation01 + _this3._invInertia22 * _this3._transform._rotation02;
					__tmp__213 = _this3._invInertia20 * _this3._transform._rotation10 + _this3._invInertia21 * _this3._transform._rotation11 + _this3._invInertia22 * _this3._transform._rotation12;
					__tmp__223 = _this3._invInertia20 * _this3._transform._rotation20 + _this3._invInertia21 * _this3._transform._rotation21 + _this3._invInertia22 * _this3._transform._rotation22;
					_this3._invInertia00 = __tmp__003;
					_this3._invInertia01 = __tmp__013;
					_this3._invInertia02 = __tmp__023;
					_this3._invInertia10 = __tmp__103;
					_this3._invInertia11 = __tmp__113;
					_this3._invInertia12 = __tmp__123;
					_this3._invInertia20 = __tmp__203;
					_this3._invInertia21 = __tmp__213;
					_this3._invInertia22 = __tmp__223;
					_this3._invInertia00 *= _this3._rotFactor.x;
					_this3._invInertia01 *= _this3._rotFactor.x;
					_this3._invInertia02 *= _this3._rotFactor.x;
					_this3._invInertia10 *= _this3._rotFactor.y;
					_this3._invInertia11 *= _this3._rotFactor.y;
					_this3._invInertia12 *= _this3._rotFactor.y;
					_this3._invInertia20 *= _this3._rotFactor.z;
					_this3._invInertia21 *= _this3._rotFactor.z;
					_this3._invInertia22 *= _this3._rotFactor.z;
				}
				var _this4 = this.posBoundarySelector;
				var i2 = 0;
				while(_this4.indices[i2] != idx) ++i2;
				while(i2 > 0) {
					var tmp = _this4.indices[i2];
					_this4.indices[i2] = _this4.indices[i2 - 1];
					_this4.indices[i2 - 1] = tmp;
					--i2;
				}
				solved = true;
				break;
			}
		}
		if(!solved) {
			haxe_Log.trace("could not find solution. (NGS)",{ fileName : "oimo/dynamics/constraint/solver/direct/DirectJointConstraintSolver.hx", lineNumber : 502, className : "oimo.dynamics.constraint.solver.direct.DirectJointConstraintSolver", methodName : "solvePositionNgs"});
			return;
		}
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
	,__class__: oimo_dynamics_constraint_solver_direct_DirectJointConstraintSolver
});
var oimo_dynamics_constraint_solver_direct_MassMatrix = function(size) {
	this._size = size;
	var this1 = new Array(this._size);
	this.tmpMatrix = this1;
	var this1 = new Array(this._size);
	this._invMass = this1;
	var this1 = new Array(this._size);
	this._invMassWithoutCfm = this1;
	var _g = 0;
	var _g1 = this._size;
	while(_g < _g1) {
		var i = _g++;
		var this1 = this.tmpMatrix;
		var this2 = new Array(this._size);
		this1[i] = this2;
		var this3 = this._invMass;
		var this4 = new Array(this._size);
		this3[i] = this4;
		var this5 = this._invMassWithoutCfm;
		var this6 = new Array(this._size);
		this5[i] = this6;
		var _g2 = 0;
		var _g3 = this._size;
		while(_g2 < _g3) {
			var j = _g2++;
			this.tmpMatrix[i][j] = 0;
			this._invMass[i][j] = 0;
			this._invMassWithoutCfm[i][j] = 0;
		}
	}
	this._maxSubmatrixId = 1 << this._size;
	var this1 = new Array(this._maxSubmatrixId);
	this._cacheComputed = this1;
	var this1 = new Array(this._maxSubmatrixId);
	this._cachedSubmatrices = this1;
	var _g = 0;
	var _g1 = this._maxSubmatrixId;
	while(_g < _g1) {
		var i = _g++;
		var t = i;
		t = (t & 85) + (t >> 1 & 85);
		t = (t & 51) + (t >> 2 & 51);
		t = (t & 15) + (t >> 4 & 15);
		var matrixSize = t;
		var this1 = new Array(matrixSize);
		var subMatrix = this1;
		var _g2 = 0;
		var _g3 = matrixSize;
		while(_g2 < _g3) {
			var j = _g2++;
			var this2 = new Array(matrixSize);
			subMatrix[j] = this2;
			var _g4 = 0;
			var _g5 = matrixSize;
			while(_g4 < _g5) {
				var k = _g4++;
				subMatrix[j][k] = 0;
			}
		}
		this._cacheComputed[i] = false;
		this._cachedSubmatrices[i] = subMatrix;
	}
};
oimo_dynamics_constraint_solver_direct_MassMatrix.__name__ = "oimo.dynamics.constraint.solver.direct.MassMatrix";
oimo_dynamics_constraint_solver_direct_MassMatrix.prototype = {
	computeSubmatrix: function(id,indices,size) {
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			var ii = indices[i];
			var _g2 = 0;
			var _g3 = size;
			while(_g2 < _g3) {
				var j = _g2++;
				this.tmpMatrix[i][j] = this._invMass[ii][indices[j]];
			}
		}
		var src = this.tmpMatrix;
		var dst = this._cachedSubmatrices[id];
		var srci;
		var dsti;
		var srcj;
		var dstj;
		var diag;
		switch(size) {
		case 4:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			break;
		case 5:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srci[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			break;
		case 6:
			srci = src[0];
			dsti = dst[0];
			diag = 1 / srci[0];
			dsti[0] = diag;
			srci[1] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[1];
			dstj = dst[1];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] = -diag * srcj[0];
			srcj[1] -= srci[1] * srcj[0];
			srcj[2] -= srci[2] * srcj[0];
			srcj[3] -= srci[3] * srcj[0];
			srcj[4] -= srci[4] * srcj[0];
			srcj[5] -= srci[5] * srcj[0];
			srci = src[1];
			dsti = dst[1];
			diag = 1 / srci[1];
			dsti[1] = diag;
			dsti[0] *= diag;
			srci[2] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[1];
			dstj[1] = -diag * srcj[1];
			srcj[2] -= srci[2] * srcj[1];
			srcj[3] -= srci[3] * srcj[1];
			srcj[4] -= srci[4] * srcj[1];
			srcj[5] -= srci[5] * srcj[1];
			srci = src[2];
			dsti = dst[2];
			diag = 1 / srci[2];
			dsti[2] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			srci[3] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[2];
			dstj[1] -= dsti[1] * srcj[2];
			dstj[2] = -diag * srcj[2];
			srcj[3] -= srci[3] * srcj[2];
			srcj[4] -= srci[4] * srcj[2];
			srcj[5] -= srci[5] * srcj[2];
			srci = src[3];
			dsti = dst[3];
			diag = 1 / srci[3];
			dsti[3] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			srci[4] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[3];
			dstj[1] -= dsti[1] * srcj[3];
			dstj[2] -= dsti[2] * srcj[3];
			dstj[3] = -diag * srcj[3];
			srcj[4] -= srci[4] * srcj[3];
			srcj[5] -= srci[5] * srcj[3];
			srci = src[4];
			dsti = dst[4];
			diag = 1 / srci[4];
			dsti[4] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			srci[5] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srcj = src[5];
			dstj = dst[5];
			dstj[0] -= dsti[0] * srcj[4];
			dstj[1] -= dsti[1] * srcj[4];
			dstj[2] -= dsti[2] * srcj[4];
			dstj[3] -= dsti[3] * srcj[4];
			dstj[4] = -diag * srcj[4];
			srcj[5] -= srci[5] * srcj[4];
			srci = src[5];
			dsti = dst[5];
			diag = 1 / srci[5];
			dsti[5] = diag;
			dsti[0] *= diag;
			dsti[1] *= diag;
			dsti[2] *= diag;
			dsti[3] *= diag;
			dsti[4] *= diag;
			srcj = src[0];
			dstj = dst[0];
			dstj[0] -= dsti[0] * srcj[5];
			srcj = src[1];
			dstj = dst[1];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			srcj = src[2];
			dstj = dst[2];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			srcj = src[3];
			dstj = dst[3];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			dstj[3] -= dsti[3] * srcj[5];
			srcj = src[4];
			dstj = dst[4];
			dstj[0] -= dsti[0] * srcj[5];
			dstj[1] -= dsti[1] * srcj[5];
			dstj[2] -= dsti[2] * srcj[5];
			dstj[3] -= dsti[3] * srcj[5];
			dstj[4] -= dsti[4] * srcj[5];
			dsti = dst[1];
			dst[0][1] = dsti[0];
			dsti = dst[2];
			dst[0][2] = dsti[0];
			dst[1][2] = dsti[1];
			dsti = dst[3];
			dst[0][3] = dsti[0];
			dst[1][3] = dsti[1];
			dst[2][3] = dsti[2];
			dsti = dst[4];
			dst[0][4] = dsti[0];
			dst[1][4] = dsti[1];
			dst[2][4] = dsti[2];
			dst[3][4] = dsti[3];
			dsti = dst[5];
			dst[0][5] = dsti[0];
			dst[1][5] = dsti[1];
			dst[2][5] = dsti[2];
			dst[3][5] = dsti[3];
			dst[4][5] = dsti[4];
			break;
		default:
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				srci = src[i];
				dsti = dst[i];
				var diag = 1 / srci[i];
				dsti[i] = diag;
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var j = _g2++;
					dsti[j] *= diag;
				}
				var _g4 = i + 1;
				var _g5 = size;
				while(_g4 < _g5) {
					var j1 = _g4++;
					srci[j1] *= diag;
				}
				var _g6 = 0;
				var _g7 = i;
				while(_g6 < _g7) {
					var j2 = _g6++;
					srcj = src[j2];
					dstj = dst[j2];
					var _g8 = 0;
					var _g9 = j2 + 1;
					while(_g8 < _g9) {
						var k = _g8++;
						dstj[k] -= dsti[k] * srcj[i];
					}
					var _g10 = i + 1;
					var _g11 = size;
					while(_g10 < _g11) {
						var k1 = _g10++;
						srcj[k1] -= srci[k1] * srcj[i];
					}
				}
				var _g12 = i + 1;
				var _g13 = size;
				while(_g12 < _g13) {
					var j3 = _g12++;
					srcj = src[j3];
					dstj = dst[j3];
					var _g14 = 0;
					var _g15 = i;
					while(_g14 < _g15) {
						var k2 = _g14++;
						dstj[k2] -= dsti[k2] * srcj[i];
					}
					dstj[i] = -diag * srcj[i];
					var _g16 = i + 1;
					var _g17 = size;
					while(_g16 < _g17) {
						var k3 = _g16++;
						srcj[k3] -= srci[k3] * srcj[i];
					}
				}
			}
			var _g = 1;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				dsti = dst[i];
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var j = _g2++;
					dst[j][i] = dsti[j];
				}
			}
		}
	}
	,computeInvMass: function(info,massData) {
		var invMass = this._invMass;
		var invMassWithoutCfm = this._invMassWithoutCfm;
		var numRows = info.numRows;
		var b1 = info.b1;
		var b2 = info.b2;
		var invM1 = b1._invMass;
		var invM2 = b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = b1._invInertia00;
		invI101 = b1._invInertia01;
		invI102 = b1._invInertia02;
		invI110 = b1._invInertia10;
		invI111 = b1._invInertia11;
		invI112 = b1._invInertia12;
		invI120 = b1._invInertia20;
		invI121 = b1._invInertia21;
		invI122 = b1._invInertia22;
		invI200 = b2._invInertia00;
		invI201 = b2._invInertia01;
		invI202 = b2._invInertia02;
		invI210 = b2._invInertia10;
		invI211 = b2._invInertia11;
		invI212 = b2._invInertia12;
		invI220 = b2._invInertia20;
		invI221 = b2._invInertia21;
		invI222 = b2._invInertia22;
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var j = info.rows[i].jacobian;
			var md = massData[i];
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
		}
		var _g = 0;
		var _g1 = numRows;
		while(_g < _g1) {
			var i = _g++;
			var j1 = info.rows[i].jacobian;
			var _g2 = i;
			var _g3 = numRows;
			while(_g2 < _g3) {
				var j = _g2++;
				var j2 = info.rows[j].jacobian;
				var md2 = massData[j];
				var val = j1.lin1X * md2.invMLin1X + j1.lin1Y * md2.invMLin1Y + j1.lin1Z * md2.invMLin1Z + (j1.ang1X * md2.invMAng1X + j1.ang1Y * md2.invMAng1Y + j1.ang1Z * md2.invMAng1Z) + (j1.lin2X * md2.invMLin2X + j1.lin2Y * md2.invMLin2Y + j1.lin2Z * md2.invMLin2Z) + (j1.ang2X * md2.invMAng2X + j1.ang2Y * md2.invMAng2Y + j1.ang2Z * md2.invMAng2Z);
				if(i == j) {
					invMass[i][j] = val + info.rows[i].cfm;
					invMassWithoutCfm[i][j] = val;
					md2.mass = val + info.rows[i].cfm;
					md2.massWithoutCfm = val;
					if(md2.mass != 0) {
						md2.mass = 1 / md2.mass;
					}
					if(md2.massWithoutCfm != 0) {
						md2.massWithoutCfm = 1 / md2.massWithoutCfm;
					}
				} else {
					invMass[i][j] = val;
					invMass[j][i] = val;
					invMassWithoutCfm[i][j] = val;
					invMassWithoutCfm[j][i] = val;
				}
			}
		}
		var _g = 0;
		var _g1 = this._maxSubmatrixId;
		while(_g < _g1) {
			var i = _g++;
			this._cacheComputed[i] = false;
		}
	}
	,__class__: oimo_dynamics_constraint_solver_direct_MassMatrix
};
var oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver = function(constraint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.constraint = constraint;
	this.info = new oimo_dynamics_constraint_info_contact_ContactSolverInfo();
	var this1 = new Array(oimo_common_Setting.maxManifoldPoints);
	this.massData = this1;
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) {
		var i = _g++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_ContactSolverMassDataRow();
	}
};
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__name__ = "oimo.dynamics.constraint.solver.pgs.PgsContactConstraintSolver";
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.constraint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			md.invMLinT1X = jt.lin1X * invM1;
			md.invMLinT1Y = jt.lin1Y * invM1;
			md.invMLinT1Z = jt.lin1Z * invM1;
			md.invMLinT2X = jt.lin2X * invM2;
			md.invMLinT2Y = jt.lin2Y * invM2;
			md.invMLinT2Z = jt.lin2Z * invM2;
			md.invMLinB1X = jb.lin1X * invM1;
			md.invMLinB1Y = jb.lin1Y * invM1;
			md.invMLinB1Z = jb.lin1Z * invM1;
			md.invMLinB2X = jb.lin2X * invM2;
			md.invMLinB2Y = jb.lin2Y * invM2;
			md.invMLinB2Z = jb.lin2Z * invM2;
			var __tmp__X2;
			var __tmp__Y2;
			var __tmp__Z2;
			__tmp__X2 = invI100 * jt.ang1X + invI101 * jt.ang1Y + invI102 * jt.ang1Z;
			__tmp__Y2 = invI110 * jt.ang1X + invI111 * jt.ang1Y + invI112 * jt.ang1Z;
			__tmp__Z2 = invI120 * jt.ang1X + invI121 * jt.ang1Y + invI122 * jt.ang1Z;
			md.invMAngT1X = __tmp__X2;
			md.invMAngT1Y = __tmp__Y2;
			md.invMAngT1Z = __tmp__Z2;
			var __tmp__X3;
			var __tmp__Y3;
			var __tmp__Z3;
			__tmp__X3 = invI200 * jt.ang2X + invI201 * jt.ang2Y + invI202 * jt.ang2Z;
			__tmp__Y3 = invI210 * jt.ang2X + invI211 * jt.ang2Y + invI212 * jt.ang2Z;
			__tmp__Z3 = invI220 * jt.ang2X + invI221 * jt.ang2Y + invI222 * jt.ang2Z;
			md.invMAngT2X = __tmp__X3;
			md.invMAngT2Y = __tmp__Y3;
			md.invMAngT2Z = __tmp__Z3;
			var __tmp__X4;
			var __tmp__Y4;
			var __tmp__Z4;
			__tmp__X4 = invI100 * jb.ang1X + invI101 * jb.ang1Y + invI102 * jb.ang1Z;
			__tmp__Y4 = invI110 * jb.ang1X + invI111 * jb.ang1Y + invI112 * jb.ang1Z;
			__tmp__Z4 = invI120 * jb.ang1X + invI121 * jb.ang1Y + invI122 * jb.ang1Z;
			md.invMAngB1X = __tmp__X4;
			md.invMAngB1Y = __tmp__Y4;
			md.invMAngB1Z = __tmp__Z4;
			var __tmp__X5;
			var __tmp__Y5;
			var __tmp__Z5;
			__tmp__X5 = invI200 * jb.ang2X + invI201 * jb.ang2Y + invI202 * jb.ang2Z;
			__tmp__Y5 = invI210 * jb.ang2X + invI211 * jb.ang2Y + invI212 * jb.ang2Z;
			__tmp__Z5 = invI220 * jb.ang2X + invI221 * jb.ang2Y + invI222 * jb.ang2Z;
			md.invMAngB2X = __tmp__X5;
			md.invMAngB2Y = __tmp__Y5;
			md.invMAngB2Z = __tmp__Z5;
			var invMassTB00 = invM1 + invM2 + (md.invMAngT1X * jt.ang1X + md.invMAngT1Y * jt.ang1Y + md.invMAngT1Z * jt.ang1Z) + (md.invMAngT2X * jt.ang2X + md.invMAngT2Y * jt.ang2Y + md.invMAngT2Z * jt.ang2Z);
			var invMassTB01 = md.invMAngT1X * jb.ang1X + md.invMAngT1Y * jb.ang1Y + md.invMAngT1Z * jb.ang1Z + (md.invMAngT2X * jb.ang2X + md.invMAngT2Y * jb.ang2Y + md.invMAngT2Z * jb.ang2Z);
			var invMassTB10 = invMassTB01;
			var invMassTB11 = invM1 + invM2 + (md.invMAngB1X * jb.ang1X + md.invMAngB1Y * jb.ang1Y + md.invMAngB1Z * jb.ang1Z) + (md.invMAngB2X * jb.ang2X + md.invMAngB2Y * jb.ang2Y + md.invMAngB2Z * jb.ang2Z);
			var invDet = invMassTB00 * invMassTB11 - invMassTB01 * invMassTB10;
			if(invDet != 0) {
				invDet = 1 / invDet;
			}
			md.massTB00 = invMassTB11 * invDet;
			md.massTB01 = -invMassTB01 * invDet;
			md.massTB10 = -invMassTB10 * invDet;
			md.massTB11 = invMassTB00 * invDet;
		}
	}
	,warmStart: function(timeStep) {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var md = this.massData[i];
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impulseN = imp.impulseN;
			var impulseT = imp.impulseLX * jt.lin1X + imp.impulseLY * jt.lin1Y + imp.impulseLZ * jt.lin1Z;
			var impulseB = imp.impulseLX * jb.lin1X + imp.impulseLY * jb.lin1Y + imp.impulseLZ * jb.lin1Z;
			imp.impulseT = impulseT;
			imp.impulseB = impulseB;
			imp.impulseN *= timeStep.dtRatio;
			imp.impulseT *= timeStep.dtRatio;
			imp.impulseB *= timeStep.dtRatio;
			lv1X += md.invMLinN1X * impulseN;
			lv1Y += md.invMLinN1Y * impulseN;
			lv1Z += md.invMLinN1Z * impulseN;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinN2X * -impulseN;
			lv2Y += md.invMLinN2Y * -impulseN;
			lv2Z += md.invMLinN2Z * -impulseN;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngN1X * impulseN;
			av1Y += md.invMAngN1Y * impulseN;
			av1Z += md.invMAngN1Z * impulseN;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngN2X * -impulseN;
			av2Y += md.invMAngN2Y * -impulseN;
			av2Z += md.invMAngN2Z * -impulseN;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var rvt = 0;
			var j = row.jacobianT;
			rvt += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvt -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvt += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvt -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var rvb = 0;
			j = row.jacobianB;
			rvb += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvb -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvb += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvb -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseT = -(rvt * md.massTB00 + rvb * md.massTB01);
			var impulseB = -(rvt * md.massTB10 + rvb * md.massTB11);
			var oldImpulseT = imp.impulseT;
			var oldImpulseB = imp.impulseB;
			imp.impulseT += impulseT;
			imp.impulseB += impulseB;
			var maxImpulse = row.friction * imp.impulseN;
			if(maxImpulse == 0) {
				imp.impulseT = 0;
				imp.impulseB = 0;
			} else {
				var impulseLengthSq = imp.impulseT * imp.impulseT + imp.impulseB * imp.impulseB;
				if(impulseLengthSq > maxImpulse * maxImpulse) {
					var invL = maxImpulse / Math.sqrt(impulseLengthSq);
					imp.impulseT *= invL;
					imp.impulseB *= invL;
				}
			}
			impulseT = imp.impulseT - oldImpulseT;
			impulseB = imp.impulseB - oldImpulseB;
			lv1X += md.invMLinT1X * impulseT;
			lv1Y += md.invMLinT1Y * impulseT;
			lv1Z += md.invMLinT1Z * impulseT;
			lv1X += md.invMLinB1X * impulseB;
			lv1Y += md.invMLinB1Y * impulseB;
			lv1Z += md.invMLinB1Z * impulseB;
			lv2X += md.invMLinT2X * -impulseT;
			lv2Y += md.invMLinT2Y * -impulseT;
			lv2Z += md.invMLinT2Z * -impulseT;
			lv2X += md.invMLinB2X * -impulseB;
			lv2Y += md.invMLinB2Y * -impulseB;
			lv2Z += md.invMLinB2Z * -impulseB;
			av1X += md.invMAngT1X * impulseT;
			av1Y += md.invMAngT1Y * impulseT;
			av1Z += md.invMAngT1Z * impulseT;
			av1X += md.invMAngB1X * impulseB;
			av1Y += md.invMAngB1Y * impulseB;
			av1Z += md.invMAngB1Z * impulseB;
			av2X += md.invMAngT2X * -impulseT;
			av2Y += md.invMAngT2Y * -impulseT;
			av2Z += md.invMAngT2Z * -impulseT;
			av2X += md.invMAngB2X * -impulseB;
			av2Y += md.invMAngB2Y * -impulseB;
			av2Z += md.invMAngB2Z * -impulseB;
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var rvn = 0;
			var j = row.jacobianN;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseN = (row.rhs - rvn) * md.massN;
			var oldImpulseN = imp.impulseN;
			imp.impulseN += impulseN;
			if(imp.impulseN < 0) {
				imp.impulseN = 0;
			}
			impulseN = imp.impulseN - oldImpulseN;
			lv1X += md.invMLinN1X * impulseN;
			lv1Y += md.invMLinN1Y * impulseN;
			lv1Z += md.invMLinN1Z * impulseN;
			lv2X += md.invMLinN2X * -impulseN;
			lv2Y += md.invMLinN2Y * -impulseN;
			lv2Z += md.invMLinN2Z * -impulseN;
			av1X += md.invMAngN1X * impulseN;
			av1Y += md.invMAngN1Y * impulseN;
			av1Z += md.invMAngN1Z * impulseN;
			av2X += md.invMAngN2X * -impulseN;
			av2Y += md.invMAngN2Y * -impulseN;
			av2Z += md.invMAngN2Z * -impulseN;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,preSolvePosition: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			this.info.rows[i].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobianN;
			var rvn = 0;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs - rvn) * md.massN * oimo_common_Setting.positionSplitImpulseBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLinN1X * impulseP;
			lv1Y += md.invMLinN1Y * impulseP;
			lv1Z += md.invMLinN1Z * impulseP;
			lv2X += md.invMLinN2X * -impulseP;
			lv2Y += md.invMLinN2Y * -impulseP;
			lv2Z += md.invMLinN2Z * -impulseP;
			av1X += md.invMAngN1X * impulseP;
			av1Y += md.invMAngN1Y * impulseP;
			av1Z += md.invMAngN1Z * impulseP;
			av2X += md.invMAngN2X * -impulseP;
			av2Y += md.invMAngN2Y * -impulseP;
			av2Z += md.invMAngN2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.constraint._syncManifold();
		this.constraint._getPositionSolverInfo(this.info);
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobianN;
			md.invMLinN1X = j.lin1X * invM1;
			md.invMLinN1Y = j.lin1Y * invM1;
			md.invMLinN1Z = j.lin1Z * invM1;
			md.invMLinN2X = j.lin2X * invM2;
			md.invMLinN2Y = j.lin2Y * invM2;
			md.invMLinN2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAngN1X = __tmp__X;
			md.invMAngN1Y = __tmp__Y;
			md.invMAngN1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAngN2X = __tmp__X1;
			md.invMAngN2Y = __tmp__Y1;
			md.invMAngN2Z = __tmp__Z1;
			md.massN = invM1 + invM2 + (md.invMAngN1X * j.ang1X + md.invMAngN1Y * j.ang1Y + md.invMAngN1Z * j.ang1Z) + (md.invMAngN2X * j.ang2X + md.invMAngN2Y * j.ang2Y + md.invMAngN2Z * j.ang2Z);
			if(md.massN != 0) {
				md.massN = 1 / md.massN;
			}
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobianN;
			var rvn = 0;
			rvn += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rvn -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rvn += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rvn -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs - rvn) * md.massN * oimo_common_Setting.positionNgsBaumgarte;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < 0) {
				imp.impulseP = 0;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLinN1X * impulseP;
			lv1Y += md.invMLinN1Y * impulseP;
			lv1Z += md.invMLinN1Z * impulseP;
			lv2X += md.invMLinN2X * -impulseP;
			lv2Y += md.invMLinN2Y * -impulseP;
			lv2Z += md.invMLinN2Z * -impulseP;
			av1X += md.invMAngN1X * impulseP;
			av1Y += md.invMAngN1Y * impulseP;
			av1Z += md.invMAngN1Z * impulseP;
			av2X += md.invMAngN2X * -impulseP;
			av2Y += md.invMAngN2Y * -impulseP;
			av2Z += md.invMAngN2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this = this._b2;
		_this._transform._positionX += lv2X;
		_this._transform._positionY += lv2Y;
		_this._transform._positionZ += lv2Z;
		var _this = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
		var _this = this._b2;
		var theta = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av2X * rotationToSinAxisFactor;
		sinAxisY = av2Y * rotationToSinAxisFactor;
		sinAxisZ = av2Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
	}
	,postSolve: function() {
		var lin1;
		var lin1X;
		var lin1Y;
		var lin1Z;
		var ang1;
		var ang1X;
		var ang1Y;
		var ang1Z;
		var ang2;
		var ang2X;
		var ang2Y;
		var ang2Z;
		lin1X = 0;
		lin1Y = 0;
		lin1Z = 0;
		ang1X = 0;
		ang1Y = 0;
		ang1Z = 0;
		ang2X = 0;
		ang2Y = 0;
		ang2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var jn = row.jacobianN;
			var jt = row.jacobianT;
			var jb = row.jacobianB;
			var impN = imp.impulseN;
			var impT = imp.impulseT;
			var impB = imp.impulseB;
			var impulseL;
			var impulseLX;
			var impulseLY;
			var impulseLZ;
			impulseLX = 0;
			impulseLY = 0;
			impulseLZ = 0;
			impulseLX += jt.lin1X * impT;
			impulseLY += jt.lin1Y * impT;
			impulseLZ += jt.lin1Z * impT;
			impulseLX += jb.lin1X * impB;
			impulseLY += jb.lin1Y * impB;
			impulseLZ += jb.lin1Z * impB;
			imp.impulseLX = impulseLX;
			imp.impulseLY = impulseLY;
			imp.impulseLZ = impulseLZ;
			lin1X += jn.lin1X * impN;
			lin1Y += jn.lin1Y * impN;
			lin1Z += jn.lin1Z * impN;
			ang1X += jn.ang1X * impN;
			ang1Y += jn.ang1Y * impN;
			ang1Z += jn.ang1Z * impN;
			ang2X += jn.ang2X * impN;
			ang2Y += jn.ang2Y * impN;
			ang2Z += jn.ang2Z * impN;
			lin1X += jt.lin1X * impT;
			lin1Y += jt.lin1Y * impT;
			lin1Z += jt.lin1Z * impT;
			ang1X += jt.ang1X * impT;
			ang1Y += jt.ang1Y * impT;
			ang1Z += jt.ang1Z * impT;
			ang2X += jt.ang2X * impT;
			ang2Y += jt.ang2Y * impT;
			ang2Z += jt.ang2Z * impT;
			lin1X += jb.lin1X * impB;
			lin1Y += jb.lin1Y * impB;
			lin1Z += jb.lin1Z * impB;
			ang1X += jb.ang1X * impB;
			ang1Y += jb.ang1Y * impB;
			ang1Z += jb.ang1Z * impB;
			ang2X += jb.ang2X * impB;
			ang2Y += jb.ang2Y * impB;
			ang2Z += jb.ang2Z * impB;
		}
		this._b1._linearContactImpulseX += lin1X;
		this._b1._linearContactImpulseY += lin1Y;
		this._b1._linearContactImpulseZ += lin1Z;
		this._b1._angularContactImpulseX += ang1X;
		this._b1._angularContactImpulseY += ang1Y;
		this._b1._angularContactImpulseZ += ang1Z;
		this._b2._linearContactImpulseX -= lin1X;
		this._b2._linearContactImpulseY -= lin1Y;
		this._b2._linearContactImpulseZ -= lin1Z;
		this._b2._angularContactImpulseX -= ang2X;
		this._b2._angularContactImpulseY -= ang2Y;
		this._b2._angularContactImpulseZ -= ang2Z;
		this.constraint._syncManifold();
	}
	,__class__: oimo_dynamics_constraint_solver_pgs_PgsContactConstraintSolver
});
var oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver = function(joint) {
	oimo_dynamics_constraint_ConstraintSolver.call(this);
	this.joint = joint;
	this.info = new oimo_dynamics_constraint_info_joint_JointSolverInfo();
	var this1 = new Array(oimo_common_Setting.maxJacobianRows);
	this.massData = this1;
	var _g = 0;
	var _g1 = this.massData.length;
	while(_g < _g1) {
		var i = _g++;
		this.massData[i] = new oimo_dynamics_constraint_solver_common_JointSolverMassDataRow();
	}
};
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__name__ = "oimo.dynamics.constraint.solver.pgs.PgsJointConstraintSolver";
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.__super__ = oimo_dynamics_constraint_ConstraintSolver;
oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver.prototype = $extend(oimo_dynamics_constraint_ConstraintSolver.prototype,{
	preSolveVelocity: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getVelocitySolverInfo(timeStep,this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var j = row.jacobian;
			j.updateSparsity();
			if((j.flag & 1) != 0) {
				md.invMLin1X = j.lin1X * invM1;
				md.invMLin1Y = j.lin1Y * invM1;
				md.invMLin1Z = j.lin1Z * invM1;
				md.invMLin2X = j.lin2X * invM2;
				md.invMLin2Y = j.lin2Y * invM2;
				md.invMLin2Z = j.lin2Z * invM2;
			} else {
				md.invMLin1X = 0;
				md.invMLin1Y = 0;
				md.invMLin1Z = 0;
				md.invMLin2X = 0;
				md.invMLin2Y = 0;
				md.invMLin2Z = 0;
			}
			if((j.flag & 2) != 0) {
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
				__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
				__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
				md.invMAng1X = __tmp__X;
				md.invMAng1Y = __tmp__Y;
				md.invMAng1Z = __tmp__Z;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
				__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
				__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
				md.invMAng2X = __tmp__X1;
				md.invMAng2Y = __tmp__Y1;
				md.invMAng2Z = __tmp__Z1;
			} else {
				md.invMAng1X = 0;
				md.invMAng1Y = 0;
				md.invMAng1Z = 0;
				md.invMAng2X = 0;
				md.invMAng2Y = 0;
				md.invMAng2Z = 0;
			}
			md.massWithoutCfm = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			md.mass = md.massWithoutCfm + row.cfm;
			if(md.massWithoutCfm != 0) {
				md.massWithoutCfm = 1 / md.massWithoutCfm;
			}
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
	}
	,warmStart: function(timeStep) {
		var factor = this.joint._positionCorrectionAlgorithm == oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE ? oimo_common_Setting.jointWarmStartingFactorForBaungarte : oimo_common_Setting.jointWarmStartingFactor;
		factor *= timeStep.dtRatio;
		if(factor <= 0) {
			var _g = 0;
			var _g1 = this.info.numRows;
			while(_g < _g1) {
				var i = _g++;
				var row = this.info.rows[i];
				var _this = row.impulse;
				_this.impulse = 0;
				_this.impulseM = 0;
				_this.impulseP = 0;
			}
			return;
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			imp.impulse *= factor;
			imp.impulseM *= factor;
			var impulse = imp.impulse + imp.impulseM;
			lv1X += md.invMLin1X * impulse;
			lv1Y += md.invMLin1Y * impulse;
			lv1Z += md.invMLin1Z * impulse;
			lv2X += md.invMLin2X * -impulse;
			lv2Y += md.invMLin2Y * -impulse;
			lv2Z += md.invMLin2Z * -impulse;
			av1X += md.invMAng1X * impulse;
			av1Y += md.invMAng1Y * impulse;
			av1Z += md.invMAng1Z * impulse;
			av2X += md.invMAng2X * -impulse;
			av2Y += md.invMAng2Y * -impulse;
			av2Z += md.invMAng2Z * -impulse;
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,solveVelocity: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._velX;
		lv1Y = this._b1._velY;
		lv1Z = this._b1._velZ;
		lv2X = this._b2._velX;
		lv2Y = this._b2._velY;
		lv2Z = this._b2._velZ;
		av1X = this._b1._angVelX;
		av1Y = this._b1._angVelY;
		av1Z = this._b1._angVelZ;
		av2X = this._b2._angVelX;
		av2Y = this._b2._angVelY;
		av2Z = this._b2._angVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if(row.motorMaxImpulse == 0) {
				continue;
			}
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseM = (-row.motorSpeed - rv) * md.massWithoutCfm;
			var oldImpulseM = imp.impulseM;
			imp.impulseM += impulseM;
			if(imp.impulseM < -row.motorMaxImpulse) {
				imp.impulseM = -row.motorMaxImpulse;
			} else if(imp.impulseM > row.motorMaxImpulse) {
				imp.impulseM = row.motorMaxImpulse;
			}
			impulseM = imp.impulseM - oldImpulseM;
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * impulseM;
				lv1Y += md.invMLin1Y * impulseM;
				lv1Z += md.invMLin1Z * impulseM;
				lv2X += md.invMLin2X * -impulseM;
				lv2Y += md.invMLin2Y * -impulseM;
				lv2Z += md.invMLin2Z * -impulseM;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * impulseM;
				av1Y += md.invMAng1Y * impulseM;
				av1Z += md.invMAng1Z * impulseM;
				av2X += md.invMAng2X * -impulseM;
				av2Y += md.invMAng2Y * -impulseM;
				av2Z += md.invMAng2Z * -impulseM;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulse = (row.rhs - rv - imp.impulse * row.cfm) * md.mass;
			var oldImpulse = imp.impulse;
			imp.impulse += impulse;
			if(imp.impulse < row.minImpulse) {
				imp.impulse = row.minImpulse;
			} else if(imp.impulse > row.maxImpulse) {
				imp.impulse = row.maxImpulse;
			}
			impulse = imp.impulse - oldImpulse;
			if((j.flag & 1) != 0) {
				lv1X += md.invMLin1X * impulse;
				lv1Y += md.invMLin1Y * impulse;
				lv1Z += md.invMLin1Z * impulse;
				lv2X += md.invMLin2X * -impulse;
				lv2Y += md.invMLin2Y * -impulse;
				lv2Z += md.invMLin2Z * -impulse;
			}
			if((j.flag & 2) != 0) {
				av1X += md.invMAng1X * impulse;
				av1Y += md.invMAng1Y * impulse;
				av1Z += md.invMAng1Z * impulse;
				av2X += md.invMAng2X * -impulse;
				av2Y += md.invMAng2Y * -impulse;
				av2Z += md.invMAng2Z * -impulse;
			}
		}
		this._b1._velX = lv1X;
		this._b1._velY = lv1Y;
		this._b1._velZ = lv1Z;
		this._b2._velX = lv2X;
		this._b2._velY = lv2Y;
		this._b2._velZ = lv2Z;
		this._b1._angVelX = av1X;
		this._b1._angVelY = av1Y;
		this._b1._angVelZ = av1Z;
		this._b2._angVelX = av2X;
		this._b2._angVelY = av2Y;
		this._b2._angVelZ = av2Z;
	}
	,postSolveVelocity: function(timeStep) {
		var lin;
		var linX;
		var linY;
		var linZ;
		var ang;
		var angX;
		var angY;
		var angZ;
		linX = 0;
		linY = 0;
		linZ = 0;
		angX = 0;
		angY = 0;
		angZ = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var imp = row.impulse;
			var j = row.jacobian;
			if((j.flag & 1) != 0) {
				linX += j.lin1X * imp.impulse;
				linY += j.lin1Y * imp.impulse;
				linZ += j.lin1Z * imp.impulse;
			} else if((j.flag & 2) != 0) {
				angX += j.ang1X * imp.impulse;
				angY += j.ang1Y * imp.impulse;
				angZ += j.ang1Z * imp.impulse;
			}
		}
		this.joint._appliedForceX = linX * timeStep.invDt;
		this.joint._appliedForceY = linY * timeStep.invDt;
		this.joint._appliedForceZ = linZ * timeStep.invDt;
		this.joint._appliedTorqueX = angX * timeStep.invDt;
		this.joint._appliedTorqueY = angY * timeStep.invDt;
		this.joint._appliedTorqueZ = angZ * timeStep.invDt;
	}
	,preSolvePosition: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			this.info.rows[i].impulse.impulseP = 0;
		}
	}
	,solvePositionSplitImpulse: function() {
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = this._b1._pseudoVelX;
		lv1Y = this._b1._pseudoVelY;
		lv1Z = this._b1._pseudoVelZ;
		lv2X = this._b2._pseudoVelX;
		lv2Y = this._b2._pseudoVelY;
		lv2Z = this._b2._pseudoVelZ;
		av1X = this._b1._angPseudoVelX;
		av1Y = this._b1._angPseudoVelY;
		av1Z = this._b1._angPseudoVelZ;
		av2X = this._b2._angPseudoVelX;
		av2Y = this._b2._angPseudoVelY;
		av2Z = this._b2._angPseudoVelZ;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs * oimo_common_Setting.positionSplitImpulseBaumgarte - rv) * md.mass;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < row.minImpulse) {
				imp.impulseP = row.minImpulse;
			} else if(imp.impulseP > row.maxImpulse) {
				imp.impulseP = row.maxImpulse;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLin1X * impulseP;
			lv1Y += md.invMLin1Y * impulseP;
			lv1Z += md.invMLin1Z * impulseP;
			lv2X += md.invMLin2X * -impulseP;
			lv2Y += md.invMLin2Y * -impulseP;
			lv2Z += md.invMLin2Z * -impulseP;
			av1X += md.invMAng1X * impulseP;
			av1Y += md.invMAng1Y * impulseP;
			av1Z += md.invMAng1Z * impulseP;
			av2X += md.invMAng2X * -impulseP;
			av2Y += md.invMAng2Y * -impulseP;
			av2Z += md.invMAng2Z * -impulseP;
		}
		this._b1._pseudoVelX = lv1X;
		this._b1._pseudoVelY = lv1Y;
		this._b1._pseudoVelZ = lv1Z;
		this._b2._pseudoVelX = lv2X;
		this._b2._pseudoVelY = lv2Y;
		this._b2._pseudoVelZ = lv2Z;
		this._b1._angPseudoVelX = av1X;
		this._b1._angPseudoVelY = av1Y;
		this._b1._angPseudoVelZ = av1Z;
		this._b2._angPseudoVelX = av2X;
		this._b2._angPseudoVelY = av2Y;
		this._b2._angPseudoVelZ = av2Z;
	}
	,solvePositionNgs: function(timeStep) {
		this.joint._syncAnchors();
		this.joint._getPositionSolverInfo(this.info);
		this._b1 = this.info.b1;
		this._b2 = this.info.b2;
		var invM1 = this._b1._invMass;
		var invM2 = this._b2._invMass;
		var invI1;
		var invI100;
		var invI101;
		var invI102;
		var invI110;
		var invI111;
		var invI112;
		var invI120;
		var invI121;
		var invI122;
		var invI2;
		var invI200;
		var invI201;
		var invI202;
		var invI210;
		var invI211;
		var invI212;
		var invI220;
		var invI221;
		var invI222;
		invI100 = this._b1._invInertia00;
		invI101 = this._b1._invInertia01;
		invI102 = this._b1._invInertia02;
		invI110 = this._b1._invInertia10;
		invI111 = this._b1._invInertia11;
		invI112 = this._b1._invInertia12;
		invI120 = this._b1._invInertia20;
		invI121 = this._b1._invInertia21;
		invI122 = this._b1._invInertia22;
		invI200 = this._b2._invInertia00;
		invI201 = this._b2._invInertia01;
		invI202 = this._b2._invInertia02;
		invI210 = this._b2._invInertia10;
		invI211 = this._b2._invInertia11;
		invI212 = this._b2._invInertia12;
		invI220 = this._b2._invInertia20;
		invI221 = this._b2._invInertia21;
		invI222 = this._b2._invInertia22;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			md.invMLin1X = j.lin1X * invM1;
			md.invMLin1Y = j.lin1Y * invM1;
			md.invMLin1Z = j.lin1Z * invM1;
			md.invMLin2X = j.lin2X * invM2;
			md.invMLin2Y = j.lin2Y * invM2;
			md.invMLin2Z = j.lin2Z * invM2;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = invI100 * j.ang1X + invI101 * j.ang1Y + invI102 * j.ang1Z;
			__tmp__Y = invI110 * j.ang1X + invI111 * j.ang1Y + invI112 * j.ang1Z;
			__tmp__Z = invI120 * j.ang1X + invI121 * j.ang1Y + invI122 * j.ang1Z;
			md.invMAng1X = __tmp__X;
			md.invMAng1Y = __tmp__Y;
			md.invMAng1Z = __tmp__Z;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = invI200 * j.ang2X + invI201 * j.ang2Y + invI202 * j.ang2Z;
			__tmp__Y1 = invI210 * j.ang2X + invI211 * j.ang2Y + invI212 * j.ang2Z;
			__tmp__Z1 = invI220 * j.ang2X + invI221 * j.ang2Y + invI222 * j.ang2Z;
			md.invMAng2X = __tmp__X1;
			md.invMAng2Y = __tmp__Y1;
			md.invMAng2Z = __tmp__Z1;
			md.mass = md.invMLin1X * j.lin1X + md.invMLin1Y * j.lin1Y + md.invMLin1Z * j.lin1Z + (md.invMLin2X * j.lin2X + md.invMLin2Y * j.lin2Y + md.invMLin2Z * j.lin2Z) + (md.invMAng1X * j.ang1X + md.invMAng1Y * j.ang1Y + md.invMAng1Z * j.ang1Z) + (md.invMAng2X * j.ang2X + md.invMAng2Y * j.ang2Y + md.invMAng2Z * j.ang2Z);
			if(md.mass != 0) {
				md.mass = 1 / md.mass;
			}
		}
		var lv1;
		var lv1X;
		var lv1Y;
		var lv1Z;
		var lv2;
		var lv2X;
		var lv2Y;
		var lv2Z;
		var av1;
		var av1X;
		var av1Y;
		var av1Z;
		var av2;
		var av2X;
		var av2Y;
		var av2Z;
		lv1X = 0;
		lv1Y = 0;
		lv1Z = 0;
		lv2X = 0;
		lv2Y = 0;
		lv2Z = 0;
		av1X = 0;
		av1Y = 0;
		av1Z = 0;
		av2X = 0;
		av2Y = 0;
		av2Z = 0;
		var _g = 0;
		var _g1 = this.info.numRows;
		while(_g < _g1) {
			var i = _g++;
			var row = this.info.rows[i];
			var md = this.massData[i];
			var imp = row.impulse;
			var j = row.jacobian;
			var rv = 0;
			rv += lv1X * j.lin1X + lv1Y * j.lin1Y + lv1Z * j.lin1Z;
			rv -= lv2X * j.lin2X + lv2Y * j.lin2Y + lv2Z * j.lin2Z;
			rv += av1X * j.ang1X + av1Y * j.ang1Y + av1Z * j.ang1Z;
			rv -= av2X * j.ang2X + av2Y * j.ang2Y + av2Z * j.ang2Z;
			var impulseP = (row.rhs * oimo_common_Setting.positionNgsBaumgarte - rv) * md.mass;
			var oldImpulseP = imp.impulseP;
			imp.impulseP += impulseP;
			if(imp.impulseP < row.minImpulse) {
				imp.impulseP = row.minImpulse;
			} else if(imp.impulseP > row.maxImpulse) {
				imp.impulseP = row.maxImpulse;
			}
			impulseP = imp.impulseP - oldImpulseP;
			lv1X += md.invMLin1X * impulseP;
			lv1Y += md.invMLin1Y * impulseP;
			lv1Z += md.invMLin1Z * impulseP;
			lv2X += md.invMLin2X * -impulseP;
			lv2Y += md.invMLin2Y * -impulseP;
			lv2Z += md.invMLin2Z * -impulseP;
			av1X += md.invMAng1X * impulseP;
			av1Y += md.invMAng1Y * impulseP;
			av1Z += md.invMAng1Z * impulseP;
			av2X += md.invMAng2X * -impulseP;
			av2Y += md.invMAng2Y * -impulseP;
			av2Z += md.invMAng2Z * -impulseP;
		}
		var _this = this._b1;
		_this._transform._positionX += lv1X;
		_this._transform._positionY += lv1Y;
		_this._transform._positionZ += lv1Z;
		var _this = this._b2;
		_this._transform._positionX += lv2X;
		_this._transform._positionY += lv2Y;
		_this._transform._positionZ += lv2Z;
		var _this = this._b1;
		var theta = Math.sqrt(av1X * av1X + av1Y * av1Y + av1Z * av1Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av1X * rotationToSinAxisFactor;
		sinAxisY = av1Y * rotationToSinAxisFactor;
		sinAxisZ = av1Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
		var _this = this._b2;
		var theta = Math.sqrt(av2X * av2X + av2Y * av2Y + av2Z * av2Z);
		var halfTheta = theta * 0.5;
		var rotationToSinAxisFactor;
		var cosHalfTheta;
		if(halfTheta < 0.5) {
			var ht2 = halfTheta * halfTheta;
			rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
			cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
		} else {
			rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
			cosHalfTheta = Math.cos(halfTheta);
		}
		var sinAxis;
		var sinAxisX;
		var sinAxisY;
		var sinAxisZ;
		sinAxisX = av2X * rotationToSinAxisFactor;
		sinAxisY = av2Y * rotationToSinAxisFactor;
		sinAxisZ = av2Z * rotationToSinAxisFactor;
		var dq;
		var dqX;
		var dqY;
		var dqZ;
		var dqW;
		dqX = sinAxisX;
		dqY = sinAxisY;
		dqZ = sinAxisZ;
		dqW = cosHalfTheta;
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var e00 = _this._transform._rotation00;
		var e11 = _this._transform._rotation11;
		var e22 = _this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			qW = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			qY = (_this._transform._rotation02 - _this._transform._rotation20) * s;
			qZ = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				qX = 0.5 * s;
				s = 0.5 / s;
				qY = (_this._transform._rotation01 + _this._transform._rotation10) * s;
				qZ = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qW = (_this._transform._rotation21 - _this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
				qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
				qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			qY = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation01 + _this._transform._rotation10) * s;
			qZ = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation02 - _this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			qZ = 0.5 * s;
			s = 0.5 / s;
			qX = (_this._transform._rotation02 + _this._transform._rotation20) * s;
			qY = (_this._transform._rotation12 + _this._transform._rotation21) * s;
			qW = (_this._transform._rotation10 - _this._transform._rotation01) * s;
		}
		qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
		qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
		qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
		qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
		var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
		if(l > 1e-32) {
			l = 1 / Math.sqrt(l);
		}
		qX *= l;
		qY *= l;
		qZ *= l;
		qW *= l;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this._transform._rotation00 = 1 - yy - zz;
		_this._transform._rotation01 = xy - wz;
		_this._transform._rotation02 = xz + wy;
		_this._transform._rotation10 = xy + wz;
		_this._transform._rotation11 = 1 - xx - zz;
		_this._transform._rotation12 = yz - wx;
		_this._transform._rotation20 = xz - wy;
		_this._transform._rotation21 = yz + wx;
		_this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._transform._rotation00 * _this._invLocalInertia00 + _this._transform._rotation01 * _this._invLocalInertia10 + _this._transform._rotation02 * _this._invLocalInertia20;
		__tmp__01 = _this._transform._rotation00 * _this._invLocalInertia01 + _this._transform._rotation01 * _this._invLocalInertia11 + _this._transform._rotation02 * _this._invLocalInertia21;
		__tmp__02 = _this._transform._rotation00 * _this._invLocalInertia02 + _this._transform._rotation01 * _this._invLocalInertia12 + _this._transform._rotation02 * _this._invLocalInertia22;
		__tmp__10 = _this._transform._rotation10 * _this._invLocalInertia00 + _this._transform._rotation11 * _this._invLocalInertia10 + _this._transform._rotation12 * _this._invLocalInertia20;
		__tmp__11 = _this._transform._rotation10 * _this._invLocalInertia01 + _this._transform._rotation11 * _this._invLocalInertia11 + _this._transform._rotation12 * _this._invLocalInertia21;
		__tmp__12 = _this._transform._rotation10 * _this._invLocalInertia02 + _this._transform._rotation11 * _this._invLocalInertia12 + _this._transform._rotation12 * _this._invLocalInertia22;
		__tmp__20 = _this._transform._rotation20 * _this._invLocalInertia00 + _this._transform._rotation21 * _this._invLocalInertia10 + _this._transform._rotation22 * _this._invLocalInertia20;
		__tmp__21 = _this._transform._rotation20 * _this._invLocalInertia01 + _this._transform._rotation21 * _this._invLocalInertia11 + _this._transform._rotation22 * _this._invLocalInertia21;
		__tmp__22 = _this._transform._rotation20 * _this._invLocalInertia02 + _this._transform._rotation21 * _this._invLocalInertia12 + _this._transform._rotation22 * _this._invLocalInertia22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = _this._invInertia00 * _this._transform._rotation00 + _this._invInertia01 * _this._transform._rotation01 + _this._invInertia02 * _this._transform._rotation02;
		__tmp__01 = _this._invInertia00 * _this._transform._rotation10 + _this._invInertia01 * _this._transform._rotation11 + _this._invInertia02 * _this._transform._rotation12;
		__tmp__02 = _this._invInertia00 * _this._transform._rotation20 + _this._invInertia01 * _this._transform._rotation21 + _this._invInertia02 * _this._transform._rotation22;
		__tmp__10 = _this._invInertia10 * _this._transform._rotation00 + _this._invInertia11 * _this._transform._rotation01 + _this._invInertia12 * _this._transform._rotation02;
		__tmp__11 = _this._invInertia10 * _this._transform._rotation10 + _this._invInertia11 * _this._transform._rotation11 + _this._invInertia12 * _this._transform._rotation12;
		__tmp__12 = _this._invInertia10 * _this._transform._rotation20 + _this._invInertia11 * _this._transform._rotation21 + _this._invInertia12 * _this._transform._rotation22;
		__tmp__20 = _this._invInertia20 * _this._transform._rotation00 + _this._invInertia21 * _this._transform._rotation01 + _this._invInertia22 * _this._transform._rotation02;
		__tmp__21 = _this._invInertia20 * _this._transform._rotation10 + _this._invInertia21 * _this._transform._rotation11 + _this._invInertia22 * _this._transform._rotation12;
		__tmp__22 = _this._invInertia20 * _this._transform._rotation20 + _this._invInertia21 * _this._transform._rotation21 + _this._invInertia22 * _this._transform._rotation22;
		_this._invInertia00 = __tmp__00;
		_this._invInertia01 = __tmp__01;
		_this._invInertia02 = __tmp__02;
		_this._invInertia10 = __tmp__10;
		_this._invInertia11 = __tmp__11;
		_this._invInertia12 = __tmp__12;
		_this._invInertia20 = __tmp__20;
		_this._invInertia21 = __tmp__21;
		_this._invInertia22 = __tmp__22;
		_this._invInertia00 *= _this._rotFactor.x;
		_this._invInertia01 *= _this._rotFactor.x;
		_this._invInertia02 *= _this._rotFactor.x;
		_this._invInertia10 *= _this._rotFactor.y;
		_this._invInertia11 *= _this._rotFactor.y;
		_this._invInertia12 *= _this._rotFactor.y;
		_this._invInertia20 *= _this._rotFactor.z;
		_this._invInertia21 *= _this._rotFactor.z;
		_this._invInertia22 *= _this._rotFactor.z;
	}
	,postSolve: function() {
		this.joint._syncAnchors();
		this.joint._checkDestruction();
	}
	,__class__: oimo_dynamics_constraint_solver_pgs_PgsJointConstraintSolver
});
var oimo_dynamics_rigidbody_MassData = function() {
	this.mass = 0;
	this.localInertia = new oimo_common_Mat3();
};
oimo_dynamics_rigidbody_MassData.__name__ = "oimo.dynamics.rigidbody.MassData";
oimo_dynamics_rigidbody_MassData.prototype = {
	__class__: oimo_dynamics_rigidbody_MassData
};
var oimo_dynamics_rigidbody_RigidBody = function(config) {
	this._next = null;
	this._prev = null;
	this._shapeList = null;
	this._shapeListLast = null;
	this._numShapes = 0;
	this._contactLinkList = null;
	this._contactLinkListLast = null;
	this._numContactLinks = 0;
	this._jointLinkList = null;
	this._jointLinkListLast = null;
	this._numJointLinks = 0;
	var v = config.linearVelocity;
	this._velX = v.x;
	this._velY = v.y;
	this._velZ = v.z;
	var v = config.angularVelocity;
	this._angVelX = v.x;
	this._angVelY = v.y;
	this._angVelZ = v.z;
	this._pseudoVelX = 0;
	this._pseudoVelY = 0;
	this._pseudoVelZ = 0;
	this._angPseudoVelX = 0;
	this._angPseudoVelY = 0;
	this._angPseudoVelZ = 0;
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v = config.position;
	this._ptransform._positionX = v.x;
	this._ptransform._positionY = v.y;
	this._ptransform._positionZ = v.z;
	var m = config.rotation;
	this._ptransform._rotation00 = m.e00;
	this._ptransform._rotation01 = m.e01;
	this._ptransform._rotation02 = m.e02;
	this._ptransform._rotation10 = m.e10;
	this._ptransform._rotation11 = m.e11;
	this._ptransform._rotation12 = m.e12;
	this._ptransform._rotation20 = m.e20;
	this._ptransform._rotation21 = m.e21;
	this._ptransform._rotation22 = m.e22;
	var dst = this._transform;
	var src = this._ptransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	this._type = config.type;
	this._sleepTime = 0;
	this._sleeping = false;
	this._autoSleep = config.autoSleep;
	this._mass = 0;
	this._invMass = 0;
	this._localInertia00 = 0;
	this._localInertia01 = 0;
	this._localInertia02 = 0;
	this._localInertia10 = 0;
	this._localInertia11 = 0;
	this._localInertia12 = 0;
	this._localInertia20 = 0;
	this._localInertia21 = 0;
	this._localInertia22 = 0;
	this._invLocalInertia00 = 0;
	this._invLocalInertia01 = 0;
	this._invLocalInertia02 = 0;
	this._invLocalInertia10 = 0;
	this._invLocalInertia11 = 0;
	this._invLocalInertia12 = 0;
	this._invLocalInertia20 = 0;
	this._invLocalInertia21 = 0;
	this._invLocalInertia22 = 0;
	this._invLocalInertiaWithoutRotFactor00 = 0;
	this._invLocalInertiaWithoutRotFactor01 = 0;
	this._invLocalInertiaWithoutRotFactor02 = 0;
	this._invLocalInertiaWithoutRotFactor10 = 0;
	this._invLocalInertiaWithoutRotFactor11 = 0;
	this._invLocalInertiaWithoutRotFactor12 = 0;
	this._invLocalInertiaWithoutRotFactor20 = 0;
	this._invLocalInertiaWithoutRotFactor21 = 0;
	this._invLocalInertiaWithoutRotFactor22 = 0;
	this._invInertia00 = 0;
	this._invInertia01 = 0;
	this._invInertia02 = 0;
	this._invInertia10 = 0;
	this._invInertia11 = 0;
	this._invInertia12 = 0;
	this._invInertia20 = 0;
	this._invInertia21 = 0;
	this._invInertia22 = 0;
	this._linearDamping = config.linearDamping;
	this._angularDamping = config.angularDamping;
	this._forceX = 0;
	this._forceY = 0;
	this._forceZ = 0;
	this._torqueX = 0;
	this._torqueY = 0;
	this._torqueZ = 0;
	this._linearContactImpulseX = 0;
	this._linearContactImpulseY = 0;
	this._linearContactImpulseZ = 0;
	this._angularContactImpulseX = 0;
	this._angularContactImpulseY = 0;
	this._angularContactImpulseZ = 0;
	this._rotFactor = new oimo_common_Vec3(1,1,1);
	this._addedToIsland = false;
	this._gravityScale = 1;
	this._world = null;
};
oimo_dynamics_rigidbody_RigidBody.__name__ = "oimo.dynamics.rigidbody.RigidBody";
oimo_dynamics_rigidbody_RigidBody.prototype = {
	_integrate: function(dt) {
		switch(this._type) {
		case 1:
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translation;
			var translationX;
			var translationY;
			var translationZ;
			var rotation;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._velX * dt;
			translationY = this._velY * dt;
			translationZ = this._velZ * dt;
			rotationX = this._angVelX * dt;
			rotationY = this._angVelY * dt;
			rotationZ = this._angVelZ * dt;
			var translationLengthSq = translationX * translationX + translationY * translationY + translationZ * translationZ;
			var rotationLengthSq = rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ;
			if(translationLengthSq == 0 && rotationLengthSq == 0) {
				return;
			}
			if(translationLengthSq > oimo_common_Setting.maxTranslationPerStep * oimo_common_Setting.maxTranslationPerStep) {
				var l = oimo_common_Setting.maxTranslationPerStep / Math.sqrt(translationLengthSq);
				this._velX *= l;
				this._velY *= l;
				this._velZ *= l;
				translationX *= l;
				translationY *= l;
				translationZ *= l;
			}
			if(rotationLengthSq > oimo_common_Setting.maxRotationPerStep * oimo_common_Setting.maxRotationPerStep) {
				var l = oimo_common_Setting.maxRotationPerStep / Math.sqrt(rotationLengthSq);
				this._angVelX *= l;
				this._angVelY *= l;
				this._angVelZ *= l;
				rotationX *= l;
				rotationY *= l;
				rotationZ *= l;
			}
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxis;
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dq;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var q;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			qX *= l;
			qY *= l;
			qZ *= l;
			qW *= l;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,_integratePseudoVelocity: function() {
		var pseudoVelLengthSq = this._pseudoVelX * this._pseudoVelX + this._pseudoVelY * this._pseudoVelY + this._pseudoVelZ * this._pseudoVelZ;
		var angPseudoVelLengthSq = this._angPseudoVelX * this._angPseudoVelX + this._angPseudoVelY * this._angPseudoVelY + this._angPseudoVelZ * this._angPseudoVelZ;
		if(pseudoVelLengthSq == 0 && angPseudoVelLengthSq == 0) {
			return;
		}
		switch(this._type) {
		case 1:
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			break;
		case 0:case 2:
			var translation;
			var translationX;
			var translationY;
			var translationZ;
			var rotation;
			var rotationX;
			var rotationY;
			var rotationZ;
			translationX = this._pseudoVelX;
			translationY = this._pseudoVelY;
			translationZ = this._pseudoVelZ;
			rotationX = this._angPseudoVelX;
			rotationY = this._angPseudoVelY;
			rotationZ = this._angPseudoVelZ;
			this._pseudoVelX = 0;
			this._pseudoVelY = 0;
			this._pseudoVelZ = 0;
			this._angPseudoVelX = 0;
			this._angPseudoVelY = 0;
			this._angPseudoVelZ = 0;
			this._transform._positionX += translationX;
			this._transform._positionY += translationY;
			this._transform._positionZ += translationZ;
			var theta = Math.sqrt(rotationX * rotationX + rotationY * rotationY + rotationZ * rotationZ);
			var halfTheta = theta * 0.5;
			var rotationToSinAxisFactor;
			var cosHalfTheta;
			if(halfTheta < 0.5) {
				var ht2 = halfTheta * halfTheta;
				rotationToSinAxisFactor = 0.5 * (1 - ht2 * 0.16666666666666666 + ht2 * ht2 * 0.0083333333333333332);
				cosHalfTheta = 1 - ht2 * 0.5 + ht2 * ht2 * 0.041666666666666664;
			} else {
				rotationToSinAxisFactor = Math.sin(halfTheta) / theta;
				cosHalfTheta = Math.cos(halfTheta);
			}
			var sinAxis;
			var sinAxisX;
			var sinAxisY;
			var sinAxisZ;
			sinAxisX = rotationX * rotationToSinAxisFactor;
			sinAxisY = rotationY * rotationToSinAxisFactor;
			sinAxisZ = rotationZ * rotationToSinAxisFactor;
			var dq;
			var dqX;
			var dqY;
			var dqZ;
			var dqW;
			dqX = sinAxisX;
			dqY = sinAxisY;
			dqZ = sinAxisZ;
			dqW = cosHalfTheta;
			var q;
			var qX;
			var qY;
			var qZ;
			var qW;
			var e00 = this._transform._rotation00;
			var e11 = this._transform._rotation11;
			var e22 = this._transform._rotation22;
			var t = e00 + e11 + e22;
			var s;
			if(t > 0) {
				s = Math.sqrt(t + 1);
				qW = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation21 - this._transform._rotation12) * s;
				qY = (this._transform._rotation02 - this._transform._rotation20) * s;
				qZ = (this._transform._rotation10 - this._transform._rotation01) * s;
			} else if(e00 > e11) {
				if(e00 > e22) {
					s = Math.sqrt(e00 - e11 - e22 + 1);
					qX = 0.5 * s;
					s = 0.5 / s;
					qY = (this._transform._rotation01 + this._transform._rotation10) * s;
					qZ = (this._transform._rotation02 + this._transform._rotation20) * s;
					qW = (this._transform._rotation21 - this._transform._rotation12) * s;
				} else {
					s = Math.sqrt(e22 - e00 - e11 + 1);
					qZ = 0.5 * s;
					s = 0.5 / s;
					qX = (this._transform._rotation02 + this._transform._rotation20) * s;
					qY = (this._transform._rotation12 + this._transform._rotation21) * s;
					qW = (this._transform._rotation10 - this._transform._rotation01) * s;
				}
			} else if(e11 > e22) {
				s = Math.sqrt(e11 - e22 - e00 + 1);
				qY = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation01 + this._transform._rotation10) * s;
				qZ = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation02 - this._transform._rotation20) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				qZ = 0.5 * s;
				s = 0.5 / s;
				qX = (this._transform._rotation02 + this._transform._rotation20) * s;
				qY = (this._transform._rotation12 + this._transform._rotation21) * s;
				qW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
			qX = dqW * qX + dqX * qW + dqY * qZ - dqZ * qY;
			qY = dqW * qY - dqX * qZ + dqY * qW + dqZ * qX;
			qZ = dqW * qZ + dqX * qY - dqY * qX + dqZ * qW;
			qW = dqW * qW - dqX * qX - dqY * qY - dqZ * qZ;
			var l = qX * qX + qY * qY + qZ * qZ + qW * qW;
			if(l > 1e-32) {
				l = 1 / Math.sqrt(l);
			}
			qX *= l;
			qY *= l;
			qZ *= l;
			qW *= l;
			var x = qX;
			var y = qY;
			var z = qZ;
			var w = qW;
			var x2 = 2 * x;
			var y2 = 2 * y;
			var z2 = 2 * z;
			var xx = x * x2;
			var yy = y * y2;
			var zz = z * z2;
			var xy = x * y2;
			var yz = y * z2;
			var xz = x * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			this._transform._rotation00 = 1 - yy - zz;
			this._transform._rotation01 = xy - wz;
			this._transform._rotation02 = xz + wy;
			this._transform._rotation10 = xy + wz;
			this._transform._rotation11 = 1 - xx - zz;
			this._transform._rotation12 = yz - wx;
			this._transform._rotation20 = xz - wy;
			this._transform._rotation21 = yz + wx;
			this._transform._rotation22 = 1 - xx - yy;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
			__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
			__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
			__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
			__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
			__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
			__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
			__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
			__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
			__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
			__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
			__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
			__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
			__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
			__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
			__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
			__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
			this._invInertia00 = __tmp__00;
			this._invInertia01 = __tmp__01;
			this._invInertia02 = __tmp__02;
			this._invInertia10 = __tmp__10;
			this._invInertia11 = __tmp__11;
			this._invInertia12 = __tmp__12;
			this._invInertia20 = __tmp__20;
			this._invInertia21 = __tmp__21;
			this._invInertia22 = __tmp__22;
			this._invInertia00 *= this._rotFactor.x;
			this._invInertia01 *= this._rotFactor.x;
			this._invInertia02 *= this._rotFactor.x;
			this._invInertia10 *= this._rotFactor.y;
			this._invInertia11 *= this._rotFactor.y;
			this._invInertia12 *= this._rotFactor.y;
			this._invInertia20 *= this._rotFactor.z;
			this._invInertia21 *= this._rotFactor.z;
			this._invInertia22 *= this._rotFactor.z;
			break;
		}
	}
	,updateMass: function() {
		var totalInertia;
		var totalInertia00;
		var totalInertia01;
		var totalInertia02;
		var totalInertia10;
		var totalInertia11;
		var totalInertia12;
		var totalInertia20;
		var totalInertia21;
		var totalInertia22;
		totalInertia00 = 0;
		totalInertia01 = 0;
		totalInertia02 = 0;
		totalInertia10 = 0;
		totalInertia11 = 0;
		totalInertia12 = 0;
		totalInertia20 = 0;
		totalInertia21 = 0;
		totalInertia22 = 0;
		var totalMass = 0;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var g = s._geom;
			g._updateMass();
			var mass = s._density * g._volume;
			var inertia;
			var inertia00;
			var inertia01;
			var inertia02;
			var inertia10;
			var inertia11;
			var inertia12;
			var inertia20;
			var inertia21;
			var inertia22;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = s._localTransform._rotation00 * g._inertiaCoeff00 + s._localTransform._rotation01 * g._inertiaCoeff10 + s._localTransform._rotation02 * g._inertiaCoeff20;
			__tmp__01 = s._localTransform._rotation00 * g._inertiaCoeff01 + s._localTransform._rotation01 * g._inertiaCoeff11 + s._localTransform._rotation02 * g._inertiaCoeff21;
			__tmp__02 = s._localTransform._rotation00 * g._inertiaCoeff02 + s._localTransform._rotation01 * g._inertiaCoeff12 + s._localTransform._rotation02 * g._inertiaCoeff22;
			__tmp__10 = s._localTransform._rotation10 * g._inertiaCoeff00 + s._localTransform._rotation11 * g._inertiaCoeff10 + s._localTransform._rotation12 * g._inertiaCoeff20;
			__tmp__11 = s._localTransform._rotation10 * g._inertiaCoeff01 + s._localTransform._rotation11 * g._inertiaCoeff11 + s._localTransform._rotation12 * g._inertiaCoeff21;
			__tmp__12 = s._localTransform._rotation10 * g._inertiaCoeff02 + s._localTransform._rotation11 * g._inertiaCoeff12 + s._localTransform._rotation12 * g._inertiaCoeff22;
			__tmp__20 = s._localTransform._rotation20 * g._inertiaCoeff00 + s._localTransform._rotation21 * g._inertiaCoeff10 + s._localTransform._rotation22 * g._inertiaCoeff20;
			__tmp__21 = s._localTransform._rotation20 * g._inertiaCoeff01 + s._localTransform._rotation21 * g._inertiaCoeff11 + s._localTransform._rotation22 * g._inertiaCoeff21;
			__tmp__22 = s._localTransform._rotation20 * g._inertiaCoeff02 + s._localTransform._rotation21 * g._inertiaCoeff12 + s._localTransform._rotation22 * g._inertiaCoeff22;
			inertia00 = __tmp__00;
			inertia01 = __tmp__01;
			inertia02 = __tmp__02;
			inertia10 = __tmp__10;
			inertia11 = __tmp__11;
			inertia12 = __tmp__12;
			inertia20 = __tmp__20;
			inertia21 = __tmp__21;
			inertia22 = __tmp__22;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = inertia00 * s._localTransform._rotation00 + inertia01 * s._localTransform._rotation01 + inertia02 * s._localTransform._rotation02;
			__tmp__011 = inertia00 * s._localTransform._rotation10 + inertia01 * s._localTransform._rotation11 + inertia02 * s._localTransform._rotation12;
			__tmp__021 = inertia00 * s._localTransform._rotation20 + inertia01 * s._localTransform._rotation21 + inertia02 * s._localTransform._rotation22;
			__tmp__101 = inertia10 * s._localTransform._rotation00 + inertia11 * s._localTransform._rotation01 + inertia12 * s._localTransform._rotation02;
			__tmp__111 = inertia10 * s._localTransform._rotation10 + inertia11 * s._localTransform._rotation11 + inertia12 * s._localTransform._rotation12;
			__tmp__121 = inertia10 * s._localTransform._rotation20 + inertia11 * s._localTransform._rotation21 + inertia12 * s._localTransform._rotation22;
			__tmp__201 = inertia20 * s._localTransform._rotation00 + inertia21 * s._localTransform._rotation01 + inertia22 * s._localTransform._rotation02;
			__tmp__211 = inertia20 * s._localTransform._rotation10 + inertia21 * s._localTransform._rotation11 + inertia22 * s._localTransform._rotation12;
			__tmp__221 = inertia20 * s._localTransform._rotation20 + inertia21 * s._localTransform._rotation21 + inertia22 * s._localTransform._rotation22;
			inertia00 = __tmp__001;
			inertia01 = __tmp__011;
			inertia02 = __tmp__021;
			inertia10 = __tmp__101;
			inertia11 = __tmp__111;
			inertia12 = __tmp__121;
			inertia20 = __tmp__201;
			inertia21 = __tmp__211;
			inertia22 = __tmp__221;
			inertia00 *= mass;
			inertia01 *= mass;
			inertia02 *= mass;
			inertia10 *= mass;
			inertia11 *= mass;
			inertia12 *= mass;
			inertia20 *= mass;
			inertia21 *= mass;
			inertia22 *= mass;
			var cogInertia;
			var cogInertia00;
			var cogInertia01;
			var cogInertia02;
			var cogInertia10;
			var cogInertia11;
			var cogInertia12;
			var cogInertia20;
			var cogInertia21;
			var cogInertia22;
			var xx = s._localTransform._positionX * s._localTransform._positionX;
			var yy = s._localTransform._positionY * s._localTransform._positionY;
			var zz = s._localTransform._positionZ * s._localTransform._positionZ;
			var xy = -s._localTransform._positionX * s._localTransform._positionY;
			var yz = -s._localTransform._positionY * s._localTransform._positionZ;
			var zx = -s._localTransform._positionZ * s._localTransform._positionX;
			cogInertia00 = yy + zz;
			cogInertia01 = xy;
			cogInertia02 = zx;
			cogInertia10 = xy;
			cogInertia11 = xx + zz;
			cogInertia12 = yz;
			cogInertia20 = zx;
			cogInertia21 = yz;
			cogInertia22 = xx + yy;
			inertia00 += cogInertia00 * mass;
			inertia01 += cogInertia01 * mass;
			inertia02 += cogInertia02 * mass;
			inertia10 += cogInertia10 * mass;
			inertia11 += cogInertia11 * mass;
			inertia12 += cogInertia12 * mass;
			inertia20 += cogInertia20 * mass;
			inertia21 += cogInertia21 * mass;
			inertia22 += cogInertia22 * mass;
			totalMass += mass;
			totalInertia00 += inertia00;
			totalInertia01 += inertia01;
			totalInertia02 += inertia02;
			totalInertia10 += inertia10;
			totalInertia11 += inertia11;
			totalInertia12 += inertia12;
			totalInertia20 += inertia20;
			totalInertia21 += inertia21;
			totalInertia22 += inertia22;
			s = n;
		}
		this._mass = totalMass;
		this._localInertia00 = totalInertia00;
		this._localInertia01 = totalInertia01;
		this._localInertia02 = totalInertia02;
		this._localInertia10 = totalInertia10;
		this._localInertia11 = totalInertia11;
		this._localInertia12 = totalInertia12;
		this._localInertia20 = totalInertia20;
		this._localInertia21 = totalInertia21;
		this._localInertia22 = totalInertia22;
		var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
		var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
		var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
		var det = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
		if(this._mass > 0 && det > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d10 = this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21;
			var d11 = this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20;
			var d12 = this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20;
			var d20 = this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11;
			var d21 = this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10;
			var d22 = this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10;
			var d = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d00 * d;
			this._invLocalInertia01 = -d10 * d;
			this._invLocalInertia02 = d20 * d;
			this._invLocalInertia10 = -d01 * d;
			this._invLocalInertia11 = d11 * d;
			this._invLocalInertia12 = -d21 * d;
			this._invLocalInertia20 = d02 * d;
			this._invLocalInertia21 = -d12 * d;
			this._invLocalInertia22 = d22 * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getPosition: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._transform._positionX;
		v1.y = this._transform._positionY;
		v1.z = this._transform._positionZ;
		return v;
	}
	,getPositionTo: function(position) {
		var v = position;
		v.x = this._transform._positionX;
		v.y = this._transform._positionY;
		v.z = this._transform._positionZ;
	}
	,setPosition: function(position) {
		var v = position;
		this._transform._positionX = v.x;
		this._transform._positionY = v.y;
		this._transform._positionZ = v.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,translate: function(translation) {
		var diff;
		var diffX;
		var diffY;
		var diffZ;
		var v = translation;
		diffX = v.x;
		diffY = v.y;
		diffZ = v.z;
		this._transform._positionX += diffX;
		this._transform._positionY += diffY;
		this._transform._positionZ += diffZ;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotation: function() {
		var m = new oimo_common_Mat3();
		var m1 = m;
		m1.e00 = this._transform._rotation00;
		m1.e01 = this._transform._rotation01;
		m1.e02 = this._transform._rotation02;
		m1.e10 = this._transform._rotation10;
		m1.e11 = this._transform._rotation11;
		m1.e12 = this._transform._rotation12;
		m1.e20 = this._transform._rotation20;
		m1.e21 = this._transform._rotation21;
		m1.e22 = this._transform._rotation22;
		return m;
	}
	,getRotationTo: function(rotation) {
		var m = rotation;
		m.e00 = this._transform._rotation00;
		m.e01 = this._transform._rotation01;
		m.e02 = this._transform._rotation02;
		m.e10 = this._transform._rotation10;
		m.e11 = this._transform._rotation11;
		m.e12 = this._transform._rotation12;
		m.e20 = this._transform._rotation20;
		m.e21 = this._transform._rotation21;
		m.e22 = this._transform._rotation22;
	}
	,setRotation: function(rotation) {
		var m = rotation;
		this._transform._rotation00 = m.e00;
		this._transform._rotation01 = m.e01;
		this._transform._rotation02 = m.e02;
		this._transform._rotation10 = m.e10;
		this._transform._rotation11 = m.e11;
		this._transform._rotation12 = m.e12;
		this._transform._rotation20 = m.e20;
		this._transform._rotation21 = m.e21;
		this._transform._rotation22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,setRotationXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		this._transform._rotation00 = cy * cz;
		this._transform._rotation01 = -cy * sz;
		this._transform._rotation02 = sy;
		this._transform._rotation10 = cx * sz + cz * sx * sy;
		this._transform._rotation11 = cx * cz - sx * sy * sz;
		this._transform._rotation12 = -cy * sx;
		this._transform._rotation20 = sx * sz - cx * cz * sy;
		this._transform._rotation21 = cz * sx + cx * sy * sz;
		this._transform._rotation22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotate: function(rotation) {
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var m = rotation;
		rot00 = m.e00;
		rot01 = m.e01;
		rot02 = m.e02;
		rot10 = m.e10;
		rot11 = m.e11;
		rot12 = m.e12;
		rot20 = m.e20;
		rot21 = m.e21;
		rot22 = m.e22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,rotateXyz: function(eulerAngles) {
		var xyz;
		var xyzX;
		var xyzY;
		var xyzZ;
		var rot;
		var rot00;
		var rot01;
		var rot02;
		var rot10;
		var rot11;
		var rot12;
		var rot20;
		var rot21;
		var rot22;
		var v = eulerAngles;
		xyzX = v.x;
		xyzY = v.y;
		xyzZ = v.z;
		var sx = Math.sin(xyzX);
		var sy = Math.sin(xyzY);
		var sz = Math.sin(xyzZ);
		var cx = Math.cos(xyzX);
		var cy = Math.cos(xyzY);
		var cz = Math.cos(xyzZ);
		rot00 = cy * cz;
		rot01 = -cy * sz;
		rot02 = sy;
		rot10 = cx * sz + cz * sx * sy;
		rot11 = cx * cz - sx * sy * sz;
		rot12 = -cy * sx;
		rot20 = sx * sz - cx * cz * sy;
		rot21 = cz * sx + cx * sy * sz;
		rot22 = cx * cy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = rot00 * this._transform._rotation00 + rot01 * this._transform._rotation10 + rot02 * this._transform._rotation20;
		__tmp__01 = rot00 * this._transform._rotation01 + rot01 * this._transform._rotation11 + rot02 * this._transform._rotation21;
		__tmp__02 = rot00 * this._transform._rotation02 + rot01 * this._transform._rotation12 + rot02 * this._transform._rotation22;
		__tmp__10 = rot10 * this._transform._rotation00 + rot11 * this._transform._rotation10 + rot12 * this._transform._rotation20;
		__tmp__11 = rot10 * this._transform._rotation01 + rot11 * this._transform._rotation11 + rot12 * this._transform._rotation21;
		__tmp__12 = rot10 * this._transform._rotation02 + rot11 * this._transform._rotation12 + rot12 * this._transform._rotation22;
		__tmp__20 = rot20 * this._transform._rotation00 + rot21 * this._transform._rotation10 + rot22 * this._transform._rotation20;
		__tmp__21 = rot20 * this._transform._rotation01 + rot21 * this._transform._rotation11 + rot22 * this._transform._rotation21;
		__tmp__22 = rot20 * this._transform._rotation02 + rot21 * this._transform._rotation12 + rot22 * this._transform._rotation22;
		this._transform._rotation00 = __tmp__00;
		this._transform._rotation01 = __tmp__01;
		this._transform._rotation02 = __tmp__02;
		this._transform._rotation10 = __tmp__10;
		this._transform._rotation11 = __tmp__11;
		this._transform._rotation12 = __tmp__12;
		this._transform._rotation20 = __tmp__20;
		this._transform._rotation21 = __tmp__21;
		this._transform._rotation22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getOrientation: function() {
		var q = new oimo_common_Quat();
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		var q1 = q;
		q1.x = iqX;
		q1.y = iqY;
		q1.z = iqZ;
		q1.w = iqW;
		return q;
	}
	,getOrientationTo: function(orientation) {
		var iq;
		var iqX;
		var iqY;
		var iqZ;
		var iqW;
		var e00 = this._transform._rotation00;
		var e11 = this._transform._rotation11;
		var e22 = this._transform._rotation22;
		var t = e00 + e11 + e22;
		var s;
		if(t > 0) {
			s = Math.sqrt(t + 1);
			iqW = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation21 - this._transform._rotation12) * s;
			iqY = (this._transform._rotation02 - this._transform._rotation20) * s;
			iqZ = (this._transform._rotation10 - this._transform._rotation01) * s;
		} else if(e00 > e11) {
			if(e00 > e22) {
				s = Math.sqrt(e00 - e11 - e22 + 1);
				iqX = 0.5 * s;
				s = 0.5 / s;
				iqY = (this._transform._rotation01 + this._transform._rotation10) * s;
				iqZ = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqW = (this._transform._rotation21 - this._transform._rotation12) * s;
			} else {
				s = Math.sqrt(e22 - e00 - e11 + 1);
				iqZ = 0.5 * s;
				s = 0.5 / s;
				iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
				iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
				iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
			}
		} else if(e11 > e22) {
			s = Math.sqrt(e11 - e22 - e00 + 1);
			iqY = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation01 + this._transform._rotation10) * s;
			iqZ = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation02 - this._transform._rotation20) * s;
		} else {
			s = Math.sqrt(e22 - e00 - e11 + 1);
			iqZ = 0.5 * s;
			s = 0.5 / s;
			iqX = (this._transform._rotation02 + this._transform._rotation20) * s;
			iqY = (this._transform._rotation12 + this._transform._rotation21) * s;
			iqW = (this._transform._rotation10 - this._transform._rotation01) * s;
		}
		var q = orientation;
		q.x = iqX;
		q.y = iqY;
		q.z = iqZ;
		q.w = iqW;
	}
	,setOrientation: function(quaternion) {
		var q;
		var qX;
		var qY;
		var qZ;
		var qW;
		var q = quaternion;
		qX = q.x;
		qY = q.y;
		qZ = q.z;
		qW = q.w;
		var x = qX;
		var y = qY;
		var z = qZ;
		var w = qW;
		var x2 = 2 * x;
		var y2 = 2 * y;
		var z2 = 2 * z;
		var xx = x * x2;
		var yy = y * y2;
		var zz = z * z2;
		var xy = x * y2;
		var yz = y * z2;
		var xz = x * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this._transform._rotation00 = 1 - yy - zz;
		this._transform._rotation01 = xy - wz;
		this._transform._rotation02 = xz + wy;
		this._transform._rotation10 = xy + wz;
		this._transform._rotation11 = 1 - xx - zz;
		this._transform._rotation12 = yz - wx;
		this._transform._rotation20 = xz - wy;
		this._transform._rotation21 = yz + wx;
		this._transform._rotation22 = 1 - xx - yy;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setTransform: function(transform) {
		this._transform._positionX = transform._positionX;
		this._transform._positionY = transform._positionY;
		this._transform._positionZ = transform._positionZ;
		this._transform._rotation00 = transform._rotation00;
		this._transform._rotation01 = transform._rotation01;
		this._transform._rotation02 = transform._rotation02;
		this._transform._rotation10 = transform._rotation10;
		this._transform._rotation11 = transform._rotation11;
		this._transform._rotation12 = transform._rotation12;
		this._transform._rotation20 = transform._rotation20;
		this._transform._rotation21 = transform._rotation21;
		this._transform._rotation22 = transform._rotation22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		var dst = this._ptransform;
		var src = this._transform;
		dst._positionX = src._positionX;
		dst._positionY = src._positionY;
		dst._positionZ = src._positionZ;
		dst._rotation00 = src._rotation00;
		dst._rotation01 = src._rotation01;
		dst._rotation02 = src._rotation02;
		dst._rotation10 = src._rotation10;
		dst._rotation11 = src._rotation11;
		dst._rotation12 = src._rotation12;
		dst._rotation20 = src._rotation20;
		dst._rotation21 = src._rotation21;
		dst._rotation22 = src._rotation22;
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getMass: function() {
		return this._mass;
	}
	,getLocalInertia: function() {
		var m = new oimo_common_Mat3();
		var m1 = m;
		m1.e00 = this._localInertia00;
		m1.e01 = this._localInertia01;
		m1.e02 = this._localInertia02;
		m1.e10 = this._localInertia10;
		m1.e11 = this._localInertia11;
		m1.e12 = this._localInertia12;
		m1.e20 = this._localInertia20;
		m1.e21 = this._localInertia21;
		m1.e22 = this._localInertia22;
		return m;
	}
	,getLocalInertiaTo: function(inertia) {
		var m = inertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
	}
	,getMassData: function() {
		var md = new oimo_dynamics_rigidbody_MassData();
		md.mass = this._mass;
		var m = md.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
		return md;
	}
	,getMassDataTo: function(massData) {
		massData.mass = this._mass;
		var m = massData.localInertia;
		m.e00 = this._localInertia00;
		m.e01 = this._localInertia01;
		m.e02 = this._localInertia02;
		m.e10 = this._localInertia10;
		m.e11 = this._localInertia11;
		m.e12 = this._localInertia12;
		m.e20 = this._localInertia20;
		m.e21 = this._localInertia21;
		m.e22 = this._localInertia22;
	}
	,setMassData: function(massData) {
		this._mass = massData.mass;
		var m = massData.localInertia;
		this._localInertia00 = m.e00;
		this._localInertia01 = m.e01;
		this._localInertia02 = m.e02;
		this._localInertia10 = m.e10;
		this._localInertia11 = m.e11;
		this._localInertia12 = m.e12;
		this._localInertia20 = m.e20;
		this._localInertia21 = m.e21;
		this._localInertia22 = m.e22;
		var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
		var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
		var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
		var det = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
		if(this._mass > 0 && det > 0 && this._type == 0) {
			this._invMass = 1 / this._mass;
			var d00 = this._localInertia11 * this._localInertia22 - this._localInertia12 * this._localInertia21;
			var d01 = this._localInertia10 * this._localInertia22 - this._localInertia12 * this._localInertia20;
			var d02 = this._localInertia10 * this._localInertia21 - this._localInertia11 * this._localInertia20;
			var d10 = this._localInertia01 * this._localInertia22 - this._localInertia02 * this._localInertia21;
			var d11 = this._localInertia00 * this._localInertia22 - this._localInertia02 * this._localInertia20;
			var d12 = this._localInertia00 * this._localInertia21 - this._localInertia01 * this._localInertia20;
			var d20 = this._localInertia01 * this._localInertia12 - this._localInertia02 * this._localInertia11;
			var d21 = this._localInertia00 * this._localInertia12 - this._localInertia02 * this._localInertia10;
			var d22 = this._localInertia00 * this._localInertia11 - this._localInertia01 * this._localInertia10;
			var d = this._localInertia00 * d00 - this._localInertia01 * d01 + this._localInertia02 * d02;
			if(d < -1e-32 || d > 1e-32) {
				d = 1 / d;
			}
			this._invLocalInertia00 = d00 * d;
			this._invLocalInertia01 = -d10 * d;
			this._invLocalInertia02 = d20 * d;
			this._invLocalInertia10 = -d01 * d;
			this._invLocalInertia11 = d11 * d;
			this._invLocalInertia12 = -d21 * d;
			this._invLocalInertia20 = d02 * d;
			this._invLocalInertia21 = -d12 * d;
			this._invLocalInertia22 = d22 * d;
			this._invLocalInertiaWithoutRotFactor00 = this._invLocalInertia00;
			this._invLocalInertiaWithoutRotFactor01 = this._invLocalInertia01;
			this._invLocalInertiaWithoutRotFactor02 = this._invLocalInertia02;
			this._invLocalInertiaWithoutRotFactor10 = this._invLocalInertia10;
			this._invLocalInertiaWithoutRotFactor11 = this._invLocalInertia11;
			this._invLocalInertiaWithoutRotFactor12 = this._invLocalInertia12;
			this._invLocalInertiaWithoutRotFactor20 = this._invLocalInertia20;
			this._invLocalInertiaWithoutRotFactor21 = this._invLocalInertia21;
			this._invLocalInertiaWithoutRotFactor22 = this._invLocalInertia22;
			this._invLocalInertia00 = this._invLocalInertiaWithoutRotFactor00 * this._rotFactor.x;
			this._invLocalInertia01 = this._invLocalInertiaWithoutRotFactor01 * this._rotFactor.x;
			this._invLocalInertia02 = this._invLocalInertiaWithoutRotFactor02 * this._rotFactor.x;
			this._invLocalInertia10 = this._invLocalInertiaWithoutRotFactor10 * this._rotFactor.y;
			this._invLocalInertia11 = this._invLocalInertiaWithoutRotFactor11 * this._rotFactor.y;
			this._invLocalInertia12 = this._invLocalInertiaWithoutRotFactor12 * this._rotFactor.y;
			this._invLocalInertia20 = this._invLocalInertiaWithoutRotFactor20 * this._rotFactor.z;
			this._invLocalInertia21 = this._invLocalInertiaWithoutRotFactor21 * this._rotFactor.z;
			this._invLocalInertia22 = this._invLocalInertiaWithoutRotFactor22 * this._rotFactor.z;
		} else {
			this._invMass = 0;
			this._invLocalInertia00 = 0;
			this._invLocalInertia01 = 0;
			this._invLocalInertia02 = 0;
			this._invLocalInertia10 = 0;
			this._invLocalInertia11 = 0;
			this._invLocalInertia12 = 0;
			this._invLocalInertia20 = 0;
			this._invLocalInertia21 = 0;
			this._invLocalInertia22 = 0;
			this._invLocalInertiaWithoutRotFactor00 = 0;
			this._invLocalInertiaWithoutRotFactor01 = 0;
			this._invLocalInertiaWithoutRotFactor02 = 0;
			this._invLocalInertiaWithoutRotFactor10 = 0;
			this._invLocalInertiaWithoutRotFactor11 = 0;
			this._invLocalInertiaWithoutRotFactor12 = 0;
			this._invLocalInertiaWithoutRotFactor20 = 0;
			this._invLocalInertiaWithoutRotFactor21 = 0;
			this._invLocalInertiaWithoutRotFactor22 = 0;
			if(this._type == 0) {
				this._type = 1;
			}
		}
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getRotationFactor: function() {
		var _this = this._rotFactor;
		return new oimo_common_Vec3(_this.x,_this.y,_this.z);
	}
	,setRotationFactor: function(rotationFactor) {
		var _this = this._rotFactor;
		_this.x = rotationFactor.x;
		_this.y = rotationFactor.y;
		_this.z = rotationFactor.z;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._transform._rotation00 * this._invLocalInertia00 + this._transform._rotation01 * this._invLocalInertia10 + this._transform._rotation02 * this._invLocalInertia20;
		__tmp__01 = this._transform._rotation00 * this._invLocalInertia01 + this._transform._rotation01 * this._invLocalInertia11 + this._transform._rotation02 * this._invLocalInertia21;
		__tmp__02 = this._transform._rotation00 * this._invLocalInertia02 + this._transform._rotation01 * this._invLocalInertia12 + this._transform._rotation02 * this._invLocalInertia22;
		__tmp__10 = this._transform._rotation10 * this._invLocalInertia00 + this._transform._rotation11 * this._invLocalInertia10 + this._transform._rotation12 * this._invLocalInertia20;
		__tmp__11 = this._transform._rotation10 * this._invLocalInertia01 + this._transform._rotation11 * this._invLocalInertia11 + this._transform._rotation12 * this._invLocalInertia21;
		__tmp__12 = this._transform._rotation10 * this._invLocalInertia02 + this._transform._rotation11 * this._invLocalInertia12 + this._transform._rotation12 * this._invLocalInertia22;
		__tmp__20 = this._transform._rotation20 * this._invLocalInertia00 + this._transform._rotation21 * this._invLocalInertia10 + this._transform._rotation22 * this._invLocalInertia20;
		__tmp__21 = this._transform._rotation20 * this._invLocalInertia01 + this._transform._rotation21 * this._invLocalInertia11 + this._transform._rotation22 * this._invLocalInertia21;
		__tmp__22 = this._transform._rotation20 * this._invLocalInertia02 + this._transform._rotation21 * this._invLocalInertia12 + this._transform._rotation22 * this._invLocalInertia22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		var __tmp__00;
		var __tmp__01;
		var __tmp__02;
		var __tmp__10;
		var __tmp__11;
		var __tmp__12;
		var __tmp__20;
		var __tmp__21;
		var __tmp__22;
		__tmp__00 = this._invInertia00 * this._transform._rotation00 + this._invInertia01 * this._transform._rotation01 + this._invInertia02 * this._transform._rotation02;
		__tmp__01 = this._invInertia00 * this._transform._rotation10 + this._invInertia01 * this._transform._rotation11 + this._invInertia02 * this._transform._rotation12;
		__tmp__02 = this._invInertia00 * this._transform._rotation20 + this._invInertia01 * this._transform._rotation21 + this._invInertia02 * this._transform._rotation22;
		__tmp__10 = this._invInertia10 * this._transform._rotation00 + this._invInertia11 * this._transform._rotation01 + this._invInertia12 * this._transform._rotation02;
		__tmp__11 = this._invInertia10 * this._transform._rotation10 + this._invInertia11 * this._transform._rotation11 + this._invInertia12 * this._transform._rotation12;
		__tmp__12 = this._invInertia10 * this._transform._rotation20 + this._invInertia11 * this._transform._rotation21 + this._invInertia12 * this._transform._rotation22;
		__tmp__20 = this._invInertia20 * this._transform._rotation00 + this._invInertia21 * this._transform._rotation01 + this._invInertia22 * this._transform._rotation02;
		__tmp__21 = this._invInertia20 * this._transform._rotation10 + this._invInertia21 * this._transform._rotation11 + this._invInertia22 * this._transform._rotation12;
		__tmp__22 = this._invInertia20 * this._transform._rotation20 + this._invInertia21 * this._transform._rotation21 + this._invInertia22 * this._transform._rotation22;
		this._invInertia00 = __tmp__00;
		this._invInertia01 = __tmp__01;
		this._invInertia02 = __tmp__02;
		this._invInertia10 = __tmp__10;
		this._invInertia11 = __tmp__11;
		this._invInertia12 = __tmp__12;
		this._invInertia20 = __tmp__20;
		this._invInertia21 = __tmp__21;
		this._invInertia22 = __tmp__22;
		this._invInertia00 *= this._rotFactor.x;
		this._invInertia01 *= this._rotFactor.x;
		this._invInertia02 *= this._rotFactor.x;
		this._invInertia10 *= this._rotFactor.y;
		this._invInertia11 *= this._rotFactor.y;
		this._invInertia12 *= this._rotFactor.y;
		this._invInertia20 *= this._rotFactor.z;
		this._invInertia21 *= this._rotFactor.z;
		this._invInertia22 *= this._rotFactor.z;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearVelocity: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._velX;
		v1.y = this._velY;
		v1.z = this._velZ;
		return v;
	}
	,getLinearVelocityTo: function(linearVelocity) {
		var v = linearVelocity;
		v.x = this._velX;
		v.y = this._velY;
		v.z = this._velZ;
	}
	,setLinearVelocity: function(linearVelocity) {
		if(this._type == 1) {
			this._velX = 0;
			this._velY = 0;
			this._velZ = 0;
		} else {
			var v = linearVelocity;
			this._velX = v.x;
			this._velY = v.y;
			this._velZ = v.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getAngularVelocity: function() {
		var v = new oimo_common_Vec3();
		var v1 = v;
		v1.x = this._angVelX;
		v1.y = this._angVelY;
		v1.z = this._angVelZ;
		return v;
	}
	,getAngularVelocityTo: function(angularVelocity) {
		var v = angularVelocity;
		v.x = this._velX;
		v.y = this._velY;
		v.z = this._velZ;
	}
	,setAngularVelocity: function(angularVelocity) {
		if(this._type == 1) {
			this._angVelX = 0;
			this._angVelY = 0;
			this._angVelZ = 0;
		} else {
			var v = angularVelocity;
			this._angVelX = v.x;
			this._angVelY = v.y;
			this._angVelZ = v.z;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addLinearVelocity: function(linearVelocityChange) {
		if(this._type != 1) {
			var d;
			var dX;
			var dY;
			var dZ;
			var v = linearVelocityChange;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			this._velX += dX;
			this._velY += dY;
			this._velZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,addAngularVelocity: function(angularVelocityChange) {
		if(this._type != 1) {
			var d;
			var dX;
			var dY;
			var dZ;
			var v = angularVelocityChange;
			dX = v.x;
			dY = v.y;
			dZ = v.z;
			this._angVelX += dX;
			this._angVelY += dY;
			this._angVelZ += dZ;
		}
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyImpulse: function(impulse,positionInWorld) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		var aimp;
		var aimpX;
		var aimpY;
		var aimpZ;
		var pos;
		var posX;
		var posY;
		var posZ;
		var v = positionInWorld;
		posX = v.x;
		posY = v.y;
		posZ = v.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		aimpX = posY * impZ - posZ * impY;
		aimpY = posZ * impX - posX * impZ;
		aimpZ = posX * impY - posY * impX;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * aimpX + this._invInertia01 * aimpY + this._invInertia02 * aimpZ;
		__tmp__Y = this._invInertia10 * aimpX + this._invInertia11 * aimpY + this._invInertia12 * aimpZ;
		__tmp__Z = this._invInertia20 * aimpX + this._invInertia21 * aimpY + this._invInertia22 * aimpZ;
		aimpX = __tmp__X;
		aimpY = __tmp__Y;
		aimpZ = __tmp__Z;
		this._angVelX += aimpX;
		this._angVelY += aimpY;
		this._angVelZ += aimpZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyLinearImpulse: function(impulse) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		this._velX += impX * this._invMass;
		this._velY += impY * this._invMass;
		this._velZ += impZ * this._invMass;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyAngularImpulse: function(impulse) {
		var imp;
		var impX;
		var impY;
		var impZ;
		var v = impulse;
		impX = v.x;
		impY = v.y;
		impZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._invInertia00 * impX + this._invInertia01 * impY + this._invInertia02 * impZ;
		__tmp__Y = this._invInertia10 * impX + this._invInertia11 * impY + this._invInertia12 * impZ;
		__tmp__Z = this._invInertia20 * impX + this._invInertia21 * impY + this._invInertia22 * impZ;
		impX = __tmp__X;
		impY = __tmp__Y;
		impZ = __tmp__Z;
		this._angVelX += impX;
		this._angVelY += impY;
		this._angVelZ += impZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForce: function(force,positionInWorld) {
		var iforce;
		var iforceX;
		var iforceY;
		var iforceZ;
		var v = force;
		iforceX = v.x;
		iforceY = v.y;
		iforceZ = v.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		var itorque;
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		var pos;
		var posX;
		var posY;
		var posZ;
		var v = positionInWorld;
		posX = v.x;
		posY = v.y;
		posZ = v.z;
		posX -= this._transform._positionX;
		posY -= this._transform._positionY;
		posZ -= this._transform._positionZ;
		itorqueX = posY * iforceZ - posZ * iforceY;
		itorqueY = posZ * iforceX - posX * iforceZ;
		itorqueZ = posX * iforceY - posY * iforceX;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyForceToCenter: function(force) {
		var iforce;
		var iforceX;
		var iforceY;
		var iforceZ;
		var v = force;
		iforceX = v.x;
		iforceY = v.y;
		iforceZ = v.z;
		this._forceX += iforceX;
		this._forceY += iforceY;
		this._forceZ += iforceZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,applyTorque: function(torque) {
		var itorque;
		var itorqueX;
		var itorqueY;
		var itorqueZ;
		var v = torque;
		itorqueX = v.x;
		itorqueY = v.y;
		itorqueZ = v.z;
		this._torqueX += itorqueX;
		this._torqueY += itorqueY;
		this._torqueZ += itorqueZ;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearContactImpulse: function() {
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = this._linearContactImpulseX;
		v.y = this._linearContactImpulseY;
		v.z = this._linearContactImpulseZ;
		return res;
	}
	,getLinearContactImpulseTo: function(linearContactImpulse) {
		var v = linearContactImpulse;
		v.x = this._linearContactImpulseX;
		v.y = this._linearContactImpulseY;
		v.z = this._linearContactImpulseZ;
	}
	,getAngularContactImpulse: function() {
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = this._angularContactImpulseX;
		v.y = this._angularContactImpulseY;
		v.z = this._angularContactImpulseZ;
		return res;
	}
	,getAngularContactImpulseTo: function(angularContactImpulse) {
		var v = angularContactImpulse;
		v.x = this._angularContactImpulseX;
		v.y = this._angularContactImpulseY;
		v.z = this._angularContactImpulseZ;
	}
	,getGravityScale: function() {
		return this._gravityScale;
	}
	,setGravityScale: function(gravityScale) {
		this._gravityScale = gravityScale;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLocalPoint: function(worldPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldPoint;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return res;
	}
	,getLocalPointTo: function(worldPoint,localPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldPoint;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		vX -= this._transform._positionX;
		vY -= this._transform._positionY;
		vZ -= this._transform._positionZ;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = localPoint;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
	}
	,getLocalVector: function(worldVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldVector;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return res;
	}
	,getLocalVectorTo: function(worldVector,localVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = worldVector;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation10 * vY + this._transform._rotation20 * vZ;
		__tmp__Y = this._transform._rotation01 * vX + this._transform._rotation11 * vY + this._transform._rotation21 * vZ;
		__tmp__Z = this._transform._rotation02 * vX + this._transform._rotation12 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = localVector;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
	}
	,getWorldPoint: function(localPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = localPoint;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return res;
	}
	,getWorldPointTo: function(localPoint,worldPoint) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = localPoint;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		vX += this._transform._positionX;
		vY += this._transform._positionY;
		vZ += this._transform._positionZ;
		var v = worldPoint;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
	}
	,getWorldVector: function(localVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = localVector;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var res = new oimo_common_Vec3();
		var v = res;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
		return res;
	}
	,getWorldVectorTo: function(localVector,worldVector) {
		var v;
		var vX;
		var vY;
		var vZ;
		var v = localVector;
		vX = v.x;
		vY = v.y;
		vZ = v.z;
		var __tmp__X;
		var __tmp__Y;
		var __tmp__Z;
		__tmp__X = this._transform._rotation00 * vX + this._transform._rotation01 * vY + this._transform._rotation02 * vZ;
		__tmp__Y = this._transform._rotation10 * vX + this._transform._rotation11 * vY + this._transform._rotation12 * vZ;
		__tmp__Z = this._transform._rotation20 * vX + this._transform._rotation21 * vY + this._transform._rotation22 * vZ;
		vX = __tmp__X;
		vY = __tmp__Y;
		vZ = __tmp__Z;
		var v = worldVector;
		v.x = vX;
		v.y = vY;
		v.z = vZ;
	}
	,getNumShapes: function() {
		return this._numShapes;
	}
	,getShapeList: function() {
		return this._shapeList;
	}
	,getNumContectLinks: function() {
		return this._numContactLinks;
	}
	,getContactLinkList: function() {
		return this._contactLinkList;
	}
	,getNumJointLinks: function() {
		return this._numJointLinks;
	}
	,getJointLinkList: function() {
		return this._jointLinkList;
	}
	,addShape: function(shape) {
		if(this._shapeList == null) {
			this._shapeList = shape;
			this._shapeListLast = shape;
		} else {
			this._shapeListLast._next = shape;
			shape._prev = this._shapeListLast;
			this._shapeListLast = shape;
		}
		this._numShapes++;
		shape._rigidBody = this;
		if(this._world != null) {
			var _this = this._world;
			shape._proxy = _this._broadPhase.createProxy(shape,shape._aabb);
			shape._id = _this._shapeIdCount++;
			_this._numShapes++;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
	}
	,removeShape: function(shape) {
		var prev = shape._prev;
		var next = shape._next;
		if(prev != null) {
			prev._next = next;
		}
		if(next != null) {
			next._prev = prev;
		}
		if(shape == this._shapeList) {
			this._shapeList = this._shapeList._next;
		}
		if(shape == this._shapeListLast) {
			this._shapeListLast = this._shapeListLast._prev;
		}
		shape._next = null;
		shape._prev = null;
		this._numShapes--;
		shape._rigidBody = null;
		if(this._world != null) {
			var _this = this._world;
			_this._broadPhase.destroyProxy(shape._proxy);
			shape._proxy = null;
			shape._id = -1;
			var cl = shape._rigidBody._contactLinkList;
			while(cl != null) {
				var n = cl._next;
				var c = cl._contact;
				if(c._s1 == shape || c._s2 == shape) {
					var _this1 = cl._other;
					_this1._sleeping = false;
					_this1._sleepTime = 0;
					var _this2 = _this._contactManager;
					var prev = c._prev;
					var next = c._next;
					if(prev != null) {
						prev._next = next;
					}
					if(next != null) {
						next._prev = prev;
					}
					if(c == _this2._contactList) {
						_this2._contactList = _this2._contactList._next;
					}
					if(c == _this2._contactListLast) {
						_this2._contactListLast = _this2._contactListLast._prev;
					}
					c._next = null;
					c._prev = null;
					if(c._touching) {
						var cc1 = c._s1._contactCallback;
						var cc2 = c._s2._contactCallback;
						if(cc1 == cc2) {
							cc2 = null;
						}
						if(cc1 != null) {
							cc1.endContact(c);
						}
						if(cc2 != null) {
							cc2.endContact(c);
						}
					}
					var prev1 = c._link1._prev;
					var next1 = c._link1._next;
					if(prev1 != null) {
						prev1._next = next1;
					}
					if(next1 != null) {
						next1._prev = prev1;
					}
					if(c._link1 == c._b1._contactLinkList) {
						c._b1._contactLinkList = c._b1._contactLinkList._next;
					}
					if(c._link1 == c._b1._contactLinkListLast) {
						c._b1._contactLinkListLast = c._b1._contactLinkListLast._prev;
					}
					c._link1._next = null;
					c._link1._prev = null;
					var prev2 = c._link2._prev;
					var next2 = c._link2._next;
					if(prev2 != null) {
						prev2._next = next2;
					}
					if(next2 != null) {
						next2._prev = prev2;
					}
					if(c._link2 == c._b2._contactLinkList) {
						c._b2._contactLinkList = c._b2._contactLinkList._next;
					}
					if(c._link2 == c._b2._contactLinkListLast) {
						c._b2._contactLinkListLast = c._b2._contactLinkListLast._prev;
					}
					c._link2._next = null;
					c._link2._prev = null;
					c._b1._numContactLinks--;
					c._b2._numContactLinks--;
					c._link1._other = null;
					c._link2._other = null;
					c._link1._contact = null;
					c._link2._contact = null;
					c._s1 = null;
					c._s2 = null;
					c._b1 = null;
					c._b2 = null;
					c._touching = false;
					c._cachedDetectorData._clear();
					c._manifold._clear();
					c._detector = null;
					var _this3 = c._contactConstraint;
					_this3._s1 = null;
					_this3._s2 = null;
					_this3._b1 = null;
					_this3._b2 = null;
					_this3._tf1 = null;
					_this3._tf2 = null;
					c._next = _this2._contactPool;
					_this2._contactPool = c;
					_this2._numContacts--;
				}
				cl = n;
			}
			_this._numShapes--;
		}
		this.updateMass();
		var s = this._shapeList;
		while(s != null) {
			var n = s._next;
			var dst = s._ptransform;
			var src1 = s._localTransform;
			var src2 = this._ptransform;
			var __tmp__00;
			var __tmp__01;
			var __tmp__02;
			var __tmp__10;
			var __tmp__11;
			var __tmp__12;
			var __tmp__20;
			var __tmp__21;
			var __tmp__22;
			__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
			__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
			__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
			__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
			__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
			__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
			__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
			__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
			__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
			dst._rotation00 = __tmp__00;
			dst._rotation01 = __tmp__01;
			dst._rotation02 = __tmp__02;
			dst._rotation10 = __tmp__10;
			dst._rotation11 = __tmp__11;
			dst._rotation12 = __tmp__12;
			dst._rotation20 = __tmp__20;
			dst._rotation21 = __tmp__21;
			dst._rotation22 = __tmp__22;
			var __tmp__X;
			var __tmp__Y;
			var __tmp__Z;
			__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
			__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
			__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
			dst._positionX = __tmp__X;
			dst._positionY = __tmp__Y;
			dst._positionZ = __tmp__Z;
			dst._positionX += src2._positionX;
			dst._positionY += src2._positionY;
			dst._positionZ += src2._positionZ;
			var dst1 = s._transform;
			var src11 = s._localTransform;
			var src21 = this._transform;
			var __tmp__001;
			var __tmp__011;
			var __tmp__021;
			var __tmp__101;
			var __tmp__111;
			var __tmp__121;
			var __tmp__201;
			var __tmp__211;
			var __tmp__221;
			__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
			__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
			__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
			__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
			__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
			__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
			__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
			__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
			__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
			dst1._rotation00 = __tmp__001;
			dst1._rotation01 = __tmp__011;
			dst1._rotation02 = __tmp__021;
			dst1._rotation10 = __tmp__101;
			dst1._rotation11 = __tmp__111;
			dst1._rotation12 = __tmp__121;
			dst1._rotation20 = __tmp__201;
			dst1._rotation21 = __tmp__211;
			dst1._rotation22 = __tmp__221;
			var __tmp__X1;
			var __tmp__Y1;
			var __tmp__Z1;
			__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
			__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
			__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
			dst1._positionX = __tmp__X1;
			dst1._positionY = __tmp__Y1;
			dst1._positionZ = __tmp__Z1;
			dst1._positionX += src21._positionX;
			dst1._positionY += src21._positionY;
			dst1._positionZ += src21._positionZ;
			var min;
			var minX;
			var minY;
			var minZ;
			var max;
			var maxX;
			var maxY;
			var maxZ;
			s._geom._computeAabb(s._aabb,s._ptransform);
			minX = s._aabb._minX;
			minY = s._aabb._minY;
			minZ = s._aabb._minZ;
			maxX = s._aabb._maxX;
			maxY = s._aabb._maxY;
			maxZ = s._aabb._maxZ;
			s._geom._computeAabb(s._aabb,s._transform);
			s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
			s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
			s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
			s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
			s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
			s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
			if(s._proxy != null) {
				var d;
				var dX;
				var dY;
				var dZ;
				dX = s._transform._positionX - s._ptransform._positionX;
				dY = s._transform._positionY - s._ptransform._positionY;
				dZ = s._transform._positionZ - s._ptransform._positionZ;
				var v = s.displacement;
				v.x = dX;
				v.y = dY;
				v.z = dZ;
				s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
			}
			s = n;
		}
	}
	,getType: function() {
		return this._type;
	}
	,setType: function(type) {
		this._type = type;
		this.updateMass();
	}
	,wakeUp: function() {
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,sleep: function() {
		this._sleeping = true;
		this._sleepTime = 0;
	}
	,isSleeping: function() {
		return this._sleeping;
	}
	,getSleepTime: function() {
		return this._sleepTime;
	}
	,setAutoSleep: function(autoSleepEnabled) {
		this._autoSleep = autoSleepEnabled;
		this._sleeping = false;
		this._sleepTime = 0;
	}
	,getLinearDamping: function() {
		return this._linearDamping;
	}
	,setLinearDamping: function(damping) {
		this._linearDamping = damping;
	}
	,getAngularDamping: function() {
		return this._angularDamping;
	}
	,setAngularDamping: function(damping) {
		this._angularDamping = damping;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_rigidbody_RigidBody
};
var oimo_dynamics_rigidbody_RigidBodyConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.linearVelocity = new oimo_common_Vec3();
	this.angularVelocity = new oimo_common_Vec3();
	this.type = 0;
	this.autoSleep = true;
	this.linearDamping = 0;
	this.angularDamping = 0;
};
oimo_dynamics_rigidbody_RigidBodyConfig.__name__ = "oimo.dynamics.rigidbody.RigidBodyConfig";
oimo_dynamics_rigidbody_RigidBodyConfig.prototype = {
	__class__: oimo_dynamics_rigidbody_RigidBodyConfig
};
var oimo_dynamics_rigidbody_RigidBodyType = function() { };
oimo_dynamics_rigidbody_RigidBodyType.__name__ = "oimo.dynamics.rigidbody.RigidBodyType";
var oimo_dynamics_rigidbody_Shape = function(config) {
	this._id = -1;
	this._localTransform = new oimo_common_Transform();
	this._ptransform = new oimo_common_Transform();
	this._transform = new oimo_common_Transform();
	var v = config.position;
	this._localTransform._positionX = v.x;
	this._localTransform._positionY = v.y;
	this._localTransform._positionZ = v.z;
	var m = config.rotation;
	this._localTransform._rotation00 = m.e00;
	this._localTransform._rotation01 = m.e01;
	this._localTransform._rotation02 = m.e02;
	this._localTransform._rotation10 = m.e10;
	this._localTransform._rotation11 = m.e11;
	this._localTransform._rotation12 = m.e12;
	this._localTransform._rotation20 = m.e20;
	this._localTransform._rotation21 = m.e21;
	this._localTransform._rotation22 = m.e22;
	var dst = this._ptransform;
	var src = this._localTransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	var dst = this._transform;
	var src = this._localTransform;
	dst._positionX = src._positionX;
	dst._positionY = src._positionY;
	dst._positionZ = src._positionZ;
	dst._rotation00 = src._rotation00;
	dst._rotation01 = src._rotation01;
	dst._rotation02 = src._rotation02;
	dst._rotation10 = src._rotation10;
	dst._rotation11 = src._rotation11;
	dst._rotation12 = src._rotation12;
	dst._rotation20 = src._rotation20;
	dst._rotation21 = src._rotation21;
	dst._rotation22 = src._rotation22;
	this._restitution = config.restitution;
	this._friction = config.friction;
	this._density = config.density;
	this._geom = config.geometry;
	this._collisionGroup = config.collisionGroup;
	this._collisionMask = config.collisionMask;
	this._contactCallback = config.contactCallback;
	this._aabb = new oimo_collision_geometry_Aabb();
	this._proxy = null;
	this.displacement = new oimo_common_Vec3();
};
oimo_dynamics_rigidbody_Shape.__name__ = "oimo.dynamics.rigidbody.Shape";
oimo_dynamics_rigidbody_Shape.prototype = {
	getFriction: function() {
		return this._friction;
	}
	,setFriction: function(friction) {
		this._friction = friction;
	}
	,getRestitution: function() {
		return this._restitution;
	}
	,setRestitution: function(restitution) {
		this._restitution = restitution;
	}
	,getLocalTransform: function() {
		var _this = this._localTransform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getLocalTransformTo: function(transform) {
		var transform1 = this._localTransform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,getTransform: function() {
		var _this = this._transform;
		var tf = new oimo_common_Transform();
		tf._positionX = _this._positionX;
		tf._positionY = _this._positionY;
		tf._positionZ = _this._positionZ;
		tf._rotation00 = _this._rotation00;
		tf._rotation01 = _this._rotation01;
		tf._rotation02 = _this._rotation02;
		tf._rotation10 = _this._rotation10;
		tf._rotation11 = _this._rotation11;
		tf._rotation12 = _this._rotation12;
		tf._rotation20 = _this._rotation20;
		tf._rotation21 = _this._rotation21;
		tf._rotation22 = _this._rotation22;
		return tf;
	}
	,getTransformTo: function(transform) {
		var transform1 = this._transform;
		transform._positionX = transform1._positionX;
		transform._positionY = transform1._positionY;
		transform._positionZ = transform1._positionZ;
		transform._rotation00 = transform1._rotation00;
		transform._rotation01 = transform1._rotation01;
		transform._rotation02 = transform1._rotation02;
		transform._rotation10 = transform1._rotation10;
		transform._rotation11 = transform1._rotation11;
		transform._rotation12 = transform1._rotation12;
		transform._rotation20 = transform1._rotation20;
		transform._rotation21 = transform1._rotation21;
		transform._rotation22 = transform1._rotation22;
	}
	,setLocalTransform: function(transform) {
		var _this = this._localTransform;
		_this._positionX = transform._positionX;
		_this._positionY = transform._positionY;
		_this._positionZ = transform._positionZ;
		_this._rotation00 = transform._rotation00;
		_this._rotation01 = transform._rotation01;
		_this._rotation02 = transform._rotation02;
		_this._rotation10 = transform._rotation10;
		_this._rotation11 = transform._rotation11;
		_this._rotation12 = transform._rotation12;
		_this._rotation20 = transform._rotation20;
		_this._rotation21 = transform._rotation21;
		_this._rotation22 = transform._rotation22;
		if(this._rigidBody != null) {
			var _this = this._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = _this._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = _this._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getDensity: function() {
		return this._density;
	}
	,setDensity: function(density) {
		this._density = density;
		if(this._rigidBody != null) {
			var _this = this._rigidBody;
			_this.updateMass();
			var s = _this._shapeList;
			while(s != null) {
				var n = s._next;
				var dst = s._ptransform;
				var src1 = s._localTransform;
				var src2 = _this._ptransform;
				var __tmp__00;
				var __tmp__01;
				var __tmp__02;
				var __tmp__10;
				var __tmp__11;
				var __tmp__12;
				var __tmp__20;
				var __tmp__21;
				var __tmp__22;
				__tmp__00 = src2._rotation00 * src1._rotation00 + src2._rotation01 * src1._rotation10 + src2._rotation02 * src1._rotation20;
				__tmp__01 = src2._rotation00 * src1._rotation01 + src2._rotation01 * src1._rotation11 + src2._rotation02 * src1._rotation21;
				__tmp__02 = src2._rotation00 * src1._rotation02 + src2._rotation01 * src1._rotation12 + src2._rotation02 * src1._rotation22;
				__tmp__10 = src2._rotation10 * src1._rotation00 + src2._rotation11 * src1._rotation10 + src2._rotation12 * src1._rotation20;
				__tmp__11 = src2._rotation10 * src1._rotation01 + src2._rotation11 * src1._rotation11 + src2._rotation12 * src1._rotation21;
				__tmp__12 = src2._rotation10 * src1._rotation02 + src2._rotation11 * src1._rotation12 + src2._rotation12 * src1._rotation22;
				__tmp__20 = src2._rotation20 * src1._rotation00 + src2._rotation21 * src1._rotation10 + src2._rotation22 * src1._rotation20;
				__tmp__21 = src2._rotation20 * src1._rotation01 + src2._rotation21 * src1._rotation11 + src2._rotation22 * src1._rotation21;
				__tmp__22 = src2._rotation20 * src1._rotation02 + src2._rotation21 * src1._rotation12 + src2._rotation22 * src1._rotation22;
				dst._rotation00 = __tmp__00;
				dst._rotation01 = __tmp__01;
				dst._rotation02 = __tmp__02;
				dst._rotation10 = __tmp__10;
				dst._rotation11 = __tmp__11;
				dst._rotation12 = __tmp__12;
				dst._rotation20 = __tmp__20;
				dst._rotation21 = __tmp__21;
				dst._rotation22 = __tmp__22;
				var __tmp__X;
				var __tmp__Y;
				var __tmp__Z;
				__tmp__X = src2._rotation00 * src1._positionX + src2._rotation01 * src1._positionY + src2._rotation02 * src1._positionZ;
				__tmp__Y = src2._rotation10 * src1._positionX + src2._rotation11 * src1._positionY + src2._rotation12 * src1._positionZ;
				__tmp__Z = src2._rotation20 * src1._positionX + src2._rotation21 * src1._positionY + src2._rotation22 * src1._positionZ;
				dst._positionX = __tmp__X;
				dst._positionY = __tmp__Y;
				dst._positionZ = __tmp__Z;
				dst._positionX += src2._positionX;
				dst._positionY += src2._positionY;
				dst._positionZ += src2._positionZ;
				var dst1 = s._transform;
				var src11 = s._localTransform;
				var src21 = _this._transform;
				var __tmp__001;
				var __tmp__011;
				var __tmp__021;
				var __tmp__101;
				var __tmp__111;
				var __tmp__121;
				var __tmp__201;
				var __tmp__211;
				var __tmp__221;
				__tmp__001 = src21._rotation00 * src11._rotation00 + src21._rotation01 * src11._rotation10 + src21._rotation02 * src11._rotation20;
				__tmp__011 = src21._rotation00 * src11._rotation01 + src21._rotation01 * src11._rotation11 + src21._rotation02 * src11._rotation21;
				__tmp__021 = src21._rotation00 * src11._rotation02 + src21._rotation01 * src11._rotation12 + src21._rotation02 * src11._rotation22;
				__tmp__101 = src21._rotation10 * src11._rotation00 + src21._rotation11 * src11._rotation10 + src21._rotation12 * src11._rotation20;
				__tmp__111 = src21._rotation10 * src11._rotation01 + src21._rotation11 * src11._rotation11 + src21._rotation12 * src11._rotation21;
				__tmp__121 = src21._rotation10 * src11._rotation02 + src21._rotation11 * src11._rotation12 + src21._rotation12 * src11._rotation22;
				__tmp__201 = src21._rotation20 * src11._rotation00 + src21._rotation21 * src11._rotation10 + src21._rotation22 * src11._rotation20;
				__tmp__211 = src21._rotation20 * src11._rotation01 + src21._rotation21 * src11._rotation11 + src21._rotation22 * src11._rotation21;
				__tmp__221 = src21._rotation20 * src11._rotation02 + src21._rotation21 * src11._rotation12 + src21._rotation22 * src11._rotation22;
				dst1._rotation00 = __tmp__001;
				dst1._rotation01 = __tmp__011;
				dst1._rotation02 = __tmp__021;
				dst1._rotation10 = __tmp__101;
				dst1._rotation11 = __tmp__111;
				dst1._rotation12 = __tmp__121;
				dst1._rotation20 = __tmp__201;
				dst1._rotation21 = __tmp__211;
				dst1._rotation22 = __tmp__221;
				var __tmp__X1;
				var __tmp__Y1;
				var __tmp__Z1;
				__tmp__X1 = src21._rotation00 * src11._positionX + src21._rotation01 * src11._positionY + src21._rotation02 * src11._positionZ;
				__tmp__Y1 = src21._rotation10 * src11._positionX + src21._rotation11 * src11._positionY + src21._rotation12 * src11._positionZ;
				__tmp__Z1 = src21._rotation20 * src11._positionX + src21._rotation21 * src11._positionY + src21._rotation22 * src11._positionZ;
				dst1._positionX = __tmp__X1;
				dst1._positionY = __tmp__Y1;
				dst1._positionZ = __tmp__Z1;
				dst1._positionX += src21._positionX;
				dst1._positionY += src21._positionY;
				dst1._positionZ += src21._positionZ;
				var min;
				var minX;
				var minY;
				var minZ;
				var max;
				var maxX;
				var maxY;
				var maxZ;
				s._geom._computeAabb(s._aabb,s._ptransform);
				minX = s._aabb._minX;
				minY = s._aabb._minY;
				minZ = s._aabb._minZ;
				maxX = s._aabb._maxX;
				maxY = s._aabb._maxY;
				maxZ = s._aabb._maxZ;
				s._geom._computeAabb(s._aabb,s._transform);
				s._aabb._minX = minX < s._aabb._minX ? minX : s._aabb._minX;
				s._aabb._minY = minY < s._aabb._minY ? minY : s._aabb._minY;
				s._aabb._minZ = minZ < s._aabb._minZ ? minZ : s._aabb._minZ;
				s._aabb._maxX = maxX > s._aabb._maxX ? maxX : s._aabb._maxX;
				s._aabb._maxY = maxY > s._aabb._maxY ? maxY : s._aabb._maxY;
				s._aabb._maxZ = maxZ > s._aabb._maxZ ? maxZ : s._aabb._maxZ;
				if(s._proxy != null) {
					var d;
					var dX;
					var dY;
					var dZ;
					dX = s._transform._positionX - s._ptransform._positionX;
					dY = s._transform._positionY - s._ptransform._positionY;
					dZ = s._transform._positionZ - s._ptransform._positionZ;
					var v = s.displacement;
					v.x = dX;
					v.y = dY;
					v.z = dZ;
					s._rigidBody._world._broadPhase.moveProxy(s._proxy,s._aabb,s.displacement);
				}
				s = n;
			}
		}
	}
	,getAabb: function() {
		return this._aabb.clone();
	}
	,getAabbTo: function(aabb) {
		aabb.copyFrom(this._aabb);
	}
	,getGeometry: function() {
		return this._geom;
	}
	,getRigidBody: function() {
		return this._rigidBody;
	}
	,getCollisionGroup: function() {
		return this._collisionGroup;
	}
	,setCollisionGroup: function(collisionGroup) {
		this._collisionGroup = collisionGroup;
	}
	,getCollisionMask: function() {
		return this._collisionMask;
	}
	,setCollisionMask: function(collisionMask) {
		this._collisionMask = collisionMask;
	}
	,getContactCallback: function() {
		return this._contactCallback;
	}
	,setContactCallback: function(callback) {
		this._contactCallback = callback;
	}
	,getPrev: function() {
		return this._prev;
	}
	,getNext: function() {
		return this._next;
	}
	,__class__: oimo_dynamics_rigidbody_Shape
};
var oimo_dynamics_rigidbody_ShapeConfig = function() {
	this.position = new oimo_common_Vec3();
	this.rotation = new oimo_common_Mat3();
	this.friction = oimo_common_Setting.defaultFriction;
	this.restitution = oimo_common_Setting.defaultRestitution;
	this.density = oimo_common_Setting.defaultDensity;
	this.collisionGroup = oimo_common_Setting.defaultCollisionGroup;
	this.collisionMask = oimo_common_Setting.defaultCollisionMask;
	this.geometry = null;
	this.contactCallback = null;
};
oimo_dynamics_rigidbody_ShapeConfig.__name__ = "oimo.dynamics.rigidbody.ShapeConfig";
oimo_dynamics_rigidbody_ShapeConfig.prototype = {
	__class__: oimo_dynamics_rigidbody_ShapeConfig
};
var oimo_m_M = function() { };
oimo_m_M.__name__ = "oimo.m.M";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
haxe_MainLoop.add(hxd_System.updateCursor,-1);
js_Boot.__toStr = ({ }).toString;
oimo_common_Vec3.numCreations = 0;
OimoUtils.tmpVec3_0 = new oimo_common_Vec3();
OimoUtils.tmpVec3_1 = new oimo_common_Vec3();
OimoUtils.oimoStaticBodies = [];
OimoUtils.oimoDynamicBodies = [];
OimoUtils.oimoKinematicBodies = [];
OimoUtils.heapsStaticBodies = [];
OimoUtils.heapsDynamicBodies = [];
OimoUtils.heapsKinematicBodies = [];
OimoUtils.lastTime = 0;
OimoUtils.twoPI = Math.PI * 2;
format_gif_Tools.LN2 = Math.log(2);
format_mp3_MPEG.V1 = 3;
format_mp3_MPEG.V2 = 2;
format_mp3_MPEG.V25 = 0;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
format_mp3_CLayer.LLayer3 = 1;
format_mp3_CLayer.LLayer2 = 2;
format_mp3_CLayer.LLayer1 = 3;
format_mp3_CChannelMode.CStereo = 0;
format_mp3_CChannelMode.CJointStereo = 1;
format_mp3_CChannelMode.CDualChannel = 2;
format_mp3_CChannelMode.CMono = 3;
format_mp3_CEmphasis.ENone = 0;
format_mp3_CEmphasis.EMs50_15 = 1;
format_mp3_CEmphasis.EReserved = 2;
format_mp3_CEmphasis.ECCIT_J17 = 3;
h2d_RenderContext.BUFFERING = false;
h2d_col_Matrix.tmp = new h2d_col_Matrix();
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_Matrix.tmp = new h3d_Matrix();
h3d_Matrix.lumR = 0.212671;
h3d_Matrix.lumG = 0.71516;
h3d_Matrix.lumB = 0.072169;
h3d_Matrix.SQ13 = 0.57735026918962576450914878050196;
h3d_anim_Animation.EPSILON = 0.000001;
h3d_col_ObjectCollider.TMP_RAY = new h3d_col_Ray();
h3d_col_ObjectCollider.TMP_MAT = new h3d_Matrix();
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.UID = 0;
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = new h3d_Vector();
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.STREAM_POS = 1;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.MAX_MEMORY = 4294967296.;
h3d_impl_MemoryManager.MAX_BUFFERS = 65536;
h3d_impl_MemoryManager.SIZE = 65533;
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Pass.enableLights_bits = 1;
h3d_mat_Pass.enableLights_offset = 0;
h3d_mat_Pass.enableLights_mask = 1;
h3d_mat_Pass.dynamicParameters_bits = 1;
h3d_mat_Pass.dynamicParameters_offset = 1;
h3d_mat_Pass.dynamicParameters_mask = 2;
h3d_mat_Pass.isStatic_bits = 1;
h3d_mat_Pass.isStatic_offset = 2;
h3d_mat_Pass.isStatic_mask = 4;
h3d_mat_Pass.batchMode_bits = 1;
h3d_mat_Pass.batchMode_offset = 3;
h3d_mat_Pass.batchMode_mask = 8;
h3d_mat_Pass.culling_bits = 2;
h3d_mat_Pass.culling_offset = 0;
h3d_mat_Pass.culling_mask = 3;
h3d_mat_Pass.depthWrite_bits = 1;
h3d_mat_Pass.depthWrite_offset = 2;
h3d_mat_Pass.depthWrite_mask = 4;
h3d_mat_Pass.depthTest_bits = 3;
h3d_mat_Pass.depthTest_offset = 3;
h3d_mat_Pass.depthTest_mask = 56;
h3d_mat_Pass.blendSrc_bits = 4;
h3d_mat_Pass.blendSrc_offset = 6;
h3d_mat_Pass.blendSrc_mask = 960;
h3d_mat_Pass.blendDst_bits = 4;
h3d_mat_Pass.blendDst_offset = 10;
h3d_mat_Pass.blendDst_mask = 15360;
h3d_mat_Pass.blendAlphaSrc_bits = 4;
h3d_mat_Pass.blendAlphaSrc_offset = 14;
h3d_mat_Pass.blendAlphaSrc_mask = 245760;
h3d_mat_Pass.blendAlphaDst_bits = 4;
h3d_mat_Pass.blendAlphaDst_offset = 18;
h3d_mat_Pass.blendAlphaDst_mask = 3932160;
h3d_mat_Pass.blendOp_bits = 3;
h3d_mat_Pass.blendOp_offset = 22;
h3d_mat_Pass.blendOp_mask = 29360128;
h3d_mat_Pass.blendAlphaOp_bits = 3;
h3d_mat_Pass.blendAlphaOp_offset = 25;
h3d_mat_Pass.blendAlphaOp_mask = 234881024;
h3d_mat_Pass.wireframe_bits = 1;
h3d_mat_Pass.wireframe_offset = 28;
h3d_mat_Pass.wireframe_mask = 268435456;
h3d_mat_Pass.reserved_bits = 1;
h3d_mat_Pass.reserved_offset = 29;
h3d_mat_Pass.reserved_mask = 536870912;
h3d_mat_Stencil.readMask_bits = 8;
h3d_mat_Stencil.readMask_offset = 0;
h3d_mat_Stencil.readMask_mask = 255;
h3d_mat_Stencil.writeMask_bits = 8;
h3d_mat_Stencil.writeMask_offset = 8;
h3d_mat_Stencil.writeMask_mask = 65280;
h3d_mat_Stencil.reference_bits = 8;
h3d_mat_Stencil.reference_offset = 16;
h3d_mat_Stencil.reference_mask = 16711680;
h3d_mat_Stencil.frontTest_bits = 3;
h3d_mat_Stencil.frontTest_offset = 0;
h3d_mat_Stencil.frontTest_mask = 7;
h3d_mat_Stencil.frontPass_bits = 3;
h3d_mat_Stencil.frontPass_offset = 3;
h3d_mat_Stencil.frontPass_mask = 56;
h3d_mat_Stencil.frontSTfail_bits = 3;
h3d_mat_Stencil.frontSTfail_offset = 6;
h3d_mat_Stencil.frontSTfail_mask = 448;
h3d_mat_Stencil.frontDPfail_bits = 3;
h3d_mat_Stencil.frontDPfail_offset = 9;
h3d_mat_Stencil.frontDPfail_mask = 3584;
h3d_mat_Stencil.backTest_bits = 3;
h3d_mat_Stencil.backTest_offset = 12;
h3d_mat_Stencil.backTest_mask = 28672;
h3d_mat_Stencil.backPass_bits = 3;
h3d_mat_Stencil.backPass_offset = 15;
h3d_mat_Stencil.backPass_mask = 229376;
h3d_mat_Stencil.backSTfail_bits = 3;
h3d_mat_Stencil.backSTfail_offset = 18;
h3d_mat_Stencil.backSTfail_mask = 1835008;
h3d_mat_Stencil.backDPfail_bits = 3;
h3d_mat_Stencil.backDPfail_offset = 21;
h3d_mat_Stencil.backDPfail_mask = 14680064;
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.checkerTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.noiseTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.genTextureKeys = new haxe_ds_StringMap();
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_scene_Object.ROT2RAD = -0.017453292519943295769236907684886;
h3d_scene_Object.tmpMat = new h3d_Matrix();
h3d_scene_Object.tmpVec = new h3d_Vector();
h3d_scene_ObjectFlags.FPosChanged = 1;
h3d_scene_ObjectFlags.FVisible = 2;
h3d_scene_ObjectFlags.FCulled = 4;
h3d_scene_ObjectFlags.FFollowPositionOnly = 8;
h3d_scene_ObjectFlags.FLightCameraCenter = 16;
h3d_scene_ObjectFlags.FAllocated = 32;
h3d_scene_ObjectFlags.FAlwaysSync = 64;
h3d_scene_ObjectFlags.FInheritCulled = 128;
h3d_scene_ObjectFlags.FNoSerialize = 256;
h3d_scene_ObjectFlags.FIgnoreBounds = 512;
h3d_scene_ObjectFlags.FIgnoreCollide = 1024;
h3d_scene_ObjectFlags.FIgnoreParentTransform = 2048;
h3d_scene_ObjectFlags.FCullingColliderInherited = 4096;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
h3d_shader_pbr_Light.SRC = "HXSLFGgzZC5zaGFkZXIucGJyLkxpZ2h0BwERcGJyTGlnaHREaXJlY3Rpb24FCwQAAAINcGJyTGlnaHRDb2xvcgULBAAAAxJwYnJPY2NsdXNpb25GYWN0b3IDBAAABBN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAFCW9jY2x1c2lvbgMEAAAGCmxpZ2h0Q29sb3IFCwIAAAcPb2NjbHVzaW9uRmFjdG9yAwIAAAA";
h3d_shader_pbr_SpotLight.SRC = "HXSLGGgzZC5zaGFkZXIucGJyLlNwb3RMaWdodBEBEXBickxpZ2h0RGlyZWN0aW9uBQsEAAACDXBickxpZ2h0Q29sb3IFCwQAAAMScGJyT2NjbHVzaW9uRmFjdG9yAwQAAAQTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAABQlvY2NsdXNpb24DBAAABgpsaWdodENvbG9yBQsCAAAHD29jY2x1c2lvbkZhY3RvcgMCAAAIB3Nwb3REaXIFCwIAAAkIbGlnaHRQb3MFCwIAAAoFYW5nbGUDAgAACwdmYWxsT2ZmAwIAAAwOaW52TGlnaHRSYW5nZTQDAgAADQVyYW5nZQMCAAAOCWxpZ2h0UHJvagcCAAAPCXVzZUNvb2tpZQICAAEAAAAAABAJY29va2llVGV4CgIAABEIZnJhZ21lbnQOBgAAAQERAAAFCgYEAgMDAgcDAwYEAgEFCwkDHw4BBgMCCQULAgQFCwULBQsFCwgSBWRlbHRhBQsEAAAGAwIJBQsCBAULBQsACBMEZGlzdAMEAAAJAx0OAgISBQsCEgULAwAIFAdmYWxsb2ZmAwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYBBgECEwMCEwMDAgwDAwMDAAsGBwINAwEDAAAAAAAAAAADAgUCBgQCEwMJAxYOAgQGAwkDDQ4BAhMDAwINAwMDAQMAAAAAAAAAAAMDAwaBAhMDAhMDAwAAAAaBAhQDAhQDAwaBAhQDBgIBAwAAAAAAAPA/AwQGAAITAwEDAAAAAAAA8D8DAwMDAwYEAgIFCwYBAgYFCwIUAwULBQsLAg8CBQUIFQ1wb3NMaWdodFNwYWNlBQwEAAAGAQkDKg4CAgQFCwEDAAAAAAAA8D8DBQwCDgcFDAAIFgVwb3NVVgUKBAAACQM6DgEGAgoCFQUMEQAFCgoCFQUMDAADBQoFCgALBg8GDwYPBgcKAhYFCgAAAwEDAAAAAAAA8D8DAgYJCgIWBQoAAAMBAwAAAAAAAAAAAwICBgcKAhYFCgQAAwEDAAAAAAAA8D8DAgIGCQoCFgUKBAADAQMAAAAAAAAAAAMCAgwAAAAIFwZjb29raWUFDAQAAAoJAyEOAgIQCgIWBQoFDJMDBQwABoECAgULBgEKAhcFDJIABQsKAhcFDAwAAwULBQsABQQIGAV0aGV0YQMEAAAJAx0OAgIBBQsHAwIIBQsFCwMACBkHZXBzaWxvbgMEAAAGAwILAwIKAwMACBoJaW50ZW5zaXR5AwQAAAkDFw4DBgIEBgMCGAMCCgMDAwIZAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DAwAGgQICBQsCGgMFCwAAAA";
h3d_shader_pbr_PointLight.SRC = "HXSLGWgzZC5zaGFkZXIucGJyLlBvaW50TGlnaHQLARFwYnJMaWdodERpcmVjdGlvbgULBAAAAg1wYnJMaWdodENvbG9yBQsEAAADEnBick9jY2x1c2lvbkZhY3RvcgMEAAAEE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAUJb2NjbHVzaW9uAwQAAAYKbGlnaHRDb2xvcgULAgAABw9vY2NsdXNpb25GYWN0b3IDAgAACAhsaWdodFBvcwULAgAACQ5pbnZMaWdodFJhbmdlNAMCAAAKCXBvaW50U2l6ZQMCAAALCGZyYWdtZW50DgYAAAEBCwAABQkGBAIDAwIHAwMIDAVkZWx0YQULBAAABgMCCAULAgQFCwULAAYEAgEFCwkDHw4BAgwFCwULBQsIDQRkaXN0AwQAAAkDHQ4CAgwFCwIMBQsDAAgOB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQINAwINAwMCCQMDAwMACwYHAgoDAQMAAAAAAAAAAAMCBQIGBAINAwkDFg4CBAYDCQMNDgECDQMDAgoDAwMBAwAAAAAAAAAAAwMDBoECDQMCDQMDAAAABoECDgMCDgMDBoECDgMGAgEDAAAAAAAA8D8DBAYAAg0DAQMAAAAAAADwPwMDAwMDBgQCAgULBgECBgULAg4DBQsFCwA";
h3d_shader_pbr_DirLight.SRC = "HXSLF2gzZC5zaGFkZXIucGJyLkRpckxpZ2h0CQERcGJyTGlnaHREaXJlY3Rpb24FCwQAAAINcGJyTGlnaHRDb2xvcgULBAAAAxJwYnJPY2NsdXNpb25GYWN0b3IDBAAABBN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAFCW9jY2x1c2lvbgMEAAAGCmxpZ2h0Q29sb3IFCwIAAAcPb2NjbHVzaW9uRmFjdG9yAwIAAAgIbGlnaHREaXIFCwIAAAkIZnJhZ21lbnQOBgAAAQEJAAAFAwYEAgEFCwIIBQsFCwYEAgIFCwIGBQsFCwYEAgMDAgcDAwA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Key.BACKSPACE = 8;
hxd_Key.TAB = 9;
hxd_Key.ENTER = 13;
hxd_Key.SHIFT = 16;
hxd_Key.CTRL = 17;
hxd_Key.ALT = 18;
hxd_Key.ESCAPE = 27;
hxd_Key.SPACE = 32;
hxd_Key.PGUP = 33;
hxd_Key.PGDOWN = 34;
hxd_Key.END = 35;
hxd_Key.HOME = 36;
hxd_Key.LEFT = 37;
hxd_Key.UP = 38;
hxd_Key.RIGHT = 39;
hxd_Key.DOWN = 40;
hxd_Key.INSERT = 45;
hxd_Key.DELETE = 46;
hxd_Key.QWERTY_EQUALS = 187;
hxd_Key.QWERTY_MINUS = 189;
hxd_Key.QWERTY_TILDE = 192;
hxd_Key.QWERTY_BRACKET_LEFT = 219;
hxd_Key.QWERTY_BRACKET_RIGHT = 221;
hxd_Key.QWERTY_SEMICOLON = 186;
hxd_Key.QWERTY_QUOTE = 222;
hxd_Key.QWERTY_BACKSLASH = 220;
hxd_Key.QWERTY_COMMA = 188;
hxd_Key.QWERTY_PERIOD = 190;
hxd_Key.QWERTY_SLASH = 191;
hxd_Key.INTL_BACKSLASH = 226;
hxd_Key.LEFT_WINDOW_KEY = 91;
hxd_Key.RIGHT_WINDOW_KEY = 92;
hxd_Key.CONTEXT_MENU = 93;
hxd_Key.PAUSE_BREAK = 19;
hxd_Key.CAPS_LOCK = 20;
hxd_Key.NUM_LOCK = 144;
hxd_Key.SCROLL_LOCK = 145;
hxd_Key.NUMBER_0 = 48;
hxd_Key.NUMBER_1 = 49;
hxd_Key.NUMBER_2 = 50;
hxd_Key.NUMBER_3 = 51;
hxd_Key.NUMBER_4 = 52;
hxd_Key.NUMBER_5 = 53;
hxd_Key.NUMBER_6 = 54;
hxd_Key.NUMBER_7 = 55;
hxd_Key.NUMBER_8 = 56;
hxd_Key.NUMBER_9 = 57;
hxd_Key.NUMPAD_0 = 96;
hxd_Key.NUMPAD_1 = 97;
hxd_Key.NUMPAD_2 = 98;
hxd_Key.NUMPAD_3 = 99;
hxd_Key.NUMPAD_4 = 100;
hxd_Key.NUMPAD_5 = 101;
hxd_Key.NUMPAD_6 = 102;
hxd_Key.NUMPAD_7 = 103;
hxd_Key.NUMPAD_8 = 104;
hxd_Key.NUMPAD_9 = 105;
hxd_Key.A = 65;
hxd_Key.B = 66;
hxd_Key.C = 67;
hxd_Key.D = 68;
hxd_Key.E = 69;
hxd_Key.F = 70;
hxd_Key.G = 71;
hxd_Key.H = 72;
hxd_Key.I = 73;
hxd_Key.J = 74;
hxd_Key.K = 75;
hxd_Key.L = 76;
hxd_Key.M = 77;
hxd_Key.N = 78;
hxd_Key.O = 79;
hxd_Key.P = 80;
hxd_Key.Q = 81;
hxd_Key.R = 82;
hxd_Key.S = 83;
hxd_Key.T = 84;
hxd_Key.U = 85;
hxd_Key.V = 86;
hxd_Key.W = 87;
hxd_Key.X = 88;
hxd_Key.Y = 89;
hxd_Key.Z = 90;
hxd_Key.F1 = 112;
hxd_Key.F2 = 113;
hxd_Key.F3 = 114;
hxd_Key.F4 = 115;
hxd_Key.F5 = 116;
hxd_Key.F6 = 117;
hxd_Key.F7 = 118;
hxd_Key.F8 = 119;
hxd_Key.F9 = 120;
hxd_Key.F10 = 121;
hxd_Key.F11 = 122;
hxd_Key.F12 = 123;
hxd_Key.F13 = 124;
hxd_Key.F14 = 125;
hxd_Key.F15 = 126;
hxd_Key.F16 = 127;
hxd_Key.F17 = 128;
hxd_Key.F18 = 129;
hxd_Key.F19 = 130;
hxd_Key.F20 = 131;
hxd_Key.F21 = 132;
hxd_Key.F22 = 133;
hxd_Key.F23 = 134;
hxd_Key.F24 = 135;
hxd_Key.NUMPAD_MULT = 106;
hxd_Key.NUMPAD_ADD = 107;
hxd_Key.NUMPAD_ENTER = 108;
hxd_Key.NUMPAD_SUB = 109;
hxd_Key.NUMPAD_DOT = 110;
hxd_Key.NUMPAD_DIV = 111;
hxd_Key.MOUSE_LEFT = 0;
hxd_Key.MOUSE_RIGHT = 1;
hxd_Key.MOUSE_MIDDLE = 2;
hxd_Key.MOUSE_BACK = 3;
hxd_Key.MOUSE_FORWARD = 4;
hxd_Key.MOUSE_WHEEL_UP = 5;
hxd_Key.MOUSE_WHEEL_DOWN = 6;
hxd_Key.LOC_LEFT = 256;
hxd_Key.LOC_RIGHT = 512;
hxd_Key.LSHIFT = 272;
hxd_Key.RSHIFT = 528;
hxd_Key.LCTRL = 273;
hxd_Key.RCTRL = 529;
hxd_Key.LALT = 274;
hxd_Key.RALT = 530;
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Math.PI = 3.14159265358979323;
hxd_Math.EPSILON = 1e-10;
hxd_Channel.R = 0;
hxd_Channel.G = 1;
hxd_Channel.B = 2;
hxd_Channel.A = 3;
hxd_Pixels.S3TC_SIZES = [0,-1,1,1,-1,1,1,1];
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fmt_hmd_GeometryDataFormat.DFloat = 1;
hxd_fmt_hmd_GeometryDataFormat.DVec2 = 2;
hxd_fmt_hmd_GeometryDataFormat.DVec3 = 3;
hxd_fmt_hmd_GeometryDataFormat.DVec4 = 4;
hxd_fmt_hmd_GeometryDataFormat.DBytes4 = 9;
hxd_fmt_hmd_Position.QTMP = new h3d_Quat();
hxd_fmt_hmd_Data.CURRENT_VERSION = 3;
hxd_fmt_hmd_Reader.BLEND = h2d_BlendMode.__empty_constructs__.slice();
hxd_fmt_hmd_Reader.CULLING = h3d_mat_Face.__empty_constructs__.slice();
hxd_impl_BufferFlags.Dynamic = 0;
hxd_impl_BufferFlags.UniformDynamic = 1;
hxd_res_Resource.LIVE_UPDATE = true;
hxd_res_ImageFormat.Jpg = 0;
hxd_res_ImageFormat.Png = 1;
hxd_res_ImageFormat.Gif = 2;
hxd_res_ImageFormat.Tga = 3;
hxd_res_ImageFormat.Dds = 4;
hxd_res_ImageFormat.Raw32 = 5;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_NanoJpeg.BLOCKSIZE = 64;
hxd_res_NanoJpeg.W1 = 2841;
hxd_res_NanoJpeg.W2 = 2676;
hxd_res_NanoJpeg.W3 = 2408;
hxd_res_NanoJpeg.W5 = 1609;
hxd_res_NanoJpeg.W6 = 1108;
hxd_res_NanoJpeg.W7 = 565;
hxd_res_NanoJpeg.CF4A = -9;
hxd_res_NanoJpeg.CF4B = 111;
hxd_res_NanoJpeg.CF4C = 29;
hxd_res_NanoJpeg.CF4D = -3;
hxd_res_NanoJpeg.CF3A = 28;
hxd_res_NanoJpeg.CF3B = 109;
hxd_res_NanoJpeg.CF3C = -9;
hxd_res_NanoJpeg.CF3X = 104;
hxd_res_NanoJpeg.CF3Y = 27;
hxd_res_NanoJpeg.CF3Z = -3;
hxd_res_NanoJpeg.CF2A = 139;
hxd_res_NanoJpeg.CF2B = -11;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxd_snd_webaudio_BufferPlayback.FADE_SAMPLES = 10;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	m.set(hxsl_TGlobal.FragCoord,"gl_FragCoord");
	{
		var g = m.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			hxsl_GlslOut.KWDS.h[g1] = true;
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
oimo_collision_broadphase_BroadPhaseType._BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType._BVH = 2;
oimo_collision_broadphase_BroadPhaseType.BRUTE_FORCE = 1;
oimo_collision_broadphase_BroadPhaseType.BVH = 2;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.SIMPLE = 0;
oimo_collision_broadphase_bvh_BvhInsertionStrategy.MINIMIZE_SURFACE_AREA = 1;
oimo_collision_geometry_GeometryType._SPHERE = 0;
oimo_collision_geometry_GeometryType._BOX = 1;
oimo_collision_geometry_GeometryType._CYLINDER = 2;
oimo_collision_geometry_GeometryType._CONE = 3;
oimo_collision_geometry_GeometryType._CAPSULE = 4;
oimo_collision_geometry_GeometryType._CONVEX_HULL = 5;
oimo_collision_geometry_GeometryType._CONVEX_MIN = 0;
oimo_collision_geometry_GeometryType._CONVEX_MAX = 5;
oimo_collision_geometry_GeometryType.SPHERE = 0;
oimo_collision_geometry_GeometryType.BOX = 1;
oimo_collision_geometry_GeometryType.CYLINDER = 2;
oimo_collision_geometry_GeometryType.CONE = 3;
oimo_collision_geometry_GeometryType.CAPSULE = 4;
oimo_collision_geometry_GeometryType.CONVEX_HULL = 5;
oimo_collision_narrowphase_detector_BoxBoxDetector.EDGE_BIAS_MULT = 1.0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.OK = 0;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.INVALID_TRIANGLE = 1;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_PAIR_INDEX = 2;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_ADJACENT_TRIANGLE = 3;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.EDGE_LOOP_BROKEN = 4;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.NO_OUTER_TRIANGLE = 5;
oimo_collision_narrowphase_detector_gjkepa_EpaPolyhedronState.TRIANGLE_INVISIBLE = 6;
oimo_collision_narrowphase_detector_gjkepa_EpaTriangle.count = 0;
oimo_common_Setting.defaultFriction = 0.2;
oimo_common_Setting.defaultRestitution = 0.2;
oimo_common_Setting.defaultDensity = 1;
oimo_common_Setting.defaultCollisionGroup = 1;
oimo_common_Setting.defaultCollisionMask = 1;
oimo_common_Setting.maxTranslationPerStep = 20;
oimo_common_Setting.maxRotationPerStep = 3.14159265358979;
oimo_common_Setting.bvhProxyPadding = 0.1;
oimo_common_Setting.bvhIncrementalCollisionThreshold = 0.45;
oimo_common_Setting.defaultGJKMargin = 0.05;
oimo_common_Setting.enableGJKCaching = true;
oimo_common_Setting.maxEPAVertices = 128;
oimo_common_Setting.maxEPAPolyhedronFaces = 128;
oimo_common_Setting.contactEnableBounceThreshold = 0.5;
oimo_common_Setting.velocityBaumgarte = 0.2;
oimo_common_Setting.positionSplitImpulseBaumgarte = 0.4;
oimo_common_Setting.positionNgsBaumgarte = 1.0;
oimo_common_Setting.contactUseAlternativePositionCorrectionAlgorithmDepthThreshold = 0.05;
oimo_common_Setting.defaultContactPositionCorrectionAlgorithm = 0;
oimo_common_Setting.alternativeContactPositionCorrectionAlgorithm = 1;
oimo_common_Setting.contactPersistenceThreshold = 0.05;
oimo_common_Setting.maxManifoldPoints = 4;
oimo_common_Setting.defaultJointConstraintSolverType = 0;
oimo_common_Setting.defaultJointPositionCorrectionAlgorithm = 0;
oimo_common_Setting.jointWarmStartingFactorForBaungarte = 0.8;
oimo_common_Setting.jointWarmStartingFactor = 0.95;
oimo_common_Setting.minSpringDamperDampingRatio = 1e-6;
oimo_common_Setting.minRagdollMaxSwingAngle = 1e-6;
oimo_common_Setting.maxJacobianRows = 6;
oimo_common_Setting.directMlcpSolverEps = 1e-9;
oimo_common_Setting.islandInitialRigidBodyArraySize = 128;
oimo_common_Setting.islandInitialConstraintArraySize = 128;
oimo_common_Setting.sleepingVelocityThreshold = 0.2;
oimo_common_Setting.sleepingAngularVelocityThreshold = 0.5;
oimo_common_Setting.sleepingTimeThreshold = 1.0;
oimo_common_Setting.disableSleeping = false;
oimo_common_Setting.linearSlop = 0.005;
oimo_common_Setting.angularSlop = 0.017453292519943278;
oimo_collision_narrowphase_detector_gjkepa_GjkEpa.instance = new oimo_collision_narrowphase_detector_gjkepa_GjkEpa();
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState._EPA_DID_NOT_CONVERGE = 259;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.SUCCEEDED = 0;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_FAILED_TO_MAKE_TETRAHEDRON = 1;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.GJK_DID_NOT_CONVERGE = 2;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_INIT = 257;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_FAILED_TO_ADD_VERTEX = 258;
oimo_collision_narrowphase_detector_gjkepa_GjkEpaResultState.EPA_DID_NOT_CONVERGE = 259;
oimo_common_Mat3.numCreations = 0;
oimo_common_Mat4.numCreations = 0;
oimo_common_MathUtil.POSITIVE_INFINITY = 1e65536;
oimo_common_MathUtil.NEGATIVE_INFINITY = -1e65536;
oimo_common_MathUtil.PI = 3.14159265358979;
oimo_common_MathUtil.TWO_PI = 6.28318530717958;
oimo_common_MathUtil.HALF_PI = 1.570796326794895;
oimo_common_MathUtil.TO_RADIANS = 0.017453292519943278;
oimo_common_MathUtil.TO_DEGREES = 57.29577951308238;
oimo_common_Quat.numCreations = 0;
oimo_dynamics_common_DebugDraw.SPHERE_PHI_DIVISION = 8;
oimo_dynamics_common_DebugDraw.SPHERE_THETA_DIVISION = 4;
oimo_dynamics_common_DebugDraw.CIRCLE_THETA_DIVISION = 8;
oimo_dynamics_common_Performance.broadPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.narrowPhaseCollisionTime = 0;
oimo_dynamics_common_Performance.dynamicsTime = 0;
oimo_dynamics_common_Performance.totalTime = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm._NGS = 2;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.BAUMGARTE = 0;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.SPLIT_IMPULSE = 1;
oimo_dynamics_constraint_PositionCorrectionAlgorithm.NGS = 2;
oimo_dynamics_constraint_info_JacobianRow.BIT_LINEAR_SET = 1;
oimo_dynamics_constraint_info_JacobianRow.BIT_ANGULAR_SET = 2;
oimo_dynamics_constraint_joint_JointType._SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType._REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType._CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType._PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType._UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType._RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType._GENERIC = 6;
oimo_dynamics_constraint_joint_JointType.SPHERICAL = 0;
oimo_dynamics_constraint_joint_JointType.REVOLUTE = 1;
oimo_dynamics_constraint_joint_JointType.CYLINDRICAL = 2;
oimo_dynamics_constraint_joint_JointType.PRISMATIC = 3;
oimo_dynamics_constraint_joint_JointType.UNIVERSAL = 4;
oimo_dynamics_constraint_joint_JointType.RAGDOLL = 5;
oimo_dynamics_constraint_joint_JointType.GENERIC = 6;
oimo_dynamics_constraint_solver_ConstraintSolverType._ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType._DIRECT = 1;
oimo_dynamics_constraint_solver_ConstraintSolverType.ITERATIVE = 0;
oimo_dynamics_constraint_solver_ConstraintSolverType.DIRECT = 1;
oimo_dynamics_rigidbody_RigidBodyType._DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType._STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType._KINEMATIC = 2;
oimo_dynamics_rigidbody_RigidBodyType.DYNAMIC = 0;
oimo_dynamics_rigidbody_RigidBodyType.STATIC = 1;
oimo_dynamics_rigidbody_RigidBodyType.KINEMATIC = 2;
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hello.js.map